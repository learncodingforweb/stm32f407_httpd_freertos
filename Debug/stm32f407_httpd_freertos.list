
stm32f407_httpd_freertos.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00013004  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002d58  08013194  08013194  00014194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08015eec  08015eec  0001708c  2**0
                  CONTENTS
  4 .ARM          00000008  08015eec  08015eec  00016eec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08015ef4  08015ef4  0001708c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08015ef4  08015ef4  00016ef4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08015ef8  08015ef8  00016ef8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000008c  20000000  08015efc  00017000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0001708c  2**0
                  CONTENTS
 10 .bss          0001031c  2000008c  2000008c  0001708c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200103a8  200103a8  0001708c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0001708c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0002a4ec  00000000  00000000  000170bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00006fa3  00000000  00000000  000415a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00002088  00000000  00000000  00048550  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000199b  00000000  00000000  0004a5d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00030c5e  00000000  00000000  0004bf73  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0002ffc8  00000000  00000000  0007cbd1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ef61b  00000000  00000000  000acb99  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0019c1b4  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00008e54  00000000  00000000  0019c1f8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000006a  00000000  00000000  001a504c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000008c 	.word	0x2000008c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0801317c 	.word	0x0801317c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000090 	.word	0x20000090
 80001cc:	0801317c 	.word	0x0801317c

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000280:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000284:	f000 b96a 	b.w	800055c <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	460c      	mov	r4, r1
 80002a8:	2b00      	cmp	r3, #0
 80002aa:	d14e      	bne.n	800034a <__udivmoddi4+0xaa>
 80002ac:	4694      	mov	ip, r2
 80002ae:	458c      	cmp	ip, r1
 80002b0:	4686      	mov	lr, r0
 80002b2:	fab2 f282 	clz	r2, r2
 80002b6:	d962      	bls.n	800037e <__udivmoddi4+0xde>
 80002b8:	b14a      	cbz	r2, 80002ce <__udivmoddi4+0x2e>
 80002ba:	f1c2 0320 	rsb	r3, r2, #32
 80002be:	4091      	lsls	r1, r2
 80002c0:	fa20 f303 	lsr.w	r3, r0, r3
 80002c4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002c8:	4319      	orrs	r1, r3
 80002ca:	fa00 fe02 	lsl.w	lr, r0, r2
 80002ce:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002d2:	fa1f f68c 	uxth.w	r6, ip
 80002d6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002da:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002de:	fb07 1114 	mls	r1, r7, r4, r1
 80002e2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002e6:	fb04 f106 	mul.w	r1, r4, r6
 80002ea:	4299      	cmp	r1, r3
 80002ec:	d90a      	bls.n	8000304 <__udivmoddi4+0x64>
 80002ee:	eb1c 0303 	adds.w	r3, ip, r3
 80002f2:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 80002f6:	f080 8112 	bcs.w	800051e <__udivmoddi4+0x27e>
 80002fa:	4299      	cmp	r1, r3
 80002fc:	f240 810f 	bls.w	800051e <__udivmoddi4+0x27e>
 8000300:	3c02      	subs	r4, #2
 8000302:	4463      	add	r3, ip
 8000304:	1a59      	subs	r1, r3, r1
 8000306:	fa1f f38e 	uxth.w	r3, lr
 800030a:	fbb1 f0f7 	udiv	r0, r1, r7
 800030e:	fb07 1110 	mls	r1, r7, r0, r1
 8000312:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000316:	fb00 f606 	mul.w	r6, r0, r6
 800031a:	429e      	cmp	r6, r3
 800031c:	d90a      	bls.n	8000334 <__udivmoddi4+0x94>
 800031e:	eb1c 0303 	adds.w	r3, ip, r3
 8000322:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000326:	f080 80fc 	bcs.w	8000522 <__udivmoddi4+0x282>
 800032a:	429e      	cmp	r6, r3
 800032c:	f240 80f9 	bls.w	8000522 <__udivmoddi4+0x282>
 8000330:	4463      	add	r3, ip
 8000332:	3802      	subs	r0, #2
 8000334:	1b9b      	subs	r3, r3, r6
 8000336:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800033a:	2100      	movs	r1, #0
 800033c:	b11d      	cbz	r5, 8000346 <__udivmoddi4+0xa6>
 800033e:	40d3      	lsrs	r3, r2
 8000340:	2200      	movs	r2, #0
 8000342:	e9c5 3200 	strd	r3, r2, [r5]
 8000346:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800034a:	428b      	cmp	r3, r1
 800034c:	d905      	bls.n	800035a <__udivmoddi4+0xba>
 800034e:	b10d      	cbz	r5, 8000354 <__udivmoddi4+0xb4>
 8000350:	e9c5 0100 	strd	r0, r1, [r5]
 8000354:	2100      	movs	r1, #0
 8000356:	4608      	mov	r0, r1
 8000358:	e7f5      	b.n	8000346 <__udivmoddi4+0xa6>
 800035a:	fab3 f183 	clz	r1, r3
 800035e:	2900      	cmp	r1, #0
 8000360:	d146      	bne.n	80003f0 <__udivmoddi4+0x150>
 8000362:	42a3      	cmp	r3, r4
 8000364:	d302      	bcc.n	800036c <__udivmoddi4+0xcc>
 8000366:	4290      	cmp	r0, r2
 8000368:	f0c0 80f0 	bcc.w	800054c <__udivmoddi4+0x2ac>
 800036c:	1a86      	subs	r6, r0, r2
 800036e:	eb64 0303 	sbc.w	r3, r4, r3
 8000372:	2001      	movs	r0, #1
 8000374:	2d00      	cmp	r5, #0
 8000376:	d0e6      	beq.n	8000346 <__udivmoddi4+0xa6>
 8000378:	e9c5 6300 	strd	r6, r3, [r5]
 800037c:	e7e3      	b.n	8000346 <__udivmoddi4+0xa6>
 800037e:	2a00      	cmp	r2, #0
 8000380:	f040 8090 	bne.w	80004a4 <__udivmoddi4+0x204>
 8000384:	eba1 040c 	sub.w	r4, r1, ip
 8000388:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800038c:	fa1f f78c 	uxth.w	r7, ip
 8000390:	2101      	movs	r1, #1
 8000392:	fbb4 f6f8 	udiv	r6, r4, r8
 8000396:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800039a:	fb08 4416 	mls	r4, r8, r6, r4
 800039e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003a2:	fb07 f006 	mul.w	r0, r7, r6
 80003a6:	4298      	cmp	r0, r3
 80003a8:	d908      	bls.n	80003bc <__udivmoddi4+0x11c>
 80003aa:	eb1c 0303 	adds.w	r3, ip, r3
 80003ae:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 80003b2:	d202      	bcs.n	80003ba <__udivmoddi4+0x11a>
 80003b4:	4298      	cmp	r0, r3
 80003b6:	f200 80cd 	bhi.w	8000554 <__udivmoddi4+0x2b4>
 80003ba:	4626      	mov	r6, r4
 80003bc:	1a1c      	subs	r4, r3, r0
 80003be:	fa1f f38e 	uxth.w	r3, lr
 80003c2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003c6:	fb08 4410 	mls	r4, r8, r0, r4
 80003ca:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003ce:	fb00 f707 	mul.w	r7, r0, r7
 80003d2:	429f      	cmp	r7, r3
 80003d4:	d908      	bls.n	80003e8 <__udivmoddi4+0x148>
 80003d6:	eb1c 0303 	adds.w	r3, ip, r3
 80003da:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 80003de:	d202      	bcs.n	80003e6 <__udivmoddi4+0x146>
 80003e0:	429f      	cmp	r7, r3
 80003e2:	f200 80b0 	bhi.w	8000546 <__udivmoddi4+0x2a6>
 80003e6:	4620      	mov	r0, r4
 80003e8:	1bdb      	subs	r3, r3, r7
 80003ea:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003ee:	e7a5      	b.n	800033c <__udivmoddi4+0x9c>
 80003f0:	f1c1 0620 	rsb	r6, r1, #32
 80003f4:	408b      	lsls	r3, r1
 80003f6:	fa22 f706 	lsr.w	r7, r2, r6
 80003fa:	431f      	orrs	r7, r3
 80003fc:	fa20 fc06 	lsr.w	ip, r0, r6
 8000400:	fa04 f301 	lsl.w	r3, r4, r1
 8000404:	ea43 030c 	orr.w	r3, r3, ip
 8000408:	40f4      	lsrs	r4, r6
 800040a:	fa00 f801 	lsl.w	r8, r0, r1
 800040e:	0c38      	lsrs	r0, r7, #16
 8000410:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000414:	fbb4 fef0 	udiv	lr, r4, r0
 8000418:	fa1f fc87 	uxth.w	ip, r7
 800041c:	fb00 441e 	mls	r4, r0, lr, r4
 8000420:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000424:	fb0e f90c 	mul.w	r9, lr, ip
 8000428:	45a1      	cmp	r9, r4
 800042a:	fa02 f201 	lsl.w	r2, r2, r1
 800042e:	d90a      	bls.n	8000446 <__udivmoddi4+0x1a6>
 8000430:	193c      	adds	r4, r7, r4
 8000432:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000436:	f080 8084 	bcs.w	8000542 <__udivmoddi4+0x2a2>
 800043a:	45a1      	cmp	r9, r4
 800043c:	f240 8081 	bls.w	8000542 <__udivmoddi4+0x2a2>
 8000440:	f1ae 0e02 	sub.w	lr, lr, #2
 8000444:	443c      	add	r4, r7
 8000446:	eba4 0409 	sub.w	r4, r4, r9
 800044a:	fa1f f983 	uxth.w	r9, r3
 800044e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000452:	fb00 4413 	mls	r4, r0, r3, r4
 8000456:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800045a:	fb03 fc0c 	mul.w	ip, r3, ip
 800045e:	45a4      	cmp	ip, r4
 8000460:	d907      	bls.n	8000472 <__udivmoddi4+0x1d2>
 8000462:	193c      	adds	r4, r7, r4
 8000464:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000468:	d267      	bcs.n	800053a <__udivmoddi4+0x29a>
 800046a:	45a4      	cmp	ip, r4
 800046c:	d965      	bls.n	800053a <__udivmoddi4+0x29a>
 800046e:	3b02      	subs	r3, #2
 8000470:	443c      	add	r4, r7
 8000472:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000476:	fba0 9302 	umull	r9, r3, r0, r2
 800047a:	eba4 040c 	sub.w	r4, r4, ip
 800047e:	429c      	cmp	r4, r3
 8000480:	46ce      	mov	lr, r9
 8000482:	469c      	mov	ip, r3
 8000484:	d351      	bcc.n	800052a <__udivmoddi4+0x28a>
 8000486:	d04e      	beq.n	8000526 <__udivmoddi4+0x286>
 8000488:	b155      	cbz	r5, 80004a0 <__udivmoddi4+0x200>
 800048a:	ebb8 030e 	subs.w	r3, r8, lr
 800048e:	eb64 040c 	sbc.w	r4, r4, ip
 8000492:	fa04 f606 	lsl.w	r6, r4, r6
 8000496:	40cb      	lsrs	r3, r1
 8000498:	431e      	orrs	r6, r3
 800049a:	40cc      	lsrs	r4, r1
 800049c:	e9c5 6400 	strd	r6, r4, [r5]
 80004a0:	2100      	movs	r1, #0
 80004a2:	e750      	b.n	8000346 <__udivmoddi4+0xa6>
 80004a4:	f1c2 0320 	rsb	r3, r2, #32
 80004a8:	fa20 f103 	lsr.w	r1, r0, r3
 80004ac:	fa0c fc02 	lsl.w	ip, ip, r2
 80004b0:	fa24 f303 	lsr.w	r3, r4, r3
 80004b4:	4094      	lsls	r4, r2
 80004b6:	430c      	orrs	r4, r1
 80004b8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004bc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004c0:	fa1f f78c 	uxth.w	r7, ip
 80004c4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004c8:	fb08 3110 	mls	r1, r8, r0, r3
 80004cc:	0c23      	lsrs	r3, r4, #16
 80004ce:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004d2:	fb00 f107 	mul.w	r1, r0, r7
 80004d6:	4299      	cmp	r1, r3
 80004d8:	d908      	bls.n	80004ec <__udivmoddi4+0x24c>
 80004da:	eb1c 0303 	adds.w	r3, ip, r3
 80004de:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 80004e2:	d22c      	bcs.n	800053e <__udivmoddi4+0x29e>
 80004e4:	4299      	cmp	r1, r3
 80004e6:	d92a      	bls.n	800053e <__udivmoddi4+0x29e>
 80004e8:	3802      	subs	r0, #2
 80004ea:	4463      	add	r3, ip
 80004ec:	1a5b      	subs	r3, r3, r1
 80004ee:	b2a4      	uxth	r4, r4
 80004f0:	fbb3 f1f8 	udiv	r1, r3, r8
 80004f4:	fb08 3311 	mls	r3, r8, r1, r3
 80004f8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80004fc:	fb01 f307 	mul.w	r3, r1, r7
 8000500:	42a3      	cmp	r3, r4
 8000502:	d908      	bls.n	8000516 <__udivmoddi4+0x276>
 8000504:	eb1c 0404 	adds.w	r4, ip, r4
 8000508:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 800050c:	d213      	bcs.n	8000536 <__udivmoddi4+0x296>
 800050e:	42a3      	cmp	r3, r4
 8000510:	d911      	bls.n	8000536 <__udivmoddi4+0x296>
 8000512:	3902      	subs	r1, #2
 8000514:	4464      	add	r4, ip
 8000516:	1ae4      	subs	r4, r4, r3
 8000518:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800051c:	e739      	b.n	8000392 <__udivmoddi4+0xf2>
 800051e:	4604      	mov	r4, r0
 8000520:	e6f0      	b.n	8000304 <__udivmoddi4+0x64>
 8000522:	4608      	mov	r0, r1
 8000524:	e706      	b.n	8000334 <__udivmoddi4+0x94>
 8000526:	45c8      	cmp	r8, r9
 8000528:	d2ae      	bcs.n	8000488 <__udivmoddi4+0x1e8>
 800052a:	ebb9 0e02 	subs.w	lr, r9, r2
 800052e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000532:	3801      	subs	r0, #1
 8000534:	e7a8      	b.n	8000488 <__udivmoddi4+0x1e8>
 8000536:	4631      	mov	r1, r6
 8000538:	e7ed      	b.n	8000516 <__udivmoddi4+0x276>
 800053a:	4603      	mov	r3, r0
 800053c:	e799      	b.n	8000472 <__udivmoddi4+0x1d2>
 800053e:	4630      	mov	r0, r6
 8000540:	e7d4      	b.n	80004ec <__udivmoddi4+0x24c>
 8000542:	46d6      	mov	lr, sl
 8000544:	e77f      	b.n	8000446 <__udivmoddi4+0x1a6>
 8000546:	4463      	add	r3, ip
 8000548:	3802      	subs	r0, #2
 800054a:	e74d      	b.n	80003e8 <__udivmoddi4+0x148>
 800054c:	4606      	mov	r6, r0
 800054e:	4623      	mov	r3, r4
 8000550:	4608      	mov	r0, r1
 8000552:	e70f      	b.n	8000374 <__udivmoddi4+0xd4>
 8000554:	3e02      	subs	r6, #2
 8000556:	4463      	add	r3, ip
 8000558:	e730      	b.n	80003bc <__udivmoddi4+0x11c>
 800055a:	bf00      	nop

0800055c <__aeabi_idiv0>:
 800055c:	4770      	bx	lr
 800055e:	bf00      	nop

08000560 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8000560:	b580      	push	{r7, lr}
 8000562:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of mainTask */
  mainTaskHandle = osThreadNew(StartMainTask, NULL, &mainTask_attributes);
 8000564:	4a04      	ldr	r2, [pc, #16]	@ (8000578 <MX_FREERTOS_Init+0x18>)
 8000566:	2100      	movs	r1, #0
 8000568:	4804      	ldr	r0, [pc, #16]	@ (800057c <MX_FREERTOS_Init+0x1c>)
 800056a:	f003 ff62 	bl	8004432 <osThreadNew>
 800056e:	4603      	mov	r3, r0
 8000570:	4a03      	ldr	r2, [pc, #12]	@ (8000580 <MX_FREERTOS_Init+0x20>)
 8000572:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 8000574:	bf00      	nop
 8000576:	bd80      	pop	{r7, pc}
 8000578:	08015ca4 	.word	0x08015ca4
 800057c:	08000585 	.word	0x08000585
 8000580:	200000a8 	.word	0x200000a8

08000584 <StartMainTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartMainTask */
void StartMainTask(void *argument)
{
 8000584:	b580      	push	{r7, lr}
 8000586:	b082      	sub	sp, #8
 8000588:	af00      	add	r7, sp, #0
 800058a:	6078      	str	r0, [r7, #4]
  /* init code for LWIP */
  MX_LWIP_Init();
 800058c:	f003 f8b0 	bl	80036f0 <MX_LWIP_Init>
  /* USER CODE BEGIN StartMainTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000590:	2001      	movs	r0, #1
 8000592:	f003 ffe0 	bl	8004556 <osDelay>
 8000596:	e7fb      	b.n	8000590 <StartMainTask+0xc>

08000598 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000598:	b480      	push	{r7}
 800059a:	b085      	sub	sp, #20
 800059c:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800059e:	2300      	movs	r3, #0
 80005a0:	60fb      	str	r3, [r7, #12]
 80005a2:	4b1e      	ldr	r3, [pc, #120]	@ (800061c <MX_GPIO_Init+0x84>)
 80005a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005a6:	4a1d      	ldr	r2, [pc, #116]	@ (800061c <MX_GPIO_Init+0x84>)
 80005a8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80005ac:	6313      	str	r3, [r2, #48]	@ 0x30
 80005ae:	4b1b      	ldr	r3, [pc, #108]	@ (800061c <MX_GPIO_Init+0x84>)
 80005b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005b2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80005b6:	60fb      	str	r3, [r7, #12]
 80005b8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80005ba:	2300      	movs	r3, #0
 80005bc:	60bb      	str	r3, [r7, #8]
 80005be:	4b17      	ldr	r3, [pc, #92]	@ (800061c <MX_GPIO_Init+0x84>)
 80005c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005c2:	4a16      	ldr	r2, [pc, #88]	@ (800061c <MX_GPIO_Init+0x84>)
 80005c4:	f043 0304 	orr.w	r3, r3, #4
 80005c8:	6313      	str	r3, [r2, #48]	@ 0x30
 80005ca:	4b14      	ldr	r3, [pc, #80]	@ (800061c <MX_GPIO_Init+0x84>)
 80005cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005ce:	f003 0304 	and.w	r3, r3, #4
 80005d2:	60bb      	str	r3, [r7, #8]
 80005d4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005d6:	2300      	movs	r3, #0
 80005d8:	607b      	str	r3, [r7, #4]
 80005da:	4b10      	ldr	r3, [pc, #64]	@ (800061c <MX_GPIO_Init+0x84>)
 80005dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005de:	4a0f      	ldr	r2, [pc, #60]	@ (800061c <MX_GPIO_Init+0x84>)
 80005e0:	f043 0301 	orr.w	r3, r3, #1
 80005e4:	6313      	str	r3, [r2, #48]	@ 0x30
 80005e6:	4b0d      	ldr	r3, [pc, #52]	@ (800061c <MX_GPIO_Init+0x84>)
 80005e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005ea:	f003 0301 	and.w	r3, r3, #1
 80005ee:	607b      	str	r3, [r7, #4]
 80005f0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80005f2:	2300      	movs	r3, #0
 80005f4:	603b      	str	r3, [r7, #0]
 80005f6:	4b09      	ldr	r3, [pc, #36]	@ (800061c <MX_GPIO_Init+0x84>)
 80005f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005fa:	4a08      	ldr	r2, [pc, #32]	@ (800061c <MX_GPIO_Init+0x84>)
 80005fc:	f043 0302 	orr.w	r3, r3, #2
 8000600:	6313      	str	r3, [r2, #48]	@ 0x30
 8000602:	4b06      	ldr	r3, [pc, #24]	@ (800061c <MX_GPIO_Init+0x84>)
 8000604:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000606:	f003 0302 	and.w	r3, r3, #2
 800060a:	603b      	str	r3, [r7, #0]
 800060c:	683b      	ldr	r3, [r7, #0]

}
 800060e:	bf00      	nop
 8000610:	3714      	adds	r7, #20
 8000612:	46bd      	mov	sp, r7
 8000614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000618:	4770      	bx	lr
 800061a:	bf00      	nop
 800061c:	40023800 	.word	0x40023800

08000620 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000620:	b580      	push	{r7, lr}
 8000622:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000624:	f000 fbcc 	bl	8000dc0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000628:	f000 f80a 	bl	8000640 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800062c:	f7ff ffb4 	bl	8000598 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000630:	f003 fea0 	bl	8004374 <osKernelInitialize>

  /* Call init function for freertos objects (in cmsis_os2.c) */
  MX_FREERTOS_Init();
 8000634:	f7ff ff94 	bl	8000560 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8000638:	f003 fec0 	bl	80043bc <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800063c:	bf00      	nop
 800063e:	e7fd      	b.n	800063c <main+0x1c>

08000640 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000640:	b580      	push	{r7, lr}
 8000642:	b094      	sub	sp, #80	@ 0x50
 8000644:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000646:	f107 0320 	add.w	r3, r7, #32
 800064a:	2230      	movs	r2, #48	@ 0x30
 800064c:	2100      	movs	r1, #0
 800064e:	4618      	mov	r0, r3
 8000650:	f011 fe99 	bl	8012386 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000654:	f107 030c 	add.w	r3, r7, #12
 8000658:	2200      	movs	r2, #0
 800065a:	601a      	str	r2, [r3, #0]
 800065c:	605a      	str	r2, [r3, #4]
 800065e:	609a      	str	r2, [r3, #8]
 8000660:	60da      	str	r2, [r3, #12]
 8000662:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000664:	2300      	movs	r3, #0
 8000666:	60bb      	str	r3, [r7, #8]
 8000668:	4b28      	ldr	r3, [pc, #160]	@ (800070c <SystemClock_Config+0xcc>)
 800066a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800066c:	4a27      	ldr	r2, [pc, #156]	@ (800070c <SystemClock_Config+0xcc>)
 800066e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000672:	6413      	str	r3, [r2, #64]	@ 0x40
 8000674:	4b25      	ldr	r3, [pc, #148]	@ (800070c <SystemClock_Config+0xcc>)
 8000676:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000678:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800067c:	60bb      	str	r3, [r7, #8]
 800067e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000680:	2300      	movs	r3, #0
 8000682:	607b      	str	r3, [r7, #4]
 8000684:	4b22      	ldr	r3, [pc, #136]	@ (8000710 <SystemClock_Config+0xd0>)
 8000686:	681b      	ldr	r3, [r3, #0]
 8000688:	4a21      	ldr	r2, [pc, #132]	@ (8000710 <SystemClock_Config+0xd0>)
 800068a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800068e:	6013      	str	r3, [r2, #0]
 8000690:	4b1f      	ldr	r3, [pc, #124]	@ (8000710 <SystemClock_Config+0xd0>)
 8000692:	681b      	ldr	r3, [r3, #0]
 8000694:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000698:	607b      	str	r3, [r7, #4]
 800069a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800069c:	2301      	movs	r3, #1
 800069e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80006a0:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80006a4:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006a6:	2302      	movs	r3, #2
 80006a8:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80006aa:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80006ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80006b0:	2304      	movs	r3, #4
 80006b2:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 80006b4:	2348      	movs	r3, #72	@ 0x48
 80006b6:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80006b8:	2302      	movs	r3, #2
 80006ba:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80006bc:	2304      	movs	r3, #4
 80006be:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006c0:	f107 0320 	add.w	r3, r7, #32
 80006c4:	4618      	mov	r0, r3
 80006c6:	f002 f8bb 	bl	8002840 <HAL_RCC_OscConfig>
 80006ca:	4603      	mov	r3, r0
 80006cc:	2b00      	cmp	r3, #0
 80006ce:	d001      	beq.n	80006d4 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80006d0:	f000 f832 	bl	8000738 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006d4:	230f      	movs	r3, #15
 80006d6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006d8:	2302      	movs	r3, #2
 80006da:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006dc:	2300      	movs	r3, #0
 80006de:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80006e0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80006e4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80006e6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80006ea:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80006ec:	f107 030c 	add.w	r3, r7, #12
 80006f0:	2102      	movs	r1, #2
 80006f2:	4618      	mov	r0, r3
 80006f4:	f002 fb1c 	bl	8002d30 <HAL_RCC_ClockConfig>
 80006f8:	4603      	mov	r3, r0
 80006fa:	2b00      	cmp	r3, #0
 80006fc:	d001      	beq.n	8000702 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80006fe:	f000 f81b 	bl	8000738 <Error_Handler>
  }
}
 8000702:	bf00      	nop
 8000704:	3750      	adds	r7, #80	@ 0x50
 8000706:	46bd      	mov	sp, r7
 8000708:	bd80      	pop	{r7, pc}
 800070a:	bf00      	nop
 800070c:	40023800 	.word	0x40023800
 8000710:	40007000 	.word	0x40007000

08000714 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000714:	b580      	push	{r7, lr}
 8000716:	b082      	sub	sp, #8
 8000718:	af00      	add	r7, sp, #0
 800071a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM14) {
 800071c:	687b      	ldr	r3, [r7, #4]
 800071e:	681b      	ldr	r3, [r3, #0]
 8000720:	4a04      	ldr	r2, [pc, #16]	@ (8000734 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000722:	4293      	cmp	r3, r2
 8000724:	d101      	bne.n	800072a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000726:	f000 fb6d 	bl	8000e04 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800072a:	bf00      	nop
 800072c:	3708      	adds	r7, #8
 800072e:	46bd      	mov	sp, r7
 8000730:	bd80      	pop	{r7, pc}
 8000732:	bf00      	nop
 8000734:	40002000 	.word	0x40002000

08000738 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000738:	b480      	push	{r7}
 800073a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800073c:	b672      	cpsid	i
}
 800073e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000740:	bf00      	nop
 8000742:	e7fd      	b.n	8000740 <Error_Handler+0x8>

08000744 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000744:	b580      	push	{r7, lr}
 8000746:	b082      	sub	sp, #8
 8000748:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800074a:	2300      	movs	r3, #0
 800074c:	607b      	str	r3, [r7, #4]
 800074e:	4b12      	ldr	r3, [pc, #72]	@ (8000798 <HAL_MspInit+0x54>)
 8000750:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000752:	4a11      	ldr	r2, [pc, #68]	@ (8000798 <HAL_MspInit+0x54>)
 8000754:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000758:	6453      	str	r3, [r2, #68]	@ 0x44
 800075a:	4b0f      	ldr	r3, [pc, #60]	@ (8000798 <HAL_MspInit+0x54>)
 800075c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800075e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000762:	607b      	str	r3, [r7, #4]
 8000764:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000766:	2300      	movs	r3, #0
 8000768:	603b      	str	r3, [r7, #0]
 800076a:	4b0b      	ldr	r3, [pc, #44]	@ (8000798 <HAL_MspInit+0x54>)
 800076c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800076e:	4a0a      	ldr	r2, [pc, #40]	@ (8000798 <HAL_MspInit+0x54>)
 8000770:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000774:	6413      	str	r3, [r2, #64]	@ 0x40
 8000776:	4b08      	ldr	r3, [pc, #32]	@ (8000798 <HAL_MspInit+0x54>)
 8000778:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800077a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800077e:	603b      	str	r3, [r7, #0]
 8000780:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000782:	2200      	movs	r2, #0
 8000784:	210f      	movs	r1, #15
 8000786:	f06f 0001 	mvn.w	r0, #1
 800078a:	f000 fc37 	bl	8000ffc <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800078e:	bf00      	nop
 8000790:	3708      	adds	r7, #8
 8000792:	46bd      	mov	sp, r7
 8000794:	bd80      	pop	{r7, pc}
 8000796:	bf00      	nop
 8000798:	40023800 	.word	0x40023800

0800079c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800079c:	b580      	push	{r7, lr}
 800079e:	b08e      	sub	sp, #56	@ 0x38
 80007a0:	af00      	add	r7, sp, #0
 80007a2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 80007a4:	2300      	movs	r3, #0
 80007a6:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 80007a8:	2300      	movs	r3, #0
 80007aa:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM14 clock */
  __HAL_RCC_TIM14_CLK_ENABLE();
 80007ac:	2300      	movs	r3, #0
 80007ae:	60fb      	str	r3, [r7, #12]
 80007b0:	4b33      	ldr	r3, [pc, #204]	@ (8000880 <HAL_InitTick+0xe4>)
 80007b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80007b4:	4a32      	ldr	r2, [pc, #200]	@ (8000880 <HAL_InitTick+0xe4>)
 80007b6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80007ba:	6413      	str	r3, [r2, #64]	@ 0x40
 80007bc:	4b30      	ldr	r3, [pc, #192]	@ (8000880 <HAL_InitTick+0xe4>)
 80007be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80007c0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80007c4:	60fb      	str	r3, [r7, #12]
 80007c6:	68fb      	ldr	r3, [r7, #12]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80007c8:	f107 0210 	add.w	r2, r7, #16
 80007cc:	f107 0314 	add.w	r3, r7, #20
 80007d0:	4611      	mov	r1, r2
 80007d2:	4618      	mov	r0, r3
 80007d4:	f002 fcb8 	bl	8003148 <HAL_RCC_GetClockConfig>
  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80007d8:	6a3b      	ldr	r3, [r7, #32]
 80007da:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM14 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80007dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80007de:	2b00      	cmp	r3, #0
 80007e0:	d103      	bne.n	80007ea <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80007e2:	f002 fc9d 	bl	8003120 <HAL_RCC_GetPCLK1Freq>
 80007e6:	6378      	str	r0, [r7, #52]	@ 0x34
 80007e8:	e004      	b.n	80007f4 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80007ea:	f002 fc99 	bl	8003120 <HAL_RCC_GetPCLK1Freq>
 80007ee:	4603      	mov	r3, r0
 80007f0:	005b      	lsls	r3, r3, #1
 80007f2:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM14 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80007f4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80007f6:	4a23      	ldr	r2, [pc, #140]	@ (8000884 <HAL_InitTick+0xe8>)
 80007f8:	fba2 2303 	umull	r2, r3, r2, r3
 80007fc:	0c9b      	lsrs	r3, r3, #18
 80007fe:	3b01      	subs	r3, #1
 8000800:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM14 */
  htim14.Instance = TIM14;
 8000802:	4b21      	ldr	r3, [pc, #132]	@ (8000888 <HAL_InitTick+0xec>)
 8000804:	4a21      	ldr	r2, [pc, #132]	@ (800088c <HAL_InitTick+0xf0>)
 8000806:	601a      	str	r2, [r3, #0]
  + Period = [(TIM14CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim14.Init.Period = (1000000U / 1000U) - 1U;
 8000808:	4b1f      	ldr	r3, [pc, #124]	@ (8000888 <HAL_InitTick+0xec>)
 800080a:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800080e:	60da      	str	r2, [r3, #12]
  htim14.Init.Prescaler = uwPrescalerValue;
 8000810:	4a1d      	ldr	r2, [pc, #116]	@ (8000888 <HAL_InitTick+0xec>)
 8000812:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000814:	6053      	str	r3, [r2, #4]
  htim14.Init.ClockDivision = 0;
 8000816:	4b1c      	ldr	r3, [pc, #112]	@ (8000888 <HAL_InitTick+0xec>)
 8000818:	2200      	movs	r2, #0
 800081a:	611a      	str	r2, [r3, #16]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 800081c:	4b1a      	ldr	r3, [pc, #104]	@ (8000888 <HAL_InitTick+0xec>)
 800081e:	2200      	movs	r2, #0
 8000820:	609a      	str	r2, [r3, #8]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000822:	4b19      	ldr	r3, [pc, #100]	@ (8000888 <HAL_InitTick+0xec>)
 8000824:	2200      	movs	r2, #0
 8000826:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim14);
 8000828:	4817      	ldr	r0, [pc, #92]	@ (8000888 <HAL_InitTick+0xec>)
 800082a:	f002 fcbf 	bl	80031ac <HAL_TIM_Base_Init>
 800082e:	4603      	mov	r3, r0
 8000830:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8000834:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000838:	2b00      	cmp	r3, #0
 800083a:	d11b      	bne.n	8000874 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim14);
 800083c:	4812      	ldr	r0, [pc, #72]	@ (8000888 <HAL_InitTick+0xec>)
 800083e:	f002 fd0f 	bl	8003260 <HAL_TIM_Base_Start_IT>
 8000842:	4603      	mov	r3, r0
 8000844:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8000848:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800084c:	2b00      	cmp	r3, #0
 800084e:	d111      	bne.n	8000874 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM14 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 8000850:	202d      	movs	r0, #45	@ 0x2d
 8000852:	f000 fbef 	bl	8001034 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000856:	687b      	ldr	r3, [r7, #4]
 8000858:	2b0f      	cmp	r3, #15
 800085a:	d808      	bhi.n	800086e <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, TickPriority, 0U);
 800085c:	2200      	movs	r2, #0
 800085e:	6879      	ldr	r1, [r7, #4]
 8000860:	202d      	movs	r0, #45	@ 0x2d
 8000862:	f000 fbcb 	bl	8000ffc <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000866:	4a0a      	ldr	r2, [pc, #40]	@ (8000890 <HAL_InitTick+0xf4>)
 8000868:	687b      	ldr	r3, [r7, #4]
 800086a:	6013      	str	r3, [r2, #0]
 800086c:	e002      	b.n	8000874 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 800086e:	2301      	movs	r3, #1
 8000870:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000874:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8000878:	4618      	mov	r0, r3
 800087a:	3738      	adds	r7, #56	@ 0x38
 800087c:	46bd      	mov	sp, r7
 800087e:	bd80      	pop	{r7, pc}
 8000880:	40023800 	.word	0x40023800
 8000884:	431bde83 	.word	0x431bde83
 8000888:	20001154 	.word	0x20001154
 800088c:	40002000 	.word	0x40002000
 8000890:	20000004 	.word	0x20000004

08000894 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000894:	b480      	push	{r7}
 8000896:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000898:	bf00      	nop
 800089a:	e7fd      	b.n	8000898 <NMI_Handler+0x4>

0800089c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800089c:	b480      	push	{r7}
 800089e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80008a0:	bf00      	nop
 80008a2:	e7fd      	b.n	80008a0 <HardFault_Handler+0x4>

080008a4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80008a4:	b480      	push	{r7}
 80008a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80008a8:	bf00      	nop
 80008aa:	e7fd      	b.n	80008a8 <MemManage_Handler+0x4>

080008ac <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80008ac:	b480      	push	{r7}
 80008ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80008b0:	bf00      	nop
 80008b2:	e7fd      	b.n	80008b0 <BusFault_Handler+0x4>

080008b4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80008b4:	b480      	push	{r7}
 80008b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80008b8:	bf00      	nop
 80008ba:	e7fd      	b.n	80008b8 <UsageFault_Handler+0x4>

080008bc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80008bc:	b480      	push	{r7}
 80008be:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80008c0:	bf00      	nop
 80008c2:	46bd      	mov	sp, r7
 80008c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008c8:	4770      	bx	lr
	...

080008cc <TIM8_TRG_COM_TIM14_IRQHandler>:

/**
  * @brief This function handles TIM8 trigger and commutation interrupts and TIM14 global interrupt.
  */
void TIM8_TRG_COM_TIM14_IRQHandler(void)
{
 80008cc:	b580      	push	{r7, lr}
 80008ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 0 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 80008d0:	4802      	ldr	r0, [pc, #8]	@ (80008dc <TIM8_TRG_COM_TIM14_IRQHandler+0x10>)
 80008d2:	f002 fd35 	bl	8003340 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 1 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 1 */
}
 80008d6:	bf00      	nop
 80008d8:	bd80      	pop	{r7, pc}
 80008da:	bf00      	nop
 80008dc:	20001154 	.word	0x20001154

080008e0 <ETH_IRQHandler>:

/**
  * @brief This function handles Ethernet global interrupt.
  */
void ETH_IRQHandler(void)
{
 80008e0:	b580      	push	{r7, lr}
 80008e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_IRQn 0 */

  /* USER CODE END ETH_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 80008e4:	4802      	ldr	r0, [pc, #8]	@ (80008f0 <ETH_IRQHandler+0x10>)
 80008e6:	f000 ff39 	bl	800175c <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_IRQn 1 */

  /* USER CODE END ETH_IRQn 1 */
}
 80008ea:	bf00      	nop
 80008ec:	bd80      	pop	{r7, pc}
 80008ee:	bf00      	nop
 80008f0:	20005ce8 	.word	0x20005ce8

080008f4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80008f4:	b480      	push	{r7}
 80008f6:	af00      	add	r7, sp, #0
  return 1;
 80008f8:	2301      	movs	r3, #1
}
 80008fa:	4618      	mov	r0, r3
 80008fc:	46bd      	mov	sp, r7
 80008fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000902:	4770      	bx	lr

08000904 <_kill>:

int _kill(int pid, int sig)
{
 8000904:	b480      	push	{r7}
 8000906:	b083      	sub	sp, #12
 8000908:	af00      	add	r7, sp, #0
 800090a:	6078      	str	r0, [r7, #4]
 800090c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800090e:	4b05      	ldr	r3, [pc, #20]	@ (8000924 <_kill+0x20>)
 8000910:	2216      	movs	r2, #22
 8000912:	601a      	str	r2, [r3, #0]
  return -1;
 8000914:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8000918:	4618      	mov	r0, r3
 800091a:	370c      	adds	r7, #12
 800091c:	46bd      	mov	sp, r7
 800091e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000922:	4770      	bx	lr
 8000924:	20010398 	.word	0x20010398

08000928 <_exit>:

void _exit (int status)
{
 8000928:	b580      	push	{r7, lr}
 800092a:	b082      	sub	sp, #8
 800092c:	af00      	add	r7, sp, #0
 800092e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8000930:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8000934:	6878      	ldr	r0, [r7, #4]
 8000936:	f7ff ffe5 	bl	8000904 <_kill>
  while (1) {}    /* Make sure we hang here */
 800093a:	bf00      	nop
 800093c:	e7fd      	b.n	800093a <_exit+0x12>

0800093e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800093e:	b580      	push	{r7, lr}
 8000940:	b086      	sub	sp, #24
 8000942:	af00      	add	r7, sp, #0
 8000944:	60f8      	str	r0, [r7, #12]
 8000946:	60b9      	str	r1, [r7, #8]
 8000948:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800094a:	2300      	movs	r3, #0
 800094c:	617b      	str	r3, [r7, #20]
 800094e:	e00a      	b.n	8000966 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000950:	f3af 8000 	nop.w
 8000954:	4601      	mov	r1, r0
 8000956:	68bb      	ldr	r3, [r7, #8]
 8000958:	1c5a      	adds	r2, r3, #1
 800095a:	60ba      	str	r2, [r7, #8]
 800095c:	b2ca      	uxtb	r2, r1
 800095e:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000960:	697b      	ldr	r3, [r7, #20]
 8000962:	3301      	adds	r3, #1
 8000964:	617b      	str	r3, [r7, #20]
 8000966:	697a      	ldr	r2, [r7, #20]
 8000968:	687b      	ldr	r3, [r7, #4]
 800096a:	429a      	cmp	r2, r3
 800096c:	dbf0      	blt.n	8000950 <_read+0x12>
  }

  return len;
 800096e:	687b      	ldr	r3, [r7, #4]
}
 8000970:	4618      	mov	r0, r3
 8000972:	3718      	adds	r7, #24
 8000974:	46bd      	mov	sp, r7
 8000976:	bd80      	pop	{r7, pc}

08000978 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000978:	b580      	push	{r7, lr}
 800097a:	b086      	sub	sp, #24
 800097c:	af00      	add	r7, sp, #0
 800097e:	60f8      	str	r0, [r7, #12]
 8000980:	60b9      	str	r1, [r7, #8]
 8000982:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000984:	2300      	movs	r3, #0
 8000986:	617b      	str	r3, [r7, #20]
 8000988:	e009      	b.n	800099e <_write+0x26>
  {
    __io_putchar(*ptr++);
 800098a:	68bb      	ldr	r3, [r7, #8]
 800098c:	1c5a      	adds	r2, r3, #1
 800098e:	60ba      	str	r2, [r7, #8]
 8000990:	781b      	ldrb	r3, [r3, #0]
 8000992:	4618      	mov	r0, r3
 8000994:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000998:	697b      	ldr	r3, [r7, #20]
 800099a:	3301      	adds	r3, #1
 800099c:	617b      	str	r3, [r7, #20]
 800099e:	697a      	ldr	r2, [r7, #20]
 80009a0:	687b      	ldr	r3, [r7, #4]
 80009a2:	429a      	cmp	r2, r3
 80009a4:	dbf1      	blt.n	800098a <_write+0x12>
  }
  return len;
 80009a6:	687b      	ldr	r3, [r7, #4]
}
 80009a8:	4618      	mov	r0, r3
 80009aa:	3718      	adds	r7, #24
 80009ac:	46bd      	mov	sp, r7
 80009ae:	bd80      	pop	{r7, pc}

080009b0 <_close>:

int _close(int file)
{
 80009b0:	b480      	push	{r7}
 80009b2:	b083      	sub	sp, #12
 80009b4:	af00      	add	r7, sp, #0
 80009b6:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80009b8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 80009bc:	4618      	mov	r0, r3
 80009be:	370c      	adds	r7, #12
 80009c0:	46bd      	mov	sp, r7
 80009c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009c6:	4770      	bx	lr

080009c8 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80009c8:	b480      	push	{r7}
 80009ca:	b083      	sub	sp, #12
 80009cc:	af00      	add	r7, sp, #0
 80009ce:	6078      	str	r0, [r7, #4]
 80009d0:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80009d2:	683b      	ldr	r3, [r7, #0]
 80009d4:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80009d8:	605a      	str	r2, [r3, #4]
  return 0;
 80009da:	2300      	movs	r3, #0
}
 80009dc:	4618      	mov	r0, r3
 80009de:	370c      	adds	r7, #12
 80009e0:	46bd      	mov	sp, r7
 80009e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009e6:	4770      	bx	lr

080009e8 <_isatty>:

int _isatty(int file)
{
 80009e8:	b480      	push	{r7}
 80009ea:	b083      	sub	sp, #12
 80009ec:	af00      	add	r7, sp, #0
 80009ee:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80009f0:	2301      	movs	r3, #1
}
 80009f2:	4618      	mov	r0, r3
 80009f4:	370c      	adds	r7, #12
 80009f6:	46bd      	mov	sp, r7
 80009f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009fc:	4770      	bx	lr

080009fe <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80009fe:	b480      	push	{r7}
 8000a00:	b085      	sub	sp, #20
 8000a02:	af00      	add	r7, sp, #0
 8000a04:	60f8      	str	r0, [r7, #12]
 8000a06:	60b9      	str	r1, [r7, #8]
 8000a08:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000a0a:	2300      	movs	r3, #0
}
 8000a0c:	4618      	mov	r0, r3
 8000a0e:	3714      	adds	r7, #20
 8000a10:	46bd      	mov	sp, r7
 8000a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a16:	4770      	bx	lr

08000a18 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000a18:	b480      	push	{r7}
 8000a1a:	b087      	sub	sp, #28
 8000a1c:	af00      	add	r7, sp, #0
 8000a1e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000a20:	4a14      	ldr	r2, [pc, #80]	@ (8000a74 <_sbrk+0x5c>)
 8000a22:	4b15      	ldr	r3, [pc, #84]	@ (8000a78 <_sbrk+0x60>)
 8000a24:	1ad3      	subs	r3, r2, r3
 8000a26:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000a28:	697b      	ldr	r3, [r7, #20]
 8000a2a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000a2c:	4b13      	ldr	r3, [pc, #76]	@ (8000a7c <_sbrk+0x64>)
 8000a2e:	681b      	ldr	r3, [r3, #0]
 8000a30:	2b00      	cmp	r3, #0
 8000a32:	d102      	bne.n	8000a3a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000a34:	4b11      	ldr	r3, [pc, #68]	@ (8000a7c <_sbrk+0x64>)
 8000a36:	4a12      	ldr	r2, [pc, #72]	@ (8000a80 <_sbrk+0x68>)
 8000a38:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000a3a:	4b10      	ldr	r3, [pc, #64]	@ (8000a7c <_sbrk+0x64>)
 8000a3c:	681a      	ldr	r2, [r3, #0]
 8000a3e:	687b      	ldr	r3, [r7, #4]
 8000a40:	4413      	add	r3, r2
 8000a42:	693a      	ldr	r2, [r7, #16]
 8000a44:	429a      	cmp	r2, r3
 8000a46:	d205      	bcs.n	8000a54 <_sbrk+0x3c>
  {
    errno = ENOMEM;
 8000a48:	4b0e      	ldr	r3, [pc, #56]	@ (8000a84 <_sbrk+0x6c>)
 8000a4a:	220c      	movs	r2, #12
 8000a4c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000a4e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000a52:	e009      	b.n	8000a68 <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 8000a54:	4b09      	ldr	r3, [pc, #36]	@ (8000a7c <_sbrk+0x64>)
 8000a56:	681b      	ldr	r3, [r3, #0]
 8000a58:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000a5a:	4b08      	ldr	r3, [pc, #32]	@ (8000a7c <_sbrk+0x64>)
 8000a5c:	681a      	ldr	r2, [r3, #0]
 8000a5e:	687b      	ldr	r3, [r7, #4]
 8000a60:	4413      	add	r3, r2
 8000a62:	4a06      	ldr	r2, [pc, #24]	@ (8000a7c <_sbrk+0x64>)
 8000a64:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000a66:	68fb      	ldr	r3, [r7, #12]
}
 8000a68:	4618      	mov	r0, r3
 8000a6a:	371c      	adds	r7, #28
 8000a6c:	46bd      	mov	sp, r7
 8000a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a72:	4770      	bx	lr
 8000a74:	20020000 	.word	0x20020000
 8000a78:	00000400 	.word	0x00000400
 8000a7c:	2000119c 	.word	0x2000119c
 8000a80:	200103a8 	.word	0x200103a8
 8000a84:	20010398 	.word	0x20010398

08000a88 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000a88:	b480      	push	{r7}
 8000a8a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000a8c:	4b06      	ldr	r3, [pc, #24]	@ (8000aa8 <SystemInit+0x20>)
 8000a8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000a92:	4a05      	ldr	r2, [pc, #20]	@ (8000aa8 <SystemInit+0x20>)
 8000a94:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000a98:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000a9c:	bf00      	nop
 8000a9e:	46bd      	mov	sp, r7
 8000aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop
 8000aa8:	e000ed00 	.word	0xe000ed00

08000aac <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000aac:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000ae4 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000ab0:	f7ff ffea 	bl	8000a88 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000ab4:	480c      	ldr	r0, [pc, #48]	@ (8000ae8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000ab6:	490d      	ldr	r1, [pc, #52]	@ (8000aec <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000ab8:	4a0d      	ldr	r2, [pc, #52]	@ (8000af0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000aba:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000abc:	e002      	b.n	8000ac4 <LoopCopyDataInit>

08000abe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000abe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ac0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000ac2:	3304      	adds	r3, #4

08000ac4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ac4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000ac6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ac8:	d3f9      	bcc.n	8000abe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000aca:	4a0a      	ldr	r2, [pc, #40]	@ (8000af4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000acc:	4c0a      	ldr	r4, [pc, #40]	@ (8000af8 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000ace:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ad0:	e001      	b.n	8000ad6 <LoopFillZerobss>

08000ad2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000ad2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ad4:	3204      	adds	r2, #4

08000ad6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000ad6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ad8:	d3fb      	bcc.n	8000ad2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000ada:	f011 fcf9 	bl	80124d0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000ade:	f7ff fd9f 	bl	8000620 <main>
  bx  lr    
 8000ae2:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000ae4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000ae8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000aec:	2000008c 	.word	0x2000008c
  ldr r2, =_sidata
 8000af0:	08015efc 	.word	0x08015efc
  ldr r2, =_sbss
 8000af4:	2000008c 	.word	0x2000008c
  ldr r4, =_ebss
 8000af8:	200103a8 	.word	0x200103a8

08000afc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000afc:	e7fe      	b.n	8000afc <ADC_IRQHandler>

08000afe <LAN8742_RegisterBusIO>:
  * @param  ioctx: holds device IO functions.
  * @retval LAN8742_STATUS_OK  if OK
  *         LAN8742_STATUS_ERROR if missing mandatory function
  */
int32_t  LAN8742_RegisterBusIO(lan8742_Object_t *pObj, lan8742_IOCtx_t *ioctx)
{
 8000afe:	b480      	push	{r7}
 8000b00:	b083      	sub	sp, #12
 8000b02:	af00      	add	r7, sp, #0
 8000b04:	6078      	str	r0, [r7, #4]
 8000b06:	6039      	str	r1, [r7, #0]
  if(!pObj || !ioctx->ReadReg || !ioctx->WriteReg || !ioctx->GetTick)
 8000b08:	687b      	ldr	r3, [r7, #4]
 8000b0a:	2b00      	cmp	r3, #0
 8000b0c:	d00b      	beq.n	8000b26 <LAN8742_RegisterBusIO+0x28>
 8000b0e:	683b      	ldr	r3, [r7, #0]
 8000b10:	68db      	ldr	r3, [r3, #12]
 8000b12:	2b00      	cmp	r3, #0
 8000b14:	d007      	beq.n	8000b26 <LAN8742_RegisterBusIO+0x28>
 8000b16:	683b      	ldr	r3, [r7, #0]
 8000b18:	689b      	ldr	r3, [r3, #8]
 8000b1a:	2b00      	cmp	r3, #0
 8000b1c:	d003      	beq.n	8000b26 <LAN8742_RegisterBusIO+0x28>
 8000b1e:	683b      	ldr	r3, [r7, #0]
 8000b20:	691b      	ldr	r3, [r3, #16]
 8000b22:	2b00      	cmp	r3, #0
 8000b24:	d102      	bne.n	8000b2c <LAN8742_RegisterBusIO+0x2e>
  {
    return LAN8742_STATUS_ERROR;
 8000b26:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000b2a:	e014      	b.n	8000b56 <LAN8742_RegisterBusIO+0x58>
  }

  pObj->IO.Init = ioctx->Init;
 8000b2c:	683b      	ldr	r3, [r7, #0]
 8000b2e:	681a      	ldr	r2, [r3, #0]
 8000b30:	687b      	ldr	r3, [r7, #4]
 8000b32:	609a      	str	r2, [r3, #8]
  pObj->IO.DeInit = ioctx->DeInit;
 8000b34:	683b      	ldr	r3, [r7, #0]
 8000b36:	685a      	ldr	r2, [r3, #4]
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	60da      	str	r2, [r3, #12]
  pObj->IO.ReadReg = ioctx->ReadReg;
 8000b3c:	683b      	ldr	r3, [r7, #0]
 8000b3e:	68da      	ldr	r2, [r3, #12]
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	615a      	str	r2, [r3, #20]
  pObj->IO.WriteReg = ioctx->WriteReg;
 8000b44:	683b      	ldr	r3, [r7, #0]
 8000b46:	689a      	ldr	r2, [r3, #8]
 8000b48:	687b      	ldr	r3, [r7, #4]
 8000b4a:	611a      	str	r2, [r3, #16]
  pObj->IO.GetTick = ioctx->GetTick;
 8000b4c:	683b      	ldr	r3, [r7, #0]
 8000b4e:	691a      	ldr	r2, [r3, #16]
 8000b50:	687b      	ldr	r3, [r7, #4]
 8000b52:	619a      	str	r2, [r3, #24]

  return LAN8742_STATUS_OK;
 8000b54:	2300      	movs	r3, #0
}
 8000b56:	4618      	mov	r0, r3
 8000b58:	370c      	adds	r7, #12
 8000b5a:	46bd      	mov	sp, r7
 8000b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b60:	4770      	bx	lr

08000b62 <LAN8742_Init>:
  *         LAN8742_STATUS_READ_ERROR if cannot read register
  *         LAN8742_STATUS_WRITE_ERROR if cannot write to register
  *         LAN8742_STATUS_RESET_TIMEOUT if cannot perform a software reset
  */
 int32_t LAN8742_Init(lan8742_Object_t *pObj)
 {
 8000b62:	b580      	push	{r7, lr}
 8000b64:	b086      	sub	sp, #24
 8000b66:	af00      	add	r7, sp, #0
 8000b68:	6078      	str	r0, [r7, #4]
   uint32_t tickstart = 0, regvalue = 0, addr = 0;
 8000b6a:	2300      	movs	r3, #0
 8000b6c:	60fb      	str	r3, [r7, #12]
 8000b6e:	2300      	movs	r3, #0
 8000b70:	60bb      	str	r3, [r7, #8]
 8000b72:	2300      	movs	r3, #0
 8000b74:	617b      	str	r3, [r7, #20]
   int32_t status = LAN8742_STATUS_OK;
 8000b76:	2300      	movs	r3, #0
 8000b78:	613b      	str	r3, [r7, #16]

   if(pObj->Is_Initialized == 0)
 8000b7a:	687b      	ldr	r3, [r7, #4]
 8000b7c:	685b      	ldr	r3, [r3, #4]
 8000b7e:	2b00      	cmp	r3, #0
 8000b80:	d17c      	bne.n	8000c7c <LAN8742_Init+0x11a>
   {
     if(pObj->IO.Init != 0)
 8000b82:	687b      	ldr	r3, [r7, #4]
 8000b84:	689b      	ldr	r3, [r3, #8]
 8000b86:	2b00      	cmp	r3, #0
 8000b88:	d002      	beq.n	8000b90 <LAN8742_Init+0x2e>
     {
       /* GPIO and Clocks initialization */
       pObj->IO.Init();
 8000b8a:	687b      	ldr	r3, [r7, #4]
 8000b8c:	689b      	ldr	r3, [r3, #8]
 8000b8e:	4798      	blx	r3
     }

     /* for later check */
     pObj->DevAddr = LAN8742_MAX_DEV_ADDR + 1;
 8000b90:	687b      	ldr	r3, [r7, #4]
 8000b92:	2220      	movs	r2, #32
 8000b94:	601a      	str	r2, [r3, #0]

     /* Get the device address from special mode register */
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 8000b96:	2300      	movs	r3, #0
 8000b98:	617b      	str	r3, [r7, #20]
 8000b9a:	e01c      	b.n	8000bd6 <LAN8742_Init+0x74>
     {
       if(pObj->IO.ReadReg(addr, LAN8742_SMR, &regvalue) < 0)
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	695b      	ldr	r3, [r3, #20]
 8000ba0:	f107 0208 	add.w	r2, r7, #8
 8000ba4:	2112      	movs	r1, #18
 8000ba6:	6978      	ldr	r0, [r7, #20]
 8000ba8:	4798      	blx	r3
 8000baa:	4603      	mov	r3, r0
 8000bac:	2b00      	cmp	r3, #0
 8000bae:	da03      	bge.n	8000bb8 <LAN8742_Init+0x56>
       {
         status = LAN8742_STATUS_READ_ERROR;
 8000bb0:	f06f 0304 	mvn.w	r3, #4
 8000bb4:	613b      	str	r3, [r7, #16]
         /* Can't read from this device address
            continue with next address */
         continue;
 8000bb6:	e00b      	b.n	8000bd0 <LAN8742_Init+0x6e>
       }

       if((regvalue & LAN8742_SMR_PHY_ADDR) == addr)
 8000bb8:	68bb      	ldr	r3, [r7, #8]
 8000bba:	f003 031f 	and.w	r3, r3, #31
 8000bbe:	697a      	ldr	r2, [r7, #20]
 8000bc0:	429a      	cmp	r2, r3
 8000bc2:	d105      	bne.n	8000bd0 <LAN8742_Init+0x6e>
       {
         pObj->DevAddr = addr;
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	697a      	ldr	r2, [r7, #20]
 8000bc8:	601a      	str	r2, [r3, #0]
         status = LAN8742_STATUS_OK;
 8000bca:	2300      	movs	r3, #0
 8000bcc:	613b      	str	r3, [r7, #16]
         break;
 8000bce:	e005      	b.n	8000bdc <LAN8742_Init+0x7a>
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 8000bd0:	697b      	ldr	r3, [r7, #20]
 8000bd2:	3301      	adds	r3, #1
 8000bd4:	617b      	str	r3, [r7, #20]
 8000bd6:	697b      	ldr	r3, [r7, #20]
 8000bd8:	2b1f      	cmp	r3, #31
 8000bda:	d9df      	bls.n	8000b9c <LAN8742_Init+0x3a>
       }
     }

     if(pObj->DevAddr > LAN8742_MAX_DEV_ADDR)
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	681b      	ldr	r3, [r3, #0]
 8000be0:	2b1f      	cmp	r3, #31
 8000be2:	d902      	bls.n	8000bea <LAN8742_Init+0x88>
     {
       status = LAN8742_STATUS_ADDRESS_ERROR;
 8000be4:	f06f 0302 	mvn.w	r3, #2
 8000be8:	613b      	str	r3, [r7, #16]
     }

     /* if device address is matched */
     if(status == LAN8742_STATUS_OK)
 8000bea:	693b      	ldr	r3, [r7, #16]
 8000bec:	2b00      	cmp	r3, #0
 8000bee:	d145      	bne.n	8000c7c <LAN8742_Init+0x11a>
     {
       /* set a software reset  */
       if(pObj->IO.WriteReg(pObj->DevAddr, LAN8742_BCR, LAN8742_BCR_SOFT_RESET) >= 0)
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	691b      	ldr	r3, [r3, #16]
 8000bf4:	687a      	ldr	r2, [r7, #4]
 8000bf6:	6810      	ldr	r0, [r2, #0]
 8000bf8:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8000bfc:	2100      	movs	r1, #0
 8000bfe:	4798      	blx	r3
 8000c00:	4603      	mov	r3, r0
 8000c02:	2b00      	cmp	r3, #0
 8000c04:	db37      	blt.n	8000c76 <LAN8742_Init+0x114>
       {
         /* get software reset status */
         if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &regvalue) >= 0)
 8000c06:	687b      	ldr	r3, [r7, #4]
 8000c08:	695b      	ldr	r3, [r3, #20]
 8000c0a:	687a      	ldr	r2, [r7, #4]
 8000c0c:	6810      	ldr	r0, [r2, #0]
 8000c0e:	f107 0208 	add.w	r2, r7, #8
 8000c12:	2100      	movs	r1, #0
 8000c14:	4798      	blx	r3
 8000c16:	4603      	mov	r3, r0
 8000c18:	2b00      	cmp	r3, #0
 8000c1a:	db28      	blt.n	8000c6e <LAN8742_Init+0x10c>
         {
           tickstart = pObj->IO.GetTick();
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	699b      	ldr	r3, [r3, #24]
 8000c20:	4798      	blx	r3
 8000c22:	4603      	mov	r3, r0
 8000c24:	60fb      	str	r3, [r7, #12]

           /* wait until software reset is done or timeout occurred */
           while(regvalue & LAN8742_BCR_SOFT_RESET)
 8000c26:	e01c      	b.n	8000c62 <LAN8742_Init+0x100>
           {
             if((pObj->IO.GetTick() - tickstart) <= LAN8742_SW_RESET_TO)
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	699b      	ldr	r3, [r3, #24]
 8000c2c:	4798      	blx	r3
 8000c2e:	4603      	mov	r3, r0
 8000c30:	461a      	mov	r2, r3
 8000c32:	68fb      	ldr	r3, [r7, #12]
 8000c34:	1ad3      	subs	r3, r2, r3
 8000c36:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8000c3a:	d80e      	bhi.n	8000c5a <LAN8742_Init+0xf8>
             {
               if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &regvalue) < 0)
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	695b      	ldr	r3, [r3, #20]
 8000c40:	687a      	ldr	r2, [r7, #4]
 8000c42:	6810      	ldr	r0, [r2, #0]
 8000c44:	f107 0208 	add.w	r2, r7, #8
 8000c48:	2100      	movs	r1, #0
 8000c4a:	4798      	blx	r3
 8000c4c:	4603      	mov	r3, r0
 8000c4e:	2b00      	cmp	r3, #0
 8000c50:	da07      	bge.n	8000c62 <LAN8742_Init+0x100>
               {
                 status = LAN8742_STATUS_READ_ERROR;
 8000c52:	f06f 0304 	mvn.w	r3, #4
 8000c56:	613b      	str	r3, [r7, #16]
                 break;
 8000c58:	e010      	b.n	8000c7c <LAN8742_Init+0x11a>
               }
             }
             else
             {
               status = LAN8742_STATUS_RESET_TIMEOUT;
 8000c5a:	f06f 0301 	mvn.w	r3, #1
 8000c5e:	613b      	str	r3, [r7, #16]
               break;
 8000c60:	e00c      	b.n	8000c7c <LAN8742_Init+0x11a>
           while(regvalue & LAN8742_BCR_SOFT_RESET)
 8000c62:	68bb      	ldr	r3, [r7, #8]
 8000c64:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8000c68:	2b00      	cmp	r3, #0
 8000c6a:	d1dd      	bne.n	8000c28 <LAN8742_Init+0xc6>
 8000c6c:	e006      	b.n	8000c7c <LAN8742_Init+0x11a>
             }
           }
         }
         else
         {
           status = LAN8742_STATUS_READ_ERROR;
 8000c6e:	f06f 0304 	mvn.w	r3, #4
 8000c72:	613b      	str	r3, [r7, #16]
 8000c74:	e002      	b.n	8000c7c <LAN8742_Init+0x11a>
         }
       }
       else
       {
         status = LAN8742_STATUS_WRITE_ERROR;
 8000c76:	f06f 0303 	mvn.w	r3, #3
 8000c7a:	613b      	str	r3, [r7, #16]
       }
     }
   }

   if(status == LAN8742_STATUS_OK)
 8000c7c:	693b      	ldr	r3, [r7, #16]
 8000c7e:	2b00      	cmp	r3, #0
 8000c80:	d112      	bne.n	8000ca8 <LAN8742_Init+0x146>
   {
     tickstart =  pObj->IO.GetTick();
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	699b      	ldr	r3, [r3, #24]
 8000c86:	4798      	blx	r3
 8000c88:	4603      	mov	r3, r0
 8000c8a:	60fb      	str	r3, [r7, #12]

     /* Wait for 2s to perform initialization */
     while((pObj->IO.GetTick() - tickstart) <= LAN8742_INIT_TO)
 8000c8c:	bf00      	nop
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	699b      	ldr	r3, [r3, #24]
 8000c92:	4798      	blx	r3
 8000c94:	4603      	mov	r3, r0
 8000c96:	461a      	mov	r2, r3
 8000c98:	68fb      	ldr	r3, [r7, #12]
 8000c9a:	1ad3      	subs	r3, r2, r3
 8000c9c:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 8000ca0:	d9f5      	bls.n	8000c8e <LAN8742_Init+0x12c>
     {
     }
     pObj->Is_Initialized = 1;
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	2201      	movs	r2, #1
 8000ca6:	605a      	str	r2, [r3, #4]
   }

   return status;
 8000ca8:	693b      	ldr	r3, [r7, #16]
 }
 8000caa:	4618      	mov	r0, r3
 8000cac:	3718      	adds	r7, #24
 8000cae:	46bd      	mov	sp, r7
 8000cb0:	bd80      	pop	{r7, pc}

08000cb2 <LAN8742_GetLinkState>:
  *         LAN8742_STATUS_10MBITS_HALFDUPLEX  if 10Mb/s HD
  *         LAN8742_STATUS_READ_ERROR if cannot read register
  *         LAN8742_STATUS_WRITE_ERROR if cannot write to register
  */
int32_t LAN8742_GetLinkState(lan8742_Object_t *pObj)
{
 8000cb2:	b580      	push	{r7, lr}
 8000cb4:	b084      	sub	sp, #16
 8000cb6:	af00      	add	r7, sp, #0
 8000cb8:	6078      	str	r0, [r7, #4]
  uint32_t readval = 0;
 8000cba:	2300      	movs	r3, #0
 8000cbc:	60fb      	str	r3, [r7, #12]

  /* Read Status register  */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	695b      	ldr	r3, [r3, #20]
 8000cc2:	687a      	ldr	r2, [r7, #4]
 8000cc4:	6810      	ldr	r0, [r2, #0]
 8000cc6:	f107 020c 	add.w	r2, r7, #12
 8000cca:	2101      	movs	r1, #1
 8000ccc:	4798      	blx	r3
 8000cce:	4603      	mov	r3, r0
 8000cd0:	2b00      	cmp	r3, #0
 8000cd2:	da02      	bge.n	8000cda <LAN8742_GetLinkState+0x28>
  {
    return LAN8742_STATUS_READ_ERROR;
 8000cd4:	f06f 0304 	mvn.w	r3, #4
 8000cd8:	e06e      	b.n	8000db8 <LAN8742_GetLinkState+0x106>
  }

  /* Read Status register again */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	695b      	ldr	r3, [r3, #20]
 8000cde:	687a      	ldr	r2, [r7, #4]
 8000ce0:	6810      	ldr	r0, [r2, #0]
 8000ce2:	f107 020c 	add.w	r2, r7, #12
 8000ce6:	2101      	movs	r1, #1
 8000ce8:	4798      	blx	r3
 8000cea:	4603      	mov	r3, r0
 8000cec:	2b00      	cmp	r3, #0
 8000cee:	da02      	bge.n	8000cf6 <LAN8742_GetLinkState+0x44>
  {
    return LAN8742_STATUS_READ_ERROR;
 8000cf0:	f06f 0304 	mvn.w	r3, #4
 8000cf4:	e060      	b.n	8000db8 <LAN8742_GetLinkState+0x106>
  }

  if((readval & LAN8742_BSR_LINK_STATUS) == 0)
 8000cf6:	68fb      	ldr	r3, [r7, #12]
 8000cf8:	f003 0304 	and.w	r3, r3, #4
 8000cfc:	2b00      	cmp	r3, #0
 8000cfe:	d101      	bne.n	8000d04 <LAN8742_GetLinkState+0x52>
  {
    /* Return Link Down status */
    return LAN8742_STATUS_LINK_DOWN;
 8000d00:	2301      	movs	r3, #1
 8000d02:	e059      	b.n	8000db8 <LAN8742_GetLinkState+0x106>
  }

  /* Check Auto negotiation */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &readval) < 0)
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	695b      	ldr	r3, [r3, #20]
 8000d08:	687a      	ldr	r2, [r7, #4]
 8000d0a:	6810      	ldr	r0, [r2, #0]
 8000d0c:	f107 020c 	add.w	r2, r7, #12
 8000d10:	2100      	movs	r1, #0
 8000d12:	4798      	blx	r3
 8000d14:	4603      	mov	r3, r0
 8000d16:	2b00      	cmp	r3, #0
 8000d18:	da02      	bge.n	8000d20 <LAN8742_GetLinkState+0x6e>
  {
    return LAN8742_STATUS_READ_ERROR;
 8000d1a:	f06f 0304 	mvn.w	r3, #4
 8000d1e:	e04b      	b.n	8000db8 <LAN8742_GetLinkState+0x106>
  }

  if((readval & LAN8742_BCR_AUTONEGO_EN) != LAN8742_BCR_AUTONEGO_EN)
 8000d20:	68fb      	ldr	r3, [r7, #12]
 8000d22:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000d26:	2b00      	cmp	r3, #0
 8000d28:	d11b      	bne.n	8000d62 <LAN8742_GetLinkState+0xb0>
  {
    if(((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT) && ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE))
 8000d2a:	68fb      	ldr	r3, [r7, #12]
 8000d2c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000d30:	2b00      	cmp	r3, #0
 8000d32:	d006      	beq.n	8000d42 <LAN8742_GetLinkState+0x90>
 8000d34:	68fb      	ldr	r3, [r7, #12]
 8000d36:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000d3a:	2b00      	cmp	r3, #0
 8000d3c:	d001      	beq.n	8000d42 <LAN8742_GetLinkState+0x90>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 8000d3e:	2302      	movs	r3, #2
 8000d40:	e03a      	b.n	8000db8 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT)
 8000d42:	68fb      	ldr	r3, [r7, #12]
 8000d44:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000d48:	2b00      	cmp	r3, #0
 8000d4a:	d001      	beq.n	8000d50 <LAN8742_GetLinkState+0x9e>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 8000d4c:	2303      	movs	r3, #3
 8000d4e:	e033      	b.n	8000db8 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)
 8000d50:	68fb      	ldr	r3, [r7, #12]
 8000d52:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000d56:	2b00      	cmp	r3, #0
 8000d58:	d001      	beq.n	8000d5e <LAN8742_GetLinkState+0xac>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 8000d5a:	2304      	movs	r3, #4
 8000d5c:	e02c      	b.n	8000db8 <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 8000d5e:	2305      	movs	r3, #5
 8000d60:	e02a      	b.n	8000db8 <LAN8742_GetLinkState+0x106>
    }
  }
  else /* Auto Nego enabled */
  {
    if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_PHYSCSR, &readval) < 0)
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	695b      	ldr	r3, [r3, #20]
 8000d66:	687a      	ldr	r2, [r7, #4]
 8000d68:	6810      	ldr	r0, [r2, #0]
 8000d6a:	f107 020c 	add.w	r2, r7, #12
 8000d6e:	211f      	movs	r1, #31
 8000d70:	4798      	blx	r3
 8000d72:	4603      	mov	r3, r0
 8000d74:	2b00      	cmp	r3, #0
 8000d76:	da02      	bge.n	8000d7e <LAN8742_GetLinkState+0xcc>
    {
      return LAN8742_STATUS_READ_ERROR;
 8000d78:	f06f 0304 	mvn.w	r3, #4
 8000d7c:	e01c      	b.n	8000db8 <LAN8742_GetLinkState+0x106>
    }

    /* Check if auto nego not done */
    if((readval & LAN8742_PHYSCSR_AUTONEGO_DONE) == 0)
 8000d7e:	68fb      	ldr	r3, [r7, #12]
 8000d80:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000d84:	2b00      	cmp	r3, #0
 8000d86:	d101      	bne.n	8000d8c <LAN8742_GetLinkState+0xda>
    {
      return LAN8742_STATUS_AUTONEGO_NOTDONE;
 8000d88:	2306      	movs	r3, #6
 8000d8a:	e015      	b.n	8000db8 <LAN8742_GetLinkState+0x106>
    }

    if((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_FD)
 8000d8c:	68fb      	ldr	r3, [r7, #12]
 8000d8e:	f003 031c 	and.w	r3, r3, #28
 8000d92:	2b18      	cmp	r3, #24
 8000d94:	d101      	bne.n	8000d9a <LAN8742_GetLinkState+0xe8>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 8000d96:	2302      	movs	r3, #2
 8000d98:	e00e      	b.n	8000db8 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_HD)
 8000d9a:	68fb      	ldr	r3, [r7, #12]
 8000d9c:	f003 031c 	and.w	r3, r3, #28
 8000da0:	2b08      	cmp	r3, #8
 8000da2:	d101      	bne.n	8000da8 <LAN8742_GetLinkState+0xf6>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 8000da4:	2303      	movs	r3, #3
 8000da6:	e007      	b.n	8000db8 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_10BT_FD)
 8000da8:	68fb      	ldr	r3, [r7, #12]
 8000daa:	f003 031c 	and.w	r3, r3, #28
 8000dae:	2b14      	cmp	r3, #20
 8000db0:	d101      	bne.n	8000db6 <LAN8742_GetLinkState+0x104>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 8000db2:	2304      	movs	r3, #4
 8000db4:	e000      	b.n	8000db8 <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 8000db6:	2305      	movs	r3, #5
    }
  }
}
 8000db8:	4618      	mov	r0, r3
 8000dba:	3710      	adds	r7, #16
 8000dbc:	46bd      	mov	sp, r7
 8000dbe:	bd80      	pop	{r7, pc}

08000dc0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000dc0:	b580      	push	{r7, lr}
 8000dc2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000dc4:	4b0e      	ldr	r3, [pc, #56]	@ (8000e00 <HAL_Init+0x40>)
 8000dc6:	681b      	ldr	r3, [r3, #0]
 8000dc8:	4a0d      	ldr	r2, [pc, #52]	@ (8000e00 <HAL_Init+0x40>)
 8000dca:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000dce:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000dd0:	4b0b      	ldr	r3, [pc, #44]	@ (8000e00 <HAL_Init+0x40>)
 8000dd2:	681b      	ldr	r3, [r3, #0]
 8000dd4:	4a0a      	ldr	r2, [pc, #40]	@ (8000e00 <HAL_Init+0x40>)
 8000dd6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000dda:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ddc:	4b08      	ldr	r3, [pc, #32]	@ (8000e00 <HAL_Init+0x40>)
 8000dde:	681b      	ldr	r3, [r3, #0]
 8000de0:	4a07      	ldr	r2, [pc, #28]	@ (8000e00 <HAL_Init+0x40>)
 8000de2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000de6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000de8:	2003      	movs	r0, #3
 8000dea:	f000 f8fc 	bl	8000fe6 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000dee:	200f      	movs	r0, #15
 8000df0:	f7ff fcd4 	bl	800079c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000df4:	f7ff fca6 	bl	8000744 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000df8:	2300      	movs	r3, #0
}
 8000dfa:	4618      	mov	r0, r3
 8000dfc:	bd80      	pop	{r7, pc}
 8000dfe:	bf00      	nop
 8000e00:	40023c00 	.word	0x40023c00

08000e04 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e04:	b480      	push	{r7}
 8000e06:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000e08:	4b06      	ldr	r3, [pc, #24]	@ (8000e24 <HAL_IncTick+0x20>)
 8000e0a:	781b      	ldrb	r3, [r3, #0]
 8000e0c:	461a      	mov	r2, r3
 8000e0e:	4b06      	ldr	r3, [pc, #24]	@ (8000e28 <HAL_IncTick+0x24>)
 8000e10:	681b      	ldr	r3, [r3, #0]
 8000e12:	4413      	add	r3, r2
 8000e14:	4a04      	ldr	r2, [pc, #16]	@ (8000e28 <HAL_IncTick+0x24>)
 8000e16:	6013      	str	r3, [r2, #0]
}
 8000e18:	bf00      	nop
 8000e1a:	46bd      	mov	sp, r7
 8000e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e20:	4770      	bx	lr
 8000e22:	bf00      	nop
 8000e24:	20000008 	.word	0x20000008
 8000e28:	200011a0 	.word	0x200011a0

08000e2c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e2c:	b480      	push	{r7}
 8000e2e:	af00      	add	r7, sp, #0
  return uwTick;
 8000e30:	4b03      	ldr	r3, [pc, #12]	@ (8000e40 <HAL_GetTick+0x14>)
 8000e32:	681b      	ldr	r3, [r3, #0]
}
 8000e34:	4618      	mov	r0, r3
 8000e36:	46bd      	mov	sp, r7
 8000e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e3c:	4770      	bx	lr
 8000e3e:	bf00      	nop
 8000e40:	200011a0 	.word	0x200011a0

08000e44 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000e44:	b580      	push	{r7, lr}
 8000e46:	b084      	sub	sp, #16
 8000e48:	af00      	add	r7, sp, #0
 8000e4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000e4c:	f7ff ffee 	bl	8000e2c <HAL_GetTick>
 8000e50:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000e56:	68fb      	ldr	r3, [r7, #12]
 8000e58:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8000e5c:	d005      	beq.n	8000e6a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000e5e:	4b0a      	ldr	r3, [pc, #40]	@ (8000e88 <HAL_Delay+0x44>)
 8000e60:	781b      	ldrb	r3, [r3, #0]
 8000e62:	461a      	mov	r2, r3
 8000e64:	68fb      	ldr	r3, [r7, #12]
 8000e66:	4413      	add	r3, r2
 8000e68:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000e6a:	bf00      	nop
 8000e6c:	f7ff ffde 	bl	8000e2c <HAL_GetTick>
 8000e70:	4602      	mov	r2, r0
 8000e72:	68bb      	ldr	r3, [r7, #8]
 8000e74:	1ad3      	subs	r3, r2, r3
 8000e76:	68fa      	ldr	r2, [r7, #12]
 8000e78:	429a      	cmp	r2, r3
 8000e7a:	d8f7      	bhi.n	8000e6c <HAL_Delay+0x28>
  {
  }
}
 8000e7c:	bf00      	nop
 8000e7e:	bf00      	nop
 8000e80:	3710      	adds	r7, #16
 8000e82:	46bd      	mov	sp, r7
 8000e84:	bd80      	pop	{r7, pc}
 8000e86:	bf00      	nop
 8000e88:	20000008 	.word	0x20000008

08000e8c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e8c:	b480      	push	{r7}
 8000e8e:	b085      	sub	sp, #20
 8000e90:	af00      	add	r7, sp, #0
 8000e92:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	f003 0307 	and.w	r3, r3, #7
 8000e9a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e9c:	4b0c      	ldr	r3, [pc, #48]	@ (8000ed0 <__NVIC_SetPriorityGrouping+0x44>)
 8000e9e:	68db      	ldr	r3, [r3, #12]
 8000ea0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000ea2:	68ba      	ldr	r2, [r7, #8]
 8000ea4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000ea8:	4013      	ands	r3, r2
 8000eaa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000eac:	68fb      	ldr	r3, [r7, #12]
 8000eae:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000eb0:	68bb      	ldr	r3, [r7, #8]
 8000eb2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000eb4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000eb8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000ebc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000ebe:	4a04      	ldr	r2, [pc, #16]	@ (8000ed0 <__NVIC_SetPriorityGrouping+0x44>)
 8000ec0:	68bb      	ldr	r3, [r7, #8]
 8000ec2:	60d3      	str	r3, [r2, #12]
}
 8000ec4:	bf00      	nop
 8000ec6:	3714      	adds	r7, #20
 8000ec8:	46bd      	mov	sp, r7
 8000eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ece:	4770      	bx	lr
 8000ed0:	e000ed00 	.word	0xe000ed00

08000ed4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ed4:	b480      	push	{r7}
 8000ed6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ed8:	4b04      	ldr	r3, [pc, #16]	@ (8000eec <__NVIC_GetPriorityGrouping+0x18>)
 8000eda:	68db      	ldr	r3, [r3, #12]
 8000edc:	0a1b      	lsrs	r3, r3, #8
 8000ede:	f003 0307 	and.w	r3, r3, #7
}
 8000ee2:	4618      	mov	r0, r3
 8000ee4:	46bd      	mov	sp, r7
 8000ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eea:	4770      	bx	lr
 8000eec:	e000ed00 	.word	0xe000ed00

08000ef0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ef0:	b480      	push	{r7}
 8000ef2:	b083      	sub	sp, #12
 8000ef4:	af00      	add	r7, sp, #0
 8000ef6:	4603      	mov	r3, r0
 8000ef8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000efa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000efe:	2b00      	cmp	r3, #0
 8000f00:	db0b      	blt.n	8000f1a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000f02:	79fb      	ldrb	r3, [r7, #7]
 8000f04:	f003 021f 	and.w	r2, r3, #31
 8000f08:	4907      	ldr	r1, [pc, #28]	@ (8000f28 <__NVIC_EnableIRQ+0x38>)
 8000f0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f0e:	095b      	lsrs	r3, r3, #5
 8000f10:	2001      	movs	r0, #1
 8000f12:	fa00 f202 	lsl.w	r2, r0, r2
 8000f16:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000f1a:	bf00      	nop
 8000f1c:	370c      	adds	r7, #12
 8000f1e:	46bd      	mov	sp, r7
 8000f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f24:	4770      	bx	lr
 8000f26:	bf00      	nop
 8000f28:	e000e100 	.word	0xe000e100

08000f2c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f2c:	b480      	push	{r7}
 8000f2e:	b083      	sub	sp, #12
 8000f30:	af00      	add	r7, sp, #0
 8000f32:	4603      	mov	r3, r0
 8000f34:	6039      	str	r1, [r7, #0]
 8000f36:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f38:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f3c:	2b00      	cmp	r3, #0
 8000f3e:	db0a      	blt.n	8000f56 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f40:	683b      	ldr	r3, [r7, #0]
 8000f42:	b2da      	uxtb	r2, r3
 8000f44:	490c      	ldr	r1, [pc, #48]	@ (8000f78 <__NVIC_SetPriority+0x4c>)
 8000f46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f4a:	0112      	lsls	r2, r2, #4
 8000f4c:	b2d2      	uxtb	r2, r2
 8000f4e:	440b      	add	r3, r1
 8000f50:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000f54:	e00a      	b.n	8000f6c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f56:	683b      	ldr	r3, [r7, #0]
 8000f58:	b2da      	uxtb	r2, r3
 8000f5a:	4908      	ldr	r1, [pc, #32]	@ (8000f7c <__NVIC_SetPriority+0x50>)
 8000f5c:	79fb      	ldrb	r3, [r7, #7]
 8000f5e:	f003 030f 	and.w	r3, r3, #15
 8000f62:	3b04      	subs	r3, #4
 8000f64:	0112      	lsls	r2, r2, #4
 8000f66:	b2d2      	uxtb	r2, r2
 8000f68:	440b      	add	r3, r1
 8000f6a:	761a      	strb	r2, [r3, #24]
}
 8000f6c:	bf00      	nop
 8000f6e:	370c      	adds	r7, #12
 8000f70:	46bd      	mov	sp, r7
 8000f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f76:	4770      	bx	lr
 8000f78:	e000e100 	.word	0xe000e100
 8000f7c:	e000ed00 	.word	0xe000ed00

08000f80 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f80:	b480      	push	{r7}
 8000f82:	b089      	sub	sp, #36	@ 0x24
 8000f84:	af00      	add	r7, sp, #0
 8000f86:	60f8      	str	r0, [r7, #12]
 8000f88:	60b9      	str	r1, [r7, #8]
 8000f8a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f8c:	68fb      	ldr	r3, [r7, #12]
 8000f8e:	f003 0307 	and.w	r3, r3, #7
 8000f92:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f94:	69fb      	ldr	r3, [r7, #28]
 8000f96:	f1c3 0307 	rsb	r3, r3, #7
 8000f9a:	2b04      	cmp	r3, #4
 8000f9c:	bf28      	it	cs
 8000f9e:	2304      	movcs	r3, #4
 8000fa0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000fa2:	69fb      	ldr	r3, [r7, #28]
 8000fa4:	3304      	adds	r3, #4
 8000fa6:	2b06      	cmp	r3, #6
 8000fa8:	d902      	bls.n	8000fb0 <NVIC_EncodePriority+0x30>
 8000faa:	69fb      	ldr	r3, [r7, #28]
 8000fac:	3b03      	subs	r3, #3
 8000fae:	e000      	b.n	8000fb2 <NVIC_EncodePriority+0x32>
 8000fb0:	2300      	movs	r3, #0
 8000fb2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fb4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8000fb8:	69bb      	ldr	r3, [r7, #24]
 8000fba:	fa02 f303 	lsl.w	r3, r2, r3
 8000fbe:	43da      	mvns	r2, r3
 8000fc0:	68bb      	ldr	r3, [r7, #8]
 8000fc2:	401a      	ands	r2, r3
 8000fc4:	697b      	ldr	r3, [r7, #20]
 8000fc6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000fc8:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8000fcc:	697b      	ldr	r3, [r7, #20]
 8000fce:	fa01 f303 	lsl.w	r3, r1, r3
 8000fd2:	43d9      	mvns	r1, r3
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fd8:	4313      	orrs	r3, r2
         );
}
 8000fda:	4618      	mov	r0, r3
 8000fdc:	3724      	adds	r7, #36	@ 0x24
 8000fde:	46bd      	mov	sp, r7
 8000fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe4:	4770      	bx	lr

08000fe6 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fe6:	b580      	push	{r7, lr}
 8000fe8:	b082      	sub	sp, #8
 8000fea:	af00      	add	r7, sp, #0
 8000fec:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000fee:	6878      	ldr	r0, [r7, #4]
 8000ff0:	f7ff ff4c 	bl	8000e8c <__NVIC_SetPriorityGrouping>
}
 8000ff4:	bf00      	nop
 8000ff6:	3708      	adds	r7, #8
 8000ff8:	46bd      	mov	sp, r7
 8000ffa:	bd80      	pop	{r7, pc}

08000ffc <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	b086      	sub	sp, #24
 8001000:	af00      	add	r7, sp, #0
 8001002:	4603      	mov	r3, r0
 8001004:	60b9      	str	r1, [r7, #8]
 8001006:	607a      	str	r2, [r7, #4]
 8001008:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800100a:	2300      	movs	r3, #0
 800100c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800100e:	f7ff ff61 	bl	8000ed4 <__NVIC_GetPriorityGrouping>
 8001012:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001014:	687a      	ldr	r2, [r7, #4]
 8001016:	68b9      	ldr	r1, [r7, #8]
 8001018:	6978      	ldr	r0, [r7, #20]
 800101a:	f7ff ffb1 	bl	8000f80 <NVIC_EncodePriority>
 800101e:	4602      	mov	r2, r0
 8001020:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001024:	4611      	mov	r1, r2
 8001026:	4618      	mov	r0, r3
 8001028:	f7ff ff80 	bl	8000f2c <__NVIC_SetPriority>
}
 800102c:	bf00      	nop
 800102e:	3718      	adds	r7, #24
 8001030:	46bd      	mov	sp, r7
 8001032:	bd80      	pop	{r7, pc}

08001034 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001034:	b580      	push	{r7, lr}
 8001036:	b082      	sub	sp, #8
 8001038:	af00      	add	r7, sp, #0
 800103a:	4603      	mov	r3, r0
 800103c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800103e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001042:	4618      	mov	r0, r3
 8001044:	f7ff ff54 	bl	8000ef0 <__NVIC_EnableIRQ>
}
 8001048:	bf00      	nop
 800104a:	3708      	adds	r7, #8
 800104c:	46bd      	mov	sp, r7
 800104e:	bd80      	pop	{r7, pc}

08001050 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8001050:	b580      	push	{r7, lr}
 8001052:	b084      	sub	sp, #16
 8001054:	af00      	add	r7, sp, #0
 8001056:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	2b00      	cmp	r3, #0
 800105c:	d101      	bne.n	8001062 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 800105e:	2301      	movs	r3, #1
 8001060:	e06c      	b.n	800113c <HAL_ETH_Init+0xec>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8001068:	2b00      	cmp	r3, #0
 800106a:	d106      	bne.n	800107a <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	2223      	movs	r2, #35	@ 0x23
 8001070:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8001074:	6878      	ldr	r0, [r7, #4]
 8001076:	f002 ff33 	bl	8003ee0 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800107a:	2300      	movs	r3, #0
 800107c:	60bb      	str	r3, [r7, #8]
 800107e:	4b31      	ldr	r3, [pc, #196]	@ (8001144 <HAL_ETH_Init+0xf4>)
 8001080:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001082:	4a30      	ldr	r2, [pc, #192]	@ (8001144 <HAL_ETH_Init+0xf4>)
 8001084:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001088:	6453      	str	r3, [r2, #68]	@ 0x44
 800108a:	4b2e      	ldr	r3, [pc, #184]	@ (8001144 <HAL_ETH_Init+0xf4>)
 800108c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800108e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001092:	60bb      	str	r3, [r7, #8]
 8001094:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8001096:	4b2c      	ldr	r3, [pc, #176]	@ (8001148 <HAL_ETH_Init+0xf8>)
 8001098:	685b      	ldr	r3, [r3, #4]
 800109a:	4a2b      	ldr	r2, [pc, #172]	@ (8001148 <HAL_ETH_Init+0xf8>)
 800109c:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 80010a0:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 80010a2:	4b29      	ldr	r3, [pc, #164]	@ (8001148 <HAL_ETH_Init+0xf8>)
 80010a4:	685a      	ldr	r2, [r3, #4]
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	689b      	ldr	r3, [r3, #8]
 80010aa:	4927      	ldr	r1, [pc, #156]	@ (8001148 <HAL_ETH_Init+0xf8>)
 80010ac:	4313      	orrs	r3, r2
 80010ae:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 80010b0:	4b25      	ldr	r3, [pc, #148]	@ (8001148 <HAL_ETH_Init+0xf8>)
 80010b2:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	687a      	ldr	r2, [r7, #4]
 80010c0:	6812      	ldr	r2, [r2, #0]
 80010c2:	f043 0301 	orr.w	r3, r3, #1
 80010c6:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80010ca:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80010cc:	f7ff feae 	bl	8000e2c <HAL_GetTick>
 80010d0:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 80010d2:	e011      	b.n	80010f8 <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 80010d4:	f7ff feaa 	bl	8000e2c <HAL_GetTick>
 80010d8:	4602      	mov	r2, r0
 80010da:	68fb      	ldr	r3, [r7, #12]
 80010dc:	1ad3      	subs	r3, r2, r3
 80010de:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 80010e2:	d909      	bls.n	80010f8 <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	2204      	movs	r2, #4
 80010e8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	22e0      	movs	r2, #224	@ 0xe0
 80010f0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      /* Return Error */
      return HAL_ERROR;
 80010f4:	2301      	movs	r3, #1
 80010f6:	e021      	b.n	800113c <HAL_ETH_Init+0xec>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	f003 0301 	and.w	r3, r3, #1
 8001106:	2b00      	cmp	r3, #0
 8001108:	d1e4      	bne.n	80010d4 <HAL_ETH_Init+0x84>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 800110a:	6878      	ldr	r0, [r7, #4]
 800110c:	f000 ff56 	bl	8001fbc <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8001110:	6878      	ldr	r0, [r7, #4]
 8001112:	f000 fffd 	bl	8002110 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8001116:	6878      	ldr	r0, [r7, #4]
 8001118:	f001 f853 	bl	80021c2 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	685b      	ldr	r3, [r3, #4]
 8001120:	461a      	mov	r2, r3
 8001122:	2100      	movs	r1, #0
 8001124:	6878      	ldr	r0, [r7, #4]
 8001126:	f000 ffbb 	bl	80020a0 <ETH_MACAddressConfig>

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	2200      	movs	r2, #0
 800112e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	2210      	movs	r2, #16
 8001136:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800113a:	2300      	movs	r3, #0
}
 800113c:	4618      	mov	r0, r3
 800113e:	3710      	adds	r7, #16
 8001140:	46bd      	mov	sp, r7
 8001142:	bd80      	pop	{r7, pc}
 8001144:	40023800 	.word	0x40023800
 8001148:	40013800 	.word	0x40013800

0800114c <HAL_ETH_Start_IT>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start_IT(ETH_HandleTypeDef *heth)
{
 800114c:	b580      	push	{r7, lr}
 800114e:	b084      	sub	sp, #16
 8001150:	af00      	add	r7, sp, #0
 8001152:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1;

  if (heth->gState == HAL_ETH_STATE_READY)
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800115a:	2b10      	cmp	r3, #16
 800115c:	d17f      	bne.n	800125e <HAL_ETH_Start_IT+0x112>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	2223      	movs	r2, #35	@ 0x23
 8001162:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* save IT mode to ETH Handle */
    heth->RxDescList.ItMode = 1U;
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	2201      	movs	r2, #1
 800116a:	659a      	str	r2, [r3, #88]	@ 0x58
    /* Disable MMC Interrupts */
    SET_BIT(heth->Instance->MACIMR, ETH_MACIMR_TSTIM | ETH_MACIMR_PMTIM);
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	f442 7202 	orr.w	r2, r2, #520	@ 0x208
 800117a:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable Rx MMC Interrupts */
    SET_BIT(heth->Instance->MMCRIMR, ETH_MMCRIMR_RGUFM | ETH_MMCRIMR_RFAEM | \
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	f8d3 310c 	ldr.w	r3, [r3, #268]	@ 0x10c
 8001184:	687a      	ldr	r2, [r7, #4]
 8001186:	6812      	ldr	r2, [r2, #0]
 8001188:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800118c:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8001190:	f8c2 310c 	str.w	r3, [r2, #268]	@ 0x10c
            ETH_MMCRIMR_RFCEM);

    /* Disable Tx MMC Interrupts */
    SET_BIT(heth->Instance->MMCTIMR, ETH_MMCTIMR_TGFM | ETH_MMCTIMR_TGFMSCM | \
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	f8d3 2110 	ldr.w	r2, [r3, #272]	@ 0x110
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	f442 1203 	orr.w	r2, r2, #2146304	@ 0x20c000
 80011a4:	f8c3 2110 	str.w	r2, [r3, #272]	@ 0x110
            ETH_MMCTIMR_TGFSCM);

    /* Set number of descriptors to build */
    heth->RxDescList.RxBuildDescCnt = ETH_RX_DESC_CNT;
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	2204      	movs	r2, #4
 80011ac:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Build all descriptors */
    ETH_UpdateDescriptor(heth);
 80011ae:	6878      	ldr	r0, [r7, #4]
 80011b0:	f000 f9f8 	bl	80015a4 <ETH_UpdateDescriptor>

    /* Enable the MAC transmission */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	681a      	ldr	r2, [r3, #0]
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	f042 0208 	orr.w	r2, r2, #8
 80011c2:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80011cc:	2001      	movs	r0, #1
 80011ce:	f7ff fe39 	bl	8000e44 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	68fa      	ldr	r2, [r7, #12]
 80011d8:	601a      	str	r2, [r3, #0]

    /* Enable the MAC reception */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	681a      	ldr	r2, [r3, #0]
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	f042 0204 	orr.w	r2, r2, #4
 80011e8:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80011f2:	2001      	movs	r0, #1
 80011f4:	f7ff fe26 	bl	8000e44 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	68fa      	ldr	r2, [r7, #12]
 80011fe:	601a      	str	r2, [r3, #0]

    /* Flush Transmit FIFO */
    ETH_FlushTransmitFIFO(heth);
 8001200:	6878      	ldr	r0, [r7, #4]
 8001202:	f000 fd7c 	bl	8001cfe <ETH_FlushTransmitFIFO>

    /* Enable the DMA transmission */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800120e:	699b      	ldr	r3, [r3, #24]
 8001210:	687a      	ldr	r2, [r7, #4]
 8001212:	6812      	ldr	r2, [r2, #0]
 8001214:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001218:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800121c:	6193      	str	r3, [r2, #24]

    /* Enable the DMA reception */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001226:	699b      	ldr	r3, [r3, #24]
 8001228:	687a      	ldr	r2, [r7, #4]
 800122a:	6812      	ldr	r2, [r2, #0]
 800122c:	f043 0302 	orr.w	r3, r3, #2
 8001230:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001234:	6193      	str	r3, [r2, #24]
    /* Enable ETH DMA interrupts:
    - Tx complete interrupt
    - Rx complete interrupt
    - Fatal bus interrupt
    */
    __HAL_ETH_DMA_ENABLE_IT(heth, (ETH_DMAIER_NISE | ETH_DMAIER_RIE | ETH_DMAIER_TIE  |
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800123e:	69db      	ldr	r3, [r3, #28]
 8001240:	687a      	ldr	r2, [r7, #4]
 8001242:	6812      	ldr	r2, [r2, #0]
 8001244:	f443 33d0 	orr.w	r3, r3, #106496	@ 0x1a000
 8001248:	f043 03c1 	orr.w	r3, r3, #193	@ 0xc1
 800124c:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001250:	61d3      	str	r3, [r2, #28]
                                   ETH_DMAIER_FBEIE | ETH_DMAIER_AISE | ETH_DMAIER_RBUIE));

    heth->gState = HAL_ETH_STATE_STARTED;
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	2223      	movs	r2, #35	@ 0x23
 8001256:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    return HAL_OK;
 800125a:	2300      	movs	r3, #0
 800125c:	e000      	b.n	8001260 <HAL_ETH_Start_IT+0x114>
  }
  else
  {
    return HAL_ERROR;
 800125e:	2301      	movs	r3, #1
  }
}
 8001260:	4618      	mov	r0, r3
 8001262:	3710      	adds	r7, #16
 8001264:	46bd      	mov	sp, r7
 8001266:	bd80      	pop	{r7, pc}

08001268 <HAL_ETH_Stop_IT>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop_IT(ETH_HandleTypeDef *heth)
{
 8001268:	b580      	push	{r7, lr}
 800126a:	b086      	sub	sp, #24
 800126c:	af00      	add	r7, sp, #0
 800126e:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t descindex;
  uint32_t tmpreg1;

  if (heth->gState == HAL_ETH_STATE_STARTED)
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8001276:	2b23      	cmp	r3, #35	@ 0x23
 8001278:	d170      	bne.n	800135c <HAL_ETH_Stop_IT+0xf4>
  {
    /* Set the ETH peripheral state to BUSY */
    heth->gState = HAL_ETH_STATE_BUSY;
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	2223      	movs	r2, #35	@ 0x23
 800127e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    __HAL_ETH_DMA_DISABLE_IT(heth, (ETH_DMAIER_NISE | ETH_DMAIER_RIE | ETH_DMAIER_TIE  |
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800128a:	69db      	ldr	r3, [r3, #28]
 800128c:	687a      	ldr	r2, [r7, #4]
 800128e:	6812      	ldr	r2, [r2, #0]
 8001290:	f423 33d0 	bic.w	r3, r3, #106496	@ 0x1a000
 8001294:	f023 03c1 	bic.w	r3, r3, #193	@ 0xc1
 8001298:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800129c:	61d3      	str	r3, [r2, #28]
                                    ETH_DMAIER_FBEIE | ETH_DMAIER_AISE | ETH_DMAIER_RBUIE));

    /* Disable the DMA transmission */
    CLEAR_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80012a6:	699b      	ldr	r3, [r3, #24]
 80012a8:	687a      	ldr	r2, [r7, #4]
 80012aa:	6812      	ldr	r2, [r2, #0]
 80012ac:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80012b0:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80012b4:	6193      	str	r3, [r2, #24]

    /* Disable the DMA reception */
    CLEAR_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80012be:	699b      	ldr	r3, [r3, #24]
 80012c0:	687a      	ldr	r2, [r7, #4]
 80012c2:	6812      	ldr	r2, [r2, #0]
 80012c4:	f023 0302 	bic.w	r3, r3, #2
 80012c8:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80012cc:	6193      	str	r3, [r2, #24]

    /* Disable the MAC reception */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	681a      	ldr	r2, [r3, #0]
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	f022 0204 	bic.w	r2, r2, #4
 80012dc:	601a      	str	r2, [r3, #0]


    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	613b      	str	r3, [r7, #16]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80012e6:	2001      	movs	r0, #1
 80012e8:	f7ff fdac 	bl	8000e44 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	693a      	ldr	r2, [r7, #16]
 80012f2:	601a      	str	r2, [r3, #0]

    /* Flush Transmit FIFO */
    ETH_FlushTransmitFIFO(heth);
 80012f4:	6878      	ldr	r0, [r7, #4]
 80012f6:	f000 fd02 	bl	8001cfe <ETH_FlushTransmitFIFO>

    /* Disable the MAC transmission */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	681a      	ldr	r2, [r3, #0]
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	f022 0208 	bic.w	r2, r2, #8
 8001308:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	613b      	str	r3, [r7, #16]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8001312:	2001      	movs	r0, #1
 8001314:	f7ff fd96 	bl	8000e44 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	693a      	ldr	r2, [r7, #16]
 800131e:	601a      	str	r2, [r3, #0]

    /* Clear IOC bit to all Rx descriptors */
    for (descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
 8001320:	2300      	movs	r3, #0
 8001322:	617b      	str	r3, [r7, #20]
 8001324:	e00e      	b.n	8001344 <HAL_ETH_Stop_IT+0xdc>
    {
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descindex];
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	697a      	ldr	r2, [r7, #20]
 800132a:	3212      	adds	r2, #18
 800132c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001330:	60fb      	str	r3, [r7, #12]
      SET_BIT(dmarxdesc->DESC1, ETH_DMARXDESC_DIC);
 8001332:	68fb      	ldr	r3, [r7, #12]
 8001334:	685b      	ldr	r3, [r3, #4]
 8001336:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 800133a:	68fb      	ldr	r3, [r7, #12]
 800133c:	605a      	str	r2, [r3, #4]
    for (descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
 800133e:	697b      	ldr	r3, [r7, #20]
 8001340:	3301      	adds	r3, #1
 8001342:	617b      	str	r3, [r7, #20]
 8001344:	697b      	ldr	r3, [r7, #20]
 8001346:	2b03      	cmp	r3, #3
 8001348:	d9ed      	bls.n	8001326 <HAL_ETH_Stop_IT+0xbe>
    }

    heth->RxDescList.ItMode = 0U;
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	2200      	movs	r2, #0
 800134e:	659a      	str	r2, [r3, #88]	@ 0x58

    heth->gState = HAL_ETH_STATE_READY;
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	2210      	movs	r2, #16
 8001354:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Return function status */
    return HAL_OK;
 8001358:	2300      	movs	r3, #0
 800135a:	e000      	b.n	800135e <HAL_ETH_Stop_IT+0xf6>
  }
  else
  {
    return HAL_ERROR;
 800135c:	2301      	movs	r3, #1
  }
}
 800135e:	4618      	mov	r0, r3
 8001360:	3718      	adds	r7, #24
 8001362:	46bd      	mov	sp, r7
 8001364:	bd80      	pop	{r7, pc}

08001366 <HAL_ETH_Transmit_IT>:
  *         the configuration information for ETHERNET module
  * @param  pTxConfig: Hold the configuration of packet to be transmitted
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Transmit_IT(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig)
{
 8001366:	b580      	push	{r7, lr}
 8001368:	b082      	sub	sp, #8
 800136a:	af00      	add	r7, sp, #0
 800136c:	6078      	str	r0, [r7, #4]
 800136e:	6039      	str	r1, [r7, #0]
  if (pTxConfig == NULL)
 8001370:	683b      	ldr	r3, [r7, #0]
 8001372:	2b00      	cmp	r3, #0
 8001374:	d109      	bne.n	800138a <HAL_ETH_Transmit_IT+0x24>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800137c:	f043 0201 	orr.w	r2, r3, #1
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    return HAL_ERROR;
 8001386:	2301      	movs	r3, #1
 8001388:	e045      	b.n	8001416 <HAL_ETH_Transmit_IT+0xb0>
  }

  if (heth->gState == HAL_ETH_STATE_STARTED)
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8001390:	2b23      	cmp	r3, #35	@ 0x23
 8001392:	d13f      	bne.n	8001414 <HAL_ETH_Transmit_IT+0xae>
  {
    /* Save the packet pointer to release.  */
    heth->TxDescList.CurrentPacketAddress = (uint32_t *)pTxConfig->pData;
 8001394:	683b      	ldr	r3, [r7, #0]
 8001396:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Config DMA Tx descriptor by Tx Packet info */
    if (ETH_Prepare_Tx_Descriptors(heth, pTxConfig, 1) != HAL_ETH_ERROR_NONE)
 800139c:	2201      	movs	r2, #1
 800139e:	6839      	ldr	r1, [r7, #0]
 80013a0:	6878      	ldr	r0, [r7, #4]
 80013a2:	f000 ff7b 	bl	800229c <ETH_Prepare_Tx_Descriptors>
 80013a6:	4603      	mov	r3, r0
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	d009      	beq.n	80013c0 <HAL_ETH_Transmit_IT+0x5a>
    {
      heth->ErrorCode |= HAL_ETH_ERROR_BUSY;
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80013b2:	f043 0202 	orr.w	r2, r3, #2
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      return HAL_ERROR;
 80013bc:	2301      	movs	r3, #1
 80013be:	e02a      	b.n	8001416 <HAL_ETH_Transmit_IT+0xb0>
  __ASM volatile ("dsb 0xF":::"memory");
 80013c0:	f3bf 8f4f 	dsb	sy
}
 80013c4:	bf00      	nop

    /* Ensure completion of descriptor preparation before transmission start */
    __DSB();

    /* Incr current tx desc index */
    INCR_TX_DESC_INDEX(heth->TxDescList.CurTxDesc, 1U);
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80013ca:	1c5a      	adds	r2, r3, #1
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	629a      	str	r2, [r3, #40]	@ 0x28
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80013d4:	2b03      	cmp	r3, #3
 80013d6:	d904      	bls.n	80013e2 <HAL_ETH_Transmit_IT+0x7c>
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80013dc:	1f1a      	subs	r2, r3, #4
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Start transmission */
    /* issue a poll command to Tx DMA by writing address of next immediate free descriptor */
    if (((heth->Instance)->DMASR & ETH_DMASR_TBUS) != (uint32_t)RESET)
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80013ea:	695b      	ldr	r3, [r3, #20]
 80013ec:	f003 0304 	and.w	r3, r3, #4
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	d00d      	beq.n	8001410 <HAL_ETH_Transmit_IT+0xaa>
    {
      /* Clear TBUS ETHERNET DMA flag */
      (heth->Instance)->DMASR = ETH_DMASR_TBUS;
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80013fc:	461a      	mov	r2, r3
 80013fe:	2304      	movs	r3, #4
 8001400:	6153      	str	r3, [r2, #20]
      /* Resume DMA transmission*/
      (heth->Instance)->DMATPDR = 0U;
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800140a:	461a      	mov	r2, r3
 800140c:	2300      	movs	r3, #0
 800140e:	6053      	str	r3, [r2, #4]
    }

    return HAL_OK;
 8001410:	2300      	movs	r3, #0
 8001412:	e000      	b.n	8001416 <HAL_ETH_Transmit_IT+0xb0>

  }
  else
  {
    return HAL_ERROR;
 8001414:	2301      	movs	r3, #1
  }
}
 8001416:	4618      	mov	r0, r3
 8001418:	3708      	adds	r7, #8
 800141a:	46bd      	mov	sp, r7
 800141c:	bd80      	pop	{r7, pc}

0800141e <HAL_ETH_ReadData>:
  *         the configuration information for ETHERNET module
  * @param  pAppBuff: Pointer to an application buffer to receive the packet.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadData(ETH_HandleTypeDef *heth, void **pAppBuff)
{
 800141e:	b580      	push	{r7, lr}
 8001420:	b088      	sub	sp, #32
 8001422:	af00      	add	r7, sp, #0
 8001424:	6078      	str	r0, [r7, #4]
 8001426:	6039      	str	r1, [r7, #0]
  uint32_t descidx;
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t desccnt = 0U;
 8001428:	2300      	movs	r3, #0
 800142a:	617b      	str	r3, [r7, #20]
  uint32_t desccntmax;
  uint32_t bufflength;
  uint8_t rxdataready = 0U;
 800142c:	2300      	movs	r3, #0
 800142e:	73fb      	strb	r3, [r7, #15]

  if (pAppBuff == NULL)
 8001430:	683b      	ldr	r3, [r7, #0]
 8001432:	2b00      	cmp	r3, #0
 8001434:	d109      	bne.n	800144a <HAL_ETH_ReadData+0x2c>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800143c:	f043 0201 	orr.w	r2, r3, #1
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    return HAL_ERROR;
 8001446:	2301      	movs	r3, #1
 8001448:	e0a8      	b.n	800159c <HAL_ETH_ReadData+0x17e>
  }

  if (heth->gState != HAL_ETH_STATE_STARTED)
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8001450:	2b23      	cmp	r3, #35	@ 0x23
 8001452:	d001      	beq.n	8001458 <HAL_ETH_ReadData+0x3a>
  {
    return HAL_ERROR;
 8001454:	2301      	movs	r3, #1
 8001456:	e0a1      	b.n	800159c <HAL_ETH_ReadData+0x17e>
  }

  descidx = heth->RxDescList.RxDescIdx;
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800145c:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	69fa      	ldr	r2, [r7, #28]
 8001462:	3212      	adds	r2, #18
 8001464:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001468:	61bb      	str	r3, [r7, #24]
  desccntmax = ETH_RX_DESC_CNT - heth->RxDescList.RxBuildDescCnt;
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800146e:	f1c3 0304 	rsb	r3, r3, #4
 8001472:	60bb      	str	r3, [r7, #8]

  /* Check if descriptor is not owned by DMA */
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 8001474:	e06a      	b.n	800154c <HAL_ETH_ReadData+0x12e>
         && (rxdataready == 0U))
  {
    if (READ_BIT(dmarxdesc->DESC0,  ETH_DMARXDESC_LS)  != (uint32_t)RESET)
 8001476:	69bb      	ldr	r3, [r7, #24]
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800147e:	2b00      	cmp	r3, #0
 8001480:	d007      	beq.n	8001492 <HAL_ETH_ReadData+0x74>
    {
      /* Get timestamp high */
      heth->RxDescList.TimeStamp.TimeStampHigh = dmarxdesc->DESC7;
 8001482:	69bb      	ldr	r3, [r7, #24]
 8001484:	69da      	ldr	r2, [r3, #28]
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	679a      	str	r2, [r3, #120]	@ 0x78
      /* Get timestamp low */
      heth->RxDescList.TimeStamp.TimeStampLow  = dmarxdesc->DESC6;
 800148a:	69bb      	ldr	r3, [r7, #24]
 800148c:	699a      	ldr	r2, [r3, #24]
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	675a      	str	r2, [r3, #116]	@ 0x74
    }
    if ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_FS) != (uint32_t)RESET) || (heth->RxDescList.pRxStart != NULL))
 8001492:	69bb      	ldr	r3, [r7, #24]
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800149a:	2b00      	cmp	r3, #0
 800149c:	d103      	bne.n	80014a6 <HAL_ETH_ReadData+0x88>
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d040      	beq.n	8001528 <HAL_ETH_ReadData+0x10a>
    {
      /* Check first descriptor */
      if (READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_FS) != (uint32_t)RESET)
 80014a6:	69bb      	ldr	r3, [r7, #24]
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d005      	beq.n	80014be <HAL_ETH_ReadData+0xa0>
      {
        heth->RxDescList.RxDescCnt = 0;
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	2200      	movs	r2, #0
 80014b6:	661a      	str	r2, [r3, #96]	@ 0x60
        heth->RxDescList.RxDataLength = 0;
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	2200      	movs	r2, #0
 80014bc:	665a      	str	r2, [r3, #100]	@ 0x64
      }

      /* Check if last descriptor */
      bufflength = heth->Init.RxBuffLen;
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	695b      	ldr	r3, [r3, #20]
 80014c2:	613b      	str	r3, [r7, #16]
      if (READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_LS) != (uint32_t)RESET)
 80014c4:	69bb      	ldr	r3, [r7, #24]
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	d00c      	beq.n	80014ea <HAL_ETH_ReadData+0xcc>
      {
        /* Get the Frame Length of the received packet: substruct 4 bytes of the CRC */
        bufflength = ((dmarxdesc->DESC0 & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT) - 4U;
 80014d0:	69bb      	ldr	r3, [r7, #24]
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	0c1b      	lsrs	r3, r3, #16
 80014d6:	f3c3 030d 	ubfx	r3, r3, #0, #14
 80014da:	3b04      	subs	r3, #4
 80014dc:	613b      	str	r3, [r7, #16]

        /* Save Last descriptor index */
        heth->RxDescList.pRxLastRxDesc = dmarxdesc->DESC0;
 80014de:	69bb      	ldr	r3, [r7, #24]
 80014e0:	681a      	ldr	r2, [r3, #0]
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	671a      	str	r2, [r3, #112]	@ 0x70

        /* Packet ready */
        rxdataready = 1;
 80014e6:	2301      	movs	r3, #1
 80014e8:	73fb      	strb	r3, [r7, #15]
      }

      /* Link data */
      WRITE_REG(dmarxdesc->BackupAddr0, dmarxdesc->DESC2);
 80014ea:	69bb      	ldr	r3, [r7, #24]
 80014ec:	689a      	ldr	r2, [r3, #8]
 80014ee:	69bb      	ldr	r3, [r7, #24]
 80014f0:	621a      	str	r2, [r3, #32]
      /*Call registered Link callback*/
      heth->rxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
                           (uint8_t *)dmarxdesc->BackupAddr0, bufflength);
#else
      /* Link callback */
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	f103 007c 	add.w	r0, r3, #124	@ 0x7c
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	f103 0180 	add.w	r1, r3, #128	@ 0x80
                             (uint8_t *)dmarxdesc->BackupAddr0, (uint16_t) bufflength);
 80014fe:	69bb      	ldr	r3, [r7, #24]
 8001500:	6a1b      	ldr	r3, [r3, #32]
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 8001502:	461a      	mov	r2, r3
 8001504:	693b      	ldr	r3, [r7, #16]
 8001506:	b29b      	uxth	r3, r3
 8001508:	f002 fea4 	bl	8004254 <HAL_ETH_RxLinkCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      heth->RxDescList.RxDescCnt++;
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001510:	1c5a      	adds	r2, r3, #1
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	661a      	str	r2, [r3, #96]	@ 0x60
      heth->RxDescList.RxDataLength += bufflength;
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 800151a:	693b      	ldr	r3, [r7, #16]
 800151c:	441a      	add	r2, r3
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Clear buffer pointer */
      dmarxdesc->BackupAddr0 = 0;
 8001522:	69bb      	ldr	r3, [r7, #24]
 8001524:	2200      	movs	r2, #0
 8001526:	621a      	str	r2, [r3, #32]
    }

    /* Increment current rx descriptor index */
    INCR_RX_DESC_INDEX(descidx, 1U);
 8001528:	69fb      	ldr	r3, [r7, #28]
 800152a:	3301      	adds	r3, #1
 800152c:	61fb      	str	r3, [r7, #28]
 800152e:	69fb      	ldr	r3, [r7, #28]
 8001530:	2b03      	cmp	r3, #3
 8001532:	d902      	bls.n	800153a <HAL_ETH_ReadData+0x11c>
 8001534:	69fb      	ldr	r3, [r7, #28]
 8001536:	3b04      	subs	r3, #4
 8001538:	61fb      	str	r3, [r7, #28]
    /* Get current descriptor address */
    dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	69fa      	ldr	r2, [r7, #28]
 800153e:	3212      	adds	r2, #18
 8001540:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001544:	61bb      	str	r3, [r7, #24]
    desccnt++;
 8001546:	697b      	ldr	r3, [r7, #20]
 8001548:	3301      	adds	r3, #1
 800154a:	617b      	str	r3, [r7, #20]
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 800154c:	69bb      	ldr	r3, [r7, #24]
 800154e:	681b      	ldr	r3, [r3, #0]
         && (rxdataready == 0U))
 8001550:	2b00      	cmp	r3, #0
 8001552:	db06      	blt.n	8001562 <HAL_ETH_ReadData+0x144>
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 8001554:	697a      	ldr	r2, [r7, #20]
 8001556:	68bb      	ldr	r3, [r7, #8]
 8001558:	429a      	cmp	r2, r3
 800155a:	d202      	bcs.n	8001562 <HAL_ETH_ReadData+0x144>
         && (rxdataready == 0U))
 800155c:	7bfb      	ldrb	r3, [r7, #15]
 800155e:	2b00      	cmp	r3, #0
 8001560:	d089      	beq.n	8001476 <HAL_ETH_ReadData+0x58>
  }

  heth->RxDescList.RxBuildDescCnt += desccnt;
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8001566:	697b      	ldr	r3, [r7, #20]
 8001568:	441a      	add	r2, r3
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	66da      	str	r2, [r3, #108]	@ 0x6c
  if ((heth->RxDescList.RxBuildDescCnt) != 0U)
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001572:	2b00      	cmp	r3, #0
 8001574:	d002      	beq.n	800157c <HAL_ETH_ReadData+0x15e>
  {
    /* Update Descriptors */
    ETH_UpdateDescriptor(heth);
 8001576:	6878      	ldr	r0, [r7, #4]
 8001578:	f000 f814 	bl	80015a4 <ETH_UpdateDescriptor>
  }

  heth->RxDescList.RxDescIdx = descidx;
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	69fa      	ldr	r2, [r7, #28]
 8001580:	65da      	str	r2, [r3, #92]	@ 0x5c

  if (rxdataready == 1U)
 8001582:	7bfb      	ldrb	r3, [r7, #15]
 8001584:	2b01      	cmp	r3, #1
 8001586:	d108      	bne.n	800159a <HAL_ETH_ReadData+0x17c>
  {
    /* Return received packet */
    *pAppBuff = heth->RxDescList.pRxStart;
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
 800158c:	683b      	ldr	r3, [r7, #0]
 800158e:	601a      	str	r2, [r3, #0]
    /* Reset first element */
    heth->RxDescList.pRxStart = NULL;
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	2200      	movs	r2, #0
 8001594:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8001596:	2300      	movs	r3, #0
 8001598:	e000      	b.n	800159c <HAL_ETH_ReadData+0x17e>
  }

  /* Packet not ready */
  return HAL_ERROR;
 800159a:	2301      	movs	r3, #1
}
 800159c:	4618      	mov	r0, r3
 800159e:	3720      	adds	r7, #32
 80015a0:	46bd      	mov	sp, r7
 80015a2:	bd80      	pop	{r7, pc}

080015a4 <ETH_UpdateDescriptor>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_UpdateDescriptor(ETH_HandleTypeDef *heth)
{
 80015a4:	b580      	push	{r7, lr}
 80015a6:	b088      	sub	sp, #32
 80015a8:	af00      	add	r7, sp, #0
 80015aa:	6078      	str	r0, [r7, #4]
  uint32_t tailidx;
  uint32_t descidx;
  uint32_t desccount;
  ETH_DMADescTypeDef *dmarxdesc;
  uint8_t *buff = NULL;
 80015ac:	2300      	movs	r3, #0
 80015ae:	60bb      	str	r3, [r7, #8]
  uint8_t allocStatus = 1U;
 80015b0:	2301      	movs	r3, #1
 80015b2:	74fb      	strb	r3, [r7, #19]

  descidx = heth->RxDescList.RxBuildDescIdx;
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80015b8:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	69fa      	ldr	r2, [r7, #28]
 80015be:	3212      	adds	r2, #18
 80015c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80015c4:	617b      	str	r3, [r7, #20]
  desccount = heth->RxDescList.RxBuildDescCnt;
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80015ca:	61bb      	str	r3, [r7, #24]

  while ((desccount > 0U) && (allocStatus != 0U))
 80015cc:	e03d      	b.n	800164a <ETH_UpdateDescriptor+0xa6>
  {
    /* Check if a buffer's attached the descriptor */
    if (READ_REG(dmarxdesc->BackupAddr0) == 0U)
 80015ce:	697b      	ldr	r3, [r7, #20]
 80015d0:	6a1b      	ldr	r3, [r3, #32]
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d112      	bne.n	80015fc <ETH_UpdateDescriptor+0x58>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Allocate callback*/
      heth->rxAllocateCallback(&buff);
#else
      /* Allocate callback */
      HAL_ETH_RxAllocateCallback(&buff);
 80015d6:	f107 0308 	add.w	r3, r7, #8
 80015da:	4618      	mov	r0, r3
 80015dc:	f002 fe0a 	bl	80041f4 <HAL_ETH_RxAllocateCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      if (buff == NULL)
 80015e0:	68bb      	ldr	r3, [r7, #8]
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d102      	bne.n	80015ec <ETH_UpdateDescriptor+0x48>
      {
        allocStatus = 0U;
 80015e6:	2300      	movs	r3, #0
 80015e8:	74fb      	strb	r3, [r7, #19]
 80015ea:	e007      	b.n	80015fc <ETH_UpdateDescriptor+0x58>
      }
      else
      {
        WRITE_REG(dmarxdesc->BackupAddr0, (uint32_t)buff);
 80015ec:	68bb      	ldr	r3, [r7, #8]
 80015ee:	461a      	mov	r2, r3
 80015f0:	697b      	ldr	r3, [r7, #20]
 80015f2:	621a      	str	r2, [r3, #32]
        WRITE_REG(dmarxdesc->DESC2, (uint32_t)buff);
 80015f4:	68bb      	ldr	r3, [r7, #8]
 80015f6:	461a      	mov	r2, r3
 80015f8:	697b      	ldr	r3, [r7, #20]
 80015fa:	609a      	str	r2, [r3, #8]
      }
    }

    if (allocStatus != 0U)
 80015fc:	7cfb      	ldrb	r3, [r7, #19]
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d023      	beq.n	800164a <ETH_UpdateDescriptor+0xa6>
    {
      if (heth->RxDescList.ItMode == 0U)
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001606:	2b00      	cmp	r3, #0
 8001608:	d103      	bne.n	8001612 <ETH_UpdateDescriptor+0x6e>
      {
        WRITE_REG(dmarxdesc->DESC1, ETH_DMARXDESC_DIC | ETH_RX_BUF_SIZE | ETH_DMARXDESC_RCH);
 800160a:	697b      	ldr	r3, [r7, #20]
 800160c:	4a24      	ldr	r2, [pc, #144]	@ (80016a0 <ETH_UpdateDescriptor+0xfc>)
 800160e:	605a      	str	r2, [r3, #4]
 8001610:	e003      	b.n	800161a <ETH_UpdateDescriptor+0x76>
      }
      else
      {
        WRITE_REG(dmarxdesc->DESC1, ETH_RX_BUF_SIZE | ETH_DMARXDESC_RCH);
 8001612:	697b      	ldr	r3, [r7, #20]
 8001614:	f44f 428c 	mov.w	r2, #17920	@ 0x4600
 8001618:	605a      	str	r2, [r3, #4]
      }

      SET_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN);
 800161a:	697b      	ldr	r3, [r7, #20]
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8001622:	697b      	ldr	r3, [r7, #20]
 8001624:	601a      	str	r2, [r3, #0]

      /* Increment current rx descriptor index */
      INCR_RX_DESC_INDEX(descidx, 1U);
 8001626:	69fb      	ldr	r3, [r7, #28]
 8001628:	3301      	adds	r3, #1
 800162a:	61fb      	str	r3, [r7, #28]
 800162c:	69fb      	ldr	r3, [r7, #28]
 800162e:	2b03      	cmp	r3, #3
 8001630:	d902      	bls.n	8001638 <ETH_UpdateDescriptor+0x94>
 8001632:	69fb      	ldr	r3, [r7, #28]
 8001634:	3b04      	subs	r3, #4
 8001636:	61fb      	str	r3, [r7, #28]
      /* Get current descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	69fa      	ldr	r2, [r7, #28]
 800163c:	3212      	adds	r2, #18
 800163e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001642:	617b      	str	r3, [r7, #20]
      desccount--;
 8001644:	69bb      	ldr	r3, [r7, #24]
 8001646:	3b01      	subs	r3, #1
 8001648:	61bb      	str	r3, [r7, #24]
  while ((desccount > 0U) && (allocStatus != 0U))
 800164a:	69bb      	ldr	r3, [r7, #24]
 800164c:	2b00      	cmp	r3, #0
 800164e:	d002      	beq.n	8001656 <ETH_UpdateDescriptor+0xb2>
 8001650:	7cfb      	ldrb	r3, [r7, #19]
 8001652:	2b00      	cmp	r3, #0
 8001654:	d1bb      	bne.n	80015ce <ETH_UpdateDescriptor+0x2a>
    }
  }

  if (heth->RxDescList.RxBuildDescCnt != desccount)
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800165a:	69ba      	ldr	r2, [r7, #24]
 800165c:	429a      	cmp	r2, r3
 800165e:	d01a      	beq.n	8001696 <ETH_UpdateDescriptor+0xf2>
  {
    /* Set the tail pointer index */
    tailidx = (descidx + 1U) % ETH_RX_DESC_CNT;
 8001660:	69fb      	ldr	r3, [r7, #28]
 8001662:	3301      	adds	r3, #1
 8001664:	f003 0303 	and.w	r3, r3, #3
 8001668:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("dmb 0xF":::"memory");
 800166a:	f3bf 8f5f 	dmb	sy
}
 800166e:	bf00      	nop

    /* DMB instruction to avoid race condition */
    __DMB();

    /* Set the Tail pointer address */
    WRITE_REG(heth->Instance->DMARPDR, ((uint32_t)(heth->Init.RxDesc + (tailidx))));
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	6919      	ldr	r1, [r3, #16]
 8001674:	68fa      	ldr	r2, [r7, #12]
 8001676:	4613      	mov	r3, r2
 8001678:	009b      	lsls	r3, r3, #2
 800167a:	4413      	add	r3, r2
 800167c:	00db      	lsls	r3, r3, #3
 800167e:	18ca      	adds	r2, r1, r3
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001688:	609a      	str	r2, [r3, #8]

    heth->RxDescList.RxBuildDescIdx = descidx;
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	69fa      	ldr	r2, [r7, #28]
 800168e:	669a      	str	r2, [r3, #104]	@ 0x68
    heth->RxDescList.RxBuildDescCnt = desccount;
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	69ba      	ldr	r2, [r7, #24]
 8001694:	66da      	str	r2, [r3, #108]	@ 0x6c
  }
}
 8001696:	bf00      	nop
 8001698:	3720      	adds	r7, #32
 800169a:	46bd      	mov	sp, r7
 800169c:	bd80      	pop	{r7, pc}
 800169e:	bf00      	nop
 80016a0:	80004600 	.word	0x80004600

080016a4 <HAL_ETH_ReleaseTxPacket>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReleaseTxPacket(ETH_HandleTypeDef *heth)
{
 80016a4:	b580      	push	{r7, lr}
 80016a6:	b086      	sub	sp, #24
 80016a8:	af00      	add	r7, sp, #0
 80016aa:	6078      	str	r0, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	3318      	adds	r3, #24
 80016b0:	60bb      	str	r3, [r7, #8]
  uint32_t numOfBuf =  dmatxdesclist->BuffersInUse;
 80016b2:	68bb      	ldr	r3, [r7, #8]
 80016b4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80016b6:	617b      	str	r3, [r7, #20]
  uint32_t idx =       dmatxdesclist->releaseIndex;
 80016b8:	68bb      	ldr	r3, [r7, #8]
 80016ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80016bc:	613b      	str	r3, [r7, #16]
  uint8_t pktTxStatus = 1U;
 80016be:	2301      	movs	r3, #1
 80016c0:	73fb      	strb	r3, [r7, #15]
#ifdef HAL_ETH_USE_PTP
  ETH_TimeStampTypeDef *timestamp = &heth->TxTimestamp;
#endif /* HAL_ETH_USE_PTP */

  /* Loop through buffers in use.  */
  while ((numOfBuf != 0U) && (pktTxStatus != 0U))
 80016c2:	e03f      	b.n	8001744 <HAL_ETH_ReleaseTxPacket+0xa0>
  {
    pktInUse = 1U;
 80016c4:	2301      	movs	r3, #1
 80016c6:	73bb      	strb	r3, [r7, #14]
    numOfBuf--;
 80016c8:	697b      	ldr	r3, [r7, #20]
 80016ca:	3b01      	subs	r3, #1
 80016cc:	617b      	str	r3, [r7, #20]
    /* If no packet, just examine the next packet.  */
    if (dmatxdesclist->PacketAddress[idx] == NULL)
 80016ce:	68ba      	ldr	r2, [r7, #8]
 80016d0:	693b      	ldr	r3, [r7, #16]
 80016d2:	3304      	adds	r3, #4
 80016d4:	009b      	lsls	r3, r3, #2
 80016d6:	4413      	add	r3, r2
 80016d8:	685b      	ldr	r3, [r3, #4]
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d106      	bne.n	80016ec <HAL_ETH_ReleaseTxPacket+0x48>
    {
      /* No packet in use, skip to next.  */
      idx = (idx + 1U) & (ETH_TX_DESC_CNT - 1U);
 80016de:	693b      	ldr	r3, [r7, #16]
 80016e0:	3301      	adds	r3, #1
 80016e2:	f003 0303 	and.w	r3, r3, #3
 80016e6:	613b      	str	r3, [r7, #16]
      pktInUse = 0U;
 80016e8:	2300      	movs	r3, #0
 80016ea:	73bb      	strb	r3, [r7, #14]
    }

    if (pktInUse != 0U)
 80016ec:	7bbb      	ldrb	r3, [r7, #14]
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d028      	beq.n	8001744 <HAL_ETH_ReleaseTxPacket+0xa0>
    {
      /* Determine if the packet has been transmitted.  */
      if ((heth->Init.TxDesc[idx].DESC0 & ETH_DMATXDESC_OWN) == 0U)
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	68d9      	ldr	r1, [r3, #12]
 80016f6:	693a      	ldr	r2, [r7, #16]
 80016f8:	4613      	mov	r3, r2
 80016fa:	009b      	lsls	r3, r3, #2
 80016fc:	4413      	add	r3, r2
 80016fe:	00db      	lsls	r3, r3, #3
 8001700:	440b      	add	r3, r1
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	2b00      	cmp	r3, #0
 8001706:	db1b      	blt.n	8001740 <HAL_ETH_ReleaseTxPacket+0x9c>
#ifdef HAL_ETH_USE_PTP
        /* Handle Ptp  */
        HAL_ETH_TxPtpCallback(dmatxdesclist->PacketAddress[idx], timestamp);
#endif  /* HAL_ETH_USE_PTP */
        /* Release the packet.  */
        HAL_ETH_TxFreeCallback(dmatxdesclist->PacketAddress[idx]);
 8001708:	68ba      	ldr	r2, [r7, #8]
 800170a:	693b      	ldr	r3, [r7, #16]
 800170c:	3304      	adds	r3, #4
 800170e:	009b      	lsls	r3, r3, #2
 8001710:	4413      	add	r3, r2
 8001712:	685b      	ldr	r3, [r3, #4]
 8001714:	4618      	mov	r0, r3
 8001716:	f002 fddd 	bl	80042d4 <HAL_ETH_TxFreeCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

        /* Clear the entry in the in-use array.  */
        dmatxdesclist->PacketAddress[idx] = NULL;
 800171a:	68ba      	ldr	r2, [r7, #8]
 800171c:	693b      	ldr	r3, [r7, #16]
 800171e:	3304      	adds	r3, #4
 8001720:	009b      	lsls	r3, r3, #2
 8001722:	4413      	add	r3, r2
 8001724:	2200      	movs	r2, #0
 8001726:	605a      	str	r2, [r3, #4]

        /* Update the transmit relesae index and number of buffers in use.  */
        idx = (idx + 1U) & (ETH_TX_DESC_CNT - 1U);
 8001728:	693b      	ldr	r3, [r7, #16]
 800172a:	3301      	adds	r3, #1
 800172c:	f003 0303 	and.w	r3, r3, #3
 8001730:	613b      	str	r3, [r7, #16]
        dmatxdesclist->BuffersInUse = numOfBuf;
 8001732:	68bb      	ldr	r3, [r7, #8]
 8001734:	697a      	ldr	r2, [r7, #20]
 8001736:	629a      	str	r2, [r3, #40]	@ 0x28
        dmatxdesclist->releaseIndex = idx;
 8001738:	68bb      	ldr	r3, [r7, #8]
 800173a:	693a      	ldr	r2, [r7, #16]
 800173c:	62da      	str	r2, [r3, #44]	@ 0x2c
 800173e:	e001      	b.n	8001744 <HAL_ETH_ReleaseTxPacket+0xa0>
      }
      else
      {
        /* Get out of the loop!  */
        pktTxStatus = 0U;
 8001740:	2300      	movs	r3, #0
 8001742:	73fb      	strb	r3, [r7, #15]
  while ((numOfBuf != 0U) && (pktTxStatus != 0U))
 8001744:	697b      	ldr	r3, [r7, #20]
 8001746:	2b00      	cmp	r3, #0
 8001748:	d002      	beq.n	8001750 <HAL_ETH_ReleaseTxPacket+0xac>
 800174a:	7bfb      	ldrb	r3, [r7, #15]
 800174c:	2b00      	cmp	r3, #0
 800174e:	d1b9      	bne.n	80016c4 <HAL_ETH_ReleaseTxPacket+0x20>
      }
    }
  }
  return HAL_OK;
 8001750:	2300      	movs	r3, #0
}
 8001752:	4618      	mov	r0, r3
 8001754:	3718      	adds	r7, #24
 8001756:	46bd      	mov	sp, r7
 8001758:	bd80      	pop	{r7, pc}
	...

0800175c <HAL_ETH_IRQHandler>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
void HAL_ETH_IRQHandler(ETH_HandleTypeDef *heth)
{
 800175c:	b580      	push	{r7, lr}
 800175e:	b082      	sub	sp, #8
 8001760:	af00      	add	r7, sp, #0
 8001762:	6078      	str	r0, [r7, #4]
  /* Packet received */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_RS))
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800176c:	695b      	ldr	r3, [r3, #20]
 800176e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001772:	2b40      	cmp	r3, #64	@ 0x40
 8001774:	d112      	bne.n	800179c <HAL_ETH_IRQHandler+0x40>
  {
    if (__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMAIER_RIE))
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800177e:	69db      	ldr	r3, [r3, #28]
 8001780:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001784:	2b40      	cmp	r3, #64	@ 0x40
 8001786:	d109      	bne.n	800179c <HAL_ETH_IRQHandler+0x40>
    {
      /* Clear the Eth DMA Rx IT pending bits */
      __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMASR_RS | ETH_DMASR_NIS);
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001790:	461a      	mov	r2, r3
 8001792:	4b50      	ldr	r3, [pc, #320]	@ (80018d4 <HAL_ETH_IRQHandler+0x178>)
 8001794:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Receive complete callback*/
      heth->RxCpltCallback(heth);
#else
      /* Receive complete callback */
      HAL_ETH_RxCpltCallback(heth);
 8001796:	6878      	ldr	r0, [r7, #4]
 8001798:	f002 f8f6 	bl	8003988 <HAL_ETH_RxCpltCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
    }
  }

  /* Packet transmitted */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_TS))
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80017a4:	695b      	ldr	r3, [r3, #20]
 80017a6:	f003 0301 	and.w	r3, r3, #1
 80017aa:	2b01      	cmp	r3, #1
 80017ac:	d113      	bne.n	80017d6 <HAL_ETH_IRQHandler+0x7a>
  {
    if (__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMAIER_TIE))
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80017b6:	69db      	ldr	r3, [r3, #28]
 80017b8:	f003 0301 	and.w	r3, r3, #1
 80017bc:	2b01      	cmp	r3, #1
 80017be:	d10a      	bne.n	80017d6 <HAL_ETH_IRQHandler+0x7a>
    {
      /* Clear the Eth DMA Tx IT pending bits */
      __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMASR_TS | ETH_DMASR_NIS);
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80017c8:	461a      	mov	r2, r3
 80017ca:	f04f 1301 	mov.w	r3, #65537	@ 0x10001
 80017ce:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Transmit complete callback*/
      heth->TxCpltCallback(heth);
#else
      /* Transfer complete callback */
      HAL_ETH_TxCpltCallback(heth);
 80017d0:	6878      	ldr	r0, [r7, #4]
 80017d2:	f002 f8e9 	bl	80039a8 <HAL_ETH_TxCpltCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
    }
  }

  /* ETH DMA Error */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_AIS))
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80017de:	695b      	ldr	r3, [r3, #20]
 80017e0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80017e4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80017e8:	d14c      	bne.n	8001884 <HAL_ETH_IRQHandler+0x128>
  {
    if (__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMAIER_AISE))
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80017f2:	69db      	ldr	r3, [r3, #28]
 80017f4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80017f8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80017fc:	d142      	bne.n	8001884 <HAL_ETH_IRQHandler+0x128>
    {
      heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001804:	f043 0208 	orr.w	r2, r3, #8
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      /* if fatal bus error occurred */
      if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_FBES))
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001816:	695b      	ldr	r3, [r3, #20]
 8001818:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800181c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001820:	d11a      	bne.n	8001858 <HAL_ETH_IRQHandler+0xfc>
      {
        /* Get DMA error code  */
        heth->DMAErrorCode = READ_BIT(heth->Instance->DMASR, (ETH_DMASR_FBES | ETH_DMASR_TPS | ETH_DMASR_RPS));
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800182a:	695a      	ldr	r2, [r3, #20]
 800182c:	4b2a      	ldr	r3, [pc, #168]	@ (80018d8 <HAL_ETH_IRQHandler+0x17c>)
 800182e:	4013      	ands	r3, r2
 8001830:	687a      	ldr	r2, [r7, #4]
 8001832:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c

        /* Disable all interrupts */
        __HAL_ETH_DMA_DISABLE_IT(heth, ETH_DMAIER_NISE | ETH_DMAIER_AISE);
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800183e:	69db      	ldr	r3, [r3, #28]
 8001840:	687a      	ldr	r2, [r7, #4]
 8001842:	6812      	ldr	r2, [r2, #0]
 8001844:	f423 33c0 	bic.w	r3, r3, #98304	@ 0x18000
 8001848:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800184c:	61d3      	str	r3, [r2, #28]

        /* Set HAL state to ERROR */
        heth->gState = HAL_ETH_STATE_ERROR;
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	22e0      	movs	r2, #224	@ 0xe0
 8001852:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
 8001856:	e012      	b.n	800187e <HAL_ETH_IRQHandler+0x122>
      }
      else
      {
        /* Get DMA error status  */
        heth->DMAErrorCode = READ_BIT(heth->Instance->DMASR, (ETH_DMASR_ETS | ETH_DMASR_RWTS |
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001860:	695a      	ldr	r2, [r3, #20]
 8001862:	f248 6380 	movw	r3, #34432	@ 0x8680
 8001866:	4013      	ands	r3, r2
 8001868:	687a      	ldr	r2, [r7, #4]
 800186a:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
                                                              ETH_DMASR_RBUS | ETH_DMASR_AIS));

        /* Clear the interrupt summary flag */
        __HAL_ETH_DMA_CLEAR_IT(heth, (ETH_DMASR_ETS | ETH_DMASR_RWTS |
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001876:	461a      	mov	r2, r3
 8001878:	f248 6380 	movw	r3, #34432	@ 0x8680
 800187c:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /* Call registered Error callback*/
      heth->ErrorCallback(heth);
#else
      /* Ethernet DMA Error callback */
      HAL_ETH_ErrorCallback(heth);
 800187e:	6878      	ldr	r0, [r7, #4]
 8001880:	f002 f8a2 	bl	80039c8 <HAL_ETH_ErrorCallback>
    }
  }


  /* ETH PMT IT */
  if (__HAL_ETH_MAC_GET_IT(heth, ETH_MAC_PMT_IT))
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800188a:	f003 0308 	and.w	r3, r3, #8
 800188e:	2b08      	cmp	r3, #8
 8001890:	d10e      	bne.n	80018b0 <HAL_ETH_IRQHandler+0x154>
  {
    /* Get MAC Wake-up source and clear the status register pending bit */
    heth->MACWakeUpEvent = READ_BIT(heth->Instance->MACPMTCSR, (ETH_MACPMTCSR_WFR | ETH_MACPMTCSR_MPR));
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001898:	f003 0260 	and.w	r2, r3, #96	@ 0x60
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered PMT callback*/
    heth->PMTCallback(heth);
#else
    /* Ethernet PMT callback */
    HAL_ETH_PMTCallback(heth);
 80018a2:	6878      	ldr	r0, [r7, #4]
 80018a4:	f000 f81c 	bl	80018e0 <HAL_ETH_PMTCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

    heth->MACWakeUpEvent = (uint32_t)(0x0U);
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	2200      	movs	r2, #0
 80018ac:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
  }


  /* check ETH WAKEUP exti flag */
  if (__HAL_ETH_WAKEUP_EXTI_GET_FLAG(ETH_WAKEUP_EXTI_LINE) != (uint32_t)RESET)
 80018b0:	4b0a      	ldr	r3, [pc, #40]	@ (80018dc <HAL_ETH_IRQHandler+0x180>)
 80018b2:	695b      	ldr	r3, [r3, #20]
 80018b4:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	d006      	beq.n	80018ca <HAL_ETH_IRQHandler+0x16e>
  {
    /* Clear ETH WAKEUP Exti pending bit */
    __HAL_ETH_WAKEUP_EXTI_CLEAR_FLAG(ETH_WAKEUP_EXTI_LINE);
 80018bc:	4b07      	ldr	r3, [pc, #28]	@ (80018dc <HAL_ETH_IRQHandler+0x180>)
 80018be:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 80018c2:	615a      	str	r2, [r3, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered WakeUp callback*/
    heth->WakeUpCallback(heth);
#else
    /* ETH WAKEUP callback */
    HAL_ETH_WakeUpCallback(heth);
 80018c4:	6878      	ldr	r0, [r7, #4]
 80018c6:	f000 f815 	bl	80018f4 <HAL_ETH_WakeUpCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
}
 80018ca:	bf00      	nop
 80018cc:	3708      	adds	r7, #8
 80018ce:	46bd      	mov	sp, r7
 80018d0:	bd80      	pop	{r7, pc}
 80018d2:	bf00      	nop
 80018d4:	00010040 	.word	0x00010040
 80018d8:	007e2000 	.word	0x007e2000
 80018dc:	40013c00 	.word	0x40013c00

080018e0 <HAL_ETH_PMTCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_PMTCallback(ETH_HandleTypeDef *heth)
{
 80018e0:	b480      	push	{r7}
 80018e2:	b083      	sub	sp, #12
 80018e4:	af00      	add	r7, sp, #0
 80018e6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_PMTCallback could be implemented in the user file
  */
}
 80018e8:	bf00      	nop
 80018ea:	370c      	adds	r7, #12
 80018ec:	46bd      	mov	sp, r7
 80018ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f2:	4770      	bx	lr

080018f4 <HAL_ETH_WakeUpCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_WakeUpCallback(ETH_HandleTypeDef *heth)
{
 80018f4:	b480      	push	{r7}
 80018f6:	b083      	sub	sp, #12
 80018f8:	af00      	add	r7, sp, #0
 80018fa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ETH_WakeUpCallback could be implemented in the user file
   */
}
 80018fc:	bf00      	nop
 80018fe:	370c      	adds	r7, #12
 8001900:	46bd      	mov	sp, r7
 8001902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001906:	4770      	bx	lr

08001908 <HAL_ETH_ReadPHYRegister>:
  * @param pRegValue: parameter to hold read value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                          uint32_t *pRegValue)
{
 8001908:	b580      	push	{r7, lr}
 800190a:	b086      	sub	sp, #24
 800190c:	af00      	add	r7, sp, #0
 800190e:	60f8      	str	r0, [r7, #12]
 8001910:	60b9      	str	r1, [r7, #8]
 8001912:	607a      	str	r2, [r7, #4]
 8001914:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg1;
  uint32_t tickstart;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8001916:	68fb      	ldr	r3, [r7, #12]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	691b      	ldr	r3, [r3, #16]
 800191c:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 800191e:	697b      	ldr	r3, [r7, #20]
 8001920:	f003 031c 	and.w	r3, r3, #28
 8001924:	617b      	str	r3, [r7, #20]

  /* Prepare the MII address register value */
  tmpreg1 |= ((PHYAddr << 11U) & ETH_MACMIIAR_PA);                        /* Set the PHY device address   */
 8001926:	68bb      	ldr	r3, [r7, #8]
 8001928:	02db      	lsls	r3, r3, #11
 800192a:	b29b      	uxth	r3, r3
 800192c:	697a      	ldr	r2, [r7, #20]
 800192e:	4313      	orrs	r3, r2
 8001930:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);                /* Set the PHY register address */
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	019b      	lsls	r3, r3, #6
 8001936:	f403 63f8 	and.w	r3, r3, #1984	@ 0x7c0
 800193a:	697a      	ldr	r2, [r7, #20]
 800193c:	4313      	orrs	r3, r2
 800193e:	617b      	str	r3, [r7, #20]
  tmpreg1 &= ~ETH_MACMIIAR_MW;                                            /* Set the read mode            */
 8001940:	697b      	ldr	r3, [r7, #20]
 8001942:	f023 0302 	bic.w	r3, r3, #2
 8001946:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                             /* Set the MII Busy bit         */
 8001948:	697b      	ldr	r3, [r7, #20]
 800194a:	f043 0301 	orr.w	r3, r3, #1
 800194e:	617b      	str	r3, [r7, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8001950:	68fb      	ldr	r3, [r7, #12]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	697a      	ldr	r2, [r7, #20]
 8001956:	611a      	str	r2, [r3, #16]


  tickstart = HAL_GetTick();
 8001958:	f7ff fa68 	bl	8000e2c <HAL_GetTick>
 800195c:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 800195e:	e00d      	b.n	800197c <HAL_ETH_ReadPHYRegister+0x74>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_READ_TO)
 8001960:	f7ff fa64 	bl	8000e2c <HAL_GetTick>
 8001964:	4602      	mov	r2, r0
 8001966:	693b      	ldr	r3, [r7, #16]
 8001968:	1ad3      	subs	r3, r2, r3
 800196a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800196e:	d301      	bcc.n	8001974 <HAL_ETH_ReadPHYRegister+0x6c>
    {
      return HAL_ERROR;
 8001970:	2301      	movs	r3, #1
 8001972:	e010      	b.n	8001996 <HAL_ETH_ReadPHYRegister+0x8e>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 8001974:	68fb      	ldr	r3, [r7, #12]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	691b      	ldr	r3, [r3, #16]
 800197a:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 800197c:	697b      	ldr	r3, [r7, #20]
 800197e:	f003 0301 	and.w	r3, r3, #1
 8001982:	2b00      	cmp	r3, #0
 8001984:	d1ec      	bne.n	8001960 <HAL_ETH_ReadPHYRegister+0x58>
  }

  /* Get MACMIIDR value */
  *pRegValue = (uint16_t)(heth->Instance->MACMIIDR);
 8001986:	68fb      	ldr	r3, [r7, #12]
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	695b      	ldr	r3, [r3, #20]
 800198c:	b29b      	uxth	r3, r3
 800198e:	461a      	mov	r2, r3
 8001990:	683b      	ldr	r3, [r7, #0]
 8001992:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8001994:	2300      	movs	r3, #0
}
 8001996:	4618      	mov	r0, r3
 8001998:	3718      	adds	r7, #24
 800199a:	46bd      	mov	sp, r7
 800199c:	bd80      	pop	{r7, pc}

0800199e <HAL_ETH_WritePHYRegister>:
  * @param  RegValue: the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(const ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                           uint32_t RegValue)
{
 800199e:	b580      	push	{r7, lr}
 80019a0:	b086      	sub	sp, #24
 80019a2:	af00      	add	r7, sp, #0
 80019a4:	60f8      	str	r0, [r7, #12]
 80019a6:	60b9      	str	r1, [r7, #8]
 80019a8:	607a      	str	r2, [r7, #4]
 80019aa:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg1;
  uint32_t tickstart;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 80019ac:	68fb      	ldr	r3, [r7, #12]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	691b      	ldr	r3, [r3, #16]
 80019b2:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 80019b4:	697b      	ldr	r3, [r7, #20]
 80019b6:	f003 031c 	and.w	r3, r3, #28
 80019ba:	617b      	str	r3, [r7, #20]

  /* Prepare the MII register address value */
  tmpreg1 |= ((PHYAddr << 11U) & ETH_MACMIIAR_PA);                      /* Set the PHY device address */
 80019bc:	68bb      	ldr	r3, [r7, #8]
 80019be:	02db      	lsls	r3, r3, #11
 80019c0:	b29b      	uxth	r3, r3
 80019c2:	697a      	ldr	r2, [r7, #20]
 80019c4:	4313      	orrs	r3, r2
 80019c6:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);              /* Set the PHY register address */
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	019b      	lsls	r3, r3, #6
 80019cc:	f403 63f8 	and.w	r3, r3, #1984	@ 0x7c0
 80019d0:	697a      	ldr	r2, [r7, #20]
 80019d2:	4313      	orrs	r3, r2
 80019d4:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MW;                                           /* Set the write mode */
 80019d6:	697b      	ldr	r3, [r7, #20]
 80019d8:	f043 0302 	orr.w	r3, r3, #2
 80019dc:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                           /* Set the MII Busy bit */
 80019de:	697b      	ldr	r3, [r7, #20]
 80019e0:	f043 0301 	orr.w	r3, r3, #1
 80019e4:	617b      	str	r3, [r7, #20]

  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 80019e6:	683b      	ldr	r3, [r7, #0]
 80019e8:	b29a      	uxth	r2, r3
 80019ea:	68fb      	ldr	r3, [r7, #12]
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	615a      	str	r2, [r3, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 80019f0:	68fb      	ldr	r3, [r7, #12]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	697a      	ldr	r2, [r7, #20]
 80019f6:	611a      	str	r2, [r3, #16]

  /* Get tick */
  tickstart = HAL_GetTick();
 80019f8:	f7ff fa18 	bl	8000e2c <HAL_GetTick>
 80019fc:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 80019fe:	e00d      	b.n	8001a1c <HAL_ETH_WritePHYRegister+0x7e>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_WRITE_TO)
 8001a00:	f7ff fa14 	bl	8000e2c <HAL_GetTick>
 8001a04:	4602      	mov	r2, r0
 8001a06:	693b      	ldr	r3, [r7, #16]
 8001a08:	1ad3      	subs	r3, r2, r3
 8001a0a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001a0e:	d301      	bcc.n	8001a14 <HAL_ETH_WritePHYRegister+0x76>
    {
      return HAL_ERROR;
 8001a10:	2301      	movs	r3, #1
 8001a12:	e009      	b.n	8001a28 <HAL_ETH_WritePHYRegister+0x8a>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 8001a14:	68fb      	ldr	r3, [r7, #12]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	691b      	ldr	r3, [r3, #16]
 8001a1a:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001a1c:	697b      	ldr	r3, [r7, #20]
 8001a1e:	f003 0301 	and.w	r3, r3, #1
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d1ec      	bne.n	8001a00 <HAL_ETH_WritePHYRegister+0x62>
  }

  return HAL_OK;
 8001a26:	2300      	movs	r3, #0
}
 8001a28:	4618      	mov	r0, r3
 8001a2a:	3718      	adds	r7, #24
 8001a2c:	46bd      	mov	sp, r7
 8001a2e:	bd80      	pop	{r7, pc}

08001a30 <HAL_ETH_GetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that will hold
  *         the configuration of the MAC.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_ETH_GetMACConfig(ETH_HandleTypeDef *heth, ETH_MACConfigTypeDef *macconf)
{
 8001a30:	b480      	push	{r7}
 8001a32:	b083      	sub	sp, #12
 8001a34:	af00      	add	r7, sp, #0
 8001a36:	6078      	str	r0, [r7, #4]
 8001a38:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 8001a3a:	683b      	ldr	r3, [r7, #0]
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d101      	bne.n	8001a44 <HAL_ETH_GetMACConfig+0x14>
  {
    return HAL_ERROR;
 8001a40:	2301      	movs	r3, #1
 8001a42:	e0d9      	b.n	8001bf8 <HAL_ETH_GetMACConfig+0x1c8>
  }

  /* Get MAC parameters */
  macconf->DeferralCheck = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DC) >> 4) > 0U) ? ENABLE : DISABLE;
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	f003 0310 	and.w	r3, r3, #16
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	bf14      	ite	ne
 8001a52:	2301      	movne	r3, #1
 8001a54:	2300      	moveq	r3, #0
 8001a56:	b2db      	uxtb	r3, r3
 8001a58:	461a      	mov	r2, r3
 8001a5a:	683b      	ldr	r3, [r7, #0]
 8001a5c:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
  macconf->BackOffLimit = READ_BIT(heth->Instance->MACCR, ETH_MACCR_BL);
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	f003 0260 	and.w	r2, r3, #96	@ 0x60
 8001a6a:	683b      	ldr	r3, [r7, #0]
 8001a6c:	625a      	str	r2, [r3, #36]	@ 0x24
  macconf->RetryTransmission = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_RD) >> 9) == 0U) ? ENABLE : DISABLE;
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	bf0c      	ite	eq
 8001a7c:	2301      	moveq	r3, #1
 8001a7e:	2300      	movne	r3, #0
 8001a80:	b2db      	uxtb	r3, r3
 8001a82:	461a      	mov	r2, r3
 8001a84:	683b      	ldr	r3, [r7, #0]
 8001a86:	f883 2020 	strb.w	r2, [r3, #32]
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSD) >> 16) > 0U)
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
                                        ? ENABLE : DISABLE;
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	bf14      	ite	ne
 8001a98:	2301      	movne	r3, #1
 8001a9a:	2300      	moveq	r3, #0
 8001a9c:	b2db      	uxtb	r3, r3
 8001a9e:	461a      	mov	r2, r3
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSD) >> 16) > 0U)
 8001aa0:	683b      	ldr	r3, [r7, #0]
 8001aa2:	77da      	strb	r2, [r3, #31]
  macconf->ReceiveOwn = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_ROD) >> 13) == 0U) ? ENABLE : DISABLE;
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	bf0c      	ite	eq
 8001ab2:	2301      	moveq	r3, #1
 8001ab4:	2300      	movne	r3, #0
 8001ab6:	b2db      	uxtb	r3, r3
 8001ab8:	461a      	mov	r2, r3
 8001aba:	683b      	ldr	r3, [r7, #0]
 8001abc:	779a      	strb	r2, [r3, #30]
  macconf->LoopbackMode = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_LM) >> 12) > 0U) ? ENABLE : DISABLE;
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	bf14      	ite	ne
 8001acc:	2301      	movne	r3, #1
 8001ace:	2300      	moveq	r3, #0
 8001ad0:	b2db      	uxtb	r3, r3
 8001ad2:	461a      	mov	r2, r3
 8001ad4:	683b      	ldr	r3, [r7, #0]
 8001ad6:	771a      	strb	r2, [r3, #28]
  macconf->DuplexMode = READ_BIT(heth->Instance->MACCR, ETH_MACCR_DM);
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	f403 6200 	and.w	r2, r3, #2048	@ 0x800
 8001ae2:	683b      	ldr	r3, [r7, #0]
 8001ae4:	619a      	str	r2, [r3, #24]
  macconf->Speed = READ_BIT(heth->Instance->MACCR, ETH_MACCR_FES);
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	f403 4280 	and.w	r2, r3, #16384	@ 0x4000
 8001af0:	683b      	ldr	r3, [r7, #0]
 8001af2:	615a      	str	r2, [r3, #20]
  macconf->Jabber = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JD) >> 22) == 0U) ? ENABLE : DISABLE;
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	bf0c      	ite	eq
 8001b02:	2301      	moveq	r3, #1
 8001b04:	2300      	movne	r3, #0
 8001b06:	b2db      	uxtb	r3, r3
 8001b08:	461a      	mov	r2, r3
 8001b0a:	683b      	ldr	r3, [r7, #0]
 8001b0c:	745a      	strb	r2, [r3, #17]
  macconf->Watchdog = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_WD) >> 23) == 0U) ? ENABLE : DISABLE;
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	bf0c      	ite	eq
 8001b1c:	2301      	moveq	r3, #1
 8001b1e:	2300      	movne	r3, #0
 8001b20:	b2db      	uxtb	r3, r3
 8001b22:	461a      	mov	r2, r3
 8001b24:	683b      	ldr	r3, [r7, #0]
 8001b26:	741a      	strb	r2, [r3, #16]
  macconf->AutomaticPadCRCStrip = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_APCS) >> 7) > 0U) ? ENABLE : DISABLE;
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	bf14      	ite	ne
 8001b36:	2301      	movne	r3, #1
 8001b38:	2300      	moveq	r3, #0
 8001b3a:	b2db      	uxtb	r3, r3
 8001b3c:	461a      	mov	r2, r3
 8001b3e:	683b      	ldr	r3, [r7, #0]
 8001b40:	73da      	strb	r2, [r3, #15]
  macconf->InterPacketGapVal = READ_BIT(heth->Instance->MACCR, ETH_MACCR_IFG);
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	f403 2260 	and.w	r2, r3, #917504	@ 0xe0000
 8001b4c:	683b      	ldr	r3, [r7, #0]
 8001b4e:	609a      	str	r2, [r3, #8]
  macconf->ChecksumOffload = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPCO) >> 10U) > 0U) ? ENABLE : DISABLE;
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	bf14      	ite	ne
 8001b5e:	2301      	movne	r3, #1
 8001b60:	2300      	moveq	r3, #0
 8001b62:	b2db      	uxtb	r3, r3
 8001b64:	461a      	mov	r2, r3
 8001b66:	683b      	ldr	r3, [r7, #0]
 8001b68:	711a      	strb	r2, [r3, #4]


  macconf->TransmitFlowControl = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_TFCE) >> 1) > 0U) ? ENABLE : DISABLE;
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	699b      	ldr	r3, [r3, #24]
 8001b70:	f003 0302 	and.w	r3, r3, #2
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	bf14      	ite	ne
 8001b78:	2301      	movne	r3, #1
 8001b7a:	2300      	moveq	r3, #0
 8001b7c:	b2db      	uxtb	r3, r3
 8001b7e:	461a      	mov	r2, r3
 8001b80:	683b      	ldr	r3, [r7, #0]
 8001b82:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  macconf->ZeroQuantaPause = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_ZQPD) >> 7) == 0U) ? ENABLE : DISABLE;
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	699b      	ldr	r3, [r3, #24]
 8001b8c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	bf0c      	ite	eq
 8001b94:	2301      	moveq	r3, #1
 8001b96:	2300      	movne	r3, #0
 8001b98:	b2db      	uxtb	r3, r3
 8001b9a:	461a      	mov	r2, r3
 8001b9c:	683b      	ldr	r3, [r7, #0]
 8001b9e:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
  macconf->PauseLowThreshold = READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_PLT);
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	699b      	ldr	r3, [r3, #24]
 8001ba8:	f003 0230 	and.w	r2, r3, #48	@ 0x30
 8001bac:	683b      	ldr	r3, [r7, #0]
 8001bae:	651a      	str	r2, [r3, #80]	@ 0x50
  macconf->PauseTime = (READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_PT) >> 16);
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	699b      	ldr	r3, [r3, #24]
 8001bb6:	0c1b      	lsrs	r3, r3, #16
 8001bb8:	b29a      	uxth	r2, r3
 8001bba:	683b      	ldr	r3, [r7, #0]
 8001bbc:	649a      	str	r2, [r3, #72]	@ 0x48
  macconf->ReceiveFlowControl = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_RFCE) >> 2U) > 0U) ? ENABLE : DISABLE;
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	699b      	ldr	r3, [r3, #24]
 8001bc4:	f003 0304 	and.w	r3, r3, #4
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	bf14      	ite	ne
 8001bcc:	2301      	movne	r3, #1
 8001bce:	2300      	moveq	r3, #0
 8001bd0:	b2db      	uxtb	r3, r3
 8001bd2:	461a      	mov	r2, r3
 8001bd4:	683b      	ldr	r3, [r7, #0]
 8001bd6:	f883 2056 	strb.w	r2, [r3, #86]	@ 0x56
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_UPFD) >> 3U) > 0U)
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	699b      	ldr	r3, [r3, #24]
 8001be0:	f003 0308 	and.w	r3, r3, #8
                                      ? ENABLE : DISABLE;
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	bf14      	ite	ne
 8001be8:	2301      	movne	r3, #1
 8001bea:	2300      	moveq	r3, #0
 8001bec:	b2db      	uxtb	r3, r3
 8001bee:	461a      	mov	r2, r3
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_UPFD) >> 3U) > 0U)
 8001bf0:	683b      	ldr	r3, [r7, #0]
 8001bf2:	f883 2055 	strb.w	r2, [r3, #85]	@ 0x55

  return HAL_OK;
 8001bf6:	2300      	movs	r3, #0
}
 8001bf8:	4618      	mov	r0, r3
 8001bfa:	370c      	adds	r7, #12
 8001bfc:	46bd      	mov	sp, r7
 8001bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c02:	4770      	bx	lr

08001c04 <HAL_ETH_SetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that contains
  *         the configuration of the MAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8001c04:	b580      	push	{r7, lr}
 8001c06:	b082      	sub	sp, #8
 8001c08:	af00      	add	r7, sp, #0
 8001c0a:	6078      	str	r0, [r7, #4]
 8001c0c:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 8001c0e:	683b      	ldr	r3, [r7, #0]
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d101      	bne.n	8001c18 <HAL_ETH_SetMACConfig+0x14>
  {
    return HAL_ERROR;
 8001c14:	2301      	movs	r3, #1
 8001c16:	e00b      	b.n	8001c30 <HAL_ETH_SetMACConfig+0x2c>
  }

  if (heth->gState == HAL_ETH_STATE_READY)
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8001c1e:	2b10      	cmp	r3, #16
 8001c20:	d105      	bne.n	8001c2e <HAL_ETH_SetMACConfig+0x2a>
  {
    ETH_SetMACConfig(heth, macconf);
 8001c22:	6839      	ldr	r1, [r7, #0]
 8001c24:	6878      	ldr	r0, [r7, #4]
 8001c26:	f000 f88f 	bl	8001d48 <ETH_SetMACConfig>

    return HAL_OK;
 8001c2a:	2300      	movs	r3, #0
 8001c2c:	e000      	b.n	8001c30 <HAL_ETH_SetMACConfig+0x2c>
  }
  else
  {
    return HAL_ERROR;
 8001c2e:	2301      	movs	r3, #1
  }
}
 8001c30:	4618      	mov	r0, r3
 8001c32:	3708      	adds	r7, #8
 8001c34:	46bd      	mov	sp, r7
 8001c36:	bd80      	pop	{r7, pc}

08001c38 <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 8001c38:	b580      	push	{r7, lr}
 8001c3a:	b084      	sub	sp, #16
 8001c3c:	af00      	add	r7, sp, #0
 8001c3e:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg = (heth->Instance)->MACMIIAR;
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	691b      	ldr	r3, [r3, #16]
 8001c46:	60fb      	str	r3, [r7, #12]
  /* Clear CSR Clock Range CR[2:0] bits */
  tmpreg &= ETH_MACMIIAR_CR_MASK;
 8001c48:	68fb      	ldr	r3, [r7, #12]
 8001c4a:	f023 031c 	bic.w	r3, r3, #28
 8001c4e:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8001c50:	f001 fa5a 	bl	8003108 <HAL_RCC_GetHCLKFreq>
 8001c54:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if ((hclk >= 20000000U) && (hclk < 35000000U))
 8001c56:	68bb      	ldr	r3, [r7, #8]
 8001c58:	4a1d      	ldr	r2, [pc, #116]	@ (8001cd0 <HAL_ETH_SetMDIOClockRange+0x98>)
 8001c5a:	4293      	cmp	r3, r2
 8001c5c:	d908      	bls.n	8001c70 <HAL_ETH_SetMDIOClockRange+0x38>
 8001c5e:	68bb      	ldr	r3, [r7, #8]
 8001c60:	4a1c      	ldr	r2, [pc, #112]	@ (8001cd4 <HAL_ETH_SetMDIOClockRange+0x9c>)
 8001c62:	4293      	cmp	r3, r2
 8001c64:	d804      	bhi.n	8001c70 <HAL_ETH_SetMDIOClockRange+0x38>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 8001c66:	68fb      	ldr	r3, [r7, #12]
 8001c68:	f043 0308 	orr.w	r3, r3, #8
 8001c6c:	60fb      	str	r3, [r7, #12]
 8001c6e:	e027      	b.n	8001cc0 <HAL_ETH_SetMDIOClockRange+0x88>
  }
  else if ((hclk >= 35000000U) && (hclk < 60000000U))
 8001c70:	68bb      	ldr	r3, [r7, #8]
 8001c72:	4a18      	ldr	r2, [pc, #96]	@ (8001cd4 <HAL_ETH_SetMDIOClockRange+0x9c>)
 8001c74:	4293      	cmp	r3, r2
 8001c76:	d908      	bls.n	8001c8a <HAL_ETH_SetMDIOClockRange+0x52>
 8001c78:	68bb      	ldr	r3, [r7, #8]
 8001c7a:	4a17      	ldr	r2, [pc, #92]	@ (8001cd8 <HAL_ETH_SetMDIOClockRange+0xa0>)
 8001c7c:	4293      	cmp	r3, r2
 8001c7e:	d204      	bcs.n	8001c8a <HAL_ETH_SetMDIOClockRange+0x52>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 8001c80:	68fb      	ldr	r3, [r7, #12]
 8001c82:	f043 030c 	orr.w	r3, r3, #12
 8001c86:	60fb      	str	r3, [r7, #12]
 8001c88:	e01a      	b.n	8001cc0 <HAL_ETH_SetMDIOClockRange+0x88>
  }
  else if ((hclk >= 60000000U) && (hclk < 100000000U))
 8001c8a:	68bb      	ldr	r3, [r7, #8]
 8001c8c:	4a12      	ldr	r2, [pc, #72]	@ (8001cd8 <HAL_ETH_SetMDIOClockRange+0xa0>)
 8001c8e:	4293      	cmp	r3, r2
 8001c90:	d303      	bcc.n	8001c9a <HAL_ETH_SetMDIOClockRange+0x62>
 8001c92:	68bb      	ldr	r3, [r7, #8]
 8001c94:	4a11      	ldr	r2, [pc, #68]	@ (8001cdc <HAL_ETH_SetMDIOClockRange+0xa4>)
 8001c96:	4293      	cmp	r3, r2
 8001c98:	d911      	bls.n	8001cbe <HAL_ETH_SetMDIOClockRange+0x86>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }
  else if ((hclk >= 100000000U) && (hclk < 150000000U))
 8001c9a:	68bb      	ldr	r3, [r7, #8]
 8001c9c:	4a0f      	ldr	r2, [pc, #60]	@ (8001cdc <HAL_ETH_SetMDIOClockRange+0xa4>)
 8001c9e:	4293      	cmp	r3, r2
 8001ca0:	d908      	bls.n	8001cb4 <HAL_ETH_SetMDIOClockRange+0x7c>
 8001ca2:	68bb      	ldr	r3, [r7, #8]
 8001ca4:	4a0e      	ldr	r2, [pc, #56]	@ (8001ce0 <HAL_ETH_SetMDIOClockRange+0xa8>)
 8001ca6:	4293      	cmp	r3, r2
 8001ca8:	d804      	bhi.n	8001cb4 <HAL_ETH_SetMDIOClockRange+0x7c>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 8001caa:	68fb      	ldr	r3, [r7, #12]
 8001cac:	f043 0304 	orr.w	r3, r3, #4
 8001cb0:	60fb      	str	r3, [r7, #12]
 8001cb2:	e005      	b.n	8001cc0 <HAL_ETH_SetMDIOClockRange+0x88>
  }
  else /* ((hclk >= 150000000)&&(hclk <= 183000000))*/
  {
    /* CSR Clock Range between 150-183 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div102;
 8001cb4:	68fb      	ldr	r3, [r7, #12]
 8001cb6:	f043 0310 	orr.w	r3, r3, #16
 8001cba:	60fb      	str	r3, [r7, #12]
 8001cbc:	e000      	b.n	8001cc0 <HAL_ETH_SetMDIOClockRange+0x88>
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
 8001cbe:	bf00      	nop
  }

  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tmpreg;
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	68fa      	ldr	r2, [r7, #12]
 8001cc6:	611a      	str	r2, [r3, #16]
}
 8001cc8:	bf00      	nop
 8001cca:	3710      	adds	r7, #16
 8001ccc:	46bd      	mov	sp, r7
 8001cce:	bd80      	pop	{r7, pc}
 8001cd0:	01312cff 	.word	0x01312cff
 8001cd4:	02160ebf 	.word	0x02160ebf
 8001cd8:	03938700 	.word	0x03938700
 8001cdc:	05f5e0ff 	.word	0x05f5e0ff
 8001ce0:	08f0d17f 	.word	0x08f0d17f

08001ce4 <HAL_ETH_GetDMAError>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval ETH DMA Error Code
  */
uint32_t HAL_ETH_GetDMAError(const ETH_HandleTypeDef *heth)
{
 8001ce4:	b480      	push	{r7}
 8001ce6:	b083      	sub	sp, #12
 8001ce8:	af00      	add	r7, sp, #0
 8001cea:	6078      	str	r0, [r7, #4]
  return heth->DMAErrorCode;
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
}
 8001cf2:	4618      	mov	r0, r3
 8001cf4:	370c      	adds	r7, #12
 8001cf6:	46bd      	mov	sp, r7
 8001cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cfc:	4770      	bx	lr

08001cfe <ETH_FlushTransmitFIFO>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)
{
 8001cfe:	b580      	push	{r7, lr}
 8001d00:	b084      	sub	sp, #16
 8001d02:	af00      	add	r7, sp, #0
 8001d04:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 8001d06:	2300      	movs	r3, #0
 8001d08:	60fb      	str	r3, [r7, #12]

  /* Set the Flush Transmit FIFO bit */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001d12:	699b      	ldr	r3, [r3, #24]
 8001d14:	687a      	ldr	r2, [r7, #4]
 8001d16:	6812      	ldr	r2, [r2, #0]
 8001d18:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8001d1c:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001d20:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->DMAOMR;
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001d2a:	699b      	ldr	r3, [r3, #24]
 8001d2c:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001d2e:	2001      	movs	r0, #1
 8001d30:	f7ff f888 	bl	8000e44 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg;
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681a      	ldr	r2, [r3, #0]
 8001d38:	68fb      	ldr	r3, [r7, #12]
 8001d3a:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001d3e:	6193      	str	r3, [r2, #24]
}
 8001d40:	bf00      	nop
 8001d42:	3710      	adds	r7, #16
 8001d44:	46bd      	mov	sp, r7
 8001d46:	bd80      	pop	{r7, pc}

08001d48 <ETH_SetMACConfig>:

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8001d48:	b580      	push	{r7, lr}
 8001d4a:	b084      	sub	sp, #16
 8001d4c:	af00      	add	r7, sp, #0
 8001d4e:	6078      	str	r0, [r7, #4]
 8001d50:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	60fb      	str	r3, [r7, #12]
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8001d5a:	68fa      	ldr	r2, [r7, #12]
 8001d5c:	4b51      	ldr	r3, [pc, #324]	@ (8001ea4 <ETH_SetMACConfig+0x15c>)
 8001d5e:	4013      	ands	r3, r2
 8001d60:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8001d62:	683b      	ldr	r3, [r7, #0]
 8001d64:	7c1b      	ldrb	r3, [r3, #16]
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d102      	bne.n	8001d70 <ETH_SetMACConfig+0x28>
 8001d6a:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8001d6e:	e000      	b.n	8001d72 <ETH_SetMACConfig+0x2a>
 8001d70:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8001d72:	683b      	ldr	r3, [r7, #0]
 8001d74:	7c5b      	ldrb	r3, [r3, #17]
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d102      	bne.n	8001d80 <ETH_SetMACConfig+0x38>
 8001d7a:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8001d7e:	e000      	b.n	8001d82 <ETH_SetMACConfig+0x3a>
 8001d80:	2300      	movs	r3, #0
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8001d82:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 8001d84:	683b      	ldr	r3, [r7, #0]
 8001d86:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8001d88:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8001d8a:	683b      	ldr	r3, [r7, #0]
 8001d8c:	7fdb      	ldrb	r3, [r3, #31]
 8001d8e:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 8001d90:	431a      	orrs	r2, r3
                        macconf->Speed |
 8001d92:	683b      	ldr	r3, [r7, #0]
 8001d94:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8001d96:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8001d98:	683a      	ldr	r2, [r7, #0]
 8001d9a:	7f92      	ldrb	r2, [r2, #30]
 8001d9c:	2a00      	cmp	r2, #0
 8001d9e:	d102      	bne.n	8001da6 <ETH_SetMACConfig+0x5e>
 8001da0:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001da4:	e000      	b.n	8001da8 <ETH_SetMACConfig+0x60>
 8001da6:	2200      	movs	r2, #0
                        macconf->Speed |
 8001da8:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8001daa:	683b      	ldr	r3, [r7, #0]
 8001dac:	7f1b      	ldrb	r3, [r3, #28]
 8001dae:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8001db0:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 8001db2:	683b      	ldr	r3, [r7, #0]
 8001db4:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8001db6:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8001db8:	683b      	ldr	r3, [r7, #0]
 8001dba:	791b      	ldrb	r3, [r3, #4]
 8001dbc:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 8001dbe:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8001dc0:	683a      	ldr	r2, [r7, #0]
 8001dc2:	f892 2020 	ldrb.w	r2, [r2, #32]
 8001dc6:	2a00      	cmp	r2, #0
 8001dc8:	d102      	bne.n	8001dd0 <ETH_SetMACConfig+0x88>
 8001dca:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001dce:	e000      	b.n	8001dd2 <ETH_SetMACConfig+0x8a>
 8001dd0:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8001dd2:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8001dd4:	683b      	ldr	r3, [r7, #0]
 8001dd6:	7bdb      	ldrb	r3, [r3, #15]
 8001dd8:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8001dda:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 8001ddc:	683b      	ldr	r3, [r7, #0]
 8001dde:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8001de0:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 8001de2:	683b      	ldr	r3, [r7, #0]
 8001de4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8001de8:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8001dea:	4313      	orrs	r3, r2
 8001dec:	68fa      	ldr	r2, [r7, #12]
 8001dee:	4313      	orrs	r3, r2
 8001df0:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	68fa      	ldr	r2, [r7, #12]
 8001df8:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001e02:	2001      	movs	r0, #1
 8001e04:	f7ff f81e 	bl	8000e44 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	68fa      	ldr	r2, [r7, #12]
 8001e0e:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	699b      	ldr	r3, [r3, #24]
 8001e16:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8001e18:	68fa      	ldr	r2, [r7, #12]
 8001e1a:	f64f 7341 	movw	r3, #65345	@ 0xff41
 8001e1e:	4013      	ands	r3, r2
 8001e20:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8001e22:	683b      	ldr	r3, [r7, #0]
 8001e24:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001e26:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8001e28:	683a      	ldr	r2, [r7, #0]
 8001e2a:	f892 204c 	ldrb.w	r2, [r2, #76]	@ 0x4c
 8001e2e:	2a00      	cmp	r2, #0
 8001e30:	d101      	bne.n	8001e36 <ETH_SetMACConfig+0xee>
 8001e32:	2280      	movs	r2, #128	@ 0x80
 8001e34:	e000      	b.n	8001e38 <ETH_SetMACConfig+0xf0>
 8001e36:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8001e38:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 8001e3a:	683b      	ldr	r3, [r7, #0]
 8001e3c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8001e3e:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8001e40:	683a      	ldr	r2, [r7, #0]
 8001e42:	f892 2055 	ldrb.w	r2, [r2, #85]	@ 0x55
 8001e46:	2a01      	cmp	r2, #1
 8001e48:	d101      	bne.n	8001e4e <ETH_SetMACConfig+0x106>
 8001e4a:	2208      	movs	r2, #8
 8001e4c:	e000      	b.n	8001e50 <ETH_SetMACConfig+0x108>
 8001e4e:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 8001e50:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 8001e52:	683a      	ldr	r2, [r7, #0]
 8001e54:	f892 2056 	ldrb.w	r2, [r2, #86]	@ 0x56
 8001e58:	2a01      	cmp	r2, #1
 8001e5a:	d101      	bne.n	8001e60 <ETH_SetMACConfig+0x118>
 8001e5c:	2204      	movs	r2, #4
 8001e5e:	e000      	b.n	8001e62 <ETH_SetMACConfig+0x11a>
 8001e60:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8001e62:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 8001e64:	683a      	ldr	r2, [r7, #0]
 8001e66:	f892 2054 	ldrb.w	r2, [r2, #84]	@ 0x54
 8001e6a:	2a01      	cmp	r2, #1
 8001e6c:	d101      	bne.n	8001e72 <ETH_SetMACConfig+0x12a>
 8001e6e:	2202      	movs	r2, #2
 8001e70:	e000      	b.n	8001e74 <ETH_SetMACConfig+0x12c>
 8001e72:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8001e74:	4313      	orrs	r3, r2
 8001e76:	68fa      	ldr	r2, [r7, #12]
 8001e78:	4313      	orrs	r3, r2
 8001e7a:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	68fa      	ldr	r2, [r7, #12]
 8001e82:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	699b      	ldr	r3, [r3, #24]
 8001e8a:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001e8c:	2001      	movs	r0, #1
 8001e8e:	f7fe ffd9 	bl	8000e44 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	68fa      	ldr	r2, [r7, #12]
 8001e98:	619a      	str	r2, [r3, #24]
}
 8001e9a:	bf00      	nop
 8001e9c:	3710      	adds	r7, #16
 8001e9e:	46bd      	mov	sp, r7
 8001ea0:	bd80      	pop	{r7, pc}
 8001ea2:	bf00      	nop
 8001ea4:	ff20810f 	.word	0xff20810f

08001ea8 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8001ea8:	b580      	push	{r7, lr}
 8001eaa:	b084      	sub	sp, #16
 8001eac:	af00      	add	r7, sp, #0
 8001eae:	6078      	str	r0, [r7, #4]
 8001eb0:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001eba:	699b      	ldr	r3, [r3, #24]
 8001ebc:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 8001ebe:	68fa      	ldr	r2, [r7, #12]
 8001ec0:	4b3d      	ldr	r3, [pc, #244]	@ (8001fb8 <ETH_SetDMAConfig+0x110>)
 8001ec2:	4013      	ands	r3, r2
 8001ec4:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8001ec6:	683b      	ldr	r3, [r7, #0]
 8001ec8:	7b1b      	ldrb	r3, [r3, #12]
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d102      	bne.n	8001ed4 <ETH_SetDMAConfig+0x2c>
 8001ece:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8001ed2:	e000      	b.n	8001ed6 <ETH_SetDMAConfig+0x2e>
 8001ed4:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8001ed6:	683b      	ldr	r3, [r7, #0]
 8001ed8:	7b5b      	ldrb	r3, [r3, #13]
 8001eda:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8001edc:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8001ede:	683a      	ldr	r2, [r7, #0]
 8001ee0:	7f52      	ldrb	r2, [r2, #29]
 8001ee2:	2a00      	cmp	r2, #0
 8001ee4:	d102      	bne.n	8001eec <ETH_SetDMAConfig+0x44>
 8001ee6:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8001eea:	e000      	b.n	8001eee <ETH_SetDMAConfig+0x46>
 8001eec:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8001eee:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8001ef0:	683b      	ldr	r3, [r7, #0]
 8001ef2:	7b9b      	ldrb	r3, [r3, #14]
 8001ef4:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8001ef6:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 8001ef8:	683b      	ldr	r3, [r7, #0]
 8001efa:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8001efc:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8001efe:	683b      	ldr	r3, [r7, #0]
 8001f00:	7f1b      	ldrb	r3, [r3, #28]
 8001f02:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 8001f04:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8001f06:	683b      	ldr	r3, [r7, #0]
 8001f08:	7f9b      	ldrb	r3, [r3, #30]
 8001f0a:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8001f0c:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 8001f0e:	683b      	ldr	r3, [r7, #0]
 8001f10:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8001f12:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 8001f14:	683b      	ldr	r3, [r7, #0]
 8001f16:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001f1a:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8001f1c:	4313      	orrs	r3, r2
 8001f1e:	68fa      	ldr	r2, [r7, #12]
 8001f20:	4313      	orrs	r3, r2
 8001f22:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001f2c:	461a      	mov	r2, r3
 8001f2e:	68fb      	ldr	r3, [r7, #12]
 8001f30:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001f3a:	699b      	ldr	r3, [r3, #24]
 8001f3c:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001f3e:	2001      	movs	r0, #1
 8001f40:	f7fe ff80 	bl	8000e44 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001f4c:	461a      	mov	r2, r3
 8001f4e:	68fb      	ldr	r3, [r7, #12]
 8001f50:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8001f52:	683b      	ldr	r3, [r7, #0]
 8001f54:	791b      	ldrb	r3, [r3, #4]
 8001f56:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 8001f58:	683b      	ldr	r3, [r7, #0]
 8001f5a:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8001f5c:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8001f5e:	683b      	ldr	r3, [r7, #0]
 8001f60:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 8001f62:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 8001f64:	683b      	ldr	r3, [r7, #0]
 8001f66:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8001f68:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8001f6a:	683b      	ldr	r3, [r7, #0]
 8001f6c:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8001f70:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 8001f72:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8001f74:	683b      	ldr	r3, [r7, #0]
 8001f76:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001f78:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8001f7a:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 8001f7c:	683b      	ldr	r3, [r7, #0]
 8001f7e:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8001f80:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8001f82:	687a      	ldr	r2, [r7, #4]
 8001f84:	6812      	ldr	r2, [r2, #0]
 8001f86:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8001f8a:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001f8e:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001f9c:	2001      	movs	r0, #1
 8001f9e:	f7fe ff51 	bl	8000e44 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001faa:	461a      	mov	r2, r3
 8001fac:	68fb      	ldr	r3, [r7, #12]
 8001fae:	6013      	str	r3, [r2, #0]
}
 8001fb0:	bf00      	nop
 8001fb2:	3710      	adds	r7, #16
 8001fb4:	46bd      	mov	sp, r7
 8001fb6:	bd80      	pop	{r7, pc}
 8001fb8:	f8de3f23 	.word	0xf8de3f23

08001fbc <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8001fbc:	b580      	push	{r7, lr}
 8001fbe:	b0a6      	sub	sp, #152	@ 0x98
 8001fc0:	af00      	add	r7, sp, #0
 8001fc2:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 8001fc4:	2301      	movs	r3, #1
 8001fc6:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44
  macDefaultConf.Jabber = ENABLE;
 8001fca:	2301      	movs	r3, #1
 8001fcc:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 8001fd0:	2300      	movs	r3, #0
 8001fd2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8001fd4:	2300      	movs	r3, #0
 8001fd6:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 8001fda:	2301      	movs	r3, #1
 8001fdc:	f887 3052 	strb.w	r3, [r7, #82]	@ 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 8001fe0:	2300      	movs	r3, #0
 8001fe2:	f887 3050 	strb.w	r3, [r7, #80]	@ 0x50
  macDefaultConf.ChecksumOffload = ENABLE;
 8001fe6:	2301      	movs	r3, #1
 8001fe8:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 8001fec:	2300      	movs	r3, #0
 8001fee:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 8001ff2:	2300      	movs	r3, #0
 8001ff4:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8001ff8:	2300      	movs	r3, #0
 8001ffa:	65bb      	str	r3, [r7, #88]	@ 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 8001ffc:	2300      	movs	r3, #0
 8001ffe:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
  macDefaultConf.PauseTime = 0x0U;
 8002002:	2300      	movs	r3, #0
 8002004:	67fb      	str	r3, [r7, #124]	@ 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 8002006:	2300      	movs	r3, #0
 8002008:	f887 3080 	strb.w	r3, [r7, #128]	@ 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 800200c:	2300      	movs	r3, #0
 800200e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8002012:	2300      	movs	r3, #0
 8002014:	f887 308a 	strb.w	r3, [r7, #138]	@ 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 8002018:	2300      	movs	r3, #0
 800201a:	f887 3088 	strb.w	r3, [r7, #136]	@ 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 800201e:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8002022:	64bb      	str	r3, [r7, #72]	@ 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8002024:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8002028:	64fb      	str	r3, [r7, #76]	@ 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 800202a:	2300      	movs	r3, #0
 800202c:	f887 3089 	strb.w	r3, [r7, #137]	@ 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8002030:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8002034:	4619      	mov	r1, r3
 8002036:	6878      	ldr	r0, [r7, #4]
 8002038:	f7ff fe86 	bl	8001d48 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 800203c:	2301      	movs	r3, #1
 800203e:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 8002040:	2301      	movs	r3, #1
 8002042:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 8002044:	2301      	movs	r3, #1
 8002046:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 800204a:	2301      	movs	r3, #1
 800204c:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 800204e:	2300      	movs	r3, #0
 8002050:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 8002052:	2300      	movs	r3, #0
 8002054:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 8002058:	2300      	movs	r3, #0
 800205a:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 800205e:	2300      	movs	r3, #0
 8002060:	62bb      	str	r3, [r7, #40]	@ 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 8002062:	2301      	movs	r3, #1
 8002064:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8002068:	2301      	movs	r3, #1
 800206a:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 800206c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002070:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8002072:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8002076:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8002078:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800207c:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 800207e:	2301      	movs	r3, #1
 8002080:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 8002084:	2300      	movs	r3, #0
 8002086:	633b      	str	r3, [r7, #48]	@ 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8002088:	2300      	movs	r3, #0
 800208a:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 800208c:	f107 0308 	add.w	r3, r7, #8
 8002090:	4619      	mov	r1, r3
 8002092:	6878      	ldr	r0, [r7, #4]
 8002094:	f7ff ff08 	bl	8001ea8 <ETH_SetDMAConfig>
}
 8002098:	bf00      	nop
 800209a:	3798      	adds	r7, #152	@ 0x98
 800209c:	46bd      	mov	sp, r7
 800209e:	bd80      	pop	{r7, pc}

080020a0 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 80020a0:	b480      	push	{r7}
 80020a2:	b087      	sub	sp, #28
 80020a4:	af00      	add	r7, sp, #0
 80020a6:	60f8      	str	r0, [r7, #12]
 80020a8:	60b9      	str	r1, [r7, #8]
 80020aa:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	3305      	adds	r3, #5
 80020b0:	781b      	ldrb	r3, [r3, #0]
 80020b2:	021b      	lsls	r3, r3, #8
 80020b4:	687a      	ldr	r2, [r7, #4]
 80020b6:	3204      	adds	r2, #4
 80020b8:	7812      	ldrb	r2, [r2, #0]
 80020ba:	4313      	orrs	r3, r2
 80020bc:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 80020be:	68ba      	ldr	r2, [r7, #8]
 80020c0:	4b11      	ldr	r3, [pc, #68]	@ (8002108 <ETH_MACAddressConfig+0x68>)
 80020c2:	4413      	add	r3, r2
 80020c4:	461a      	mov	r2, r3
 80020c6:	697b      	ldr	r3, [r7, #20]
 80020c8:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	3303      	adds	r3, #3
 80020ce:	781b      	ldrb	r3, [r3, #0]
 80020d0:	061a      	lsls	r2, r3, #24
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	3302      	adds	r3, #2
 80020d6:	781b      	ldrb	r3, [r3, #0]
 80020d8:	041b      	lsls	r3, r3, #16
 80020da:	431a      	orrs	r2, r3
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	3301      	adds	r3, #1
 80020e0:	781b      	ldrb	r3, [r3, #0]
 80020e2:	021b      	lsls	r3, r3, #8
 80020e4:	4313      	orrs	r3, r2
 80020e6:	687a      	ldr	r2, [r7, #4]
 80020e8:	7812      	ldrb	r2, [r2, #0]
 80020ea:	4313      	orrs	r3, r2
 80020ec:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 80020ee:	68ba      	ldr	r2, [r7, #8]
 80020f0:	4b06      	ldr	r3, [pc, #24]	@ (800210c <ETH_MACAddressConfig+0x6c>)
 80020f2:	4413      	add	r3, r2
 80020f4:	461a      	mov	r2, r3
 80020f6:	697b      	ldr	r3, [r7, #20]
 80020f8:	6013      	str	r3, [r2, #0]
}
 80020fa:	bf00      	nop
 80020fc:	371c      	adds	r7, #28
 80020fe:	46bd      	mov	sp, r7
 8002100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002104:	4770      	bx	lr
 8002106:	bf00      	nop
 8002108:	40028040 	.word	0x40028040
 800210c:	40028044 	.word	0x40028044

08002110 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8002110:	b480      	push	{r7}
 8002112:	b085      	sub	sp, #20
 8002114:	af00      	add	r7, sp, #0
 8002116:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8002118:	2300      	movs	r3, #0
 800211a:	60fb      	str	r3, [r7, #12]
 800211c:	e03e      	b.n	800219c <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	68d9      	ldr	r1, [r3, #12]
 8002122:	68fa      	ldr	r2, [r7, #12]
 8002124:	4613      	mov	r3, r2
 8002126:	009b      	lsls	r3, r3, #2
 8002128:	4413      	add	r3, r2
 800212a:	00db      	lsls	r3, r3, #3
 800212c:	440b      	add	r3, r1
 800212e:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0U);
 8002130:	68bb      	ldr	r3, [r7, #8]
 8002132:	2200      	movs	r2, #0
 8002134:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0U);
 8002136:	68bb      	ldr	r3, [r7, #8]
 8002138:	2200      	movs	r2, #0
 800213a:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0U);
 800213c:	68bb      	ldr	r3, [r7, #8]
 800213e:	2200      	movs	r2, #0
 8002140:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0U);
 8002142:	68bb      	ldr	r3, [r7, #8]
 8002144:	2200      	movs	r2, #0
 8002146:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8002148:	68b9      	ldr	r1, [r7, #8]
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	68fa      	ldr	r2, [r7, #12]
 800214e:	3206      	adds	r2, #6
 8002150:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 8002154:	68bb      	ldr	r3, [r7, #8]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 800215c:	68bb      	ldr	r3, [r7, #8]
 800215e:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	2b02      	cmp	r3, #2
 8002164:	d80c      	bhi.n	8002180 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	68d9      	ldr	r1, [r3, #12]
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	1c5a      	adds	r2, r3, #1
 800216e:	4613      	mov	r3, r2
 8002170:	009b      	lsls	r3, r3, #2
 8002172:	4413      	add	r3, r2
 8002174:	00db      	lsls	r3, r3, #3
 8002176:	440b      	add	r3, r1
 8002178:	461a      	mov	r2, r3
 800217a:	68bb      	ldr	r3, [r7, #8]
 800217c:	60da      	str	r2, [r3, #12]
 800217e:	e004      	b.n	800218a <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	68db      	ldr	r3, [r3, #12]
 8002184:	461a      	mov	r2, r3
 8002186:	68bb      	ldr	r3, [r7, #8]
 8002188:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 800218a:	68bb      	ldr	r3, [r7, #8]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	f443 0240 	orr.w	r2, r3, #12582912	@ 0xc00000
 8002192:	68bb      	ldr	r3, [r7, #8]
 8002194:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8002196:	68fb      	ldr	r3, [r7, #12]
 8002198:	3301      	adds	r3, #1
 800219a:	60fb      	str	r3, [r7, #12]
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	2b03      	cmp	r3, #3
 80021a0:	d9bd      	bls.n	800211e <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	2200      	movs	r2, #0
 80021a6:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	68da      	ldr	r2, [r3, #12]
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80021b4:	611a      	str	r2, [r3, #16]
}
 80021b6:	bf00      	nop
 80021b8:	3714      	adds	r7, #20
 80021ba:	46bd      	mov	sp, r7
 80021bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c0:	4770      	bx	lr

080021c2 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 80021c2:	b480      	push	{r7}
 80021c4:	b085      	sub	sp, #20
 80021c6:	af00      	add	r7, sp, #0
 80021c8:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80021ca:	2300      	movs	r3, #0
 80021cc:	60fb      	str	r3, [r7, #12]
 80021ce:	e046      	b.n	800225e <ETH_DMARxDescListInit+0x9c>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	6919      	ldr	r1, [r3, #16]
 80021d4:	68fa      	ldr	r2, [r7, #12]
 80021d6:	4613      	mov	r3, r2
 80021d8:	009b      	lsls	r3, r3, #2
 80021da:	4413      	add	r3, r2
 80021dc:	00db      	lsls	r3, r3, #3
 80021de:	440b      	add	r3, r1
 80021e0:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0U);
 80021e2:	68bb      	ldr	r3, [r7, #8]
 80021e4:	2200      	movs	r2, #0
 80021e6:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0U);
 80021e8:	68bb      	ldr	r3, [r7, #8]
 80021ea:	2200      	movs	r2, #0
 80021ec:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0U);
 80021ee:	68bb      	ldr	r3, [r7, #8]
 80021f0:	2200      	movs	r2, #0
 80021f2:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0U);
 80021f4:	68bb      	ldr	r3, [r7, #8]
 80021f6:	2200      	movs	r2, #0
 80021f8:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0U);
 80021fa:	68bb      	ldr	r3, [r7, #8]
 80021fc:	2200      	movs	r2, #0
 80021fe:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0U);
 8002200:	68bb      	ldr	r3, [r7, #8]
 8002202:	2200      	movs	r2, #0
 8002204:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 8002206:	68bb      	ldr	r3, [r7, #8]
 8002208:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800220c:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 800220e:	68bb      	ldr	r3, [r7, #8]
 8002210:	f44f 428c 	mov.w	r2, #17920	@ 0x4600
 8002214:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 8002216:	68bb      	ldr	r3, [r7, #8]
 8002218:	685b      	ldr	r3, [r3, #4]
 800221a:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800221e:	68bb      	ldr	r3, [r7, #8]
 8002220:	605a      	str	r2, [r3, #4]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8002222:	68b9      	ldr	r1, [r7, #8]
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	68fa      	ldr	r2, [r7, #12]
 8002228:	3212      	adds	r2, #18
 800222a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	2b02      	cmp	r3, #2
 8002232:	d80c      	bhi.n	800224e <ETH_DMARxDescListInit+0x8c>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	6919      	ldr	r1, [r3, #16]
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	1c5a      	adds	r2, r3, #1
 800223c:	4613      	mov	r3, r2
 800223e:	009b      	lsls	r3, r3, #2
 8002240:	4413      	add	r3, r2
 8002242:	00db      	lsls	r3, r3, #3
 8002244:	440b      	add	r3, r1
 8002246:	461a      	mov	r2, r3
 8002248:	68bb      	ldr	r3, [r7, #8]
 800224a:	60da      	str	r2, [r3, #12]
 800224c:	e004      	b.n	8002258 <ETH_DMARxDescListInit+0x96>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	691b      	ldr	r3, [r3, #16]
 8002252:	461a      	mov	r2, r3
 8002254:	68bb      	ldr	r3, [r7, #8]
 8002256:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	3301      	adds	r3, #1
 800225c:	60fb      	str	r3, [r7, #12]
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	2b03      	cmp	r3, #3
 8002262:	d9b5      	bls.n	80021d0 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0U);
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	2200      	movs	r2, #0
 8002268:	65da      	str	r2, [r3, #92]	@ 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0U);
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	2200      	movs	r2, #0
 800226e:	661a      	str	r2, [r3, #96]	@ 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0U);
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	2200      	movs	r2, #0
 8002274:	669a      	str	r2, [r3, #104]	@ 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0U);
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	2200      	movs	r2, #0
 800227a:	66da      	str	r2, [r3, #108]	@ 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0U);
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	2200      	movs	r2, #0
 8002280:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	691a      	ldr	r2, [r3, #16]
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800228e:	60da      	str	r2, [r3, #12]
}
 8002290:	bf00      	nop
 8002292:	3714      	adds	r7, #20
 8002294:	46bd      	mov	sp, r7
 8002296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800229a:	4770      	bx	lr

0800229c <ETH_Prepare_Tx_Descriptors>:
  * @param  pTxConfig: Tx packet configuration
  * @param  ItMode: Enable or disable Tx EOT interrept
  * @retval Status
  */
static uint32_t ETH_Prepare_Tx_Descriptors(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig, uint32_t ItMode)
{
 800229c:	b480      	push	{r7}
 800229e:	b08d      	sub	sp, #52	@ 0x34
 80022a0:	af00      	add	r7, sp, #0
 80022a2:	60f8      	str	r0, [r7, #12]
 80022a4:	60b9      	str	r1, [r7, #8]
 80022a6:	607a      	str	r2, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	3318      	adds	r3, #24
 80022ac:	617b      	str	r3, [r7, #20]
  uint32_t descidx = dmatxdesclist->CurTxDesc;
 80022ae:	697b      	ldr	r3, [r7, #20]
 80022b0:	691b      	ldr	r3, [r3, #16]
 80022b2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint32_t firstdescidx = dmatxdesclist->CurTxDesc;
 80022b4:	697b      	ldr	r3, [r7, #20]
 80022b6:	691b      	ldr	r3, [r3, #16]
 80022b8:	613b      	str	r3, [r7, #16]
  uint32_t idx;
  uint32_t descnbr = 0;
 80022ba:	2300      	movs	r3, #0
 80022bc:	627b      	str	r3, [r7, #36]	@ 0x24
  ETH_DMADescTypeDef *dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 80022be:	697b      	ldr	r3, [r7, #20]
 80022c0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80022c2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80022c6:	623b      	str	r3, [r7, #32]

  ETH_BufferTypeDef  *txbuffer = pTxConfig->TxBuffer;
 80022c8:	68bb      	ldr	r3, [r7, #8]
 80022ca:	689b      	ldr	r3, [r3, #8]
 80022cc:	61fb      	str	r3, [r7, #28]
  uint32_t           bd_count = 0;
 80022ce:	2300      	movs	r3, #0
 80022d0:	61bb      	str	r3, [r7, #24]

  /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
  if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 80022d2:	6a3b      	ldr	r3, [r7, #32]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80022da:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80022de:	d007      	beq.n	80022f0 <ETH_Prepare_Tx_Descriptors+0x54>
      || (dmatxdesclist->PacketAddress[descidx] != NULL))
 80022e0:	697a      	ldr	r2, [r7, #20]
 80022e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80022e4:	3304      	adds	r3, #4
 80022e6:	009b      	lsls	r3, r3, #2
 80022e8:	4413      	add	r3, r2
 80022ea:	685b      	ldr	r3, [r3, #4]
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d001      	beq.n	80022f4 <ETH_Prepare_Tx_Descriptors+0x58>
  {
    return HAL_ETH_ERROR_BUSY;
 80022f0:	2302      	movs	r3, #2
 80022f2:	e103      	b.n	80024fc <ETH_Prepare_Tx_Descriptors+0x260>
  }


  descnbr += 1U;
 80022f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022f6:	3301      	adds	r3, #1
 80022f8:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Set header or buffer 1 address */
  WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 80022fa:	69fb      	ldr	r3, [r7, #28]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	461a      	mov	r2, r3
 8002300:	6a3b      	ldr	r3, [r7, #32]
 8002302:	609a      	str	r2, [r3, #8]

  /* Set header or buffer 1 Length */
  MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 8002304:	6a3b      	ldr	r3, [r7, #32]
 8002306:	685b      	ldr	r3, [r3, #4]
 8002308:	f423 53ff 	bic.w	r3, r3, #8160	@ 0x1fe0
 800230c:	f023 031f 	bic.w	r3, r3, #31
 8002310:	69fa      	ldr	r2, [r7, #28]
 8002312:	6852      	ldr	r2, [r2, #4]
 8002314:	431a      	orrs	r2, r3
 8002316:	6a3b      	ldr	r3, [r7, #32]
 8002318:	605a      	str	r2, [r3, #4]

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != 0U)
 800231a:	68bb      	ldr	r3, [r7, #8]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	f003 0301 	and.w	r3, r3, #1
 8002322:	2b00      	cmp	r3, #0
 8002324:	d008      	beq.n	8002338 <ETH_Prepare_Tx_Descriptors+0x9c>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_DMATXDESC_CIC, pTxConfig->ChecksumCtrl);
 8002326:	6a3b      	ldr	r3, [r7, #32]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800232e:	68bb      	ldr	r3, [r7, #8]
 8002330:	695b      	ldr	r3, [r3, #20]
 8002332:	431a      	orrs	r2, r3
 8002334:	6a3b      	ldr	r3, [r7, #32]
 8002336:	601a      	str	r2, [r3, #0]
  }

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CRCPAD) != 0U)
 8002338:	68bb      	ldr	r3, [r7, #8]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	f003 0320 	and.w	r3, r3, #32
 8002340:	2b00      	cmp	r3, #0
 8002342:	d008      	beq.n	8002356 <ETH_Prepare_Tx_Descriptors+0xba>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_CRC_PAD_DISABLE, pTxConfig->CRCPadCtrl);
 8002344:	6a3b      	ldr	r3, [r7, #32]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800234c:	68bb      	ldr	r3, [r7, #8]
 800234e:	691b      	ldr	r3, [r3, #16]
 8002350:	431a      	orrs	r2, r3
 8002352:	6a3b      	ldr	r3, [r7, #32]
 8002354:	601a      	str	r2, [r3, #0]
  }


  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != 0U)
 8002356:	68bb      	ldr	r3, [r7, #8]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	f003 0304 	and.w	r3, r3, #4
 800235e:	2b00      	cmp	r3, #0
 8002360:	d005      	beq.n	800236e <ETH_Prepare_Tx_Descriptors+0xd2>
  {
    /* Set Vlan Type */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_VF);
 8002362:	6a3b      	ldr	r3, [r7, #32]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800236a:	6a3b      	ldr	r3, [r7, #32]
 800236c:	601a      	str	r2, [r3, #0]
  }

  /* Mark it as First Descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 800236e:	6a3b      	ldr	r3, [r7, #32]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8002376:	6a3b      	ldr	r3, [r7, #32]
 8002378:	601a      	str	r2, [r3, #0]
  __ASM volatile ("dmb 0xF":::"memory");
 800237a:	f3bf 8f5f 	dmb	sy
}
 800237e:	bf00      	nop

  /* Ensure rest of descriptor is written to RAM before the OWN bit */
  __DMB();
  /* set OWN bit of FIRST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 8002380:	6a3b      	ldr	r3, [r7, #32]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8002388:	6a3b      	ldr	r3, [r7, #32]
 800238a:	601a      	str	r2, [r3, #0]

  /* only if the packet is split into more than one descriptors > 1 */
  while (txbuffer->next != NULL)
 800238c:	e084      	b.n	8002498 <ETH_Prepare_Tx_Descriptors+0x1fc>
  {
    /* Clear the LD bit of previous descriptor */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 800238e:	6a3b      	ldr	r3, [r7, #32]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8002396:	6a3b      	ldr	r3, [r7, #32]
 8002398:	601a      	str	r2, [r3, #0]
    if (ItMode != ((uint32_t)RESET))
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	2b00      	cmp	r3, #0
 800239e:	d006      	beq.n	80023ae <ETH_Prepare_Tx_Descriptors+0x112>
    {
      /* Set Interrupt on completion bit */
      SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 80023a0:	6a3b      	ldr	r3, [r7, #32]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 80023a8:	6a3b      	ldr	r3, [r7, #32]
 80023aa:	601a      	str	r2, [r3, #0]
 80023ac:	e005      	b.n	80023ba <ETH_Prepare_Tx_Descriptors+0x11e>
    }
    else
    {
      /* Clear Interrupt on completion bit */
      CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 80023ae:	6a3b      	ldr	r3, [r7, #32]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 80023b6:	6a3b      	ldr	r3, [r7, #32]
 80023b8:	601a      	str	r2, [r3, #0]
    }
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 80023ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80023bc:	3301      	adds	r3, #1
 80023be:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80023c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80023c2:	2b03      	cmp	r3, #3
 80023c4:	d902      	bls.n	80023cc <ETH_Prepare_Tx_Descriptors+0x130>
 80023c6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80023c8:	3b04      	subs	r3, #4
 80023ca:	62fb      	str	r3, [r7, #44]	@ 0x2c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 80023cc:	697b      	ldr	r3, [r7, #20]
 80023ce:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80023d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80023d4:	623b      	str	r3, [r7, #32]

    /* Clear the FD bit of new Descriptor */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 80023d6:	6a3b      	ldr	r3, [r7, #32]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 80023de:	6a3b      	ldr	r3, [r7, #32]
 80023e0:	601a      	str	r2, [r3, #0]

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 80023e2:	6a3b      	ldr	r3, [r7, #32]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80023ea:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80023ee:	d007      	beq.n	8002400 <ETH_Prepare_Tx_Descriptors+0x164>
        || (dmatxdesclist->PacketAddress[descidx] != NULL))
 80023f0:	697a      	ldr	r2, [r7, #20]
 80023f2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80023f4:	3304      	adds	r3, #4
 80023f6:	009b      	lsls	r3, r3, #2
 80023f8:	4413      	add	r3, r2
 80023fa:	685b      	ldr	r3, [r3, #4]
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d029      	beq.n	8002454 <ETH_Prepare_Tx_Descriptors+0x1b8>
    {
      descidx = firstdescidx;
 8002400:	693b      	ldr	r3, [r7, #16]
 8002402:	62fb      	str	r3, [r7, #44]	@ 0x2c
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8002404:	697b      	ldr	r3, [r7, #20]
 8002406:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002408:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800240c:	623b      	str	r3, [r7, #32]

      /* clear previous desc own bit */
      for (idx = 0; idx < descnbr; idx ++)
 800240e:	2300      	movs	r3, #0
 8002410:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002412:	e019      	b.n	8002448 <ETH_Prepare_Tx_Descriptors+0x1ac>
  __ASM volatile ("dmb 0xF":::"memory");
 8002414:	f3bf 8f5f 	dmb	sy
}
 8002418:	bf00      	nop
      {
        /* Ensure rest of descriptor is written to RAM before the OWN bit */
        __DMB();

        CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 800241a:	6a3b      	ldr	r3, [r7, #32]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002422:	6a3b      	ldr	r3, [r7, #32]
 8002424:	601a      	str	r2, [r3, #0]

        /* Increment current tx descriptor index */
        INCR_TX_DESC_INDEX(descidx, 1U);
 8002426:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002428:	3301      	adds	r3, #1
 800242a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800242c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800242e:	2b03      	cmp	r3, #3
 8002430:	d902      	bls.n	8002438 <ETH_Prepare_Tx_Descriptors+0x19c>
 8002432:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002434:	3b04      	subs	r3, #4
 8002436:	62fb      	str	r3, [r7, #44]	@ 0x2c
        /* Get current descriptor address */
        dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8002438:	697b      	ldr	r3, [r7, #20]
 800243a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800243c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002440:	623b      	str	r3, [r7, #32]
      for (idx = 0; idx < descnbr; idx ++)
 8002442:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002444:	3301      	adds	r3, #1
 8002446:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002448:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800244a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800244c:	429a      	cmp	r2, r3
 800244e:	d3e1      	bcc.n	8002414 <ETH_Prepare_Tx_Descriptors+0x178>
      }

      return HAL_ETH_ERROR_BUSY;
 8002450:	2302      	movs	r3, #2
 8002452:	e053      	b.n	80024fc <ETH_Prepare_Tx_Descriptors+0x260>
    }

    descnbr += 1U;
 8002454:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002456:	3301      	adds	r3, #1
 8002458:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Get the next Tx buffer in the list */
    txbuffer = txbuffer->next;
 800245a:	69fb      	ldr	r3, [r7, #28]
 800245c:	689b      	ldr	r3, [r3, #8]
 800245e:	61fb      	str	r3, [r7, #28]

    /* Set header or buffer 1 address */
    WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 8002460:	69fb      	ldr	r3, [r7, #28]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	461a      	mov	r2, r3
 8002466:	6a3b      	ldr	r3, [r7, #32]
 8002468:	609a      	str	r2, [r3, #8]

    /* Set header or buffer 1 Length */
    MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 800246a:	6a3b      	ldr	r3, [r7, #32]
 800246c:	685b      	ldr	r3, [r3, #4]
 800246e:	f423 53ff 	bic.w	r3, r3, #8160	@ 0x1fe0
 8002472:	f023 031f 	bic.w	r3, r3, #31
 8002476:	69fa      	ldr	r2, [r7, #28]
 8002478:	6852      	ldr	r2, [r2, #4]
 800247a:	431a      	orrs	r2, r3
 800247c:	6a3b      	ldr	r3, [r7, #32]
 800247e:	605a      	str	r2, [r3, #4]

    bd_count += 1U;
 8002480:	69bb      	ldr	r3, [r7, #24]
 8002482:	3301      	adds	r3, #1
 8002484:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("dmb 0xF":::"memory");
 8002486:	f3bf 8f5f 	dmb	sy
}
 800248a:	bf00      	nop

    /* Ensure rest of descriptor is written to RAM before the OWN bit */
    __DMB();
    /* Set Own bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 800248c:	6a3b      	ldr	r3, [r7, #32]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8002494:	6a3b      	ldr	r3, [r7, #32]
 8002496:	601a      	str	r2, [r3, #0]
  while (txbuffer->next != NULL)
 8002498:	69fb      	ldr	r3, [r7, #28]
 800249a:	689b      	ldr	r3, [r3, #8]
 800249c:	2b00      	cmp	r3, #0
 800249e:	f47f af76 	bne.w	800238e <ETH_Prepare_Tx_Descriptors+0xf2>
  }

  if (ItMode != ((uint32_t)RESET))
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d006      	beq.n	80024b6 <ETH_Prepare_Tx_Descriptors+0x21a>
  {
    /* Set Interrupt on completion bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 80024a8:	6a3b      	ldr	r3, [r7, #32]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 80024b0:	6a3b      	ldr	r3, [r7, #32]
 80024b2:	601a      	str	r2, [r3, #0]
 80024b4:	e005      	b.n	80024c2 <ETH_Prepare_Tx_Descriptors+0x226>
  }
  else
  {
    /* Clear Interrupt on completion bit */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 80024b6:	6a3b      	ldr	r3, [r7, #32]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 80024be:	6a3b      	ldr	r3, [r7, #32]
 80024c0:	601a      	str	r2, [r3, #0]
  }

  /* Mark it as LAST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 80024c2:	6a3b      	ldr	r3, [r7, #32]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 80024ca:	6a3b      	ldr	r3, [r7, #32]
 80024cc:	601a      	str	r2, [r3, #0]
  /* Save the current packet address to expose it to the application */
  dmatxdesclist->PacketAddress[descidx] = dmatxdesclist->CurrentPacketAddress;
 80024ce:	697b      	ldr	r3, [r7, #20]
 80024d0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80024d2:	6979      	ldr	r1, [r7, #20]
 80024d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80024d6:	3304      	adds	r3, #4
 80024d8:	009b      	lsls	r3, r3, #2
 80024da:	440b      	add	r3, r1
 80024dc:	605a      	str	r2, [r3, #4]

  dmatxdesclist->CurTxDesc = descidx;
 80024de:	697b      	ldr	r3, [r7, #20]
 80024e0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80024e2:	611a      	str	r2, [r3, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 80024e4:	b672      	cpsid	i
}
 80024e6:	bf00      	nop
  /* disable the interrupt */
  __disable_irq();

  dmatxdesclist->BuffersInUse += bd_count + 1U;
 80024e8:	697b      	ldr	r3, [r7, #20]
 80024ea:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80024ec:	69bb      	ldr	r3, [r7, #24]
 80024ee:	4413      	add	r3, r2
 80024f0:	1c5a      	adds	r2, r3, #1
 80024f2:	697b      	ldr	r3, [r7, #20]
 80024f4:	629a      	str	r2, [r3, #40]	@ 0x28
  __ASM volatile ("cpsie i" : : : "memory");
 80024f6:	b662      	cpsie	i
}
 80024f8:	bf00      	nop
  /* Enable interrupts back */
  __enable_irq();


  /* Return function status */
  return HAL_ETH_ERROR_NONE;
 80024fa:	2300      	movs	r3, #0
}
 80024fc:	4618      	mov	r0, r3
 80024fe:	3734      	adds	r7, #52	@ 0x34
 8002500:	46bd      	mov	sp, r7
 8002502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002506:	4770      	bx	lr

08002508 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002508:	b480      	push	{r7}
 800250a:	b089      	sub	sp, #36	@ 0x24
 800250c:	af00      	add	r7, sp, #0
 800250e:	6078      	str	r0, [r7, #4]
 8002510:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002512:	2300      	movs	r3, #0
 8002514:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002516:	2300      	movs	r3, #0
 8002518:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800251a:	2300      	movs	r3, #0
 800251c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800251e:	2300      	movs	r3, #0
 8002520:	61fb      	str	r3, [r7, #28]
 8002522:	e16b      	b.n	80027fc <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002524:	2201      	movs	r2, #1
 8002526:	69fb      	ldr	r3, [r7, #28]
 8002528:	fa02 f303 	lsl.w	r3, r2, r3
 800252c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800252e:	683b      	ldr	r3, [r7, #0]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	697a      	ldr	r2, [r7, #20]
 8002534:	4013      	ands	r3, r2
 8002536:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002538:	693a      	ldr	r2, [r7, #16]
 800253a:	697b      	ldr	r3, [r7, #20]
 800253c:	429a      	cmp	r2, r3
 800253e:	f040 815a 	bne.w	80027f6 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002542:	683b      	ldr	r3, [r7, #0]
 8002544:	685b      	ldr	r3, [r3, #4]
 8002546:	f003 0303 	and.w	r3, r3, #3
 800254a:	2b01      	cmp	r3, #1
 800254c:	d005      	beq.n	800255a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800254e:	683b      	ldr	r3, [r7, #0]
 8002550:	685b      	ldr	r3, [r3, #4]
 8002552:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002556:	2b02      	cmp	r3, #2
 8002558:	d130      	bne.n	80025bc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	689b      	ldr	r3, [r3, #8]
 800255e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002560:	69fb      	ldr	r3, [r7, #28]
 8002562:	005b      	lsls	r3, r3, #1
 8002564:	2203      	movs	r2, #3
 8002566:	fa02 f303 	lsl.w	r3, r2, r3
 800256a:	43db      	mvns	r3, r3
 800256c:	69ba      	ldr	r2, [r7, #24]
 800256e:	4013      	ands	r3, r2
 8002570:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002572:	683b      	ldr	r3, [r7, #0]
 8002574:	68da      	ldr	r2, [r3, #12]
 8002576:	69fb      	ldr	r3, [r7, #28]
 8002578:	005b      	lsls	r3, r3, #1
 800257a:	fa02 f303 	lsl.w	r3, r2, r3
 800257e:	69ba      	ldr	r2, [r7, #24]
 8002580:	4313      	orrs	r3, r2
 8002582:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	69ba      	ldr	r2, [r7, #24]
 8002588:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	685b      	ldr	r3, [r3, #4]
 800258e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002590:	2201      	movs	r2, #1
 8002592:	69fb      	ldr	r3, [r7, #28]
 8002594:	fa02 f303 	lsl.w	r3, r2, r3
 8002598:	43db      	mvns	r3, r3
 800259a:	69ba      	ldr	r2, [r7, #24]
 800259c:	4013      	ands	r3, r2
 800259e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80025a0:	683b      	ldr	r3, [r7, #0]
 80025a2:	685b      	ldr	r3, [r3, #4]
 80025a4:	091b      	lsrs	r3, r3, #4
 80025a6:	f003 0201 	and.w	r2, r3, #1
 80025aa:	69fb      	ldr	r3, [r7, #28]
 80025ac:	fa02 f303 	lsl.w	r3, r2, r3
 80025b0:	69ba      	ldr	r2, [r7, #24]
 80025b2:	4313      	orrs	r3, r2
 80025b4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	69ba      	ldr	r2, [r7, #24]
 80025ba:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80025bc:	683b      	ldr	r3, [r7, #0]
 80025be:	685b      	ldr	r3, [r3, #4]
 80025c0:	f003 0303 	and.w	r3, r3, #3
 80025c4:	2b03      	cmp	r3, #3
 80025c6:	d017      	beq.n	80025f8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	68db      	ldr	r3, [r3, #12]
 80025cc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80025ce:	69fb      	ldr	r3, [r7, #28]
 80025d0:	005b      	lsls	r3, r3, #1
 80025d2:	2203      	movs	r2, #3
 80025d4:	fa02 f303 	lsl.w	r3, r2, r3
 80025d8:	43db      	mvns	r3, r3
 80025da:	69ba      	ldr	r2, [r7, #24]
 80025dc:	4013      	ands	r3, r2
 80025de:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80025e0:	683b      	ldr	r3, [r7, #0]
 80025e2:	689a      	ldr	r2, [r3, #8]
 80025e4:	69fb      	ldr	r3, [r7, #28]
 80025e6:	005b      	lsls	r3, r3, #1
 80025e8:	fa02 f303 	lsl.w	r3, r2, r3
 80025ec:	69ba      	ldr	r2, [r7, #24]
 80025ee:	4313      	orrs	r3, r2
 80025f0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	69ba      	ldr	r2, [r7, #24]
 80025f6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80025f8:	683b      	ldr	r3, [r7, #0]
 80025fa:	685b      	ldr	r3, [r3, #4]
 80025fc:	f003 0303 	and.w	r3, r3, #3
 8002600:	2b02      	cmp	r3, #2
 8002602:	d123      	bne.n	800264c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002604:	69fb      	ldr	r3, [r7, #28]
 8002606:	08da      	lsrs	r2, r3, #3
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	3208      	adds	r2, #8
 800260c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002610:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002612:	69fb      	ldr	r3, [r7, #28]
 8002614:	f003 0307 	and.w	r3, r3, #7
 8002618:	009b      	lsls	r3, r3, #2
 800261a:	220f      	movs	r2, #15
 800261c:	fa02 f303 	lsl.w	r3, r2, r3
 8002620:	43db      	mvns	r3, r3
 8002622:	69ba      	ldr	r2, [r7, #24]
 8002624:	4013      	ands	r3, r2
 8002626:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002628:	683b      	ldr	r3, [r7, #0]
 800262a:	691a      	ldr	r2, [r3, #16]
 800262c:	69fb      	ldr	r3, [r7, #28]
 800262e:	f003 0307 	and.w	r3, r3, #7
 8002632:	009b      	lsls	r3, r3, #2
 8002634:	fa02 f303 	lsl.w	r3, r2, r3
 8002638:	69ba      	ldr	r2, [r7, #24]
 800263a:	4313      	orrs	r3, r2
 800263c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800263e:	69fb      	ldr	r3, [r7, #28]
 8002640:	08da      	lsrs	r2, r3, #3
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	3208      	adds	r2, #8
 8002646:	69b9      	ldr	r1, [r7, #24]
 8002648:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002652:	69fb      	ldr	r3, [r7, #28]
 8002654:	005b      	lsls	r3, r3, #1
 8002656:	2203      	movs	r2, #3
 8002658:	fa02 f303 	lsl.w	r3, r2, r3
 800265c:	43db      	mvns	r3, r3
 800265e:	69ba      	ldr	r2, [r7, #24]
 8002660:	4013      	ands	r3, r2
 8002662:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002664:	683b      	ldr	r3, [r7, #0]
 8002666:	685b      	ldr	r3, [r3, #4]
 8002668:	f003 0203 	and.w	r2, r3, #3
 800266c:	69fb      	ldr	r3, [r7, #28]
 800266e:	005b      	lsls	r3, r3, #1
 8002670:	fa02 f303 	lsl.w	r3, r2, r3
 8002674:	69ba      	ldr	r2, [r7, #24]
 8002676:	4313      	orrs	r3, r2
 8002678:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	69ba      	ldr	r2, [r7, #24]
 800267e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002680:	683b      	ldr	r3, [r7, #0]
 8002682:	685b      	ldr	r3, [r3, #4]
 8002684:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002688:	2b00      	cmp	r3, #0
 800268a:	f000 80b4 	beq.w	80027f6 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800268e:	2300      	movs	r3, #0
 8002690:	60fb      	str	r3, [r7, #12]
 8002692:	4b60      	ldr	r3, [pc, #384]	@ (8002814 <HAL_GPIO_Init+0x30c>)
 8002694:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002696:	4a5f      	ldr	r2, [pc, #380]	@ (8002814 <HAL_GPIO_Init+0x30c>)
 8002698:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800269c:	6453      	str	r3, [r2, #68]	@ 0x44
 800269e:	4b5d      	ldr	r3, [pc, #372]	@ (8002814 <HAL_GPIO_Init+0x30c>)
 80026a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80026a2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80026a6:	60fb      	str	r3, [r7, #12]
 80026a8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80026aa:	4a5b      	ldr	r2, [pc, #364]	@ (8002818 <HAL_GPIO_Init+0x310>)
 80026ac:	69fb      	ldr	r3, [r7, #28]
 80026ae:	089b      	lsrs	r3, r3, #2
 80026b0:	3302      	adds	r3, #2
 80026b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80026b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80026b8:	69fb      	ldr	r3, [r7, #28]
 80026ba:	f003 0303 	and.w	r3, r3, #3
 80026be:	009b      	lsls	r3, r3, #2
 80026c0:	220f      	movs	r2, #15
 80026c2:	fa02 f303 	lsl.w	r3, r2, r3
 80026c6:	43db      	mvns	r3, r3
 80026c8:	69ba      	ldr	r2, [r7, #24]
 80026ca:	4013      	ands	r3, r2
 80026cc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	4a52      	ldr	r2, [pc, #328]	@ (800281c <HAL_GPIO_Init+0x314>)
 80026d2:	4293      	cmp	r3, r2
 80026d4:	d02b      	beq.n	800272e <HAL_GPIO_Init+0x226>
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	4a51      	ldr	r2, [pc, #324]	@ (8002820 <HAL_GPIO_Init+0x318>)
 80026da:	4293      	cmp	r3, r2
 80026dc:	d025      	beq.n	800272a <HAL_GPIO_Init+0x222>
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	4a50      	ldr	r2, [pc, #320]	@ (8002824 <HAL_GPIO_Init+0x31c>)
 80026e2:	4293      	cmp	r3, r2
 80026e4:	d01f      	beq.n	8002726 <HAL_GPIO_Init+0x21e>
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	4a4f      	ldr	r2, [pc, #316]	@ (8002828 <HAL_GPIO_Init+0x320>)
 80026ea:	4293      	cmp	r3, r2
 80026ec:	d019      	beq.n	8002722 <HAL_GPIO_Init+0x21a>
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	4a4e      	ldr	r2, [pc, #312]	@ (800282c <HAL_GPIO_Init+0x324>)
 80026f2:	4293      	cmp	r3, r2
 80026f4:	d013      	beq.n	800271e <HAL_GPIO_Init+0x216>
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	4a4d      	ldr	r2, [pc, #308]	@ (8002830 <HAL_GPIO_Init+0x328>)
 80026fa:	4293      	cmp	r3, r2
 80026fc:	d00d      	beq.n	800271a <HAL_GPIO_Init+0x212>
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	4a4c      	ldr	r2, [pc, #304]	@ (8002834 <HAL_GPIO_Init+0x32c>)
 8002702:	4293      	cmp	r3, r2
 8002704:	d007      	beq.n	8002716 <HAL_GPIO_Init+0x20e>
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	4a4b      	ldr	r2, [pc, #300]	@ (8002838 <HAL_GPIO_Init+0x330>)
 800270a:	4293      	cmp	r3, r2
 800270c:	d101      	bne.n	8002712 <HAL_GPIO_Init+0x20a>
 800270e:	2307      	movs	r3, #7
 8002710:	e00e      	b.n	8002730 <HAL_GPIO_Init+0x228>
 8002712:	2308      	movs	r3, #8
 8002714:	e00c      	b.n	8002730 <HAL_GPIO_Init+0x228>
 8002716:	2306      	movs	r3, #6
 8002718:	e00a      	b.n	8002730 <HAL_GPIO_Init+0x228>
 800271a:	2305      	movs	r3, #5
 800271c:	e008      	b.n	8002730 <HAL_GPIO_Init+0x228>
 800271e:	2304      	movs	r3, #4
 8002720:	e006      	b.n	8002730 <HAL_GPIO_Init+0x228>
 8002722:	2303      	movs	r3, #3
 8002724:	e004      	b.n	8002730 <HAL_GPIO_Init+0x228>
 8002726:	2302      	movs	r3, #2
 8002728:	e002      	b.n	8002730 <HAL_GPIO_Init+0x228>
 800272a:	2301      	movs	r3, #1
 800272c:	e000      	b.n	8002730 <HAL_GPIO_Init+0x228>
 800272e:	2300      	movs	r3, #0
 8002730:	69fa      	ldr	r2, [r7, #28]
 8002732:	f002 0203 	and.w	r2, r2, #3
 8002736:	0092      	lsls	r2, r2, #2
 8002738:	4093      	lsls	r3, r2
 800273a:	69ba      	ldr	r2, [r7, #24]
 800273c:	4313      	orrs	r3, r2
 800273e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002740:	4935      	ldr	r1, [pc, #212]	@ (8002818 <HAL_GPIO_Init+0x310>)
 8002742:	69fb      	ldr	r3, [r7, #28]
 8002744:	089b      	lsrs	r3, r3, #2
 8002746:	3302      	adds	r3, #2
 8002748:	69ba      	ldr	r2, [r7, #24]
 800274a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800274e:	4b3b      	ldr	r3, [pc, #236]	@ (800283c <HAL_GPIO_Init+0x334>)
 8002750:	689b      	ldr	r3, [r3, #8]
 8002752:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002754:	693b      	ldr	r3, [r7, #16]
 8002756:	43db      	mvns	r3, r3
 8002758:	69ba      	ldr	r2, [r7, #24]
 800275a:	4013      	ands	r3, r2
 800275c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800275e:	683b      	ldr	r3, [r7, #0]
 8002760:	685b      	ldr	r3, [r3, #4]
 8002762:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002766:	2b00      	cmp	r3, #0
 8002768:	d003      	beq.n	8002772 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800276a:	69ba      	ldr	r2, [r7, #24]
 800276c:	693b      	ldr	r3, [r7, #16]
 800276e:	4313      	orrs	r3, r2
 8002770:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002772:	4a32      	ldr	r2, [pc, #200]	@ (800283c <HAL_GPIO_Init+0x334>)
 8002774:	69bb      	ldr	r3, [r7, #24]
 8002776:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002778:	4b30      	ldr	r3, [pc, #192]	@ (800283c <HAL_GPIO_Init+0x334>)
 800277a:	68db      	ldr	r3, [r3, #12]
 800277c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800277e:	693b      	ldr	r3, [r7, #16]
 8002780:	43db      	mvns	r3, r3
 8002782:	69ba      	ldr	r2, [r7, #24]
 8002784:	4013      	ands	r3, r2
 8002786:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002788:	683b      	ldr	r3, [r7, #0]
 800278a:	685b      	ldr	r3, [r3, #4]
 800278c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002790:	2b00      	cmp	r3, #0
 8002792:	d003      	beq.n	800279c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002794:	69ba      	ldr	r2, [r7, #24]
 8002796:	693b      	ldr	r3, [r7, #16]
 8002798:	4313      	orrs	r3, r2
 800279a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800279c:	4a27      	ldr	r2, [pc, #156]	@ (800283c <HAL_GPIO_Init+0x334>)
 800279e:	69bb      	ldr	r3, [r7, #24]
 80027a0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80027a2:	4b26      	ldr	r3, [pc, #152]	@ (800283c <HAL_GPIO_Init+0x334>)
 80027a4:	685b      	ldr	r3, [r3, #4]
 80027a6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80027a8:	693b      	ldr	r3, [r7, #16]
 80027aa:	43db      	mvns	r3, r3
 80027ac:	69ba      	ldr	r2, [r7, #24]
 80027ae:	4013      	ands	r3, r2
 80027b0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80027b2:	683b      	ldr	r3, [r7, #0]
 80027b4:	685b      	ldr	r3, [r3, #4]
 80027b6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d003      	beq.n	80027c6 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80027be:	69ba      	ldr	r2, [r7, #24]
 80027c0:	693b      	ldr	r3, [r7, #16]
 80027c2:	4313      	orrs	r3, r2
 80027c4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80027c6:	4a1d      	ldr	r2, [pc, #116]	@ (800283c <HAL_GPIO_Init+0x334>)
 80027c8:	69bb      	ldr	r3, [r7, #24]
 80027ca:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80027cc:	4b1b      	ldr	r3, [pc, #108]	@ (800283c <HAL_GPIO_Init+0x334>)
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80027d2:	693b      	ldr	r3, [r7, #16]
 80027d4:	43db      	mvns	r3, r3
 80027d6:	69ba      	ldr	r2, [r7, #24]
 80027d8:	4013      	ands	r3, r2
 80027da:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80027dc:	683b      	ldr	r3, [r7, #0]
 80027de:	685b      	ldr	r3, [r3, #4]
 80027e0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d003      	beq.n	80027f0 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80027e8:	69ba      	ldr	r2, [r7, #24]
 80027ea:	693b      	ldr	r3, [r7, #16]
 80027ec:	4313      	orrs	r3, r2
 80027ee:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80027f0:	4a12      	ldr	r2, [pc, #72]	@ (800283c <HAL_GPIO_Init+0x334>)
 80027f2:	69bb      	ldr	r3, [r7, #24]
 80027f4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80027f6:	69fb      	ldr	r3, [r7, #28]
 80027f8:	3301      	adds	r3, #1
 80027fa:	61fb      	str	r3, [r7, #28]
 80027fc:	69fb      	ldr	r3, [r7, #28]
 80027fe:	2b0f      	cmp	r3, #15
 8002800:	f67f ae90 	bls.w	8002524 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002804:	bf00      	nop
 8002806:	bf00      	nop
 8002808:	3724      	adds	r7, #36	@ 0x24
 800280a:	46bd      	mov	sp, r7
 800280c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002810:	4770      	bx	lr
 8002812:	bf00      	nop
 8002814:	40023800 	.word	0x40023800
 8002818:	40013800 	.word	0x40013800
 800281c:	40020000 	.word	0x40020000
 8002820:	40020400 	.word	0x40020400
 8002824:	40020800 	.word	0x40020800
 8002828:	40020c00 	.word	0x40020c00
 800282c:	40021000 	.word	0x40021000
 8002830:	40021400 	.word	0x40021400
 8002834:	40021800 	.word	0x40021800
 8002838:	40021c00 	.word	0x40021c00
 800283c:	40013c00 	.word	0x40013c00

08002840 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002840:	b580      	push	{r7, lr}
 8002842:	b086      	sub	sp, #24
 8002844:	af00      	add	r7, sp, #0
 8002846:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	2b00      	cmp	r3, #0
 800284c:	d101      	bne.n	8002852 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800284e:	2301      	movs	r3, #1
 8002850:	e267      	b.n	8002d22 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	f003 0301 	and.w	r3, r3, #1
 800285a:	2b00      	cmp	r3, #0
 800285c:	d075      	beq.n	800294a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800285e:	4b88      	ldr	r3, [pc, #544]	@ (8002a80 <HAL_RCC_OscConfig+0x240>)
 8002860:	689b      	ldr	r3, [r3, #8]
 8002862:	f003 030c 	and.w	r3, r3, #12
 8002866:	2b04      	cmp	r3, #4
 8002868:	d00c      	beq.n	8002884 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800286a:	4b85      	ldr	r3, [pc, #532]	@ (8002a80 <HAL_RCC_OscConfig+0x240>)
 800286c:	689b      	ldr	r3, [r3, #8]
 800286e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002872:	2b08      	cmp	r3, #8
 8002874:	d112      	bne.n	800289c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002876:	4b82      	ldr	r3, [pc, #520]	@ (8002a80 <HAL_RCC_OscConfig+0x240>)
 8002878:	685b      	ldr	r3, [r3, #4]
 800287a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800287e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002882:	d10b      	bne.n	800289c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002884:	4b7e      	ldr	r3, [pc, #504]	@ (8002a80 <HAL_RCC_OscConfig+0x240>)
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800288c:	2b00      	cmp	r3, #0
 800288e:	d05b      	beq.n	8002948 <HAL_RCC_OscConfig+0x108>
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	685b      	ldr	r3, [r3, #4]
 8002894:	2b00      	cmp	r3, #0
 8002896:	d157      	bne.n	8002948 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002898:	2301      	movs	r3, #1
 800289a:	e242      	b.n	8002d22 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	685b      	ldr	r3, [r3, #4]
 80028a0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80028a4:	d106      	bne.n	80028b4 <HAL_RCC_OscConfig+0x74>
 80028a6:	4b76      	ldr	r3, [pc, #472]	@ (8002a80 <HAL_RCC_OscConfig+0x240>)
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	4a75      	ldr	r2, [pc, #468]	@ (8002a80 <HAL_RCC_OscConfig+0x240>)
 80028ac:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80028b0:	6013      	str	r3, [r2, #0]
 80028b2:	e01d      	b.n	80028f0 <HAL_RCC_OscConfig+0xb0>
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	685b      	ldr	r3, [r3, #4]
 80028b8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80028bc:	d10c      	bne.n	80028d8 <HAL_RCC_OscConfig+0x98>
 80028be:	4b70      	ldr	r3, [pc, #448]	@ (8002a80 <HAL_RCC_OscConfig+0x240>)
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	4a6f      	ldr	r2, [pc, #444]	@ (8002a80 <HAL_RCC_OscConfig+0x240>)
 80028c4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80028c8:	6013      	str	r3, [r2, #0]
 80028ca:	4b6d      	ldr	r3, [pc, #436]	@ (8002a80 <HAL_RCC_OscConfig+0x240>)
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	4a6c      	ldr	r2, [pc, #432]	@ (8002a80 <HAL_RCC_OscConfig+0x240>)
 80028d0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80028d4:	6013      	str	r3, [r2, #0]
 80028d6:	e00b      	b.n	80028f0 <HAL_RCC_OscConfig+0xb0>
 80028d8:	4b69      	ldr	r3, [pc, #420]	@ (8002a80 <HAL_RCC_OscConfig+0x240>)
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	4a68      	ldr	r2, [pc, #416]	@ (8002a80 <HAL_RCC_OscConfig+0x240>)
 80028de:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80028e2:	6013      	str	r3, [r2, #0]
 80028e4:	4b66      	ldr	r3, [pc, #408]	@ (8002a80 <HAL_RCC_OscConfig+0x240>)
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	4a65      	ldr	r2, [pc, #404]	@ (8002a80 <HAL_RCC_OscConfig+0x240>)
 80028ea:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80028ee:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	685b      	ldr	r3, [r3, #4]
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d013      	beq.n	8002920 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028f8:	f7fe fa98 	bl	8000e2c <HAL_GetTick>
 80028fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80028fe:	e008      	b.n	8002912 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002900:	f7fe fa94 	bl	8000e2c <HAL_GetTick>
 8002904:	4602      	mov	r2, r0
 8002906:	693b      	ldr	r3, [r7, #16]
 8002908:	1ad3      	subs	r3, r2, r3
 800290a:	2b64      	cmp	r3, #100	@ 0x64
 800290c:	d901      	bls.n	8002912 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800290e:	2303      	movs	r3, #3
 8002910:	e207      	b.n	8002d22 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002912:	4b5b      	ldr	r3, [pc, #364]	@ (8002a80 <HAL_RCC_OscConfig+0x240>)
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800291a:	2b00      	cmp	r3, #0
 800291c:	d0f0      	beq.n	8002900 <HAL_RCC_OscConfig+0xc0>
 800291e:	e014      	b.n	800294a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002920:	f7fe fa84 	bl	8000e2c <HAL_GetTick>
 8002924:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002926:	e008      	b.n	800293a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002928:	f7fe fa80 	bl	8000e2c <HAL_GetTick>
 800292c:	4602      	mov	r2, r0
 800292e:	693b      	ldr	r3, [r7, #16]
 8002930:	1ad3      	subs	r3, r2, r3
 8002932:	2b64      	cmp	r3, #100	@ 0x64
 8002934:	d901      	bls.n	800293a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002936:	2303      	movs	r3, #3
 8002938:	e1f3      	b.n	8002d22 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800293a:	4b51      	ldr	r3, [pc, #324]	@ (8002a80 <HAL_RCC_OscConfig+0x240>)
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002942:	2b00      	cmp	r3, #0
 8002944:	d1f0      	bne.n	8002928 <HAL_RCC_OscConfig+0xe8>
 8002946:	e000      	b.n	800294a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002948:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	f003 0302 	and.w	r3, r3, #2
 8002952:	2b00      	cmp	r3, #0
 8002954:	d063      	beq.n	8002a1e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002956:	4b4a      	ldr	r3, [pc, #296]	@ (8002a80 <HAL_RCC_OscConfig+0x240>)
 8002958:	689b      	ldr	r3, [r3, #8]
 800295a:	f003 030c 	and.w	r3, r3, #12
 800295e:	2b00      	cmp	r3, #0
 8002960:	d00b      	beq.n	800297a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002962:	4b47      	ldr	r3, [pc, #284]	@ (8002a80 <HAL_RCC_OscConfig+0x240>)
 8002964:	689b      	ldr	r3, [r3, #8]
 8002966:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800296a:	2b08      	cmp	r3, #8
 800296c:	d11c      	bne.n	80029a8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800296e:	4b44      	ldr	r3, [pc, #272]	@ (8002a80 <HAL_RCC_OscConfig+0x240>)
 8002970:	685b      	ldr	r3, [r3, #4]
 8002972:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002976:	2b00      	cmp	r3, #0
 8002978:	d116      	bne.n	80029a8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800297a:	4b41      	ldr	r3, [pc, #260]	@ (8002a80 <HAL_RCC_OscConfig+0x240>)
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	f003 0302 	and.w	r3, r3, #2
 8002982:	2b00      	cmp	r3, #0
 8002984:	d005      	beq.n	8002992 <HAL_RCC_OscConfig+0x152>
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	68db      	ldr	r3, [r3, #12]
 800298a:	2b01      	cmp	r3, #1
 800298c:	d001      	beq.n	8002992 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800298e:	2301      	movs	r3, #1
 8002990:	e1c7      	b.n	8002d22 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002992:	4b3b      	ldr	r3, [pc, #236]	@ (8002a80 <HAL_RCC_OscConfig+0x240>)
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	691b      	ldr	r3, [r3, #16]
 800299e:	00db      	lsls	r3, r3, #3
 80029a0:	4937      	ldr	r1, [pc, #220]	@ (8002a80 <HAL_RCC_OscConfig+0x240>)
 80029a2:	4313      	orrs	r3, r2
 80029a4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80029a6:	e03a      	b.n	8002a1e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	68db      	ldr	r3, [r3, #12]
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d020      	beq.n	80029f2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80029b0:	4b34      	ldr	r3, [pc, #208]	@ (8002a84 <HAL_RCC_OscConfig+0x244>)
 80029b2:	2201      	movs	r2, #1
 80029b4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029b6:	f7fe fa39 	bl	8000e2c <HAL_GetTick>
 80029ba:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80029bc:	e008      	b.n	80029d0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80029be:	f7fe fa35 	bl	8000e2c <HAL_GetTick>
 80029c2:	4602      	mov	r2, r0
 80029c4:	693b      	ldr	r3, [r7, #16]
 80029c6:	1ad3      	subs	r3, r2, r3
 80029c8:	2b02      	cmp	r3, #2
 80029ca:	d901      	bls.n	80029d0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80029cc:	2303      	movs	r3, #3
 80029ce:	e1a8      	b.n	8002d22 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80029d0:	4b2b      	ldr	r3, [pc, #172]	@ (8002a80 <HAL_RCC_OscConfig+0x240>)
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	f003 0302 	and.w	r3, r3, #2
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d0f0      	beq.n	80029be <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80029dc:	4b28      	ldr	r3, [pc, #160]	@ (8002a80 <HAL_RCC_OscConfig+0x240>)
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	691b      	ldr	r3, [r3, #16]
 80029e8:	00db      	lsls	r3, r3, #3
 80029ea:	4925      	ldr	r1, [pc, #148]	@ (8002a80 <HAL_RCC_OscConfig+0x240>)
 80029ec:	4313      	orrs	r3, r2
 80029ee:	600b      	str	r3, [r1, #0]
 80029f0:	e015      	b.n	8002a1e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80029f2:	4b24      	ldr	r3, [pc, #144]	@ (8002a84 <HAL_RCC_OscConfig+0x244>)
 80029f4:	2200      	movs	r2, #0
 80029f6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029f8:	f7fe fa18 	bl	8000e2c <HAL_GetTick>
 80029fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80029fe:	e008      	b.n	8002a12 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002a00:	f7fe fa14 	bl	8000e2c <HAL_GetTick>
 8002a04:	4602      	mov	r2, r0
 8002a06:	693b      	ldr	r3, [r7, #16]
 8002a08:	1ad3      	subs	r3, r2, r3
 8002a0a:	2b02      	cmp	r3, #2
 8002a0c:	d901      	bls.n	8002a12 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002a0e:	2303      	movs	r3, #3
 8002a10:	e187      	b.n	8002d22 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002a12:	4b1b      	ldr	r3, [pc, #108]	@ (8002a80 <HAL_RCC_OscConfig+0x240>)
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	f003 0302 	and.w	r3, r3, #2
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d1f0      	bne.n	8002a00 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	f003 0308 	and.w	r3, r3, #8
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d036      	beq.n	8002a98 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	695b      	ldr	r3, [r3, #20]
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d016      	beq.n	8002a60 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002a32:	4b15      	ldr	r3, [pc, #84]	@ (8002a88 <HAL_RCC_OscConfig+0x248>)
 8002a34:	2201      	movs	r2, #1
 8002a36:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a38:	f7fe f9f8 	bl	8000e2c <HAL_GetTick>
 8002a3c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002a3e:	e008      	b.n	8002a52 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002a40:	f7fe f9f4 	bl	8000e2c <HAL_GetTick>
 8002a44:	4602      	mov	r2, r0
 8002a46:	693b      	ldr	r3, [r7, #16]
 8002a48:	1ad3      	subs	r3, r2, r3
 8002a4a:	2b02      	cmp	r3, #2
 8002a4c:	d901      	bls.n	8002a52 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002a4e:	2303      	movs	r3, #3
 8002a50:	e167      	b.n	8002d22 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002a52:	4b0b      	ldr	r3, [pc, #44]	@ (8002a80 <HAL_RCC_OscConfig+0x240>)
 8002a54:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002a56:	f003 0302 	and.w	r3, r3, #2
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d0f0      	beq.n	8002a40 <HAL_RCC_OscConfig+0x200>
 8002a5e:	e01b      	b.n	8002a98 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002a60:	4b09      	ldr	r3, [pc, #36]	@ (8002a88 <HAL_RCC_OscConfig+0x248>)
 8002a62:	2200      	movs	r2, #0
 8002a64:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002a66:	f7fe f9e1 	bl	8000e2c <HAL_GetTick>
 8002a6a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002a6c:	e00e      	b.n	8002a8c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002a6e:	f7fe f9dd 	bl	8000e2c <HAL_GetTick>
 8002a72:	4602      	mov	r2, r0
 8002a74:	693b      	ldr	r3, [r7, #16]
 8002a76:	1ad3      	subs	r3, r2, r3
 8002a78:	2b02      	cmp	r3, #2
 8002a7a:	d907      	bls.n	8002a8c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002a7c:	2303      	movs	r3, #3
 8002a7e:	e150      	b.n	8002d22 <HAL_RCC_OscConfig+0x4e2>
 8002a80:	40023800 	.word	0x40023800
 8002a84:	42470000 	.word	0x42470000
 8002a88:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002a8c:	4b88      	ldr	r3, [pc, #544]	@ (8002cb0 <HAL_RCC_OscConfig+0x470>)
 8002a8e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002a90:	f003 0302 	and.w	r3, r3, #2
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d1ea      	bne.n	8002a6e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	f003 0304 	and.w	r3, r3, #4
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	f000 8097 	beq.w	8002bd4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002aa6:	2300      	movs	r3, #0
 8002aa8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002aaa:	4b81      	ldr	r3, [pc, #516]	@ (8002cb0 <HAL_RCC_OscConfig+0x470>)
 8002aac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002aae:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d10f      	bne.n	8002ad6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002ab6:	2300      	movs	r3, #0
 8002ab8:	60bb      	str	r3, [r7, #8]
 8002aba:	4b7d      	ldr	r3, [pc, #500]	@ (8002cb0 <HAL_RCC_OscConfig+0x470>)
 8002abc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002abe:	4a7c      	ldr	r2, [pc, #496]	@ (8002cb0 <HAL_RCC_OscConfig+0x470>)
 8002ac0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002ac4:	6413      	str	r3, [r2, #64]	@ 0x40
 8002ac6:	4b7a      	ldr	r3, [pc, #488]	@ (8002cb0 <HAL_RCC_OscConfig+0x470>)
 8002ac8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002aca:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002ace:	60bb      	str	r3, [r7, #8]
 8002ad0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002ad2:	2301      	movs	r3, #1
 8002ad4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ad6:	4b77      	ldr	r3, [pc, #476]	@ (8002cb4 <HAL_RCC_OscConfig+0x474>)
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d118      	bne.n	8002b14 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002ae2:	4b74      	ldr	r3, [pc, #464]	@ (8002cb4 <HAL_RCC_OscConfig+0x474>)
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	4a73      	ldr	r2, [pc, #460]	@ (8002cb4 <HAL_RCC_OscConfig+0x474>)
 8002ae8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002aec:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002aee:	f7fe f99d 	bl	8000e2c <HAL_GetTick>
 8002af2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002af4:	e008      	b.n	8002b08 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002af6:	f7fe f999 	bl	8000e2c <HAL_GetTick>
 8002afa:	4602      	mov	r2, r0
 8002afc:	693b      	ldr	r3, [r7, #16]
 8002afe:	1ad3      	subs	r3, r2, r3
 8002b00:	2b02      	cmp	r3, #2
 8002b02:	d901      	bls.n	8002b08 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002b04:	2303      	movs	r3, #3
 8002b06:	e10c      	b.n	8002d22 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b08:	4b6a      	ldr	r3, [pc, #424]	@ (8002cb4 <HAL_RCC_OscConfig+0x474>)
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d0f0      	beq.n	8002af6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	689b      	ldr	r3, [r3, #8]
 8002b18:	2b01      	cmp	r3, #1
 8002b1a:	d106      	bne.n	8002b2a <HAL_RCC_OscConfig+0x2ea>
 8002b1c:	4b64      	ldr	r3, [pc, #400]	@ (8002cb0 <HAL_RCC_OscConfig+0x470>)
 8002b1e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002b20:	4a63      	ldr	r2, [pc, #396]	@ (8002cb0 <HAL_RCC_OscConfig+0x470>)
 8002b22:	f043 0301 	orr.w	r3, r3, #1
 8002b26:	6713      	str	r3, [r2, #112]	@ 0x70
 8002b28:	e01c      	b.n	8002b64 <HAL_RCC_OscConfig+0x324>
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	689b      	ldr	r3, [r3, #8]
 8002b2e:	2b05      	cmp	r3, #5
 8002b30:	d10c      	bne.n	8002b4c <HAL_RCC_OscConfig+0x30c>
 8002b32:	4b5f      	ldr	r3, [pc, #380]	@ (8002cb0 <HAL_RCC_OscConfig+0x470>)
 8002b34:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002b36:	4a5e      	ldr	r2, [pc, #376]	@ (8002cb0 <HAL_RCC_OscConfig+0x470>)
 8002b38:	f043 0304 	orr.w	r3, r3, #4
 8002b3c:	6713      	str	r3, [r2, #112]	@ 0x70
 8002b3e:	4b5c      	ldr	r3, [pc, #368]	@ (8002cb0 <HAL_RCC_OscConfig+0x470>)
 8002b40:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002b42:	4a5b      	ldr	r2, [pc, #364]	@ (8002cb0 <HAL_RCC_OscConfig+0x470>)
 8002b44:	f043 0301 	orr.w	r3, r3, #1
 8002b48:	6713      	str	r3, [r2, #112]	@ 0x70
 8002b4a:	e00b      	b.n	8002b64 <HAL_RCC_OscConfig+0x324>
 8002b4c:	4b58      	ldr	r3, [pc, #352]	@ (8002cb0 <HAL_RCC_OscConfig+0x470>)
 8002b4e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002b50:	4a57      	ldr	r2, [pc, #348]	@ (8002cb0 <HAL_RCC_OscConfig+0x470>)
 8002b52:	f023 0301 	bic.w	r3, r3, #1
 8002b56:	6713      	str	r3, [r2, #112]	@ 0x70
 8002b58:	4b55      	ldr	r3, [pc, #340]	@ (8002cb0 <HAL_RCC_OscConfig+0x470>)
 8002b5a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002b5c:	4a54      	ldr	r2, [pc, #336]	@ (8002cb0 <HAL_RCC_OscConfig+0x470>)
 8002b5e:	f023 0304 	bic.w	r3, r3, #4
 8002b62:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	689b      	ldr	r3, [r3, #8]
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d015      	beq.n	8002b98 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b6c:	f7fe f95e 	bl	8000e2c <HAL_GetTick>
 8002b70:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b72:	e00a      	b.n	8002b8a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002b74:	f7fe f95a 	bl	8000e2c <HAL_GetTick>
 8002b78:	4602      	mov	r2, r0
 8002b7a:	693b      	ldr	r3, [r7, #16]
 8002b7c:	1ad3      	subs	r3, r2, r3
 8002b7e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002b82:	4293      	cmp	r3, r2
 8002b84:	d901      	bls.n	8002b8a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002b86:	2303      	movs	r3, #3
 8002b88:	e0cb      	b.n	8002d22 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b8a:	4b49      	ldr	r3, [pc, #292]	@ (8002cb0 <HAL_RCC_OscConfig+0x470>)
 8002b8c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002b8e:	f003 0302 	and.w	r3, r3, #2
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d0ee      	beq.n	8002b74 <HAL_RCC_OscConfig+0x334>
 8002b96:	e014      	b.n	8002bc2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002b98:	f7fe f948 	bl	8000e2c <HAL_GetTick>
 8002b9c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002b9e:	e00a      	b.n	8002bb6 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002ba0:	f7fe f944 	bl	8000e2c <HAL_GetTick>
 8002ba4:	4602      	mov	r2, r0
 8002ba6:	693b      	ldr	r3, [r7, #16]
 8002ba8:	1ad3      	subs	r3, r2, r3
 8002baa:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002bae:	4293      	cmp	r3, r2
 8002bb0:	d901      	bls.n	8002bb6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002bb2:	2303      	movs	r3, #3
 8002bb4:	e0b5      	b.n	8002d22 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002bb6:	4b3e      	ldr	r3, [pc, #248]	@ (8002cb0 <HAL_RCC_OscConfig+0x470>)
 8002bb8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002bba:	f003 0302 	and.w	r3, r3, #2
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d1ee      	bne.n	8002ba0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002bc2:	7dfb      	ldrb	r3, [r7, #23]
 8002bc4:	2b01      	cmp	r3, #1
 8002bc6:	d105      	bne.n	8002bd4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002bc8:	4b39      	ldr	r3, [pc, #228]	@ (8002cb0 <HAL_RCC_OscConfig+0x470>)
 8002bca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bcc:	4a38      	ldr	r2, [pc, #224]	@ (8002cb0 <HAL_RCC_OscConfig+0x470>)
 8002bce:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002bd2:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	699b      	ldr	r3, [r3, #24]
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	f000 80a1 	beq.w	8002d20 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002bde:	4b34      	ldr	r3, [pc, #208]	@ (8002cb0 <HAL_RCC_OscConfig+0x470>)
 8002be0:	689b      	ldr	r3, [r3, #8]
 8002be2:	f003 030c 	and.w	r3, r3, #12
 8002be6:	2b08      	cmp	r3, #8
 8002be8:	d05c      	beq.n	8002ca4 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	699b      	ldr	r3, [r3, #24]
 8002bee:	2b02      	cmp	r3, #2
 8002bf0:	d141      	bne.n	8002c76 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002bf2:	4b31      	ldr	r3, [pc, #196]	@ (8002cb8 <HAL_RCC_OscConfig+0x478>)
 8002bf4:	2200      	movs	r2, #0
 8002bf6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002bf8:	f7fe f918 	bl	8000e2c <HAL_GetTick>
 8002bfc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002bfe:	e008      	b.n	8002c12 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002c00:	f7fe f914 	bl	8000e2c <HAL_GetTick>
 8002c04:	4602      	mov	r2, r0
 8002c06:	693b      	ldr	r3, [r7, #16]
 8002c08:	1ad3      	subs	r3, r2, r3
 8002c0a:	2b02      	cmp	r3, #2
 8002c0c:	d901      	bls.n	8002c12 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002c0e:	2303      	movs	r3, #3
 8002c10:	e087      	b.n	8002d22 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002c12:	4b27      	ldr	r3, [pc, #156]	@ (8002cb0 <HAL_RCC_OscConfig+0x470>)
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d1f0      	bne.n	8002c00 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	69da      	ldr	r2, [r3, #28]
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	6a1b      	ldr	r3, [r3, #32]
 8002c26:	431a      	orrs	r2, r3
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c2c:	019b      	lsls	r3, r3, #6
 8002c2e:	431a      	orrs	r2, r3
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c34:	085b      	lsrs	r3, r3, #1
 8002c36:	3b01      	subs	r3, #1
 8002c38:	041b      	lsls	r3, r3, #16
 8002c3a:	431a      	orrs	r2, r3
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c40:	061b      	lsls	r3, r3, #24
 8002c42:	491b      	ldr	r1, [pc, #108]	@ (8002cb0 <HAL_RCC_OscConfig+0x470>)
 8002c44:	4313      	orrs	r3, r2
 8002c46:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002c48:	4b1b      	ldr	r3, [pc, #108]	@ (8002cb8 <HAL_RCC_OscConfig+0x478>)
 8002c4a:	2201      	movs	r2, #1
 8002c4c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c4e:	f7fe f8ed 	bl	8000e2c <HAL_GetTick>
 8002c52:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002c54:	e008      	b.n	8002c68 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002c56:	f7fe f8e9 	bl	8000e2c <HAL_GetTick>
 8002c5a:	4602      	mov	r2, r0
 8002c5c:	693b      	ldr	r3, [r7, #16]
 8002c5e:	1ad3      	subs	r3, r2, r3
 8002c60:	2b02      	cmp	r3, #2
 8002c62:	d901      	bls.n	8002c68 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002c64:	2303      	movs	r3, #3
 8002c66:	e05c      	b.n	8002d22 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002c68:	4b11      	ldr	r3, [pc, #68]	@ (8002cb0 <HAL_RCC_OscConfig+0x470>)
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d0f0      	beq.n	8002c56 <HAL_RCC_OscConfig+0x416>
 8002c74:	e054      	b.n	8002d20 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c76:	4b10      	ldr	r3, [pc, #64]	@ (8002cb8 <HAL_RCC_OscConfig+0x478>)
 8002c78:	2200      	movs	r2, #0
 8002c7a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c7c:	f7fe f8d6 	bl	8000e2c <HAL_GetTick>
 8002c80:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002c82:	e008      	b.n	8002c96 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002c84:	f7fe f8d2 	bl	8000e2c <HAL_GetTick>
 8002c88:	4602      	mov	r2, r0
 8002c8a:	693b      	ldr	r3, [r7, #16]
 8002c8c:	1ad3      	subs	r3, r2, r3
 8002c8e:	2b02      	cmp	r3, #2
 8002c90:	d901      	bls.n	8002c96 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002c92:	2303      	movs	r3, #3
 8002c94:	e045      	b.n	8002d22 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002c96:	4b06      	ldr	r3, [pc, #24]	@ (8002cb0 <HAL_RCC_OscConfig+0x470>)
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d1f0      	bne.n	8002c84 <HAL_RCC_OscConfig+0x444>
 8002ca2:	e03d      	b.n	8002d20 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	699b      	ldr	r3, [r3, #24]
 8002ca8:	2b01      	cmp	r3, #1
 8002caa:	d107      	bne.n	8002cbc <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002cac:	2301      	movs	r3, #1
 8002cae:	e038      	b.n	8002d22 <HAL_RCC_OscConfig+0x4e2>
 8002cb0:	40023800 	.word	0x40023800
 8002cb4:	40007000 	.word	0x40007000
 8002cb8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002cbc:	4b1b      	ldr	r3, [pc, #108]	@ (8002d2c <HAL_RCC_OscConfig+0x4ec>)
 8002cbe:	685b      	ldr	r3, [r3, #4]
 8002cc0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	699b      	ldr	r3, [r3, #24]
 8002cc6:	2b01      	cmp	r3, #1
 8002cc8:	d028      	beq.n	8002d1c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002cd4:	429a      	cmp	r2, r3
 8002cd6:	d121      	bne.n	8002d1c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002ce2:	429a      	cmp	r2, r3
 8002ce4:	d11a      	bne.n	8002d1c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002ce6:	68fa      	ldr	r2, [r7, #12]
 8002ce8:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002cec:	4013      	ands	r3, r2
 8002cee:	687a      	ldr	r2, [r7, #4]
 8002cf0:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002cf2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002cf4:	4293      	cmp	r3, r2
 8002cf6:	d111      	bne.n	8002d1c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d02:	085b      	lsrs	r3, r3, #1
 8002d04:	3b01      	subs	r3, #1
 8002d06:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002d08:	429a      	cmp	r2, r3
 8002d0a:	d107      	bne.n	8002d1c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d16:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002d18:	429a      	cmp	r2, r3
 8002d1a:	d001      	beq.n	8002d20 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002d1c:	2301      	movs	r3, #1
 8002d1e:	e000      	b.n	8002d22 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002d20:	2300      	movs	r3, #0
}
 8002d22:	4618      	mov	r0, r3
 8002d24:	3718      	adds	r7, #24
 8002d26:	46bd      	mov	sp, r7
 8002d28:	bd80      	pop	{r7, pc}
 8002d2a:	bf00      	nop
 8002d2c:	40023800 	.word	0x40023800

08002d30 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002d30:	b580      	push	{r7, lr}
 8002d32:	b084      	sub	sp, #16
 8002d34:	af00      	add	r7, sp, #0
 8002d36:	6078      	str	r0, [r7, #4]
 8002d38:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d101      	bne.n	8002d44 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002d40:	2301      	movs	r3, #1
 8002d42:	e0cc      	b.n	8002ede <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002d44:	4b68      	ldr	r3, [pc, #416]	@ (8002ee8 <HAL_RCC_ClockConfig+0x1b8>)
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	f003 0307 	and.w	r3, r3, #7
 8002d4c:	683a      	ldr	r2, [r7, #0]
 8002d4e:	429a      	cmp	r2, r3
 8002d50:	d90c      	bls.n	8002d6c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d52:	4b65      	ldr	r3, [pc, #404]	@ (8002ee8 <HAL_RCC_ClockConfig+0x1b8>)
 8002d54:	683a      	ldr	r2, [r7, #0]
 8002d56:	b2d2      	uxtb	r2, r2
 8002d58:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d5a:	4b63      	ldr	r3, [pc, #396]	@ (8002ee8 <HAL_RCC_ClockConfig+0x1b8>)
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	f003 0307 	and.w	r3, r3, #7
 8002d62:	683a      	ldr	r2, [r7, #0]
 8002d64:	429a      	cmp	r2, r3
 8002d66:	d001      	beq.n	8002d6c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002d68:	2301      	movs	r3, #1
 8002d6a:	e0b8      	b.n	8002ede <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	f003 0302 	and.w	r3, r3, #2
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d020      	beq.n	8002dba <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	f003 0304 	and.w	r3, r3, #4
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d005      	beq.n	8002d90 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002d84:	4b59      	ldr	r3, [pc, #356]	@ (8002eec <HAL_RCC_ClockConfig+0x1bc>)
 8002d86:	689b      	ldr	r3, [r3, #8]
 8002d88:	4a58      	ldr	r2, [pc, #352]	@ (8002eec <HAL_RCC_ClockConfig+0x1bc>)
 8002d8a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8002d8e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	f003 0308 	and.w	r3, r3, #8
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d005      	beq.n	8002da8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002d9c:	4b53      	ldr	r3, [pc, #332]	@ (8002eec <HAL_RCC_ClockConfig+0x1bc>)
 8002d9e:	689b      	ldr	r3, [r3, #8]
 8002da0:	4a52      	ldr	r2, [pc, #328]	@ (8002eec <HAL_RCC_ClockConfig+0x1bc>)
 8002da2:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002da6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002da8:	4b50      	ldr	r3, [pc, #320]	@ (8002eec <HAL_RCC_ClockConfig+0x1bc>)
 8002daa:	689b      	ldr	r3, [r3, #8]
 8002dac:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	689b      	ldr	r3, [r3, #8]
 8002db4:	494d      	ldr	r1, [pc, #308]	@ (8002eec <HAL_RCC_ClockConfig+0x1bc>)
 8002db6:	4313      	orrs	r3, r2
 8002db8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	f003 0301 	and.w	r3, r3, #1
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d044      	beq.n	8002e50 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	685b      	ldr	r3, [r3, #4]
 8002dca:	2b01      	cmp	r3, #1
 8002dcc:	d107      	bne.n	8002dde <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002dce:	4b47      	ldr	r3, [pc, #284]	@ (8002eec <HAL_RCC_ClockConfig+0x1bc>)
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d119      	bne.n	8002e0e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002dda:	2301      	movs	r3, #1
 8002ddc:	e07f      	b.n	8002ede <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	685b      	ldr	r3, [r3, #4]
 8002de2:	2b02      	cmp	r3, #2
 8002de4:	d003      	beq.n	8002dee <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002dea:	2b03      	cmp	r3, #3
 8002dec:	d107      	bne.n	8002dfe <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002dee:	4b3f      	ldr	r3, [pc, #252]	@ (8002eec <HAL_RCC_ClockConfig+0x1bc>)
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d109      	bne.n	8002e0e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002dfa:	2301      	movs	r3, #1
 8002dfc:	e06f      	b.n	8002ede <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002dfe:	4b3b      	ldr	r3, [pc, #236]	@ (8002eec <HAL_RCC_ClockConfig+0x1bc>)
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	f003 0302 	and.w	r3, r3, #2
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d101      	bne.n	8002e0e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002e0a:	2301      	movs	r3, #1
 8002e0c:	e067      	b.n	8002ede <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002e0e:	4b37      	ldr	r3, [pc, #220]	@ (8002eec <HAL_RCC_ClockConfig+0x1bc>)
 8002e10:	689b      	ldr	r3, [r3, #8]
 8002e12:	f023 0203 	bic.w	r2, r3, #3
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	685b      	ldr	r3, [r3, #4]
 8002e1a:	4934      	ldr	r1, [pc, #208]	@ (8002eec <HAL_RCC_ClockConfig+0x1bc>)
 8002e1c:	4313      	orrs	r3, r2
 8002e1e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002e20:	f7fe f804 	bl	8000e2c <HAL_GetTick>
 8002e24:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e26:	e00a      	b.n	8002e3e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002e28:	f7fe f800 	bl	8000e2c <HAL_GetTick>
 8002e2c:	4602      	mov	r2, r0
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	1ad3      	subs	r3, r2, r3
 8002e32:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002e36:	4293      	cmp	r3, r2
 8002e38:	d901      	bls.n	8002e3e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002e3a:	2303      	movs	r3, #3
 8002e3c:	e04f      	b.n	8002ede <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e3e:	4b2b      	ldr	r3, [pc, #172]	@ (8002eec <HAL_RCC_ClockConfig+0x1bc>)
 8002e40:	689b      	ldr	r3, [r3, #8]
 8002e42:	f003 020c 	and.w	r2, r3, #12
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	685b      	ldr	r3, [r3, #4]
 8002e4a:	009b      	lsls	r3, r3, #2
 8002e4c:	429a      	cmp	r2, r3
 8002e4e:	d1eb      	bne.n	8002e28 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002e50:	4b25      	ldr	r3, [pc, #148]	@ (8002ee8 <HAL_RCC_ClockConfig+0x1b8>)
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	f003 0307 	and.w	r3, r3, #7
 8002e58:	683a      	ldr	r2, [r7, #0]
 8002e5a:	429a      	cmp	r2, r3
 8002e5c:	d20c      	bcs.n	8002e78 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e5e:	4b22      	ldr	r3, [pc, #136]	@ (8002ee8 <HAL_RCC_ClockConfig+0x1b8>)
 8002e60:	683a      	ldr	r2, [r7, #0]
 8002e62:	b2d2      	uxtb	r2, r2
 8002e64:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e66:	4b20      	ldr	r3, [pc, #128]	@ (8002ee8 <HAL_RCC_ClockConfig+0x1b8>)
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	f003 0307 	and.w	r3, r3, #7
 8002e6e:	683a      	ldr	r2, [r7, #0]
 8002e70:	429a      	cmp	r2, r3
 8002e72:	d001      	beq.n	8002e78 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002e74:	2301      	movs	r3, #1
 8002e76:	e032      	b.n	8002ede <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	f003 0304 	and.w	r3, r3, #4
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d008      	beq.n	8002e96 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002e84:	4b19      	ldr	r3, [pc, #100]	@ (8002eec <HAL_RCC_ClockConfig+0x1bc>)
 8002e86:	689b      	ldr	r3, [r3, #8]
 8002e88:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	68db      	ldr	r3, [r3, #12]
 8002e90:	4916      	ldr	r1, [pc, #88]	@ (8002eec <HAL_RCC_ClockConfig+0x1bc>)
 8002e92:	4313      	orrs	r3, r2
 8002e94:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	f003 0308 	and.w	r3, r3, #8
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d009      	beq.n	8002eb6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002ea2:	4b12      	ldr	r3, [pc, #72]	@ (8002eec <HAL_RCC_ClockConfig+0x1bc>)
 8002ea4:	689b      	ldr	r3, [r3, #8]
 8002ea6:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	691b      	ldr	r3, [r3, #16]
 8002eae:	00db      	lsls	r3, r3, #3
 8002eb0:	490e      	ldr	r1, [pc, #56]	@ (8002eec <HAL_RCC_ClockConfig+0x1bc>)
 8002eb2:	4313      	orrs	r3, r2
 8002eb4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002eb6:	f000 f821 	bl	8002efc <HAL_RCC_GetSysClockFreq>
 8002eba:	4602      	mov	r2, r0
 8002ebc:	4b0b      	ldr	r3, [pc, #44]	@ (8002eec <HAL_RCC_ClockConfig+0x1bc>)
 8002ebe:	689b      	ldr	r3, [r3, #8]
 8002ec0:	091b      	lsrs	r3, r3, #4
 8002ec2:	f003 030f 	and.w	r3, r3, #15
 8002ec6:	490a      	ldr	r1, [pc, #40]	@ (8002ef0 <HAL_RCC_ClockConfig+0x1c0>)
 8002ec8:	5ccb      	ldrb	r3, [r1, r3]
 8002eca:	fa22 f303 	lsr.w	r3, r2, r3
 8002ece:	4a09      	ldr	r2, [pc, #36]	@ (8002ef4 <HAL_RCC_ClockConfig+0x1c4>)
 8002ed0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002ed2:	4b09      	ldr	r3, [pc, #36]	@ (8002ef8 <HAL_RCC_ClockConfig+0x1c8>)
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	4618      	mov	r0, r3
 8002ed8:	f7fd fc60 	bl	800079c <HAL_InitTick>

  return HAL_OK;
 8002edc:	2300      	movs	r3, #0
}
 8002ede:	4618      	mov	r0, r3
 8002ee0:	3710      	adds	r7, #16
 8002ee2:	46bd      	mov	sp, r7
 8002ee4:	bd80      	pop	{r7, pc}
 8002ee6:	bf00      	nop
 8002ee8:	40023c00 	.word	0x40023c00
 8002eec:	40023800 	.word	0x40023800
 8002ef0:	08015cc8 	.word	0x08015cc8
 8002ef4:	20000000 	.word	0x20000000
 8002ef8:	20000004 	.word	0x20000004

08002efc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002efc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002f00:	b094      	sub	sp, #80	@ 0x50
 8002f02:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002f04:	2300      	movs	r3, #0
 8002f06:	647b      	str	r3, [r7, #68]	@ 0x44
 8002f08:	2300      	movs	r3, #0
 8002f0a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002f0c:	2300      	movs	r3, #0
 8002f0e:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8002f10:	2300      	movs	r3, #0
 8002f12:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002f14:	4b79      	ldr	r3, [pc, #484]	@ (80030fc <HAL_RCC_GetSysClockFreq+0x200>)
 8002f16:	689b      	ldr	r3, [r3, #8]
 8002f18:	f003 030c 	and.w	r3, r3, #12
 8002f1c:	2b08      	cmp	r3, #8
 8002f1e:	d00d      	beq.n	8002f3c <HAL_RCC_GetSysClockFreq+0x40>
 8002f20:	2b08      	cmp	r3, #8
 8002f22:	f200 80e1 	bhi.w	80030e8 <HAL_RCC_GetSysClockFreq+0x1ec>
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d002      	beq.n	8002f30 <HAL_RCC_GetSysClockFreq+0x34>
 8002f2a:	2b04      	cmp	r3, #4
 8002f2c:	d003      	beq.n	8002f36 <HAL_RCC_GetSysClockFreq+0x3a>
 8002f2e:	e0db      	b.n	80030e8 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002f30:	4b73      	ldr	r3, [pc, #460]	@ (8003100 <HAL_RCC_GetSysClockFreq+0x204>)
 8002f32:	64bb      	str	r3, [r7, #72]	@ 0x48
       break;
 8002f34:	e0db      	b.n	80030ee <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002f36:	4b73      	ldr	r3, [pc, #460]	@ (8003104 <HAL_RCC_GetSysClockFreq+0x208>)
 8002f38:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002f3a:	e0d8      	b.n	80030ee <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002f3c:	4b6f      	ldr	r3, [pc, #444]	@ (80030fc <HAL_RCC_GetSysClockFreq+0x200>)
 8002f3e:	685b      	ldr	r3, [r3, #4]
 8002f40:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002f44:	647b      	str	r3, [r7, #68]	@ 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002f46:	4b6d      	ldr	r3, [pc, #436]	@ (80030fc <HAL_RCC_GetSysClockFreq+0x200>)
 8002f48:	685b      	ldr	r3, [r3, #4]
 8002f4a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d063      	beq.n	800301a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002f52:	4b6a      	ldr	r3, [pc, #424]	@ (80030fc <HAL_RCC_GetSysClockFreq+0x200>)
 8002f54:	685b      	ldr	r3, [r3, #4]
 8002f56:	099b      	lsrs	r3, r3, #6
 8002f58:	2200      	movs	r2, #0
 8002f5a:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002f5c:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8002f5e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002f60:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002f64:	633b      	str	r3, [r7, #48]	@ 0x30
 8002f66:	2300      	movs	r3, #0
 8002f68:	637b      	str	r3, [r7, #52]	@ 0x34
 8002f6a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8002f6e:	4622      	mov	r2, r4
 8002f70:	462b      	mov	r3, r5
 8002f72:	f04f 0000 	mov.w	r0, #0
 8002f76:	f04f 0100 	mov.w	r1, #0
 8002f7a:	0159      	lsls	r1, r3, #5
 8002f7c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002f80:	0150      	lsls	r0, r2, #5
 8002f82:	4602      	mov	r2, r0
 8002f84:	460b      	mov	r3, r1
 8002f86:	4621      	mov	r1, r4
 8002f88:	1a51      	subs	r1, r2, r1
 8002f8a:	6139      	str	r1, [r7, #16]
 8002f8c:	4629      	mov	r1, r5
 8002f8e:	eb63 0301 	sbc.w	r3, r3, r1
 8002f92:	617b      	str	r3, [r7, #20]
 8002f94:	f04f 0200 	mov.w	r2, #0
 8002f98:	f04f 0300 	mov.w	r3, #0
 8002f9c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002fa0:	4659      	mov	r1, fp
 8002fa2:	018b      	lsls	r3, r1, #6
 8002fa4:	4651      	mov	r1, sl
 8002fa6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002faa:	4651      	mov	r1, sl
 8002fac:	018a      	lsls	r2, r1, #6
 8002fae:	4651      	mov	r1, sl
 8002fb0:	ebb2 0801 	subs.w	r8, r2, r1
 8002fb4:	4659      	mov	r1, fp
 8002fb6:	eb63 0901 	sbc.w	r9, r3, r1
 8002fba:	f04f 0200 	mov.w	r2, #0
 8002fbe:	f04f 0300 	mov.w	r3, #0
 8002fc2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002fc6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002fca:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002fce:	4690      	mov	r8, r2
 8002fd0:	4699      	mov	r9, r3
 8002fd2:	4623      	mov	r3, r4
 8002fd4:	eb18 0303 	adds.w	r3, r8, r3
 8002fd8:	60bb      	str	r3, [r7, #8]
 8002fda:	462b      	mov	r3, r5
 8002fdc:	eb49 0303 	adc.w	r3, r9, r3
 8002fe0:	60fb      	str	r3, [r7, #12]
 8002fe2:	f04f 0200 	mov.w	r2, #0
 8002fe6:	f04f 0300 	mov.w	r3, #0
 8002fea:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002fee:	4629      	mov	r1, r5
 8002ff0:	024b      	lsls	r3, r1, #9
 8002ff2:	4621      	mov	r1, r4
 8002ff4:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002ff8:	4621      	mov	r1, r4
 8002ffa:	024a      	lsls	r2, r1, #9
 8002ffc:	4610      	mov	r0, r2
 8002ffe:	4619      	mov	r1, r3
 8003000:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003002:	2200      	movs	r2, #0
 8003004:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003006:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003008:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800300c:	f7fd f930 	bl	8000270 <__aeabi_uldivmod>
 8003010:	4602      	mov	r2, r0
 8003012:	460b      	mov	r3, r1
 8003014:	4613      	mov	r3, r2
 8003016:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003018:	e058      	b.n	80030cc <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800301a:	4b38      	ldr	r3, [pc, #224]	@ (80030fc <HAL_RCC_GetSysClockFreq+0x200>)
 800301c:	685b      	ldr	r3, [r3, #4]
 800301e:	099b      	lsrs	r3, r3, #6
 8003020:	2200      	movs	r2, #0
 8003022:	4618      	mov	r0, r3
 8003024:	4611      	mov	r1, r2
 8003026:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800302a:	623b      	str	r3, [r7, #32]
 800302c:	2300      	movs	r3, #0
 800302e:	627b      	str	r3, [r7, #36]	@ 0x24
 8003030:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003034:	4642      	mov	r2, r8
 8003036:	464b      	mov	r3, r9
 8003038:	f04f 0000 	mov.w	r0, #0
 800303c:	f04f 0100 	mov.w	r1, #0
 8003040:	0159      	lsls	r1, r3, #5
 8003042:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003046:	0150      	lsls	r0, r2, #5
 8003048:	4602      	mov	r2, r0
 800304a:	460b      	mov	r3, r1
 800304c:	4641      	mov	r1, r8
 800304e:	ebb2 0a01 	subs.w	sl, r2, r1
 8003052:	4649      	mov	r1, r9
 8003054:	eb63 0b01 	sbc.w	fp, r3, r1
 8003058:	f04f 0200 	mov.w	r2, #0
 800305c:	f04f 0300 	mov.w	r3, #0
 8003060:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003064:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003068:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800306c:	ebb2 040a 	subs.w	r4, r2, sl
 8003070:	eb63 050b 	sbc.w	r5, r3, fp
 8003074:	f04f 0200 	mov.w	r2, #0
 8003078:	f04f 0300 	mov.w	r3, #0
 800307c:	00eb      	lsls	r3, r5, #3
 800307e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003082:	00e2      	lsls	r2, r4, #3
 8003084:	4614      	mov	r4, r2
 8003086:	461d      	mov	r5, r3
 8003088:	4643      	mov	r3, r8
 800308a:	18e3      	adds	r3, r4, r3
 800308c:	603b      	str	r3, [r7, #0]
 800308e:	464b      	mov	r3, r9
 8003090:	eb45 0303 	adc.w	r3, r5, r3
 8003094:	607b      	str	r3, [r7, #4]
 8003096:	f04f 0200 	mov.w	r2, #0
 800309a:	f04f 0300 	mov.w	r3, #0
 800309e:	e9d7 4500 	ldrd	r4, r5, [r7]
 80030a2:	4629      	mov	r1, r5
 80030a4:	028b      	lsls	r3, r1, #10
 80030a6:	4621      	mov	r1, r4
 80030a8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80030ac:	4621      	mov	r1, r4
 80030ae:	028a      	lsls	r2, r1, #10
 80030b0:	4610      	mov	r0, r2
 80030b2:	4619      	mov	r1, r3
 80030b4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80030b6:	2200      	movs	r2, #0
 80030b8:	61bb      	str	r3, [r7, #24]
 80030ba:	61fa      	str	r2, [r7, #28]
 80030bc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80030c0:	f7fd f8d6 	bl	8000270 <__aeabi_uldivmod>
 80030c4:	4602      	mov	r2, r0
 80030c6:	460b      	mov	r3, r1
 80030c8:	4613      	mov	r3, r2
 80030ca:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80030cc:	4b0b      	ldr	r3, [pc, #44]	@ (80030fc <HAL_RCC_GetSysClockFreq+0x200>)
 80030ce:	685b      	ldr	r3, [r3, #4]
 80030d0:	0c1b      	lsrs	r3, r3, #16
 80030d2:	f003 0303 	and.w	r3, r3, #3
 80030d6:	3301      	adds	r3, #1
 80030d8:	005b      	lsls	r3, r3, #1
 80030da:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco/pllp;
 80030dc:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80030de:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80030e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80030e4:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80030e6:	e002      	b.n	80030ee <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80030e8:	4b05      	ldr	r3, [pc, #20]	@ (8003100 <HAL_RCC_GetSysClockFreq+0x204>)
 80030ea:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80030ec:	bf00      	nop
    }
  }
  return sysclockfreq;
 80030ee:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 80030f0:	4618      	mov	r0, r3
 80030f2:	3750      	adds	r7, #80	@ 0x50
 80030f4:	46bd      	mov	sp, r7
 80030f6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80030fa:	bf00      	nop
 80030fc:	40023800 	.word	0x40023800
 8003100:	00f42400 	.word	0x00f42400
 8003104:	007a1200 	.word	0x007a1200

08003108 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003108:	b480      	push	{r7}
 800310a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800310c:	4b03      	ldr	r3, [pc, #12]	@ (800311c <HAL_RCC_GetHCLKFreq+0x14>)
 800310e:	681b      	ldr	r3, [r3, #0]
}
 8003110:	4618      	mov	r0, r3
 8003112:	46bd      	mov	sp, r7
 8003114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003118:	4770      	bx	lr
 800311a:	bf00      	nop
 800311c:	20000000 	.word	0x20000000

08003120 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003120:	b580      	push	{r7, lr}
 8003122:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003124:	f7ff fff0 	bl	8003108 <HAL_RCC_GetHCLKFreq>
 8003128:	4602      	mov	r2, r0
 800312a:	4b05      	ldr	r3, [pc, #20]	@ (8003140 <HAL_RCC_GetPCLK1Freq+0x20>)
 800312c:	689b      	ldr	r3, [r3, #8]
 800312e:	0a9b      	lsrs	r3, r3, #10
 8003130:	f003 0307 	and.w	r3, r3, #7
 8003134:	4903      	ldr	r1, [pc, #12]	@ (8003144 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003136:	5ccb      	ldrb	r3, [r1, r3]
 8003138:	fa22 f303 	lsr.w	r3, r2, r3
}
 800313c:	4618      	mov	r0, r3
 800313e:	bd80      	pop	{r7, pc}
 8003140:	40023800 	.word	0x40023800
 8003144:	08015cd8 	.word	0x08015cd8

08003148 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003148:	b480      	push	{r7}
 800314a:	b083      	sub	sp, #12
 800314c:	af00      	add	r7, sp, #0
 800314e:	6078      	str	r0, [r7, #4]
 8003150:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	220f      	movs	r2, #15
 8003156:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003158:	4b12      	ldr	r3, [pc, #72]	@ (80031a4 <HAL_RCC_GetClockConfig+0x5c>)
 800315a:	689b      	ldr	r3, [r3, #8]
 800315c:	f003 0203 	and.w	r2, r3, #3
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8003164:	4b0f      	ldr	r3, [pc, #60]	@ (80031a4 <HAL_RCC_GetClockConfig+0x5c>)
 8003166:	689b      	ldr	r3, [r3, #8]
 8003168:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8003170:	4b0c      	ldr	r3, [pc, #48]	@ (80031a4 <HAL_RCC_GetClockConfig+0x5c>)
 8003172:	689b      	ldr	r3, [r3, #8]
 8003174:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 800317c:	4b09      	ldr	r3, [pc, #36]	@ (80031a4 <HAL_RCC_GetClockConfig+0x5c>)
 800317e:	689b      	ldr	r3, [r3, #8]
 8003180:	08db      	lsrs	r3, r3, #3
 8003182:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800318a:	4b07      	ldr	r3, [pc, #28]	@ (80031a8 <HAL_RCC_GetClockConfig+0x60>)
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	f003 0207 	and.w	r2, r3, #7
 8003192:	683b      	ldr	r3, [r7, #0]
 8003194:	601a      	str	r2, [r3, #0]
}
 8003196:	bf00      	nop
 8003198:	370c      	adds	r7, #12
 800319a:	46bd      	mov	sp, r7
 800319c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031a0:	4770      	bx	lr
 80031a2:	bf00      	nop
 80031a4:	40023800 	.word	0x40023800
 80031a8:	40023c00 	.word	0x40023c00

080031ac <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80031ac:	b580      	push	{r7, lr}
 80031ae:	b082      	sub	sp, #8
 80031b0:	af00      	add	r7, sp, #0
 80031b2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d101      	bne.n	80031be <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80031ba:	2301      	movs	r3, #1
 80031bc:	e041      	b.n	8003242 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80031c4:	b2db      	uxtb	r3, r3
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d106      	bne.n	80031d8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	2200      	movs	r2, #0
 80031ce:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80031d2:	6878      	ldr	r0, [r7, #4]
 80031d4:	f000 f839 	bl	800324a <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	2202      	movs	r2, #2
 80031dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681a      	ldr	r2, [r3, #0]
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	3304      	adds	r3, #4
 80031e8:	4619      	mov	r1, r3
 80031ea:	4610      	mov	r0, r2
 80031ec:	f000 f9c0 	bl	8003570 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	2201      	movs	r2, #1
 80031f4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	2201      	movs	r2, #1
 80031fc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	2201      	movs	r2, #1
 8003204:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	2201      	movs	r2, #1
 800320c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	2201      	movs	r2, #1
 8003214:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	2201      	movs	r2, #1
 800321c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	2201      	movs	r2, #1
 8003224:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	2201      	movs	r2, #1
 800322c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	2201      	movs	r2, #1
 8003234:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	2201      	movs	r2, #1
 800323c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003240:	2300      	movs	r3, #0
}
 8003242:	4618      	mov	r0, r3
 8003244:	3708      	adds	r7, #8
 8003246:	46bd      	mov	sp, r7
 8003248:	bd80      	pop	{r7, pc}

0800324a <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800324a:	b480      	push	{r7}
 800324c:	b083      	sub	sp, #12
 800324e:	af00      	add	r7, sp, #0
 8003250:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8003252:	bf00      	nop
 8003254:	370c      	adds	r7, #12
 8003256:	46bd      	mov	sp, r7
 8003258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800325c:	4770      	bx	lr
	...

08003260 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003260:	b480      	push	{r7}
 8003262:	b085      	sub	sp, #20
 8003264:	af00      	add	r7, sp, #0
 8003266:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800326e:	b2db      	uxtb	r3, r3
 8003270:	2b01      	cmp	r3, #1
 8003272:	d001      	beq.n	8003278 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003274:	2301      	movs	r3, #1
 8003276:	e04e      	b.n	8003316 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	2202      	movs	r2, #2
 800327c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	68da      	ldr	r2, [r3, #12]
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	f042 0201 	orr.w	r2, r2, #1
 800328e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	4a23      	ldr	r2, [pc, #140]	@ (8003324 <HAL_TIM_Base_Start_IT+0xc4>)
 8003296:	4293      	cmp	r3, r2
 8003298:	d022      	beq.n	80032e0 <HAL_TIM_Base_Start_IT+0x80>
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80032a2:	d01d      	beq.n	80032e0 <HAL_TIM_Base_Start_IT+0x80>
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	4a1f      	ldr	r2, [pc, #124]	@ (8003328 <HAL_TIM_Base_Start_IT+0xc8>)
 80032aa:	4293      	cmp	r3, r2
 80032ac:	d018      	beq.n	80032e0 <HAL_TIM_Base_Start_IT+0x80>
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	4a1e      	ldr	r2, [pc, #120]	@ (800332c <HAL_TIM_Base_Start_IT+0xcc>)
 80032b4:	4293      	cmp	r3, r2
 80032b6:	d013      	beq.n	80032e0 <HAL_TIM_Base_Start_IT+0x80>
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	4a1c      	ldr	r2, [pc, #112]	@ (8003330 <HAL_TIM_Base_Start_IT+0xd0>)
 80032be:	4293      	cmp	r3, r2
 80032c0:	d00e      	beq.n	80032e0 <HAL_TIM_Base_Start_IT+0x80>
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	4a1b      	ldr	r2, [pc, #108]	@ (8003334 <HAL_TIM_Base_Start_IT+0xd4>)
 80032c8:	4293      	cmp	r3, r2
 80032ca:	d009      	beq.n	80032e0 <HAL_TIM_Base_Start_IT+0x80>
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	4a19      	ldr	r2, [pc, #100]	@ (8003338 <HAL_TIM_Base_Start_IT+0xd8>)
 80032d2:	4293      	cmp	r3, r2
 80032d4:	d004      	beq.n	80032e0 <HAL_TIM_Base_Start_IT+0x80>
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	4a18      	ldr	r2, [pc, #96]	@ (800333c <HAL_TIM_Base_Start_IT+0xdc>)
 80032dc:	4293      	cmp	r3, r2
 80032de:	d111      	bne.n	8003304 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	689b      	ldr	r3, [r3, #8]
 80032e6:	f003 0307 	and.w	r3, r3, #7
 80032ea:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	2b06      	cmp	r3, #6
 80032f0:	d010      	beq.n	8003314 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	681a      	ldr	r2, [r3, #0]
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	f042 0201 	orr.w	r2, r2, #1
 8003300:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003302:	e007      	b.n	8003314 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	681a      	ldr	r2, [r3, #0]
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	f042 0201 	orr.w	r2, r2, #1
 8003312:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003314:	2300      	movs	r3, #0
}
 8003316:	4618      	mov	r0, r3
 8003318:	3714      	adds	r7, #20
 800331a:	46bd      	mov	sp, r7
 800331c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003320:	4770      	bx	lr
 8003322:	bf00      	nop
 8003324:	40010000 	.word	0x40010000
 8003328:	40000400 	.word	0x40000400
 800332c:	40000800 	.word	0x40000800
 8003330:	40000c00 	.word	0x40000c00
 8003334:	40010400 	.word	0x40010400
 8003338:	40014000 	.word	0x40014000
 800333c:	40001800 	.word	0x40001800

08003340 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003340:	b580      	push	{r7, lr}
 8003342:	b084      	sub	sp, #16
 8003344:	af00      	add	r7, sp, #0
 8003346:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	68db      	ldr	r3, [r3, #12]
 800334e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	691b      	ldr	r3, [r3, #16]
 8003356:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8003358:	68bb      	ldr	r3, [r7, #8]
 800335a:	f003 0302 	and.w	r3, r3, #2
 800335e:	2b00      	cmp	r3, #0
 8003360:	d020      	beq.n	80033a4 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	f003 0302 	and.w	r3, r3, #2
 8003368:	2b00      	cmp	r3, #0
 800336a:	d01b      	beq.n	80033a4 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	f06f 0202 	mvn.w	r2, #2
 8003374:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	2201      	movs	r2, #1
 800337a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	699b      	ldr	r3, [r3, #24]
 8003382:	f003 0303 	and.w	r3, r3, #3
 8003386:	2b00      	cmp	r3, #0
 8003388:	d003      	beq.n	8003392 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800338a:	6878      	ldr	r0, [r7, #4]
 800338c:	f000 f8d2 	bl	8003534 <HAL_TIM_IC_CaptureCallback>
 8003390:	e005      	b.n	800339e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003392:	6878      	ldr	r0, [r7, #4]
 8003394:	f000 f8c4 	bl	8003520 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003398:	6878      	ldr	r0, [r7, #4]
 800339a:	f000 f8d5 	bl	8003548 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	2200      	movs	r2, #0
 80033a2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80033a4:	68bb      	ldr	r3, [r7, #8]
 80033a6:	f003 0304 	and.w	r3, r3, #4
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d020      	beq.n	80033f0 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	f003 0304 	and.w	r3, r3, #4
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d01b      	beq.n	80033f0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	f06f 0204 	mvn.w	r2, #4
 80033c0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	2202      	movs	r2, #2
 80033c6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	699b      	ldr	r3, [r3, #24]
 80033ce:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d003      	beq.n	80033de <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80033d6:	6878      	ldr	r0, [r7, #4]
 80033d8:	f000 f8ac 	bl	8003534 <HAL_TIM_IC_CaptureCallback>
 80033dc:	e005      	b.n	80033ea <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80033de:	6878      	ldr	r0, [r7, #4]
 80033e0:	f000 f89e 	bl	8003520 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80033e4:	6878      	ldr	r0, [r7, #4]
 80033e6:	f000 f8af 	bl	8003548 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	2200      	movs	r2, #0
 80033ee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80033f0:	68bb      	ldr	r3, [r7, #8]
 80033f2:	f003 0308 	and.w	r3, r3, #8
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d020      	beq.n	800343c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	f003 0308 	and.w	r3, r3, #8
 8003400:	2b00      	cmp	r3, #0
 8003402:	d01b      	beq.n	800343c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	f06f 0208 	mvn.w	r2, #8
 800340c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	2204      	movs	r2, #4
 8003412:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	69db      	ldr	r3, [r3, #28]
 800341a:	f003 0303 	and.w	r3, r3, #3
 800341e:	2b00      	cmp	r3, #0
 8003420:	d003      	beq.n	800342a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003422:	6878      	ldr	r0, [r7, #4]
 8003424:	f000 f886 	bl	8003534 <HAL_TIM_IC_CaptureCallback>
 8003428:	e005      	b.n	8003436 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800342a:	6878      	ldr	r0, [r7, #4]
 800342c:	f000 f878 	bl	8003520 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003430:	6878      	ldr	r0, [r7, #4]
 8003432:	f000 f889 	bl	8003548 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	2200      	movs	r2, #0
 800343a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800343c:	68bb      	ldr	r3, [r7, #8]
 800343e:	f003 0310 	and.w	r3, r3, #16
 8003442:	2b00      	cmp	r3, #0
 8003444:	d020      	beq.n	8003488 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	f003 0310 	and.w	r3, r3, #16
 800344c:	2b00      	cmp	r3, #0
 800344e:	d01b      	beq.n	8003488 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	f06f 0210 	mvn.w	r2, #16
 8003458:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	2208      	movs	r2, #8
 800345e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	69db      	ldr	r3, [r3, #28]
 8003466:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800346a:	2b00      	cmp	r3, #0
 800346c:	d003      	beq.n	8003476 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800346e:	6878      	ldr	r0, [r7, #4]
 8003470:	f000 f860 	bl	8003534 <HAL_TIM_IC_CaptureCallback>
 8003474:	e005      	b.n	8003482 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003476:	6878      	ldr	r0, [r7, #4]
 8003478:	f000 f852 	bl	8003520 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800347c:	6878      	ldr	r0, [r7, #4]
 800347e:	f000 f863 	bl	8003548 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	2200      	movs	r2, #0
 8003486:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8003488:	68bb      	ldr	r3, [r7, #8]
 800348a:	f003 0301 	and.w	r3, r3, #1
 800348e:	2b00      	cmp	r3, #0
 8003490:	d00c      	beq.n	80034ac <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	f003 0301 	and.w	r3, r3, #1
 8003498:	2b00      	cmp	r3, #0
 800349a:	d007      	beq.n	80034ac <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	f06f 0201 	mvn.w	r2, #1
 80034a4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80034a6:	6878      	ldr	r0, [r7, #4]
 80034a8:	f7fd f934 	bl	8000714 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80034ac:	68bb      	ldr	r3, [r7, #8]
 80034ae:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d00c      	beq.n	80034d0 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d007      	beq.n	80034d0 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80034c8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80034ca:	6878      	ldr	r0, [r7, #4]
 80034cc:	f000 f906 	bl	80036dc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80034d0:	68bb      	ldr	r3, [r7, #8]
 80034d2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d00c      	beq.n	80034f4 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d007      	beq.n	80034f4 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80034ec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80034ee:	6878      	ldr	r0, [r7, #4]
 80034f0:	f000 f834 	bl	800355c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80034f4:	68bb      	ldr	r3, [r7, #8]
 80034f6:	f003 0320 	and.w	r3, r3, #32
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d00c      	beq.n	8003518 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	f003 0320 	and.w	r3, r3, #32
 8003504:	2b00      	cmp	r3, #0
 8003506:	d007      	beq.n	8003518 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	f06f 0220 	mvn.w	r2, #32
 8003510:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003512:	6878      	ldr	r0, [r7, #4]
 8003514:	f000 f8d8 	bl	80036c8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003518:	bf00      	nop
 800351a:	3710      	adds	r7, #16
 800351c:	46bd      	mov	sp, r7
 800351e:	bd80      	pop	{r7, pc}

08003520 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003520:	b480      	push	{r7}
 8003522:	b083      	sub	sp, #12
 8003524:	af00      	add	r7, sp, #0
 8003526:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003528:	bf00      	nop
 800352a:	370c      	adds	r7, #12
 800352c:	46bd      	mov	sp, r7
 800352e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003532:	4770      	bx	lr

08003534 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003534:	b480      	push	{r7}
 8003536:	b083      	sub	sp, #12
 8003538:	af00      	add	r7, sp, #0
 800353a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800353c:	bf00      	nop
 800353e:	370c      	adds	r7, #12
 8003540:	46bd      	mov	sp, r7
 8003542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003546:	4770      	bx	lr

08003548 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003548:	b480      	push	{r7}
 800354a:	b083      	sub	sp, #12
 800354c:	af00      	add	r7, sp, #0
 800354e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003550:	bf00      	nop
 8003552:	370c      	adds	r7, #12
 8003554:	46bd      	mov	sp, r7
 8003556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800355a:	4770      	bx	lr

0800355c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800355c:	b480      	push	{r7}
 800355e:	b083      	sub	sp, #12
 8003560:	af00      	add	r7, sp, #0
 8003562:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003564:	bf00      	nop
 8003566:	370c      	adds	r7, #12
 8003568:	46bd      	mov	sp, r7
 800356a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800356e:	4770      	bx	lr

08003570 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003570:	b480      	push	{r7}
 8003572:	b085      	sub	sp, #20
 8003574:	af00      	add	r7, sp, #0
 8003576:	6078      	str	r0, [r7, #4]
 8003578:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	4a46      	ldr	r2, [pc, #280]	@ (800369c <TIM_Base_SetConfig+0x12c>)
 8003584:	4293      	cmp	r3, r2
 8003586:	d013      	beq.n	80035b0 <TIM_Base_SetConfig+0x40>
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800358e:	d00f      	beq.n	80035b0 <TIM_Base_SetConfig+0x40>
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	4a43      	ldr	r2, [pc, #268]	@ (80036a0 <TIM_Base_SetConfig+0x130>)
 8003594:	4293      	cmp	r3, r2
 8003596:	d00b      	beq.n	80035b0 <TIM_Base_SetConfig+0x40>
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	4a42      	ldr	r2, [pc, #264]	@ (80036a4 <TIM_Base_SetConfig+0x134>)
 800359c:	4293      	cmp	r3, r2
 800359e:	d007      	beq.n	80035b0 <TIM_Base_SetConfig+0x40>
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	4a41      	ldr	r2, [pc, #260]	@ (80036a8 <TIM_Base_SetConfig+0x138>)
 80035a4:	4293      	cmp	r3, r2
 80035a6:	d003      	beq.n	80035b0 <TIM_Base_SetConfig+0x40>
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	4a40      	ldr	r2, [pc, #256]	@ (80036ac <TIM_Base_SetConfig+0x13c>)
 80035ac:	4293      	cmp	r3, r2
 80035ae:	d108      	bne.n	80035c2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80035b6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80035b8:	683b      	ldr	r3, [r7, #0]
 80035ba:	685b      	ldr	r3, [r3, #4]
 80035bc:	68fa      	ldr	r2, [r7, #12]
 80035be:	4313      	orrs	r3, r2
 80035c0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	4a35      	ldr	r2, [pc, #212]	@ (800369c <TIM_Base_SetConfig+0x12c>)
 80035c6:	4293      	cmp	r3, r2
 80035c8:	d02b      	beq.n	8003622 <TIM_Base_SetConfig+0xb2>
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80035d0:	d027      	beq.n	8003622 <TIM_Base_SetConfig+0xb2>
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	4a32      	ldr	r2, [pc, #200]	@ (80036a0 <TIM_Base_SetConfig+0x130>)
 80035d6:	4293      	cmp	r3, r2
 80035d8:	d023      	beq.n	8003622 <TIM_Base_SetConfig+0xb2>
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	4a31      	ldr	r2, [pc, #196]	@ (80036a4 <TIM_Base_SetConfig+0x134>)
 80035de:	4293      	cmp	r3, r2
 80035e0:	d01f      	beq.n	8003622 <TIM_Base_SetConfig+0xb2>
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	4a30      	ldr	r2, [pc, #192]	@ (80036a8 <TIM_Base_SetConfig+0x138>)
 80035e6:	4293      	cmp	r3, r2
 80035e8:	d01b      	beq.n	8003622 <TIM_Base_SetConfig+0xb2>
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	4a2f      	ldr	r2, [pc, #188]	@ (80036ac <TIM_Base_SetConfig+0x13c>)
 80035ee:	4293      	cmp	r3, r2
 80035f0:	d017      	beq.n	8003622 <TIM_Base_SetConfig+0xb2>
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	4a2e      	ldr	r2, [pc, #184]	@ (80036b0 <TIM_Base_SetConfig+0x140>)
 80035f6:	4293      	cmp	r3, r2
 80035f8:	d013      	beq.n	8003622 <TIM_Base_SetConfig+0xb2>
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	4a2d      	ldr	r2, [pc, #180]	@ (80036b4 <TIM_Base_SetConfig+0x144>)
 80035fe:	4293      	cmp	r3, r2
 8003600:	d00f      	beq.n	8003622 <TIM_Base_SetConfig+0xb2>
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	4a2c      	ldr	r2, [pc, #176]	@ (80036b8 <TIM_Base_SetConfig+0x148>)
 8003606:	4293      	cmp	r3, r2
 8003608:	d00b      	beq.n	8003622 <TIM_Base_SetConfig+0xb2>
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	4a2b      	ldr	r2, [pc, #172]	@ (80036bc <TIM_Base_SetConfig+0x14c>)
 800360e:	4293      	cmp	r3, r2
 8003610:	d007      	beq.n	8003622 <TIM_Base_SetConfig+0xb2>
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	4a2a      	ldr	r2, [pc, #168]	@ (80036c0 <TIM_Base_SetConfig+0x150>)
 8003616:	4293      	cmp	r3, r2
 8003618:	d003      	beq.n	8003622 <TIM_Base_SetConfig+0xb2>
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	4a29      	ldr	r2, [pc, #164]	@ (80036c4 <TIM_Base_SetConfig+0x154>)
 800361e:	4293      	cmp	r3, r2
 8003620:	d108      	bne.n	8003634 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003628:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800362a:	683b      	ldr	r3, [r7, #0]
 800362c:	68db      	ldr	r3, [r3, #12]
 800362e:	68fa      	ldr	r2, [r7, #12]
 8003630:	4313      	orrs	r3, r2
 8003632:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800363a:	683b      	ldr	r3, [r7, #0]
 800363c:	695b      	ldr	r3, [r3, #20]
 800363e:	4313      	orrs	r3, r2
 8003640:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	68fa      	ldr	r2, [r7, #12]
 8003646:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003648:	683b      	ldr	r3, [r7, #0]
 800364a:	689a      	ldr	r2, [r3, #8]
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003650:	683b      	ldr	r3, [r7, #0]
 8003652:	681a      	ldr	r2, [r3, #0]
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	4a10      	ldr	r2, [pc, #64]	@ (800369c <TIM_Base_SetConfig+0x12c>)
 800365c:	4293      	cmp	r3, r2
 800365e:	d003      	beq.n	8003668 <TIM_Base_SetConfig+0xf8>
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	4a12      	ldr	r2, [pc, #72]	@ (80036ac <TIM_Base_SetConfig+0x13c>)
 8003664:	4293      	cmp	r3, r2
 8003666:	d103      	bne.n	8003670 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003668:	683b      	ldr	r3, [r7, #0]
 800366a:	691a      	ldr	r2, [r3, #16]
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	2201      	movs	r2, #1
 8003674:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	691b      	ldr	r3, [r3, #16]
 800367a:	f003 0301 	and.w	r3, r3, #1
 800367e:	2b01      	cmp	r3, #1
 8003680:	d105      	bne.n	800368e <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	691b      	ldr	r3, [r3, #16]
 8003686:	f023 0201 	bic.w	r2, r3, #1
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	611a      	str	r2, [r3, #16]
  }
}
 800368e:	bf00      	nop
 8003690:	3714      	adds	r7, #20
 8003692:	46bd      	mov	sp, r7
 8003694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003698:	4770      	bx	lr
 800369a:	bf00      	nop
 800369c:	40010000 	.word	0x40010000
 80036a0:	40000400 	.word	0x40000400
 80036a4:	40000800 	.word	0x40000800
 80036a8:	40000c00 	.word	0x40000c00
 80036ac:	40010400 	.word	0x40010400
 80036b0:	40014000 	.word	0x40014000
 80036b4:	40014400 	.word	0x40014400
 80036b8:	40014800 	.word	0x40014800
 80036bc:	40001800 	.word	0x40001800
 80036c0:	40001c00 	.word	0x40001c00
 80036c4:	40002000 	.word	0x40002000

080036c8 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80036c8:	b480      	push	{r7}
 80036ca:	b083      	sub	sp, #12
 80036cc:	af00      	add	r7, sp, #0
 80036ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80036d0:	bf00      	nop
 80036d2:	370c      	adds	r7, #12
 80036d4:	46bd      	mov	sp, r7
 80036d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036da:	4770      	bx	lr

080036dc <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80036dc:	b480      	push	{r7}
 80036de:	b083      	sub	sp, #12
 80036e0:	af00      	add	r7, sp, #0
 80036e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80036e4:	bf00      	nop
 80036e6:	370c      	adds	r7, #12
 80036e8:	46bd      	mov	sp, r7
 80036ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ee:	4770      	bx	lr

080036f0 <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 80036f0:	b580      	push	{r7, lr}
 80036f2:	b084      	sub	sp, #16
 80036f4:	af04      	add	r7, sp, #16
  /* IP addresses initialization */
  IP_ADDRESS[0] = 192;
 80036f6:	4b92      	ldr	r3, [pc, #584]	@ (8003940 <MX_LWIP_Init+0x250>)
 80036f8:	22c0      	movs	r2, #192	@ 0xc0
 80036fa:	701a      	strb	r2, [r3, #0]
  IP_ADDRESS[1] = 168;
 80036fc:	4b90      	ldr	r3, [pc, #576]	@ (8003940 <MX_LWIP_Init+0x250>)
 80036fe:	22a8      	movs	r2, #168	@ 0xa8
 8003700:	705a      	strb	r2, [r3, #1]
  IP_ADDRESS[2] = 1;
 8003702:	4b8f      	ldr	r3, [pc, #572]	@ (8003940 <MX_LWIP_Init+0x250>)
 8003704:	2201      	movs	r2, #1
 8003706:	709a      	strb	r2, [r3, #2]
  IP_ADDRESS[3] = 2;
 8003708:	4b8d      	ldr	r3, [pc, #564]	@ (8003940 <MX_LWIP_Init+0x250>)
 800370a:	2202      	movs	r2, #2
 800370c:	70da      	strb	r2, [r3, #3]
  NETMASK_ADDRESS[0] = 255;
 800370e:	4b8d      	ldr	r3, [pc, #564]	@ (8003944 <MX_LWIP_Init+0x254>)
 8003710:	22ff      	movs	r2, #255	@ 0xff
 8003712:	701a      	strb	r2, [r3, #0]
  NETMASK_ADDRESS[1] = 255;
 8003714:	4b8b      	ldr	r3, [pc, #556]	@ (8003944 <MX_LWIP_Init+0x254>)
 8003716:	22ff      	movs	r2, #255	@ 0xff
 8003718:	705a      	strb	r2, [r3, #1]
  NETMASK_ADDRESS[2] = 255;
 800371a:	4b8a      	ldr	r3, [pc, #552]	@ (8003944 <MX_LWIP_Init+0x254>)
 800371c:	22ff      	movs	r2, #255	@ 0xff
 800371e:	709a      	strb	r2, [r3, #2]
  NETMASK_ADDRESS[3] = 0;
 8003720:	4b88      	ldr	r3, [pc, #544]	@ (8003944 <MX_LWIP_Init+0x254>)
 8003722:	2200      	movs	r2, #0
 8003724:	70da      	strb	r2, [r3, #3]
  GATEWAY_ADDRESS[0] = 192;
 8003726:	4b88      	ldr	r3, [pc, #544]	@ (8003948 <MX_LWIP_Init+0x258>)
 8003728:	22c0      	movs	r2, #192	@ 0xc0
 800372a:	701a      	strb	r2, [r3, #0]
  GATEWAY_ADDRESS[1] = 168;
 800372c:	4b86      	ldr	r3, [pc, #536]	@ (8003948 <MX_LWIP_Init+0x258>)
 800372e:	22a8      	movs	r2, #168	@ 0xa8
 8003730:	705a      	strb	r2, [r3, #1]
  GATEWAY_ADDRESS[2] = 1;
 8003732:	4b85      	ldr	r3, [pc, #532]	@ (8003948 <MX_LWIP_Init+0x258>)
 8003734:	2201      	movs	r2, #1
 8003736:	709a      	strb	r2, [r3, #2]
  GATEWAY_ADDRESS[3] = 1;
 8003738:	4b83      	ldr	r3, [pc, #524]	@ (8003948 <MX_LWIP_Init+0x258>)
 800373a:	2201      	movs	r2, #1
 800373c:	70da      	strb	r2, [r3, #3]

/* USER CODE BEGIN IP_ADDRESSES */
/* USER CODE END IP_ADDRESSES */

  /* Initialize the LwIP stack with RTOS */
  tcpip_init( NULL, NULL );
 800373e:	2100      	movs	r1, #0
 8003740:	2000      	movs	r0, #0
 8003742:	f004 fda1 	bl	8008288 <tcpip_init>

  /* IP addresses initialization without DHCP (IPv4) */
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 8003746:	4b7e      	ldr	r3, [pc, #504]	@ (8003940 <MX_LWIP_Init+0x250>)
 8003748:	781b      	ldrb	r3, [r3, #0]
 800374a:	061a      	lsls	r2, r3, #24
 800374c:	4b7c      	ldr	r3, [pc, #496]	@ (8003940 <MX_LWIP_Init+0x250>)
 800374e:	785b      	ldrb	r3, [r3, #1]
 8003750:	041b      	lsls	r3, r3, #16
 8003752:	431a      	orrs	r2, r3
 8003754:	4b7a      	ldr	r3, [pc, #488]	@ (8003940 <MX_LWIP_Init+0x250>)
 8003756:	789b      	ldrb	r3, [r3, #2]
 8003758:	021b      	lsls	r3, r3, #8
 800375a:	4313      	orrs	r3, r2
 800375c:	4a78      	ldr	r2, [pc, #480]	@ (8003940 <MX_LWIP_Init+0x250>)
 800375e:	78d2      	ldrb	r2, [r2, #3]
 8003760:	4313      	orrs	r3, r2
 8003762:	061a      	lsls	r2, r3, #24
 8003764:	4b76      	ldr	r3, [pc, #472]	@ (8003940 <MX_LWIP_Init+0x250>)
 8003766:	781b      	ldrb	r3, [r3, #0]
 8003768:	0619      	lsls	r1, r3, #24
 800376a:	4b75      	ldr	r3, [pc, #468]	@ (8003940 <MX_LWIP_Init+0x250>)
 800376c:	785b      	ldrb	r3, [r3, #1]
 800376e:	041b      	lsls	r3, r3, #16
 8003770:	4319      	orrs	r1, r3
 8003772:	4b73      	ldr	r3, [pc, #460]	@ (8003940 <MX_LWIP_Init+0x250>)
 8003774:	789b      	ldrb	r3, [r3, #2]
 8003776:	021b      	lsls	r3, r3, #8
 8003778:	430b      	orrs	r3, r1
 800377a:	4971      	ldr	r1, [pc, #452]	@ (8003940 <MX_LWIP_Init+0x250>)
 800377c:	78c9      	ldrb	r1, [r1, #3]
 800377e:	430b      	orrs	r3, r1
 8003780:	021b      	lsls	r3, r3, #8
 8003782:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8003786:	431a      	orrs	r2, r3
 8003788:	4b6d      	ldr	r3, [pc, #436]	@ (8003940 <MX_LWIP_Init+0x250>)
 800378a:	781b      	ldrb	r3, [r3, #0]
 800378c:	0619      	lsls	r1, r3, #24
 800378e:	4b6c      	ldr	r3, [pc, #432]	@ (8003940 <MX_LWIP_Init+0x250>)
 8003790:	785b      	ldrb	r3, [r3, #1]
 8003792:	041b      	lsls	r3, r3, #16
 8003794:	4319      	orrs	r1, r3
 8003796:	4b6a      	ldr	r3, [pc, #424]	@ (8003940 <MX_LWIP_Init+0x250>)
 8003798:	789b      	ldrb	r3, [r3, #2]
 800379a:	021b      	lsls	r3, r3, #8
 800379c:	430b      	orrs	r3, r1
 800379e:	4968      	ldr	r1, [pc, #416]	@ (8003940 <MX_LWIP_Init+0x250>)
 80037a0:	78c9      	ldrb	r1, [r1, #3]
 80037a2:	430b      	orrs	r3, r1
 80037a4:	0a1b      	lsrs	r3, r3, #8
 80037a6:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 80037aa:	431a      	orrs	r2, r3
 80037ac:	4b64      	ldr	r3, [pc, #400]	@ (8003940 <MX_LWIP_Init+0x250>)
 80037ae:	781b      	ldrb	r3, [r3, #0]
 80037b0:	0619      	lsls	r1, r3, #24
 80037b2:	4b63      	ldr	r3, [pc, #396]	@ (8003940 <MX_LWIP_Init+0x250>)
 80037b4:	785b      	ldrb	r3, [r3, #1]
 80037b6:	041b      	lsls	r3, r3, #16
 80037b8:	4319      	orrs	r1, r3
 80037ba:	4b61      	ldr	r3, [pc, #388]	@ (8003940 <MX_LWIP_Init+0x250>)
 80037bc:	789b      	ldrb	r3, [r3, #2]
 80037be:	021b      	lsls	r3, r3, #8
 80037c0:	430b      	orrs	r3, r1
 80037c2:	495f      	ldr	r1, [pc, #380]	@ (8003940 <MX_LWIP_Init+0x250>)
 80037c4:	78c9      	ldrb	r1, [r1, #3]
 80037c6:	430b      	orrs	r3, r1
 80037c8:	0e1b      	lsrs	r3, r3, #24
 80037ca:	4313      	orrs	r3, r2
 80037cc:	4a5f      	ldr	r2, [pc, #380]	@ (800394c <MX_LWIP_Init+0x25c>)
 80037ce:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 80037d0:	4b5c      	ldr	r3, [pc, #368]	@ (8003944 <MX_LWIP_Init+0x254>)
 80037d2:	781b      	ldrb	r3, [r3, #0]
 80037d4:	061a      	lsls	r2, r3, #24
 80037d6:	4b5b      	ldr	r3, [pc, #364]	@ (8003944 <MX_LWIP_Init+0x254>)
 80037d8:	785b      	ldrb	r3, [r3, #1]
 80037da:	041b      	lsls	r3, r3, #16
 80037dc:	431a      	orrs	r2, r3
 80037de:	4b59      	ldr	r3, [pc, #356]	@ (8003944 <MX_LWIP_Init+0x254>)
 80037e0:	789b      	ldrb	r3, [r3, #2]
 80037e2:	021b      	lsls	r3, r3, #8
 80037e4:	4313      	orrs	r3, r2
 80037e6:	4a57      	ldr	r2, [pc, #348]	@ (8003944 <MX_LWIP_Init+0x254>)
 80037e8:	78d2      	ldrb	r2, [r2, #3]
 80037ea:	4313      	orrs	r3, r2
 80037ec:	061a      	lsls	r2, r3, #24
 80037ee:	4b55      	ldr	r3, [pc, #340]	@ (8003944 <MX_LWIP_Init+0x254>)
 80037f0:	781b      	ldrb	r3, [r3, #0]
 80037f2:	0619      	lsls	r1, r3, #24
 80037f4:	4b53      	ldr	r3, [pc, #332]	@ (8003944 <MX_LWIP_Init+0x254>)
 80037f6:	785b      	ldrb	r3, [r3, #1]
 80037f8:	041b      	lsls	r3, r3, #16
 80037fa:	4319      	orrs	r1, r3
 80037fc:	4b51      	ldr	r3, [pc, #324]	@ (8003944 <MX_LWIP_Init+0x254>)
 80037fe:	789b      	ldrb	r3, [r3, #2]
 8003800:	021b      	lsls	r3, r3, #8
 8003802:	430b      	orrs	r3, r1
 8003804:	494f      	ldr	r1, [pc, #316]	@ (8003944 <MX_LWIP_Init+0x254>)
 8003806:	78c9      	ldrb	r1, [r1, #3]
 8003808:	430b      	orrs	r3, r1
 800380a:	021b      	lsls	r3, r3, #8
 800380c:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8003810:	431a      	orrs	r2, r3
 8003812:	4b4c      	ldr	r3, [pc, #304]	@ (8003944 <MX_LWIP_Init+0x254>)
 8003814:	781b      	ldrb	r3, [r3, #0]
 8003816:	0619      	lsls	r1, r3, #24
 8003818:	4b4a      	ldr	r3, [pc, #296]	@ (8003944 <MX_LWIP_Init+0x254>)
 800381a:	785b      	ldrb	r3, [r3, #1]
 800381c:	041b      	lsls	r3, r3, #16
 800381e:	4319      	orrs	r1, r3
 8003820:	4b48      	ldr	r3, [pc, #288]	@ (8003944 <MX_LWIP_Init+0x254>)
 8003822:	789b      	ldrb	r3, [r3, #2]
 8003824:	021b      	lsls	r3, r3, #8
 8003826:	430b      	orrs	r3, r1
 8003828:	4946      	ldr	r1, [pc, #280]	@ (8003944 <MX_LWIP_Init+0x254>)
 800382a:	78c9      	ldrb	r1, [r1, #3]
 800382c:	430b      	orrs	r3, r1
 800382e:	0a1b      	lsrs	r3, r3, #8
 8003830:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8003834:	431a      	orrs	r2, r3
 8003836:	4b43      	ldr	r3, [pc, #268]	@ (8003944 <MX_LWIP_Init+0x254>)
 8003838:	781b      	ldrb	r3, [r3, #0]
 800383a:	0619      	lsls	r1, r3, #24
 800383c:	4b41      	ldr	r3, [pc, #260]	@ (8003944 <MX_LWIP_Init+0x254>)
 800383e:	785b      	ldrb	r3, [r3, #1]
 8003840:	041b      	lsls	r3, r3, #16
 8003842:	4319      	orrs	r1, r3
 8003844:	4b3f      	ldr	r3, [pc, #252]	@ (8003944 <MX_LWIP_Init+0x254>)
 8003846:	789b      	ldrb	r3, [r3, #2]
 8003848:	021b      	lsls	r3, r3, #8
 800384a:	430b      	orrs	r3, r1
 800384c:	493d      	ldr	r1, [pc, #244]	@ (8003944 <MX_LWIP_Init+0x254>)
 800384e:	78c9      	ldrb	r1, [r1, #3]
 8003850:	430b      	orrs	r3, r1
 8003852:	0e1b      	lsrs	r3, r3, #24
 8003854:	4313      	orrs	r3, r2
 8003856:	4a3e      	ldr	r2, [pc, #248]	@ (8003950 <MX_LWIP_Init+0x260>)
 8003858:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 800385a:	4b3b      	ldr	r3, [pc, #236]	@ (8003948 <MX_LWIP_Init+0x258>)
 800385c:	781b      	ldrb	r3, [r3, #0]
 800385e:	061a      	lsls	r2, r3, #24
 8003860:	4b39      	ldr	r3, [pc, #228]	@ (8003948 <MX_LWIP_Init+0x258>)
 8003862:	785b      	ldrb	r3, [r3, #1]
 8003864:	041b      	lsls	r3, r3, #16
 8003866:	431a      	orrs	r2, r3
 8003868:	4b37      	ldr	r3, [pc, #220]	@ (8003948 <MX_LWIP_Init+0x258>)
 800386a:	789b      	ldrb	r3, [r3, #2]
 800386c:	021b      	lsls	r3, r3, #8
 800386e:	4313      	orrs	r3, r2
 8003870:	4a35      	ldr	r2, [pc, #212]	@ (8003948 <MX_LWIP_Init+0x258>)
 8003872:	78d2      	ldrb	r2, [r2, #3]
 8003874:	4313      	orrs	r3, r2
 8003876:	061a      	lsls	r2, r3, #24
 8003878:	4b33      	ldr	r3, [pc, #204]	@ (8003948 <MX_LWIP_Init+0x258>)
 800387a:	781b      	ldrb	r3, [r3, #0]
 800387c:	0619      	lsls	r1, r3, #24
 800387e:	4b32      	ldr	r3, [pc, #200]	@ (8003948 <MX_LWIP_Init+0x258>)
 8003880:	785b      	ldrb	r3, [r3, #1]
 8003882:	041b      	lsls	r3, r3, #16
 8003884:	4319      	orrs	r1, r3
 8003886:	4b30      	ldr	r3, [pc, #192]	@ (8003948 <MX_LWIP_Init+0x258>)
 8003888:	789b      	ldrb	r3, [r3, #2]
 800388a:	021b      	lsls	r3, r3, #8
 800388c:	430b      	orrs	r3, r1
 800388e:	492e      	ldr	r1, [pc, #184]	@ (8003948 <MX_LWIP_Init+0x258>)
 8003890:	78c9      	ldrb	r1, [r1, #3]
 8003892:	430b      	orrs	r3, r1
 8003894:	021b      	lsls	r3, r3, #8
 8003896:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800389a:	431a      	orrs	r2, r3
 800389c:	4b2a      	ldr	r3, [pc, #168]	@ (8003948 <MX_LWIP_Init+0x258>)
 800389e:	781b      	ldrb	r3, [r3, #0]
 80038a0:	0619      	lsls	r1, r3, #24
 80038a2:	4b29      	ldr	r3, [pc, #164]	@ (8003948 <MX_LWIP_Init+0x258>)
 80038a4:	785b      	ldrb	r3, [r3, #1]
 80038a6:	041b      	lsls	r3, r3, #16
 80038a8:	4319      	orrs	r1, r3
 80038aa:	4b27      	ldr	r3, [pc, #156]	@ (8003948 <MX_LWIP_Init+0x258>)
 80038ac:	789b      	ldrb	r3, [r3, #2]
 80038ae:	021b      	lsls	r3, r3, #8
 80038b0:	430b      	orrs	r3, r1
 80038b2:	4925      	ldr	r1, [pc, #148]	@ (8003948 <MX_LWIP_Init+0x258>)
 80038b4:	78c9      	ldrb	r1, [r1, #3]
 80038b6:	430b      	orrs	r3, r1
 80038b8:	0a1b      	lsrs	r3, r3, #8
 80038ba:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 80038be:	431a      	orrs	r2, r3
 80038c0:	4b21      	ldr	r3, [pc, #132]	@ (8003948 <MX_LWIP_Init+0x258>)
 80038c2:	781b      	ldrb	r3, [r3, #0]
 80038c4:	0619      	lsls	r1, r3, #24
 80038c6:	4b20      	ldr	r3, [pc, #128]	@ (8003948 <MX_LWIP_Init+0x258>)
 80038c8:	785b      	ldrb	r3, [r3, #1]
 80038ca:	041b      	lsls	r3, r3, #16
 80038cc:	4319      	orrs	r1, r3
 80038ce:	4b1e      	ldr	r3, [pc, #120]	@ (8003948 <MX_LWIP_Init+0x258>)
 80038d0:	789b      	ldrb	r3, [r3, #2]
 80038d2:	021b      	lsls	r3, r3, #8
 80038d4:	430b      	orrs	r3, r1
 80038d6:	491c      	ldr	r1, [pc, #112]	@ (8003948 <MX_LWIP_Init+0x258>)
 80038d8:	78c9      	ldrb	r1, [r1, #3]
 80038da:	430b      	orrs	r3, r1
 80038dc:	0e1b      	lsrs	r3, r3, #24
 80038de:	4313      	orrs	r3, r2
 80038e0:	4a1c      	ldr	r2, [pc, #112]	@ (8003954 <MX_LWIP_Init+0x264>)
 80038e2:	6013      	str	r3, [r2, #0]

  /* add the network interface (IPv4/IPv6) with RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &tcpip_input);
 80038e4:	4b1c      	ldr	r3, [pc, #112]	@ (8003958 <MX_LWIP_Init+0x268>)
 80038e6:	9302      	str	r3, [sp, #8]
 80038e8:	4b1c      	ldr	r3, [pc, #112]	@ (800395c <MX_LWIP_Init+0x26c>)
 80038ea:	9301      	str	r3, [sp, #4]
 80038ec:	2300      	movs	r3, #0
 80038ee:	9300      	str	r3, [sp, #0]
 80038f0:	4b18      	ldr	r3, [pc, #96]	@ (8003954 <MX_LWIP_Init+0x264>)
 80038f2:	4a17      	ldr	r2, [pc, #92]	@ (8003950 <MX_LWIP_Init+0x260>)
 80038f4:	4915      	ldr	r1, [pc, #84]	@ (800394c <MX_LWIP_Init+0x25c>)
 80038f6:	481a      	ldr	r0, [pc, #104]	@ (8003960 <MX_LWIP_Init+0x270>)
 80038f8:	f005 fa90 	bl	8008e1c <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 80038fc:	4818      	ldr	r0, [pc, #96]	@ (8003960 <MX_LWIP_Init+0x270>)
 80038fe:	f005 fc3f 	bl	8009180 <netif_set_default>

  /* We must always bring the network interface up connection or not... */
  netif_set_up(&gnetif);
 8003902:	4817      	ldr	r0, [pc, #92]	@ (8003960 <MX_LWIP_Init+0x270>)
 8003904:	f005 fc4c 	bl	80091a0 <netif_set_up>

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernet_link_status_updated);
 8003908:	4916      	ldr	r1, [pc, #88]	@ (8003964 <MX_LWIP_Init+0x274>)
 800390a:	4815      	ldr	r0, [pc, #84]	@ (8003960 <MX_LWIP_Init+0x270>)
 800390c:	f005 fd4a 	bl	80093a4 <netif_set_link_callback>

  /* Create the Ethernet link handler thread */
/* USER CODE BEGIN H7_OS_THREAD_NEW_CMSIS_RTOS_V2 */
  memset(&attributes, 0x0, sizeof(osThreadAttr_t));
 8003910:	2224      	movs	r2, #36	@ 0x24
 8003912:	2100      	movs	r1, #0
 8003914:	4814      	ldr	r0, [pc, #80]	@ (8003968 <MX_LWIP_Init+0x278>)
 8003916:	f00e fd36 	bl	8012386 <memset>
  attributes.name = "EthLink";
 800391a:	4b13      	ldr	r3, [pc, #76]	@ (8003968 <MX_LWIP_Init+0x278>)
 800391c:	4a13      	ldr	r2, [pc, #76]	@ (800396c <MX_LWIP_Init+0x27c>)
 800391e:	601a      	str	r2, [r3, #0]
  attributes.stack_size = INTERFACE_THREAD_STACK_SIZE;
 8003920:	4b11      	ldr	r3, [pc, #68]	@ (8003968 <MX_LWIP_Init+0x278>)
 8003922:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003926:	615a      	str	r2, [r3, #20]
  attributes.priority = osPriorityBelowNormal;
 8003928:	4b0f      	ldr	r3, [pc, #60]	@ (8003968 <MX_LWIP_Init+0x278>)
 800392a:	2210      	movs	r2, #16
 800392c:	619a      	str	r2, [r3, #24]
  osThreadNew(ethernet_link_thread, &gnetif, &attributes);
 800392e:	4a0e      	ldr	r2, [pc, #56]	@ (8003968 <MX_LWIP_Init+0x278>)
 8003930:	490b      	ldr	r1, [pc, #44]	@ (8003960 <MX_LWIP_Init+0x270>)
 8003932:	480f      	ldr	r0, [pc, #60]	@ (8003970 <MX_LWIP_Init+0x280>)
 8003934:	f000 fd7d 	bl	8004432 <osThreadNew>
/* USER CODE END H7_OS_THREAD_NEW_CMSIS_RTOS_V2 */

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 8003938:	bf00      	nop
 800393a:	46bd      	mov	sp, r7
 800393c:	bd80      	pop	{r7, pc}
 800393e:	bf00      	nop
 8003940:	200011e4 	.word	0x200011e4
 8003944:	200011e8 	.word	0x200011e8
 8003948:	200011ec 	.word	0x200011ec
 800394c:	200011d8 	.word	0x200011d8
 8003950:	200011dc 	.word	0x200011dc
 8003954:	200011e0 	.word	0x200011e0
 8003958:	080081c5 	.word	0x080081c5
 800395c:	08003e35 	.word	0x08003e35
 8003960:	200011a4 	.word	0x200011a4
 8003964:	08003975 	.word	0x08003975
 8003968:	200011f0 	.word	0x200011f0
 800396c:	080131a0 	.word	0x080131a0
 8003970:	080040d9 	.word	0x080040d9

08003974 <ethernet_link_status_updated>:
  * @brief  Notify the User about the network interface config status
  * @param  netif: the network interface
  * @retval None
  */
static void ethernet_link_status_updated(struct netif *netif)
{
 8003974:	b480      	push	{r7}
 8003976:	b083      	sub	sp, #12
 8003978:	af00      	add	r7, sp, #0
 800397a:	6078      	str	r0, [r7, #4]
  else /* netif is down */
  {
/* USER CODE BEGIN 6 */
/* USER CODE END 6 */
  }
}
 800397c:	bf00      	nop
 800397e:	370c      	adds	r7, #12
 8003980:	46bd      	mov	sp, r7
 8003982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003986:	4770      	bx	lr

08003988 <HAL_ETH_RxCpltCallback>:
  * @brief  Ethernet Rx Transfer completed callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_RxCpltCallback(ETH_HandleTypeDef *handlerEth)
{
 8003988:	b580      	push	{r7, lr}
 800398a:	b082      	sub	sp, #8
 800398c:	af00      	add	r7, sp, #0
 800398e:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(RxPktSemaphore);
 8003990:	4b04      	ldr	r3, [pc, #16]	@ (80039a4 <HAL_ETH_RxCpltCallback+0x1c>)
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	4618      	mov	r0, r3
 8003996:	f000 ffe3 	bl	8004960 <osSemaphoreRelease>
}
 800399a:	bf00      	nop
 800399c:	3708      	adds	r7, #8
 800399e:	46bd      	mov	sp, r7
 80039a0:	bd80      	pop	{r7, pc}
 80039a2:	bf00      	nop
 80039a4:	20005ce0 	.word	0x20005ce0

080039a8 <HAL_ETH_TxCpltCallback>:
  * @brief  Ethernet Tx Transfer completed callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_TxCpltCallback(ETH_HandleTypeDef *handlerEth)
{
 80039a8:	b580      	push	{r7, lr}
 80039aa:	b082      	sub	sp, #8
 80039ac:	af00      	add	r7, sp, #0
 80039ae:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(TxPktSemaphore);
 80039b0:	4b04      	ldr	r3, [pc, #16]	@ (80039c4 <HAL_ETH_TxCpltCallback+0x1c>)
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	4618      	mov	r0, r3
 80039b6:	f000 ffd3 	bl	8004960 <osSemaphoreRelease>
}
 80039ba:	bf00      	nop
 80039bc:	3708      	adds	r7, #8
 80039be:	46bd      	mov	sp, r7
 80039c0:	bd80      	pop	{r7, pc}
 80039c2:	bf00      	nop
 80039c4:	20005ce4 	.word	0x20005ce4

080039c8 <HAL_ETH_ErrorCallback>:
  * @brief  Ethernet DMA transfer error callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_ErrorCallback(ETH_HandleTypeDef *handlerEth)
{
 80039c8:	b580      	push	{r7, lr}
 80039ca:	b082      	sub	sp, #8
 80039cc:	af00      	add	r7, sp, #0
 80039ce:	6078      	str	r0, [r7, #4]
  if((HAL_ETH_GetDMAError(handlerEth) & ETH_DMASR_RBUS) == ETH_DMASR_RBUS)
 80039d0:	6878      	ldr	r0, [r7, #4]
 80039d2:	f7fe f987 	bl	8001ce4 <HAL_ETH_GetDMAError>
 80039d6:	4603      	mov	r3, r0
 80039d8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80039dc:	2b80      	cmp	r3, #128	@ 0x80
 80039de:	d104      	bne.n	80039ea <HAL_ETH_ErrorCallback+0x22>
  {
     osSemaphoreRelease(RxPktSemaphore);
 80039e0:	4b04      	ldr	r3, [pc, #16]	@ (80039f4 <HAL_ETH_ErrorCallback+0x2c>)
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	4618      	mov	r0, r3
 80039e6:	f000 ffbb 	bl	8004960 <osSemaphoreRelease>
  }
}
 80039ea:	bf00      	nop
 80039ec:	3708      	adds	r7, #8
 80039ee:	46bd      	mov	sp, r7
 80039f0:	bd80      	pop	{r7, pc}
 80039f2:	bf00      	nop
 80039f4:	20005ce0 	.word	0x20005ce0

080039f8 <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 80039f8:	b580      	push	{r7, lr}
 80039fa:	b0aa      	sub	sp, #168	@ 0xa8
 80039fc:	af00      	add	r7, sp, #0
 80039fe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_eth_init_status = HAL_OK;
 8003a00:	2300      	movs	r3, #0
 8003a02:	f887 309f 	strb.w	r3, [r7, #159]	@ 0x9f
/* USER CODE BEGIN OS_THREAD_ATTR_CMSIS_RTOS_V2 */
  osThreadAttr_t attributes;
/* USER CODE END OS_THREAD_ATTR_CMSIS_RTOS_V2 */
  uint32_t duplex, speed = 0;
 8003a06:	2300      	movs	r3, #0
 8003a08:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  int32_t PHYLinkState = 0;
 8003a0c:	2300      	movs	r3, #0
 8003a0e:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  ETH_MACConfigTypeDef MACConf = {0};
 8003a12:	f107 0310 	add.w	r3, r7, #16
 8003a16:	2264      	movs	r2, #100	@ 0x64
 8003a18:	2100      	movs	r1, #0
 8003a1a:	4618      	mov	r0, r3
 8003a1c:	f00e fcb3 	bl	8012386 <memset>
  /* Start ETH HAL Init */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 8003a20:	4b89      	ldr	r3, [pc, #548]	@ (8003c48 <low_level_init+0x250>)
 8003a22:	4a8a      	ldr	r2, [pc, #552]	@ (8003c4c <low_level_init+0x254>)
 8003a24:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8003a26:	2300      	movs	r3, #0
 8003a28:	723b      	strb	r3, [r7, #8]
  MACAddr[1] = 0x80;
 8003a2a:	2380      	movs	r3, #128	@ 0x80
 8003a2c:	727b      	strb	r3, [r7, #9]
  MACAddr[2] = 0xE1;
 8003a2e:	23e1      	movs	r3, #225	@ 0xe1
 8003a30:	72bb      	strb	r3, [r7, #10]
  MACAddr[3] = 0x00;
 8003a32:	2300      	movs	r3, #0
 8003a34:	72fb      	strb	r3, [r7, #11]
  MACAddr[4] = 0x00;
 8003a36:	2300      	movs	r3, #0
 8003a38:	733b      	strb	r3, [r7, #12]
  MACAddr[5] = 0x00;
 8003a3a:	2300      	movs	r3, #0
 8003a3c:	737b      	strb	r3, [r7, #13]
  heth.Init.MACAddr = &MACAddr[0];
 8003a3e:	4a82      	ldr	r2, [pc, #520]	@ (8003c48 <low_level_init+0x250>)
 8003a40:	f107 0308 	add.w	r3, r7, #8
 8003a44:	6053      	str	r3, [r2, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8003a46:	4b80      	ldr	r3, [pc, #512]	@ (8003c48 <low_level_init+0x250>)
 8003a48:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8003a4c:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8003a4e:	4b7e      	ldr	r3, [pc, #504]	@ (8003c48 <low_level_init+0x250>)
 8003a50:	4a7f      	ldr	r2, [pc, #508]	@ (8003c50 <low_level_init+0x258>)
 8003a52:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8003a54:	4b7c      	ldr	r3, [pc, #496]	@ (8003c48 <low_level_init+0x250>)
 8003a56:	4a7f      	ldr	r2, [pc, #508]	@ (8003c54 <low_level_init+0x25c>)
 8003a58:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1536;
 8003a5a:	4b7b      	ldr	r3, [pc, #492]	@ (8003c48 <low_level_init+0x250>)
 8003a5c:	f44f 62c0 	mov.w	r2, #1536	@ 0x600
 8003a60:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 8003a62:	4879      	ldr	r0, [pc, #484]	@ (8003c48 <low_level_init+0x250>)
 8003a64:	f7fd faf4 	bl	8001050 <HAL_ETH_Init>
 8003a68:	4603      	mov	r3, r0
 8003a6a:	f887 309f 	strb.w	r3, [r7, #159]	@ 0x9f

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8003a6e:	2238      	movs	r2, #56	@ 0x38
 8003a70:	2100      	movs	r1, #0
 8003a72:	4879      	ldr	r0, [pc, #484]	@ (8003c58 <low_level_init+0x260>)
 8003a74:	f00e fc87 	bl	8012386 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8003a78:	4b77      	ldr	r3, [pc, #476]	@ (8003c58 <low_level_init+0x260>)
 8003a7a:	2221      	movs	r2, #33	@ 0x21
 8003a7c:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8003a7e:	4b76      	ldr	r3, [pc, #472]	@ (8003c58 <low_level_init+0x260>)
 8003a80:	f44f 0240 	mov.w	r2, #12582912	@ 0xc00000
 8003a84:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8003a86:	4b74      	ldr	r3, [pc, #464]	@ (8003c58 <low_level_init+0x260>)
 8003a88:	2200      	movs	r2, #0
 8003a8a:	611a      	str	r2, [r3, #16]

  /* End ETH HAL Init */

  /* Initialize the RX POOL */
  LWIP_MEMPOOL_INIT(RX_POOL);
 8003a8c:	4873      	ldr	r0, [pc, #460]	@ (8003c5c <low_level_init+0x264>)
 8003a8e:	f005 f87f 	bl	8008b90 <memp_init_pool>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	2206      	movs	r2, #6
 8003a96:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 8003a9a:	4b6b      	ldr	r3, [pc, #428]	@ (8003c48 <low_level_init+0x250>)
 8003a9c:	685b      	ldr	r3, [r3, #4]
 8003a9e:	781a      	ldrb	r2, [r3, #0]
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 8003aa6:	4b68      	ldr	r3, [pc, #416]	@ (8003c48 <low_level_init+0x250>)
 8003aa8:	685b      	ldr	r3, [r3, #4]
 8003aaa:	785a      	ldrb	r2, [r3, #1]
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 8003ab2:	4b65      	ldr	r3, [pc, #404]	@ (8003c48 <low_level_init+0x250>)
 8003ab4:	685b      	ldr	r3, [r3, #4]
 8003ab6:	789a      	ldrb	r2, [r3, #2]
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 8003abe:	4b62      	ldr	r3, [pc, #392]	@ (8003c48 <low_level_init+0x250>)
 8003ac0:	685b      	ldr	r3, [r3, #4]
 8003ac2:	78da      	ldrb	r2, [r3, #3]
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 8003aca:	4b5f      	ldr	r3, [pc, #380]	@ (8003c48 <low_level_init+0x250>)
 8003acc:	685b      	ldr	r3, [r3, #4]
 8003ace:	791a      	ldrb	r2, [r3, #4]
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 8003ad6:	4b5c      	ldr	r3, [pc, #368]	@ (8003c48 <low_level_init+0x250>)
 8003ad8:	685b      	ldr	r3, [r3, #4]
 8003ada:	795a      	ldrb	r2, [r3, #5]
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	f883 202b 	strb.w	r2, [r3, #43]	@ 0x2b

  /* maximum transfer unit */
  netif->mtu = ETH_MAX_PAYLOAD;
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 8003ae8:	849a      	strh	r2, [r3, #36]	@ 0x24

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8003af0:	f043 030a 	orr.w	r3, r3, #10
 8003af4:	b2da      	uxtb	r2, r3
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
  #else
    netif->flags |= NETIF_FLAG_BROADCAST;
  #endif /* LWIP_ARP */

  /* create a binary semaphore used for informing ethernetif of frame reception */
  RxPktSemaphore = osSemaphoreNew(1, 0, NULL);
 8003afc:	2200      	movs	r2, #0
 8003afe:	2100      	movs	r1, #0
 8003b00:	2001      	movs	r0, #1
 8003b02:	f000 fe51 	bl	80047a8 <osSemaphoreNew>
 8003b06:	4603      	mov	r3, r0
 8003b08:	4a55      	ldr	r2, [pc, #340]	@ (8003c60 <low_level_init+0x268>)
 8003b0a:	6013      	str	r3, [r2, #0]

  /* create a binary semaphore used for informing ethernetif of frame transmission */
  TxPktSemaphore = osSemaphoreNew(1, 0, NULL);
 8003b0c:	2200      	movs	r2, #0
 8003b0e:	2100      	movs	r1, #0
 8003b10:	2001      	movs	r0, #1
 8003b12:	f000 fe49 	bl	80047a8 <osSemaphoreNew>
 8003b16:	4603      	mov	r3, r0
 8003b18:	4a52      	ldr	r2, [pc, #328]	@ (8003c64 <low_level_init+0x26c>)
 8003b1a:	6013      	str	r3, [r2, #0]

  /* create the task that handles the ETH_MAC */
/* USER CODE BEGIN OS_THREAD_NEW_CMSIS_RTOS_V2 */
  memset(&attributes, 0x0, sizeof(osThreadAttr_t));
 8003b1c:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 8003b20:	2224      	movs	r2, #36	@ 0x24
 8003b22:	2100      	movs	r1, #0
 8003b24:	4618      	mov	r0, r3
 8003b26:	f00e fc2e 	bl	8012386 <memset>
  attributes.name = "EthIf";
 8003b2a:	4b4f      	ldr	r3, [pc, #316]	@ (8003c68 <low_level_init+0x270>)
 8003b2c:	677b      	str	r3, [r7, #116]	@ 0x74
  attributes.stack_size = INTERFACE_THREAD_STACK_SIZE;
 8003b2e:	f44f 73af 	mov.w	r3, #350	@ 0x15e
 8003b32:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  attributes.priority = osPriorityRealtime;
 8003b36:	2330      	movs	r3, #48	@ 0x30
 8003b38:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  osThreadNew(ethernetif_input, netif, &attributes);
 8003b3c:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 8003b40:	461a      	mov	r2, r3
 8003b42:	6879      	ldr	r1, [r7, #4]
 8003b44:	4849      	ldr	r0, [pc, #292]	@ (8003c6c <low_level_init+0x274>)
 8003b46:	f000 fc74 	bl	8004432 <osThreadNew>

/* USER CODE BEGIN PHY_PRE_CONFIG */

/* USER CODE END PHY_PRE_CONFIG */
  /* Set PHY IO functions */
  LAN8742_RegisterBusIO(&LAN8742, &LAN8742_IOCtx);
 8003b4a:	4949      	ldr	r1, [pc, #292]	@ (8003c70 <low_level_init+0x278>)
 8003b4c:	4849      	ldr	r0, [pc, #292]	@ (8003c74 <low_level_init+0x27c>)
 8003b4e:	f7fc ffd6 	bl	8000afe <LAN8742_RegisterBusIO>

  /* Initialize the LAN8742 ETH PHY */
  if(LAN8742_Init(&LAN8742) != LAN8742_STATUS_OK)
 8003b52:	4848      	ldr	r0, [pc, #288]	@ (8003c74 <low_level_init+0x27c>)
 8003b54:	f7fd f805 	bl	8000b62 <LAN8742_Init>
 8003b58:	4603      	mov	r3, r0
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d006      	beq.n	8003b6c <low_level_init+0x174>
  {
    netif_set_link_down(netif);
 8003b5e:	6878      	ldr	r0, [r7, #4]
 8003b60:	f005 fbf0 	bl	8009344 <netif_set_link_down>
    netif_set_down(netif);
 8003b64:	6878      	ldr	r0, [r7, #4]
 8003b66:	f005 fb87 	bl	8009278 <netif_set_down>
 8003b6a:	e06a      	b.n	8003c42 <low_level_init+0x24a>
    return;
  }

  if (hal_eth_init_status == HAL_OK)
 8003b6c:	f897 309f 	ldrb.w	r3, [r7, #159]	@ 0x9f
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d164      	bne.n	8003c3e <low_level_init+0x246>
  {
    PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 8003b74:	483f      	ldr	r0, [pc, #252]	@ (8003c74 <low_level_init+0x27c>)
 8003b76:	f7fd f89c 	bl	8000cb2 <LAN8742_GetLinkState>
 8003b7a:	f8c7 0098 	str.w	r0, [r7, #152]	@ 0x98

    /* Get link state */
    if(PHYLinkState <= LAN8742_STATUS_LINK_DOWN)
 8003b7e:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003b82:	2b01      	cmp	r3, #1
 8003b84:	dc06      	bgt.n	8003b94 <low_level_init+0x19c>
    {
      netif_set_link_down(netif);
 8003b86:	6878      	ldr	r0, [r7, #4]
 8003b88:	f005 fbdc 	bl	8009344 <netif_set_link_down>
      netif_set_down(netif);
 8003b8c:	6878      	ldr	r0, [r7, #4]
 8003b8e:	f005 fb73 	bl	8009278 <netif_set_down>
 8003b92:	e056      	b.n	8003c42 <low_level_init+0x24a>
    }
    else
    {
      switch (PHYLinkState)
 8003b94:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003b98:	3b02      	subs	r3, #2
 8003b9a:	2b03      	cmp	r3, #3
 8003b9c:	d82a      	bhi.n	8003bf4 <low_level_init+0x1fc>
 8003b9e:	a201      	add	r2, pc, #4	@ (adr r2, 8003ba4 <low_level_init+0x1ac>)
 8003ba0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ba4:	08003bb5 	.word	0x08003bb5
 8003ba8:	08003bc7 	.word	0x08003bc7
 8003bac:	08003bd7 	.word	0x08003bd7
 8003bb0:	08003be7 	.word	0x08003be7
      {
      case LAN8742_STATUS_100MBITS_FULLDUPLEX:
        duplex = ETH_FULLDUPLEX_MODE;
 8003bb4:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8003bb8:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
        speed = ETH_SPEED_100M;
 8003bbc:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8003bc0:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
        break;
 8003bc4:	e01f      	b.n	8003c06 <low_level_init+0x20e>
      case LAN8742_STATUS_100MBITS_HALFDUPLEX:
        duplex = ETH_HALFDUPLEX_MODE;
 8003bc6:	2300      	movs	r3, #0
 8003bc8:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
        speed = ETH_SPEED_100M;
 8003bcc:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8003bd0:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
        break;
 8003bd4:	e017      	b.n	8003c06 <low_level_init+0x20e>
      case LAN8742_STATUS_10MBITS_FULLDUPLEX:
        duplex = ETH_FULLDUPLEX_MODE;
 8003bd6:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8003bda:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
        speed = ETH_SPEED_10M;
 8003bde:	2300      	movs	r3, #0
 8003be0:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
        break;
 8003be4:	e00f      	b.n	8003c06 <low_level_init+0x20e>
      case LAN8742_STATUS_10MBITS_HALFDUPLEX:
        duplex = ETH_HALFDUPLEX_MODE;
 8003be6:	2300      	movs	r3, #0
 8003be8:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
        speed = ETH_SPEED_10M;
 8003bec:	2300      	movs	r3, #0
 8003bee:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
        break;
 8003bf2:	e008      	b.n	8003c06 <low_level_init+0x20e>
      default:
        duplex = ETH_FULLDUPLEX_MODE;
 8003bf4:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8003bf8:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
        speed = ETH_SPEED_100M;
 8003bfc:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8003c00:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
        break;
 8003c04:	bf00      	nop
      }

    /* Get MAC Config MAC */
    HAL_ETH_GetMACConfig(&heth, &MACConf);
 8003c06:	f107 0310 	add.w	r3, r7, #16
 8003c0a:	4619      	mov	r1, r3
 8003c0c:	480e      	ldr	r0, [pc, #56]	@ (8003c48 <low_level_init+0x250>)
 8003c0e:	f7fd ff0f 	bl	8001a30 <HAL_ETH_GetMACConfig>
    MACConf.DuplexMode = duplex;
 8003c12:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8003c16:	62bb      	str	r3, [r7, #40]	@ 0x28
    MACConf.Speed = speed;
 8003c18:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8003c1c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_ETH_SetMACConfig(&heth, &MACConf);
 8003c1e:	f107 0310 	add.w	r3, r7, #16
 8003c22:	4619      	mov	r1, r3
 8003c24:	4808      	ldr	r0, [pc, #32]	@ (8003c48 <low_level_init+0x250>)
 8003c26:	f7fd ffed 	bl	8001c04 <HAL_ETH_SetMACConfig>

    HAL_ETH_Start_IT(&heth);
 8003c2a:	4807      	ldr	r0, [pc, #28]	@ (8003c48 <low_level_init+0x250>)
 8003c2c:	f7fd fa8e 	bl	800114c <HAL_ETH_Start_IT>
    netif_set_up(netif);
 8003c30:	6878      	ldr	r0, [r7, #4]
 8003c32:	f005 fab5 	bl	80091a0 <netif_set_up>
    netif_set_link_up(netif);
 8003c36:	6878      	ldr	r0, [r7, #4]
 8003c38:	f005 fb50 	bl	80092dc <netif_set_link_up>
 8003c3c:	e001      	b.n	8003c42 <low_level_init+0x24a>
    }

  }
  else
  {
    Error_Handler();
 8003c3e:	f7fc fd7b 	bl	8000738 <Error_Handler>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */
}
 8003c42:	37a8      	adds	r7, #168	@ 0xa8
 8003c44:	46bd      	mov	sp, r7
 8003c46:	bd80      	pop	{r7, pc}
 8003c48:	20005ce8 	.word	0x20005ce8
 8003c4c:	40028000 	.word	0x40028000
 8003c50:	20005c40 	.word	0x20005c40
 8003c54:	20005ba0 	.word	0x20005ba0
 8003c58:	20005d98 	.word	0x20005d98
 8003c5c:	08015ce0 	.word	0x08015ce0
 8003c60:	20005ce0 	.word	0x20005ce0
 8003c64:	20005ce4 	.word	0x20005ce4
 8003c68:	080131a8 	.word	0x080131a8
 8003c6c:	08003de1 	.word	0x08003de1
 8003c70:	2000000c 	.word	0x2000000c
 8003c74:	20005dd0 	.word	0x20005dd0

08003c78 <low_level_output>:
 *       to become available since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 8003c78:	b580      	push	{r7, lr}
 8003c7a:	b092      	sub	sp, #72	@ 0x48
 8003c7c:	af00      	add	r7, sp, #0
 8003c7e:	6078      	str	r0, [r7, #4]
 8003c80:	6039      	str	r1, [r7, #0]
  uint32_t i = 0U;
 8003c82:	2300      	movs	r3, #0
 8003c84:	647b      	str	r3, [r7, #68]	@ 0x44
  struct pbuf *q = NULL;
 8003c86:	2300      	movs	r3, #0
 8003c88:	643b      	str	r3, [r7, #64]	@ 0x40
  err_t errval = ERR_OK;
 8003c8a:	2300      	movs	r3, #0
 8003c8c:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  ETH_BufferTypeDef Txbuffer[ETH_TX_DESC_CNT] = {0};
 8003c90:	f107 030c 	add.w	r3, r7, #12
 8003c94:	2230      	movs	r2, #48	@ 0x30
 8003c96:	2100      	movs	r1, #0
 8003c98:	4618      	mov	r0, r3
 8003c9a:	f00e fb74 	bl	8012386 <memset>

  memset(Txbuffer, 0 , ETH_TX_DESC_CNT*sizeof(ETH_BufferTypeDef));
 8003c9e:	f107 030c 	add.w	r3, r7, #12
 8003ca2:	2230      	movs	r2, #48	@ 0x30
 8003ca4:	2100      	movs	r1, #0
 8003ca6:	4618      	mov	r0, r3
 8003ca8:	f00e fb6d 	bl	8012386 <memset>

  for(q = p; q != NULL; q = q->next)
 8003cac:	683b      	ldr	r3, [r7, #0]
 8003cae:	643b      	str	r3, [r7, #64]	@ 0x40
 8003cb0:	e045      	b.n	8003d3e <low_level_output+0xc6>
  {
    if(i >= ETH_TX_DESC_CNT)
 8003cb2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003cb4:	2b03      	cmp	r3, #3
 8003cb6:	d902      	bls.n	8003cbe <low_level_output+0x46>
      return ERR_IF;
 8003cb8:	f06f 030b 	mvn.w	r3, #11
 8003cbc:	e06c      	b.n	8003d98 <low_level_output+0x120>

    Txbuffer[i].buffer = q->payload;
 8003cbe:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003cc0:	6859      	ldr	r1, [r3, #4]
 8003cc2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003cc4:	4613      	mov	r3, r2
 8003cc6:	005b      	lsls	r3, r3, #1
 8003cc8:	4413      	add	r3, r2
 8003cca:	009b      	lsls	r3, r3, #2
 8003ccc:	3348      	adds	r3, #72	@ 0x48
 8003cce:	443b      	add	r3, r7
 8003cd0:	3b3c      	subs	r3, #60	@ 0x3c
 8003cd2:	6019      	str	r1, [r3, #0]
    Txbuffer[i].len = q->len;
 8003cd4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003cd6:	895b      	ldrh	r3, [r3, #10]
 8003cd8:	4619      	mov	r1, r3
 8003cda:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003cdc:	4613      	mov	r3, r2
 8003cde:	005b      	lsls	r3, r3, #1
 8003ce0:	4413      	add	r3, r2
 8003ce2:	009b      	lsls	r3, r3, #2
 8003ce4:	3348      	adds	r3, #72	@ 0x48
 8003ce6:	443b      	add	r3, r7
 8003ce8:	3b38      	subs	r3, #56	@ 0x38
 8003cea:	6019      	str	r1, [r3, #0]

    if(i>0)
 8003cec:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d011      	beq.n	8003d16 <low_level_output+0x9e>
    {
      Txbuffer[i-1].next = &Txbuffer[i];
 8003cf2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003cf4:	1e5a      	subs	r2, r3, #1
 8003cf6:	f107 000c 	add.w	r0, r7, #12
 8003cfa:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8003cfc:	460b      	mov	r3, r1
 8003cfe:	005b      	lsls	r3, r3, #1
 8003d00:	440b      	add	r3, r1
 8003d02:	009b      	lsls	r3, r3, #2
 8003d04:	18c1      	adds	r1, r0, r3
 8003d06:	4613      	mov	r3, r2
 8003d08:	005b      	lsls	r3, r3, #1
 8003d0a:	4413      	add	r3, r2
 8003d0c:	009b      	lsls	r3, r3, #2
 8003d0e:	3348      	adds	r3, #72	@ 0x48
 8003d10:	443b      	add	r3, r7
 8003d12:	3b34      	subs	r3, #52	@ 0x34
 8003d14:	6019      	str	r1, [r3, #0]
    }

    if(q->next == NULL)
 8003d16:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d109      	bne.n	8003d32 <low_level_output+0xba>
    {
      Txbuffer[i].next = NULL;
 8003d1e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003d20:	4613      	mov	r3, r2
 8003d22:	005b      	lsls	r3, r3, #1
 8003d24:	4413      	add	r3, r2
 8003d26:	009b      	lsls	r3, r3, #2
 8003d28:	3348      	adds	r3, #72	@ 0x48
 8003d2a:	443b      	add	r3, r7
 8003d2c:	3b34      	subs	r3, #52	@ 0x34
 8003d2e:	2200      	movs	r2, #0
 8003d30:	601a      	str	r2, [r3, #0]
    }

    i++;
 8003d32:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003d34:	3301      	adds	r3, #1
 8003d36:	647b      	str	r3, [r7, #68]	@ 0x44
  for(q = p; q != NULL; q = q->next)
 8003d38:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	643b      	str	r3, [r7, #64]	@ 0x40
 8003d3e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d1b6      	bne.n	8003cb2 <low_level_output+0x3a>
  }

  TxConfig.Length = p->tot_len;
 8003d44:	683b      	ldr	r3, [r7, #0]
 8003d46:	891b      	ldrh	r3, [r3, #8]
 8003d48:	461a      	mov	r2, r3
 8003d4a:	4b15      	ldr	r3, [pc, #84]	@ (8003da0 <low_level_output+0x128>)
 8003d4c:	605a      	str	r2, [r3, #4]
  TxConfig.TxBuffer = Txbuffer;
 8003d4e:	4a14      	ldr	r2, [pc, #80]	@ (8003da0 <low_level_output+0x128>)
 8003d50:	f107 030c 	add.w	r3, r7, #12
 8003d54:	6093      	str	r3, [r2, #8]
  TxConfig.pData = p;
 8003d56:	4a12      	ldr	r2, [pc, #72]	@ (8003da0 <low_level_output+0x128>)
 8003d58:	683b      	ldr	r3, [r7, #0]
 8003d5a:	6353      	str	r3, [r2, #52]	@ 0x34

  pbuf_ref(p);
 8003d5c:	6838      	ldr	r0, [r7, #0]
 8003d5e:	f005 ff75 	bl	8009c4c <pbuf_ref>

  if (HAL_ETH_Transmit_IT(&heth, &TxConfig) == HAL_OK) {
 8003d62:	490f      	ldr	r1, [pc, #60]	@ (8003da0 <low_level_output+0x128>)
 8003d64:	480f      	ldr	r0, [pc, #60]	@ (8003da4 <low_level_output+0x12c>)
 8003d66:	f7fd fafe 	bl	8001366 <HAL_ETH_Transmit_IT>
 8003d6a:	4603      	mov	r3, r0
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d10e      	bne.n	8003d8e <low_level_output+0x116>
    while(osSemaphoreAcquire(TxPktSemaphore, TIME_WAITING_FOR_INPUT)!=osOK)
 8003d70:	bf00      	nop
 8003d72:	4b0d      	ldr	r3, [pc, #52]	@ (8003da8 <low_level_output+0x130>)
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8003d7a:	4618      	mov	r0, r3
 8003d7c:	f000 fd9e 	bl	80048bc <osSemaphoreAcquire>
 8003d80:	4603      	mov	r3, r0
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d1f5      	bne.n	8003d72 <low_level_output+0xfa>

    {
    }

    HAL_ETH_ReleaseTxPacket(&heth);
 8003d86:	4807      	ldr	r0, [pc, #28]	@ (8003da4 <low_level_output+0x12c>)
 8003d88:	f7fd fc8c 	bl	80016a4 <HAL_ETH_ReleaseTxPacket>
 8003d8c:	e002      	b.n	8003d94 <low_level_output+0x11c>
  } else {
    pbuf_free(p);
 8003d8e:	6838      	ldr	r0, [r7, #0]
 8003d90:	f005 feb6 	bl	8009b00 <pbuf_free>
  }

  return errval;
 8003d94:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
}
 8003d98:	4618      	mov	r0, r3
 8003d9a:	3748      	adds	r7, #72	@ 0x48
 8003d9c:	46bd      	mov	sp, r7
 8003d9e:	bd80      	pop	{r7, pc}
 8003da0:	20005d98 	.word	0x20005d98
 8003da4:	20005ce8 	.word	0x20005ce8
 8003da8:	20005ce4 	.word	0x20005ce4

08003dac <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 8003dac:	b580      	push	{r7, lr}
 8003dae:	b084      	sub	sp, #16
 8003db0:	af00      	add	r7, sp, #0
 8003db2:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 8003db4:	2300      	movs	r3, #0
 8003db6:	60fb      	str	r3, [r7, #12]

  if(RxAllocStatus == RX_ALLOC_OK)
 8003db8:	4b07      	ldr	r3, [pc, #28]	@ (8003dd8 <low_level_input+0x2c>)
 8003dba:	781b      	ldrb	r3, [r3, #0]
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	d105      	bne.n	8003dcc <low_level_input+0x20>
  {
    HAL_ETH_ReadData(&heth, (void **)&p);
 8003dc0:	f107 030c 	add.w	r3, r7, #12
 8003dc4:	4619      	mov	r1, r3
 8003dc6:	4805      	ldr	r0, [pc, #20]	@ (8003ddc <low_level_input+0x30>)
 8003dc8:	f7fd fb29 	bl	800141e <HAL_ETH_ReadData>
  }

  return p;
 8003dcc:	68fb      	ldr	r3, [r7, #12]
}
 8003dce:	4618      	mov	r0, r3
 8003dd0:	3710      	adds	r7, #16
 8003dd2:	46bd      	mov	sp, r7
 8003dd4:	bd80      	pop	{r7, pc}
 8003dd6:	bf00      	nop
 8003dd8:	20005b9c 	.word	0x20005b9c
 8003ddc:	20005ce8 	.word	0x20005ce8

08003de0 <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input(void* argument)
{
 8003de0:	b580      	push	{r7, lr}
 8003de2:	b084      	sub	sp, #16
 8003de4:	af00      	add	r7, sp, #0
 8003de6:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 8003de8:	2300      	movs	r3, #0
 8003dea:	60fb      	str	r3, [r7, #12]
  struct netif *netif = (struct netif *) argument;
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	60bb      	str	r3, [r7, #8]

  for( ;; )
  {
    if (osSemaphoreAcquire(RxPktSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 8003df0:	4b0f      	ldr	r3, [pc, #60]	@ (8003e30 <ethernetif_input+0x50>)
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8003df8:	4618      	mov	r0, r3
 8003dfa:	f000 fd5f 	bl	80048bc <osSemaphoreAcquire>
 8003dfe:	4603      	mov	r3, r0
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d1f5      	bne.n	8003df0 <ethernetif_input+0x10>
    {
      do
      {
        p = low_level_input( netif );
 8003e04:	68b8      	ldr	r0, [r7, #8]
 8003e06:	f7ff ffd1 	bl	8003dac <low_level_input>
 8003e0a:	60f8      	str	r0, [r7, #12]
        if (p != NULL)
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d00a      	beq.n	8003e28 <ethernetif_input+0x48>
        {
          if (netif->input( p, netif) != ERR_OK )
 8003e12:	68bb      	ldr	r3, [r7, #8]
 8003e14:	691b      	ldr	r3, [r3, #16]
 8003e16:	68b9      	ldr	r1, [r7, #8]
 8003e18:	68f8      	ldr	r0, [r7, #12]
 8003e1a:	4798      	blx	r3
 8003e1c:	4603      	mov	r3, r0
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d002      	beq.n	8003e28 <ethernetif_input+0x48>
          {
            pbuf_free(p);
 8003e22:	68f8      	ldr	r0, [r7, #12]
 8003e24:	f005 fe6c 	bl	8009b00 <pbuf_free>
          }
        }
      } while(p!=NULL);
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d1ea      	bne.n	8003e04 <ethernetif_input+0x24>
    if (osSemaphoreAcquire(RxPktSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 8003e2e:	e7df      	b.n	8003df0 <ethernetif_input+0x10>
 8003e30:	20005ce0 	.word	0x20005ce0

08003e34 <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 8003e34:	b580      	push	{r7, lr}
 8003e36:	b082      	sub	sp, #8
 8003e38:	af00      	add	r7, sp, #0
 8003e3a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d106      	bne.n	8003e50 <ethernetif_init+0x1c>
 8003e42:	4b0e      	ldr	r3, [pc, #56]	@ (8003e7c <ethernetif_init+0x48>)
 8003e44:	f44f 72f6 	mov.w	r2, #492	@ 0x1ec
 8003e48:	490d      	ldr	r1, [pc, #52]	@ (8003e80 <ethernetif_init+0x4c>)
 8003e4a:	480e      	ldr	r0, [pc, #56]	@ (8003e84 <ethernetif_init+0x50>)
 8003e4c:	f00e fa36 	bl	80122bc <iprintf>
   * The last argument should be replaced with your link speed, in units
   * of bits per second.
   */
  // MIB2_INIT_NETIF(netif, snmp_ifType_ethernet_csmacd, LINK_SPEED_OF_YOUR_NETIF_IN_BPS);

  netif->name[0] = IFNAME0;
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	2273      	movs	r2, #115	@ 0x73
 8003e54:	f883 202e 	strb.w	r2, [r3, #46]	@ 0x2e
  netif->name[1] = IFNAME1;
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	2274      	movs	r2, #116	@ 0x74
 8003e5c:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	4a09      	ldr	r2, [pc, #36]	@ (8003e88 <ethernetif_init+0x54>)
 8003e64:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	4a08      	ldr	r2, [pc, #32]	@ (8003e8c <ethernetif_init+0x58>)
 8003e6a:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 8003e6c:	6878      	ldr	r0, [r7, #4]
 8003e6e:	f7ff fdc3 	bl	80039f8 <low_level_init>

  return ERR_OK;
 8003e72:	2300      	movs	r3, #0
}
 8003e74:	4618      	mov	r0, r3
 8003e76:	3708      	adds	r7, #8
 8003e78:	46bd      	mov	sp, r7
 8003e7a:	bd80      	pop	{r7, pc}
 8003e7c:	080131b0 	.word	0x080131b0
 8003e80:	080131cc 	.word	0x080131cc
 8003e84:	080131dc 	.word	0x080131dc
 8003e88:	080101e5 	.word	0x080101e5
 8003e8c:	08003c79 	.word	0x08003c79

08003e90 <pbuf_free_custom>:
  * @brief  Custom Rx pbuf free callback
  * @param  pbuf: pbuf to be freed
  * @retval None
  */
void pbuf_free_custom(struct pbuf *p)
{
 8003e90:	b580      	push	{r7, lr}
 8003e92:	b084      	sub	sp, #16
 8003e94:	af00      	add	r7, sp, #0
 8003e96:	6078      	str	r0, [r7, #4]
  struct pbuf_custom* custom_pbuf = (struct pbuf_custom*)p;
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	60fb      	str	r3, [r7, #12]
  LWIP_MEMPOOL_FREE(RX_POOL, custom_pbuf);
 8003e9c:	68f9      	ldr	r1, [r7, #12]
 8003e9e:	4809      	ldr	r0, [pc, #36]	@ (8003ec4 <pbuf_free_custom+0x34>)
 8003ea0:	f004 ff66 	bl	8008d70 <memp_free_pool>

  /* If the Rx Buffer Pool was exhausted, signal the ethernetif_input task to
   * call HAL_ETH_GetRxDataBuffer to rebuild the Rx descriptors. */

  if (RxAllocStatus == RX_ALLOC_ERROR)
 8003ea4:	4b08      	ldr	r3, [pc, #32]	@ (8003ec8 <pbuf_free_custom+0x38>)
 8003ea6:	781b      	ldrb	r3, [r3, #0]
 8003ea8:	2b01      	cmp	r3, #1
 8003eaa:	d107      	bne.n	8003ebc <pbuf_free_custom+0x2c>
  {
    RxAllocStatus = RX_ALLOC_OK;
 8003eac:	4b06      	ldr	r3, [pc, #24]	@ (8003ec8 <pbuf_free_custom+0x38>)
 8003eae:	2200      	movs	r2, #0
 8003eb0:	701a      	strb	r2, [r3, #0]
    osSemaphoreRelease(RxPktSemaphore);
 8003eb2:	4b06      	ldr	r3, [pc, #24]	@ (8003ecc <pbuf_free_custom+0x3c>)
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	4618      	mov	r0, r3
 8003eb8:	f000 fd52 	bl	8004960 <osSemaphoreRelease>
  }
}
 8003ebc:	bf00      	nop
 8003ebe:	3710      	adds	r7, #16
 8003ec0:	46bd      	mov	sp, r7
 8003ec2:	bd80      	pop	{r7, pc}
 8003ec4:	08015ce0 	.word	0x08015ce0
 8003ec8:	20005b9c 	.word	0x20005b9c
 8003ecc:	20005ce0 	.word	0x20005ce0

08003ed0 <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Current Time value
*/
u32_t sys_now(void)
{
 8003ed0:	b580      	push	{r7, lr}
 8003ed2:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8003ed4:	f7fc ffaa 	bl	8000e2c <HAL_GetTick>
 8003ed8:	4603      	mov	r3, r0
}
 8003eda:	4618      	mov	r0, r3
 8003edc:	bd80      	pop	{r7, pc}
	...

08003ee0 <HAL_ETH_MspInit>:
  * @param  ethHandle: ETH handle
  * @retval None
  */

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 8003ee0:	b580      	push	{r7, lr}
 8003ee2:	b08e      	sub	sp, #56	@ 0x38
 8003ee4:	af00      	add	r7, sp, #0
 8003ee6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003ee8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003eec:	2200      	movs	r2, #0
 8003eee:	601a      	str	r2, [r3, #0]
 8003ef0:	605a      	str	r2, [r3, #4]
 8003ef2:	609a      	str	r2, [r3, #8]
 8003ef4:	60da      	str	r2, [r3, #12]
 8003ef6:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	4a4a      	ldr	r2, [pc, #296]	@ (8004028 <HAL_ETH_MspInit+0x148>)
 8003efe:	4293      	cmp	r3, r2
 8003f00:	f040 808d 	bne.w	800401e <HAL_ETH_MspInit+0x13e>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH_CLK_ENABLE();
 8003f04:	2300      	movs	r3, #0
 8003f06:	623b      	str	r3, [r7, #32]
 8003f08:	4b48      	ldr	r3, [pc, #288]	@ (800402c <HAL_ETH_MspInit+0x14c>)
 8003f0a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f0c:	4a47      	ldr	r2, [pc, #284]	@ (800402c <HAL_ETH_MspInit+0x14c>)
 8003f0e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8003f12:	6313      	str	r3, [r2, #48]	@ 0x30
 8003f14:	4b45      	ldr	r3, [pc, #276]	@ (800402c <HAL_ETH_MspInit+0x14c>)
 8003f16:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f18:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003f1c:	623b      	str	r3, [r7, #32]
 8003f1e:	6a3b      	ldr	r3, [r7, #32]
 8003f20:	2300      	movs	r3, #0
 8003f22:	61fb      	str	r3, [r7, #28]
 8003f24:	4b41      	ldr	r3, [pc, #260]	@ (800402c <HAL_ETH_MspInit+0x14c>)
 8003f26:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f28:	4a40      	ldr	r2, [pc, #256]	@ (800402c <HAL_ETH_MspInit+0x14c>)
 8003f2a:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8003f2e:	6313      	str	r3, [r2, #48]	@ 0x30
 8003f30:	4b3e      	ldr	r3, [pc, #248]	@ (800402c <HAL_ETH_MspInit+0x14c>)
 8003f32:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f34:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8003f38:	61fb      	str	r3, [r7, #28]
 8003f3a:	69fb      	ldr	r3, [r7, #28]
 8003f3c:	2300      	movs	r3, #0
 8003f3e:	61bb      	str	r3, [r7, #24]
 8003f40:	4b3a      	ldr	r3, [pc, #232]	@ (800402c <HAL_ETH_MspInit+0x14c>)
 8003f42:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f44:	4a39      	ldr	r2, [pc, #228]	@ (800402c <HAL_ETH_MspInit+0x14c>)
 8003f46:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8003f4a:	6313      	str	r3, [r2, #48]	@ 0x30
 8003f4c:	4b37      	ldr	r3, [pc, #220]	@ (800402c <HAL_ETH_MspInit+0x14c>)
 8003f4e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f50:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003f54:	61bb      	str	r3, [r7, #24]
 8003f56:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003f58:	2300      	movs	r3, #0
 8003f5a:	617b      	str	r3, [r7, #20]
 8003f5c:	4b33      	ldr	r3, [pc, #204]	@ (800402c <HAL_ETH_MspInit+0x14c>)
 8003f5e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f60:	4a32      	ldr	r2, [pc, #200]	@ (800402c <HAL_ETH_MspInit+0x14c>)
 8003f62:	f043 0304 	orr.w	r3, r3, #4
 8003f66:	6313      	str	r3, [r2, #48]	@ 0x30
 8003f68:	4b30      	ldr	r3, [pc, #192]	@ (800402c <HAL_ETH_MspInit+0x14c>)
 8003f6a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f6c:	f003 0304 	and.w	r3, r3, #4
 8003f70:	617b      	str	r3, [r7, #20]
 8003f72:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003f74:	2300      	movs	r3, #0
 8003f76:	613b      	str	r3, [r7, #16]
 8003f78:	4b2c      	ldr	r3, [pc, #176]	@ (800402c <HAL_ETH_MspInit+0x14c>)
 8003f7a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f7c:	4a2b      	ldr	r2, [pc, #172]	@ (800402c <HAL_ETH_MspInit+0x14c>)
 8003f7e:	f043 0301 	orr.w	r3, r3, #1
 8003f82:	6313      	str	r3, [r2, #48]	@ 0x30
 8003f84:	4b29      	ldr	r3, [pc, #164]	@ (800402c <HAL_ETH_MspInit+0x14c>)
 8003f86:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f88:	f003 0301 	and.w	r3, r3, #1
 8003f8c:	613b      	str	r3, [r7, #16]
 8003f8e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003f90:	2300      	movs	r3, #0
 8003f92:	60fb      	str	r3, [r7, #12]
 8003f94:	4b25      	ldr	r3, [pc, #148]	@ (800402c <HAL_ETH_MspInit+0x14c>)
 8003f96:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f98:	4a24      	ldr	r2, [pc, #144]	@ (800402c <HAL_ETH_MspInit+0x14c>)
 8003f9a:	f043 0302 	orr.w	r3, r3, #2
 8003f9e:	6313      	str	r3, [r2, #48]	@ 0x30
 8003fa0:	4b22      	ldr	r3, [pc, #136]	@ (800402c <HAL_ETH_MspInit+0x14c>)
 8003fa2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003fa4:	f003 0302 	and.w	r3, r3, #2
 8003fa8:	60fb      	str	r3, [r7, #12]
 8003faa:	68fb      	ldr	r3, [r7, #12]
    PC5     ------> ETH_RXD1
    PB11     ------> ETH_TX_EN
    PB12     ------> ETH_TXD0
    PB13     ------> ETH_TXD1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8003fac:	2332      	movs	r3, #50	@ 0x32
 8003fae:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003fb0:	2302      	movs	r3, #2
 8003fb2:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003fb4:	2300      	movs	r3, #0
 8003fb6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003fb8:	2303      	movs	r3, #3
 8003fba:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8003fbc:	230b      	movs	r3, #11
 8003fbe:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003fc0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003fc4:	4619      	mov	r1, r3
 8003fc6:	481a      	ldr	r0, [pc, #104]	@ (8004030 <HAL_ETH_MspInit+0x150>)
 8003fc8:	f7fe fa9e 	bl	8002508 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 8003fcc:	2386      	movs	r3, #134	@ 0x86
 8003fce:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003fd0:	2302      	movs	r3, #2
 8003fd2:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003fd4:	2300      	movs	r3, #0
 8003fd6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003fd8:	2303      	movs	r3, #3
 8003fda:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8003fdc:	230b      	movs	r3, #11
 8003fde:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003fe0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003fe4:	4619      	mov	r1, r3
 8003fe6:	4813      	ldr	r0, [pc, #76]	@ (8004034 <HAL_ETH_MspInit+0x154>)
 8003fe8:	f7fe fa8e 	bl	8002508 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13;
 8003fec:	f44f 5360 	mov.w	r3, #14336	@ 0x3800
 8003ff0:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003ff2:	2302      	movs	r3, #2
 8003ff4:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ff6:	2300      	movs	r3, #0
 8003ff8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003ffa:	2303      	movs	r3, #3
 8003ffc:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8003ffe:	230b      	movs	r3, #11
 8004000:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004002:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004006:	4619      	mov	r1, r3
 8004008:	480b      	ldr	r0, [pc, #44]	@ (8004038 <HAL_ETH_MspInit+0x158>)
 800400a:	f7fe fa7d 	bl	8002508 <HAL_GPIO_Init>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(ETH_IRQn, 5, 0);
 800400e:	2200      	movs	r2, #0
 8004010:	2105      	movs	r1, #5
 8004012:	203d      	movs	r0, #61	@ 0x3d
 8004014:	f7fc fff2 	bl	8000ffc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_IRQn);
 8004018:	203d      	movs	r0, #61	@ 0x3d
 800401a:	f7fd f80b 	bl	8001034 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 800401e:	bf00      	nop
 8004020:	3738      	adds	r7, #56	@ 0x38
 8004022:	46bd      	mov	sp, r7
 8004024:	bd80      	pop	{r7, pc}
 8004026:	bf00      	nop
 8004028:	40028000 	.word	0x40028000
 800402c:	40023800 	.word	0x40023800
 8004030:	40020800 	.word	0x40020800
 8004034:	40020000 	.word	0x40020000
 8004038:	40020400 	.word	0x40020400

0800403c <ETH_PHY_IO_Init>:
  * @brief  Initializes the MDIO interface GPIO and clocks.
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_Init(void)
{
 800403c:	b580      	push	{r7, lr}
 800403e:	af00      	add	r7, sp, #0
  /* We assume that MDIO GPIO configuration is already done
     in the ETH_MspInit() else it should be done here
  */

  /* Configure the MDIO Clock */
  HAL_ETH_SetMDIOClockRange(&heth);
 8004040:	4802      	ldr	r0, [pc, #8]	@ (800404c <ETH_PHY_IO_Init+0x10>)
 8004042:	f7fd fdf9 	bl	8001c38 <HAL_ETH_SetMDIOClockRange>

  return 0;
 8004046:	2300      	movs	r3, #0
}
 8004048:	4618      	mov	r0, r3
 800404a:	bd80      	pop	{r7, pc}
 800404c:	20005ce8 	.word	0x20005ce8

08004050 <ETH_PHY_IO_DeInit>:
  * @brief  De-Initializes the MDIO interface .
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_DeInit (void)
{
 8004050:	b480      	push	{r7}
 8004052:	af00      	add	r7, sp, #0
  return 0;
 8004054:	2300      	movs	r3, #0
}
 8004056:	4618      	mov	r0, r3
 8004058:	46bd      	mov	sp, r7
 800405a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800405e:	4770      	bx	lr

08004060 <ETH_PHY_IO_ReadReg>:
  * @param  RegAddr: PHY register address
  * @param  pRegVal: pointer to hold the register value
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_ReadReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t *pRegVal)
{
 8004060:	b580      	push	{r7, lr}
 8004062:	b084      	sub	sp, #16
 8004064:	af00      	add	r7, sp, #0
 8004066:	60f8      	str	r0, [r7, #12]
 8004068:	60b9      	str	r1, [r7, #8]
 800406a:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_ReadPHYRegister(&heth, DevAddr, RegAddr, pRegVal) != HAL_OK)
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	68ba      	ldr	r2, [r7, #8]
 8004070:	68f9      	ldr	r1, [r7, #12]
 8004072:	4807      	ldr	r0, [pc, #28]	@ (8004090 <ETH_PHY_IO_ReadReg+0x30>)
 8004074:	f7fd fc48 	bl	8001908 <HAL_ETH_ReadPHYRegister>
 8004078:	4603      	mov	r3, r0
 800407a:	2b00      	cmp	r3, #0
 800407c:	d002      	beq.n	8004084 <ETH_PHY_IO_ReadReg+0x24>
  {
    return -1;
 800407e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8004082:	e000      	b.n	8004086 <ETH_PHY_IO_ReadReg+0x26>
  }

  return 0;
 8004084:	2300      	movs	r3, #0
}
 8004086:	4618      	mov	r0, r3
 8004088:	3710      	adds	r7, #16
 800408a:	46bd      	mov	sp, r7
 800408c:	bd80      	pop	{r7, pc}
 800408e:	bf00      	nop
 8004090:	20005ce8 	.word	0x20005ce8

08004094 <ETH_PHY_IO_WriteReg>:
  * @param  RegAddr: PHY register address
  * @param  RegVal: Value to be written
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_WriteReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t RegVal)
{
 8004094:	b580      	push	{r7, lr}
 8004096:	b084      	sub	sp, #16
 8004098:	af00      	add	r7, sp, #0
 800409a:	60f8      	str	r0, [r7, #12]
 800409c:	60b9      	str	r1, [r7, #8]
 800409e:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_WritePHYRegister(&heth, DevAddr, RegAddr, RegVal) != HAL_OK)
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	68ba      	ldr	r2, [r7, #8]
 80040a4:	68f9      	ldr	r1, [r7, #12]
 80040a6:	4807      	ldr	r0, [pc, #28]	@ (80040c4 <ETH_PHY_IO_WriteReg+0x30>)
 80040a8:	f7fd fc79 	bl	800199e <HAL_ETH_WritePHYRegister>
 80040ac:	4603      	mov	r3, r0
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d002      	beq.n	80040b8 <ETH_PHY_IO_WriteReg+0x24>
  {
    return -1;
 80040b2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80040b6:	e000      	b.n	80040ba <ETH_PHY_IO_WriteReg+0x26>
  }

  return 0;
 80040b8:	2300      	movs	r3, #0
}
 80040ba:	4618      	mov	r0, r3
 80040bc:	3710      	adds	r7, #16
 80040be:	46bd      	mov	sp, r7
 80040c0:	bd80      	pop	{r7, pc}
 80040c2:	bf00      	nop
 80040c4:	20005ce8 	.word	0x20005ce8

080040c8 <ETH_PHY_IO_GetTick>:
/**
  * @brief  Get the time in millisecons used for internal PHY driver process.
  * @retval Time value
  */
int32_t ETH_PHY_IO_GetTick(void)
{
 80040c8:	b580      	push	{r7, lr}
 80040ca:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 80040cc:	f7fc feae 	bl	8000e2c <HAL_GetTick>
 80040d0:	4603      	mov	r3, r0
}
 80040d2:	4618      	mov	r0, r3
 80040d4:	bd80      	pop	{r7, pc}
	...

080040d8 <ethernet_link_thread>:
/**
  * @brief  Check the ETH link state then update ETH driver and netif link accordingly.
  * @retval None
  */
void ethernet_link_thread(void* argument)
{
 80040d8:	b580      	push	{r7, lr}
 80040da:	b0a0      	sub	sp, #128	@ 0x80
 80040dc:	af00      	add	r7, sp, #0
 80040de:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef MACConf = {0};
 80040e0:	f107 0308 	add.w	r3, r7, #8
 80040e4:	2264      	movs	r2, #100	@ 0x64
 80040e6:	2100      	movs	r1, #0
 80040e8:	4618      	mov	r0, r3
 80040ea:	f00e f94c 	bl	8012386 <memset>
  int32_t PHYLinkState = 0;
 80040ee:	2300      	movs	r3, #0
 80040f0:	673b      	str	r3, [r7, #112]	@ 0x70
  uint32_t linkchanged = 0U, speed = 0U, duplex = 0U;
 80040f2:	2300      	movs	r3, #0
 80040f4:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80040f6:	2300      	movs	r3, #0
 80040f8:	67bb      	str	r3, [r7, #120]	@ 0x78
 80040fa:	2300      	movs	r3, #0
 80040fc:	677b      	str	r3, [r7, #116]	@ 0x74

  struct netif *netif = (struct netif *) argument;
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	66fb      	str	r3, [r7, #108]	@ 0x6c

/* USER CODE END ETH link init */

  for(;;)
  {
  PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 8004102:	483a      	ldr	r0, [pc, #232]	@ (80041ec <ethernet_link_thread+0x114>)
 8004104:	f7fc fdd5 	bl	8000cb2 <LAN8742_GetLinkState>
 8004108:	6738      	str	r0, [r7, #112]	@ 0x70

  if(netif_is_link_up(netif) && (PHYLinkState <= LAN8742_STATUS_LINK_DOWN))
 800410a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800410c:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8004110:	089b      	lsrs	r3, r3, #2
 8004112:	f003 0301 	and.w	r3, r3, #1
 8004116:	b2db      	uxtb	r3, r3
 8004118:	2b00      	cmp	r3, #0
 800411a:	d00c      	beq.n	8004136 <ethernet_link_thread+0x5e>
 800411c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800411e:	2b01      	cmp	r3, #1
 8004120:	dc09      	bgt.n	8004136 <ethernet_link_thread+0x5e>
  {
    HAL_ETH_Stop_IT(&heth);
 8004122:	4833      	ldr	r0, [pc, #204]	@ (80041f0 <ethernet_link_thread+0x118>)
 8004124:	f7fd f8a0 	bl	8001268 <HAL_ETH_Stop_IT>
    netif_set_down(netif);
 8004128:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800412a:	f005 f8a5 	bl	8009278 <netif_set_down>
    netif_set_link_down(netif);
 800412e:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8004130:	f005 f908 	bl	8009344 <netif_set_link_down>
 8004134:	e055      	b.n	80041e2 <ethernet_link_thread+0x10a>
  }
  else if(!netif_is_link_up(netif) && (PHYLinkState > LAN8742_STATUS_LINK_DOWN))
 8004136:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004138:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800413c:	f003 0304 	and.w	r3, r3, #4
 8004140:	2b00      	cmp	r3, #0
 8004142:	d14e      	bne.n	80041e2 <ethernet_link_thread+0x10a>
 8004144:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004146:	2b01      	cmp	r3, #1
 8004148:	dd4b      	ble.n	80041e2 <ethernet_link_thread+0x10a>
  {
    switch (PHYLinkState)
 800414a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800414c:	3b02      	subs	r3, #2
 800414e:	2b03      	cmp	r3, #3
 8004150:	d82a      	bhi.n	80041a8 <ethernet_link_thread+0xd0>
 8004152:	a201      	add	r2, pc, #4	@ (adr r2, 8004158 <ethernet_link_thread+0x80>)
 8004154:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004158:	08004169 	.word	0x08004169
 800415c:	0800417b 	.word	0x0800417b
 8004160:	0800418b 	.word	0x0800418b
 8004164:	0800419b 	.word	0x0800419b
    {
    case LAN8742_STATUS_100MBITS_FULLDUPLEX:
      duplex = ETH_FULLDUPLEX_MODE;
 8004168:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800416c:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_100M;
 800416e:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8004172:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 8004174:	2301      	movs	r3, #1
 8004176:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 8004178:	e017      	b.n	80041aa <ethernet_link_thread+0xd2>
    case LAN8742_STATUS_100MBITS_HALFDUPLEX:
      duplex = ETH_HALFDUPLEX_MODE;
 800417a:	2300      	movs	r3, #0
 800417c:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_100M;
 800417e:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8004182:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 8004184:	2301      	movs	r3, #1
 8004186:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 8004188:	e00f      	b.n	80041aa <ethernet_link_thread+0xd2>
    case LAN8742_STATUS_10MBITS_FULLDUPLEX:
      duplex = ETH_FULLDUPLEX_MODE;
 800418a:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800418e:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_10M;
 8004190:	2300      	movs	r3, #0
 8004192:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 8004194:	2301      	movs	r3, #1
 8004196:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 8004198:	e007      	b.n	80041aa <ethernet_link_thread+0xd2>
    case LAN8742_STATUS_10MBITS_HALFDUPLEX:
      duplex = ETH_HALFDUPLEX_MODE;
 800419a:	2300      	movs	r3, #0
 800419c:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_10M;
 800419e:	2300      	movs	r3, #0
 80041a0:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 80041a2:	2301      	movs	r3, #1
 80041a4:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 80041a6:	e000      	b.n	80041aa <ethernet_link_thread+0xd2>
    default:
      break;
 80041a8:	bf00      	nop
    }

    if(linkchanged)
 80041aa:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	d018      	beq.n	80041e2 <ethernet_link_thread+0x10a>
    {
      /* Get MAC Config MAC */
      HAL_ETH_GetMACConfig(&heth, &MACConf);
 80041b0:	f107 0308 	add.w	r3, r7, #8
 80041b4:	4619      	mov	r1, r3
 80041b6:	480e      	ldr	r0, [pc, #56]	@ (80041f0 <ethernet_link_thread+0x118>)
 80041b8:	f7fd fc3a 	bl	8001a30 <HAL_ETH_GetMACConfig>
      MACConf.DuplexMode = duplex;
 80041bc:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80041be:	623b      	str	r3, [r7, #32]
      MACConf.Speed = speed;
 80041c0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80041c2:	61fb      	str	r3, [r7, #28]
      HAL_ETH_SetMACConfig(&heth, &MACConf);
 80041c4:	f107 0308 	add.w	r3, r7, #8
 80041c8:	4619      	mov	r1, r3
 80041ca:	4809      	ldr	r0, [pc, #36]	@ (80041f0 <ethernet_link_thread+0x118>)
 80041cc:	f7fd fd1a 	bl	8001c04 <HAL_ETH_SetMACConfig>
      HAL_ETH_Start_IT(&heth);
 80041d0:	4807      	ldr	r0, [pc, #28]	@ (80041f0 <ethernet_link_thread+0x118>)
 80041d2:	f7fc ffbb 	bl	800114c <HAL_ETH_Start_IT>
      netif_set_up(netif);
 80041d6:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 80041d8:	f004 ffe2 	bl	80091a0 <netif_set_up>
      netif_set_link_up(netif);
 80041dc:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 80041de:	f005 f87d 	bl	80092dc <netif_set_link_up>

/* USER CODE BEGIN ETH link Thread core code for User BSP */

/* USER CODE END ETH link Thread core code for User BSP */

    osDelay(100);
 80041e2:	2064      	movs	r0, #100	@ 0x64
 80041e4:	f000 f9b7 	bl	8004556 <osDelay>
  PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 80041e8:	e78b      	b.n	8004102 <ethernet_link_thread+0x2a>
 80041ea:	bf00      	nop
 80041ec:	20005dd0 	.word	0x20005dd0
 80041f0:	20005ce8 	.word	0x20005ce8

080041f4 <HAL_ETH_RxAllocateCallback>:
  }
}

void HAL_ETH_RxAllocateCallback(uint8_t **buff)
{
 80041f4:	b580      	push	{r7, lr}
 80041f6:	b086      	sub	sp, #24
 80041f8:	af02      	add	r7, sp, #8
 80041fa:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN HAL ETH RxAllocateCallback */
  struct pbuf_custom *p = LWIP_MEMPOOL_ALLOC(RX_POOL);
 80041fc:	4812      	ldr	r0, [pc, #72]	@ (8004248 <HAL_ETH_RxAllocateCallback+0x54>)
 80041fe:	f004 fd43 	bl	8008c88 <memp_malloc_pool>
 8004202:	60f8      	str	r0, [r7, #12]
  if (p)
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	2b00      	cmp	r3, #0
 8004208:	d014      	beq.n	8004234 <HAL_ETH_RxAllocateCallback+0x40>
  {
    /* Get the buff from the struct pbuf address. */
    *buff = (uint8_t *)p + offsetof(RxBuff_t, buff);
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	f103 0220 	add.w	r2, r3, #32
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	601a      	str	r2, [r3, #0]
    p->custom_free_function = pbuf_free_custom;
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	4a0d      	ldr	r2, [pc, #52]	@ (800424c <HAL_ETH_RxAllocateCallback+0x58>)
 8004218:	611a      	str	r2, [r3, #16]
    /* Initialize the struct pbuf.
    * This must be performed whenever a buffer's allocated because it may be
    * changed by lwIP or the app, e.g., pbuf_free decrements ref. */
    pbuf_alloced_custom(PBUF_RAW, 0, PBUF_REF, p, *buff, ETH_RX_BUF_SIZE);
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	f44f 62c0 	mov.w	r2, #1536	@ 0x600
 8004222:	9201      	str	r2, [sp, #4]
 8004224:	9300      	str	r3, [sp, #0]
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	2241      	movs	r2, #65	@ 0x41
 800422a:	2100      	movs	r1, #0
 800422c:	2000      	movs	r0, #0
 800422e:	f005 faad 	bl	800978c <pbuf_alloced_custom>
  {
    RxAllocStatus = RX_ALLOC_ERROR;
    *buff = NULL;
  }
/* USER CODE END HAL ETH RxAllocateCallback */
}
 8004232:	e005      	b.n	8004240 <HAL_ETH_RxAllocateCallback+0x4c>
    RxAllocStatus = RX_ALLOC_ERROR;
 8004234:	4b06      	ldr	r3, [pc, #24]	@ (8004250 <HAL_ETH_RxAllocateCallback+0x5c>)
 8004236:	2201      	movs	r2, #1
 8004238:	701a      	strb	r2, [r3, #0]
    *buff = NULL;
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	2200      	movs	r2, #0
 800423e:	601a      	str	r2, [r3, #0]
}
 8004240:	bf00      	nop
 8004242:	3710      	adds	r7, #16
 8004244:	46bd      	mov	sp, r7
 8004246:	bd80      	pop	{r7, pc}
 8004248:	08015ce0 	.word	0x08015ce0
 800424c:	08003e91 	.word	0x08003e91
 8004250:	20005b9c 	.word	0x20005b9c

08004254 <HAL_ETH_RxLinkCallback>:

void HAL_ETH_RxLinkCallback(void **pStart, void **pEnd, uint8_t *buff, uint16_t Length)
{
 8004254:	b480      	push	{r7}
 8004256:	b089      	sub	sp, #36	@ 0x24
 8004258:	af00      	add	r7, sp, #0
 800425a:	60f8      	str	r0, [r7, #12]
 800425c:	60b9      	str	r1, [r7, #8]
 800425e:	607a      	str	r2, [r7, #4]
 8004260:	807b      	strh	r3, [r7, #2]
/* USER CODE BEGIN HAL ETH RxLinkCallback */

  struct pbuf **ppStart = (struct pbuf **)pStart;
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	61bb      	str	r3, [r7, #24]
  struct pbuf **ppEnd = (struct pbuf **)pEnd;
 8004266:	68bb      	ldr	r3, [r7, #8]
 8004268:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 800426a:	2300      	movs	r3, #0
 800426c:	61fb      	str	r3, [r7, #28]

  /* Get the struct pbuf from the buff address. */
  p = (struct pbuf *)(buff - offsetof(RxBuff_t, buff));
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	3b20      	subs	r3, #32
 8004272:	61fb      	str	r3, [r7, #28]
  p->next = NULL;
 8004274:	69fb      	ldr	r3, [r7, #28]
 8004276:	2200      	movs	r2, #0
 8004278:	601a      	str	r2, [r3, #0]
  p->tot_len = 0;
 800427a:	69fb      	ldr	r3, [r7, #28]
 800427c:	2200      	movs	r2, #0
 800427e:	811a      	strh	r2, [r3, #8]
  p->len = Length;
 8004280:	69fb      	ldr	r3, [r7, #28]
 8004282:	887a      	ldrh	r2, [r7, #2]
 8004284:	815a      	strh	r2, [r3, #10]

  /* Chain the buffer. */
  if (!*ppStart)
 8004286:	69bb      	ldr	r3, [r7, #24]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	2b00      	cmp	r3, #0
 800428c:	d103      	bne.n	8004296 <HAL_ETH_RxLinkCallback+0x42>
  {
    /* The first buffer of the packet. */
    *ppStart = p;
 800428e:	69bb      	ldr	r3, [r7, #24]
 8004290:	69fa      	ldr	r2, [r7, #28]
 8004292:	601a      	str	r2, [r3, #0]
 8004294:	e003      	b.n	800429e <HAL_ETH_RxLinkCallback+0x4a>
  }
  else
  {
    /* Chain the buffer to the end of the packet. */
    (*ppEnd)->next = p;
 8004296:	697b      	ldr	r3, [r7, #20]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	69fa      	ldr	r2, [r7, #28]
 800429c:	601a      	str	r2, [r3, #0]
  }
  *ppEnd  = p;
 800429e:	697b      	ldr	r3, [r7, #20]
 80042a0:	69fa      	ldr	r2, [r7, #28]
 80042a2:	601a      	str	r2, [r3, #0]

  /* Update the total length of all the buffers of the chain. Each pbuf in the chain should have its tot_len
   * set to its own length, plus the length of all the following pbufs in the chain. */
  for (p = *ppStart; p != NULL; p = p->next)
 80042a4:	69bb      	ldr	r3, [r7, #24]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	61fb      	str	r3, [r7, #28]
 80042aa:	e009      	b.n	80042c0 <HAL_ETH_RxLinkCallback+0x6c>
  {
    p->tot_len += Length;
 80042ac:	69fb      	ldr	r3, [r7, #28]
 80042ae:	891a      	ldrh	r2, [r3, #8]
 80042b0:	887b      	ldrh	r3, [r7, #2]
 80042b2:	4413      	add	r3, r2
 80042b4:	b29a      	uxth	r2, r3
 80042b6:	69fb      	ldr	r3, [r7, #28]
 80042b8:	811a      	strh	r2, [r3, #8]
  for (p = *ppStart; p != NULL; p = p->next)
 80042ba:	69fb      	ldr	r3, [r7, #28]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	61fb      	str	r3, [r7, #28]
 80042c0:	69fb      	ldr	r3, [r7, #28]
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d1f2      	bne.n	80042ac <HAL_ETH_RxLinkCallback+0x58>
  }

/* USER CODE END HAL ETH RxLinkCallback */
}
 80042c6:	bf00      	nop
 80042c8:	bf00      	nop
 80042ca:	3724      	adds	r7, #36	@ 0x24
 80042cc:	46bd      	mov	sp, r7
 80042ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042d2:	4770      	bx	lr

080042d4 <HAL_ETH_TxFreeCallback>:

void HAL_ETH_TxFreeCallback(uint32_t * buff)
{
 80042d4:	b580      	push	{r7, lr}
 80042d6:	b082      	sub	sp, #8
 80042d8:	af00      	add	r7, sp, #0
 80042da:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN HAL ETH TxFreeCallback */

  pbuf_free((struct pbuf *)buff);
 80042dc:	6878      	ldr	r0, [r7, #4]
 80042de:	f005 fc0f 	bl	8009b00 <pbuf_free>

/* USER CODE END HAL ETH TxFreeCallback */
}
 80042e2:	bf00      	nop
 80042e4:	3708      	adds	r7, #8
 80042e6:	46bd      	mov	sp, r7
 80042e8:	bd80      	pop	{r7, pc}
	...

080042ec <__NVIC_SetPriority>:
{
 80042ec:	b480      	push	{r7}
 80042ee:	b083      	sub	sp, #12
 80042f0:	af00      	add	r7, sp, #0
 80042f2:	4603      	mov	r3, r0
 80042f4:	6039      	str	r1, [r7, #0]
 80042f6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80042f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	db0a      	blt.n	8004316 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004300:	683b      	ldr	r3, [r7, #0]
 8004302:	b2da      	uxtb	r2, r3
 8004304:	490c      	ldr	r1, [pc, #48]	@ (8004338 <__NVIC_SetPriority+0x4c>)
 8004306:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800430a:	0112      	lsls	r2, r2, #4
 800430c:	b2d2      	uxtb	r2, r2
 800430e:	440b      	add	r3, r1
 8004310:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8004314:	e00a      	b.n	800432c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004316:	683b      	ldr	r3, [r7, #0]
 8004318:	b2da      	uxtb	r2, r3
 800431a:	4908      	ldr	r1, [pc, #32]	@ (800433c <__NVIC_SetPriority+0x50>)
 800431c:	79fb      	ldrb	r3, [r7, #7]
 800431e:	f003 030f 	and.w	r3, r3, #15
 8004322:	3b04      	subs	r3, #4
 8004324:	0112      	lsls	r2, r2, #4
 8004326:	b2d2      	uxtb	r2, r2
 8004328:	440b      	add	r3, r1
 800432a:	761a      	strb	r2, [r3, #24]
}
 800432c:	bf00      	nop
 800432e:	370c      	adds	r7, #12
 8004330:	46bd      	mov	sp, r7
 8004332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004336:	4770      	bx	lr
 8004338:	e000e100 	.word	0xe000e100
 800433c:	e000ed00 	.word	0xe000ed00

08004340 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8004340:	b580      	push	{r7, lr}
 8004342:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8004344:	4b05      	ldr	r3, [pc, #20]	@ (800435c <SysTick_Handler+0x1c>)
 8004346:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8004348:	f002 fcc6 	bl	8006cd8 <xTaskGetSchedulerState>
 800434c:	4603      	mov	r3, r0
 800434e:	2b01      	cmp	r3, #1
 8004350:	d001      	beq.n	8004356 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8004352:	f003 fbc1 	bl	8007ad8 <xPortSysTickHandler>
  }
}
 8004356:	bf00      	nop
 8004358:	bd80      	pop	{r7, pc}
 800435a:	bf00      	nop
 800435c:	e000e010 	.word	0xe000e010

08004360 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8004360:	b580      	push	{r7, lr}
 8004362:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8004364:	2100      	movs	r1, #0
 8004366:	f06f 0004 	mvn.w	r0, #4
 800436a:	f7ff ffbf 	bl	80042ec <__NVIC_SetPriority>
#endif
}
 800436e:	bf00      	nop
 8004370:	bd80      	pop	{r7, pc}
	...

08004374 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8004374:	b480      	push	{r7}
 8004376:	b083      	sub	sp, #12
 8004378:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800437a:	f3ef 8305 	mrs	r3, IPSR
 800437e:	603b      	str	r3, [r7, #0]
  return(result);
 8004380:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004382:	2b00      	cmp	r3, #0
 8004384:	d003      	beq.n	800438e <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8004386:	f06f 0305 	mvn.w	r3, #5
 800438a:	607b      	str	r3, [r7, #4]
 800438c:	e00c      	b.n	80043a8 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800438e:	4b0a      	ldr	r3, [pc, #40]	@ (80043b8 <osKernelInitialize+0x44>)
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	2b00      	cmp	r3, #0
 8004394:	d105      	bne.n	80043a2 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8004396:	4b08      	ldr	r3, [pc, #32]	@ (80043b8 <osKernelInitialize+0x44>)
 8004398:	2201      	movs	r2, #1
 800439a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800439c:	2300      	movs	r3, #0
 800439e:	607b      	str	r3, [r7, #4]
 80043a0:	e002      	b.n	80043a8 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 80043a2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80043a6:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80043a8:	687b      	ldr	r3, [r7, #4]
}
 80043aa:	4618      	mov	r0, r3
 80043ac:	370c      	adds	r7, #12
 80043ae:	46bd      	mov	sp, r7
 80043b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043b4:	4770      	bx	lr
 80043b6:	bf00      	nop
 80043b8:	20005df0 	.word	0x20005df0

080043bc <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80043bc:	b580      	push	{r7, lr}
 80043be:	b082      	sub	sp, #8
 80043c0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80043c2:	f3ef 8305 	mrs	r3, IPSR
 80043c6:	603b      	str	r3, [r7, #0]
  return(result);
 80043c8:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d003      	beq.n	80043d6 <osKernelStart+0x1a>
    stat = osErrorISR;
 80043ce:	f06f 0305 	mvn.w	r3, #5
 80043d2:	607b      	str	r3, [r7, #4]
 80043d4:	e010      	b.n	80043f8 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 80043d6:	4b0b      	ldr	r3, [pc, #44]	@ (8004404 <osKernelStart+0x48>)
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	2b01      	cmp	r3, #1
 80043dc:	d109      	bne.n	80043f2 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80043de:	f7ff ffbf 	bl	8004360 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80043e2:	4b08      	ldr	r3, [pc, #32]	@ (8004404 <osKernelStart+0x48>)
 80043e4:	2202      	movs	r2, #2
 80043e6:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80043e8:	f001 fff0 	bl	80063cc <vTaskStartScheduler>
      stat = osOK;
 80043ec:	2300      	movs	r3, #0
 80043ee:	607b      	str	r3, [r7, #4]
 80043f0:	e002      	b.n	80043f8 <osKernelStart+0x3c>
    } else {
      stat = osError;
 80043f2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80043f6:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80043f8:	687b      	ldr	r3, [r7, #4]
}
 80043fa:	4618      	mov	r0, r3
 80043fc:	3708      	adds	r7, #8
 80043fe:	46bd      	mov	sp, r7
 8004400:	bd80      	pop	{r7, pc}
 8004402:	bf00      	nop
 8004404:	20005df0 	.word	0x20005df0

08004408 <osKernelGetTickCount>:
  }

  return (lock);
}

uint32_t osKernelGetTickCount (void) {
 8004408:	b580      	push	{r7, lr}
 800440a:	b082      	sub	sp, #8
 800440c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800440e:	f3ef 8305 	mrs	r3, IPSR
 8004412:	603b      	str	r3, [r7, #0]
  return(result);
 8004414:	683b      	ldr	r3, [r7, #0]
  TickType_t ticks;

  if (IS_IRQ()) {
 8004416:	2b00      	cmp	r3, #0
 8004418:	d003      	beq.n	8004422 <osKernelGetTickCount+0x1a>
    ticks = xTaskGetTickCountFromISR();
 800441a:	f002 f903 	bl	8006624 <xTaskGetTickCountFromISR>
 800441e:	6078      	str	r0, [r7, #4]
 8004420:	e002      	b.n	8004428 <osKernelGetTickCount+0x20>
  } else {
    ticks = xTaskGetTickCount();
 8004422:	f002 f8ef 	bl	8006604 <xTaskGetTickCount>
 8004426:	6078      	str	r0, [r7, #4]
  }

  return (ticks);
 8004428:	687b      	ldr	r3, [r7, #4]
}
 800442a:	4618      	mov	r0, r3
 800442c:	3708      	adds	r7, #8
 800442e:	46bd      	mov	sp, r7
 8004430:	bd80      	pop	{r7, pc}

08004432 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8004432:	b580      	push	{r7, lr}
 8004434:	b08e      	sub	sp, #56	@ 0x38
 8004436:	af04      	add	r7, sp, #16
 8004438:	60f8      	str	r0, [r7, #12]
 800443a:	60b9      	str	r1, [r7, #8]
 800443c:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800443e:	2300      	movs	r3, #0
 8004440:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004442:	f3ef 8305 	mrs	r3, IPSR
 8004446:	617b      	str	r3, [r7, #20]
  return(result);
 8004448:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800444a:	2b00      	cmp	r3, #0
 800444c:	d17e      	bne.n	800454c <osThreadNew+0x11a>
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	2b00      	cmp	r3, #0
 8004452:	d07b      	beq.n	800454c <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8004454:	2380      	movs	r3, #128	@ 0x80
 8004456:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8004458:	2318      	movs	r3, #24
 800445a:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800445c:	2300      	movs	r3, #0
 800445e:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 8004460:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8004464:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	2b00      	cmp	r3, #0
 800446a:	d045      	beq.n	80044f8 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	2b00      	cmp	r3, #0
 8004472:	d002      	beq.n	800447a <osThreadNew+0x48>
        name = attr->name;
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	699b      	ldr	r3, [r3, #24]
 800447e:	2b00      	cmp	r3, #0
 8004480:	d002      	beq.n	8004488 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	699b      	ldr	r3, [r3, #24]
 8004486:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8004488:	69fb      	ldr	r3, [r7, #28]
 800448a:	2b00      	cmp	r3, #0
 800448c:	d008      	beq.n	80044a0 <osThreadNew+0x6e>
 800448e:	69fb      	ldr	r3, [r7, #28]
 8004490:	2b38      	cmp	r3, #56	@ 0x38
 8004492:	d805      	bhi.n	80044a0 <osThreadNew+0x6e>
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	685b      	ldr	r3, [r3, #4]
 8004498:	f003 0301 	and.w	r3, r3, #1
 800449c:	2b00      	cmp	r3, #0
 800449e:	d001      	beq.n	80044a4 <osThreadNew+0x72>
        return (NULL);
 80044a0:	2300      	movs	r3, #0
 80044a2:	e054      	b.n	800454e <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	695b      	ldr	r3, [r3, #20]
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	d003      	beq.n	80044b4 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	695b      	ldr	r3, [r3, #20]
 80044b0:	089b      	lsrs	r3, r3, #2
 80044b2:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	689b      	ldr	r3, [r3, #8]
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	d00e      	beq.n	80044da <osThreadNew+0xa8>
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	68db      	ldr	r3, [r3, #12]
 80044c0:	2ba7      	cmp	r3, #167	@ 0xa7
 80044c2:	d90a      	bls.n	80044da <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d006      	beq.n	80044da <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	695b      	ldr	r3, [r3, #20]
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d002      	beq.n	80044da <osThreadNew+0xa8>
        mem = 1;
 80044d4:	2301      	movs	r3, #1
 80044d6:	61bb      	str	r3, [r7, #24]
 80044d8:	e010      	b.n	80044fc <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	689b      	ldr	r3, [r3, #8]
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d10c      	bne.n	80044fc <osThreadNew+0xca>
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	68db      	ldr	r3, [r3, #12]
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d108      	bne.n	80044fc <osThreadNew+0xca>
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	691b      	ldr	r3, [r3, #16]
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d104      	bne.n	80044fc <osThreadNew+0xca>
          mem = 0;
 80044f2:	2300      	movs	r3, #0
 80044f4:	61bb      	str	r3, [r7, #24]
 80044f6:	e001      	b.n	80044fc <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 80044f8:	2300      	movs	r3, #0
 80044fa:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80044fc:	69bb      	ldr	r3, [r7, #24]
 80044fe:	2b01      	cmp	r3, #1
 8004500:	d110      	bne.n	8004524 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8004506:	687a      	ldr	r2, [r7, #4]
 8004508:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800450a:	9202      	str	r2, [sp, #8]
 800450c:	9301      	str	r3, [sp, #4]
 800450e:	69fb      	ldr	r3, [r7, #28]
 8004510:	9300      	str	r3, [sp, #0]
 8004512:	68bb      	ldr	r3, [r7, #8]
 8004514:	6a3a      	ldr	r2, [r7, #32]
 8004516:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004518:	68f8      	ldr	r0, [r7, #12]
 800451a:	f001 fd63 	bl	8005fe4 <xTaskCreateStatic>
 800451e:	4603      	mov	r3, r0
 8004520:	613b      	str	r3, [r7, #16]
 8004522:	e013      	b.n	800454c <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8004524:	69bb      	ldr	r3, [r7, #24]
 8004526:	2b00      	cmp	r3, #0
 8004528:	d110      	bne.n	800454c <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800452a:	6a3b      	ldr	r3, [r7, #32]
 800452c:	b29a      	uxth	r2, r3
 800452e:	f107 0310 	add.w	r3, r7, #16
 8004532:	9301      	str	r3, [sp, #4]
 8004534:	69fb      	ldr	r3, [r7, #28]
 8004536:	9300      	str	r3, [sp, #0]
 8004538:	68bb      	ldr	r3, [r7, #8]
 800453a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800453c:	68f8      	ldr	r0, [r7, #12]
 800453e:	f001 fdb1 	bl	80060a4 <xTaskCreate>
 8004542:	4603      	mov	r3, r0
 8004544:	2b01      	cmp	r3, #1
 8004546:	d001      	beq.n	800454c <osThreadNew+0x11a>
            hTask = NULL;
 8004548:	2300      	movs	r3, #0
 800454a:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800454c:	693b      	ldr	r3, [r7, #16]
}
 800454e:	4618      	mov	r0, r3
 8004550:	3728      	adds	r7, #40	@ 0x28
 8004552:	46bd      	mov	sp, r7
 8004554:	bd80      	pop	{r7, pc}

08004556 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8004556:	b580      	push	{r7, lr}
 8004558:	b084      	sub	sp, #16
 800455a:	af00      	add	r7, sp, #0
 800455c:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800455e:	f3ef 8305 	mrs	r3, IPSR
 8004562:	60bb      	str	r3, [r7, #8]
  return(result);
 8004564:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004566:	2b00      	cmp	r3, #0
 8004568:	d003      	beq.n	8004572 <osDelay+0x1c>
    stat = osErrorISR;
 800456a:	f06f 0305 	mvn.w	r3, #5
 800456e:	60fb      	str	r3, [r7, #12]
 8004570:	e007      	b.n	8004582 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8004572:	2300      	movs	r3, #0
 8004574:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	2b00      	cmp	r3, #0
 800457a:	d002      	beq.n	8004582 <osDelay+0x2c>
      vTaskDelay(ticks);
 800457c:	6878      	ldr	r0, [r7, #4]
 800457e:	f001 feef 	bl	8006360 <vTaskDelay>
    }
  }

  return (stat);
 8004582:	68fb      	ldr	r3, [r7, #12]
}
 8004584:	4618      	mov	r0, r3
 8004586:	3710      	adds	r7, #16
 8004588:	46bd      	mov	sp, r7
 800458a:	bd80      	pop	{r7, pc}

0800458c <osMutexNew>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_MUTEX == 1)

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 800458c:	b580      	push	{r7, lr}
 800458e:	b088      	sub	sp, #32
 8004590:	af00      	add	r7, sp, #0
 8004592:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 8004594:	2300      	movs	r3, #0
 8004596:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004598:	f3ef 8305 	mrs	r3, IPSR
 800459c:	60bb      	str	r3, [r7, #8]
  return(result);
 800459e:	68bb      	ldr	r3, [r7, #8]

  if (!IS_IRQ()) {
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	d174      	bne.n	800468e <osMutexNew+0x102>
    if (attr != NULL) {
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d003      	beq.n	80045b2 <osMutexNew+0x26>
      type = attr->attr_bits;
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	685b      	ldr	r3, [r3, #4]
 80045ae:	61bb      	str	r3, [r7, #24]
 80045b0:	e001      	b.n	80045b6 <osMutexNew+0x2a>
    } else {
      type = 0U;
 80045b2:	2300      	movs	r3, #0
 80045b4:	61bb      	str	r3, [r7, #24]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 80045b6:	69bb      	ldr	r3, [r7, #24]
 80045b8:	f003 0301 	and.w	r3, r3, #1
 80045bc:	2b00      	cmp	r3, #0
 80045be:	d002      	beq.n	80045c6 <osMutexNew+0x3a>
      rmtx = 1U;
 80045c0:	2301      	movs	r3, #1
 80045c2:	617b      	str	r3, [r7, #20]
 80045c4:	e001      	b.n	80045ca <osMutexNew+0x3e>
    } else {
      rmtx = 0U;
 80045c6:	2300      	movs	r3, #0
 80045c8:	617b      	str	r3, [r7, #20]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 80045ca:	69bb      	ldr	r3, [r7, #24]
 80045cc:	f003 0308 	and.w	r3, r3, #8
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	d15c      	bne.n	800468e <osMutexNew+0x102>
      mem = -1;
 80045d4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80045d8:	613b      	str	r3, [r7, #16]

      if (attr != NULL) {
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	2b00      	cmp	r3, #0
 80045de:	d015      	beq.n	800460c <osMutexNew+0x80>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	689b      	ldr	r3, [r3, #8]
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d006      	beq.n	80045f6 <osMutexNew+0x6a>
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	68db      	ldr	r3, [r3, #12]
 80045ec:	2b4f      	cmp	r3, #79	@ 0x4f
 80045ee:	d902      	bls.n	80045f6 <osMutexNew+0x6a>
          mem = 1;
 80045f0:	2301      	movs	r3, #1
 80045f2:	613b      	str	r3, [r7, #16]
 80045f4:	e00c      	b.n	8004610 <osMutexNew+0x84>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	689b      	ldr	r3, [r3, #8]
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d108      	bne.n	8004610 <osMutexNew+0x84>
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	68db      	ldr	r3, [r3, #12]
 8004602:	2b00      	cmp	r3, #0
 8004604:	d104      	bne.n	8004610 <osMutexNew+0x84>
            mem = 0;
 8004606:	2300      	movs	r3, #0
 8004608:	613b      	str	r3, [r7, #16]
 800460a:	e001      	b.n	8004610 <osMutexNew+0x84>
          }
        }
      }
      else {
        mem = 0;
 800460c:	2300      	movs	r3, #0
 800460e:	613b      	str	r3, [r7, #16]
      }

      if (mem == 1) {
 8004610:	693b      	ldr	r3, [r7, #16]
 8004612:	2b01      	cmp	r3, #1
 8004614:	d112      	bne.n	800463c <osMutexNew+0xb0>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          if (rmtx != 0U) {
 8004616:	697b      	ldr	r3, [r7, #20]
 8004618:	2b00      	cmp	r3, #0
 800461a:	d007      	beq.n	800462c <osMutexNew+0xa0>
            #if (configUSE_RECURSIVE_MUTEXES == 1)
            hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	689b      	ldr	r3, [r3, #8]
 8004620:	4619      	mov	r1, r3
 8004622:	2004      	movs	r0, #4
 8004624:	f000 fd71 	bl	800510a <xQueueCreateMutexStatic>
 8004628:	61f8      	str	r0, [r7, #28]
 800462a:	e016      	b.n	800465a <osMutexNew+0xce>
            #endif
          }
          else {
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	689b      	ldr	r3, [r3, #8]
 8004630:	4619      	mov	r1, r3
 8004632:	2001      	movs	r0, #1
 8004634:	f000 fd69 	bl	800510a <xQueueCreateMutexStatic>
 8004638:	61f8      	str	r0, [r7, #28]
 800463a:	e00e      	b.n	800465a <osMutexNew+0xce>
          }
        #endif
      }
      else {
        if (mem == 0) {
 800463c:	693b      	ldr	r3, [r7, #16]
 800463e:	2b00      	cmp	r3, #0
 8004640:	d10b      	bne.n	800465a <osMutexNew+0xce>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            if (rmtx != 0U) {
 8004642:	697b      	ldr	r3, [r7, #20]
 8004644:	2b00      	cmp	r3, #0
 8004646:	d004      	beq.n	8004652 <osMutexNew+0xc6>
              #if (configUSE_RECURSIVE_MUTEXES == 1)
              hMutex = xSemaphoreCreateRecursiveMutex ();
 8004648:	2004      	movs	r0, #4
 800464a:	f000 fd46 	bl	80050da <xQueueCreateMutex>
 800464e:	61f8      	str	r0, [r7, #28]
 8004650:	e003      	b.n	800465a <osMutexNew+0xce>
              #endif
            } else {
              hMutex = xSemaphoreCreateMutex ();
 8004652:	2001      	movs	r0, #1
 8004654:	f000 fd41 	bl	80050da <xQueueCreateMutex>
 8004658:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 800465a:	69fb      	ldr	r3, [r7, #28]
 800465c:	2b00      	cmp	r3, #0
 800465e:	d00c      	beq.n	800467a <osMutexNew+0xee>
        if (attr != NULL) {
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	2b00      	cmp	r3, #0
 8004664:	d003      	beq.n	800466e <osMutexNew+0xe2>
          name = attr->name;
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	60fb      	str	r3, [r7, #12]
 800466c:	e001      	b.n	8004672 <osMutexNew+0xe6>
        } else {
          name = NULL;
 800466e:	2300      	movs	r3, #0
 8004670:	60fb      	str	r3, [r7, #12]
        }
        vQueueAddToRegistry (hMutex, name);
 8004672:	68f9      	ldr	r1, [r7, #12]
 8004674:	69f8      	ldr	r0, [r7, #28]
 8004676:	f001 fc2d 	bl	8005ed4 <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 800467a:	69fb      	ldr	r3, [r7, #28]
 800467c:	2b00      	cmp	r3, #0
 800467e:	d006      	beq.n	800468e <osMutexNew+0x102>
 8004680:	697b      	ldr	r3, [r7, #20]
 8004682:	2b00      	cmp	r3, #0
 8004684:	d003      	beq.n	800468e <osMutexNew+0x102>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 8004686:	69fb      	ldr	r3, [r7, #28]
 8004688:	f043 0301 	orr.w	r3, r3, #1
 800468c:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return ((osMutexId_t)hMutex);
 800468e:	69fb      	ldr	r3, [r7, #28]
}
 8004690:	4618      	mov	r0, r3
 8004692:	3720      	adds	r7, #32
 8004694:	46bd      	mov	sp, r7
 8004696:	bd80      	pop	{r7, pc}

08004698 <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 8004698:	b580      	push	{r7, lr}
 800469a:	b086      	sub	sp, #24
 800469c:	af00      	add	r7, sp, #0
 800469e:	6078      	str	r0, [r7, #4]
 80046a0:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	f023 0301 	bic.w	r3, r3, #1
 80046a8:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	f003 0301 	and.w	r3, r3, #1
 80046b0:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 80046b2:	2300      	movs	r3, #0
 80046b4:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80046b6:	f3ef 8305 	mrs	r3, IPSR
 80046ba:	60bb      	str	r3, [r7, #8]
  return(result);
 80046bc:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d003      	beq.n	80046ca <osMutexAcquire+0x32>
    stat = osErrorISR;
 80046c2:	f06f 0305 	mvn.w	r3, #5
 80046c6:	617b      	str	r3, [r7, #20]
 80046c8:	e02c      	b.n	8004724 <osMutexAcquire+0x8c>
  }
  else if (hMutex == NULL) {
 80046ca:	693b      	ldr	r3, [r7, #16]
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	d103      	bne.n	80046d8 <osMutexAcquire+0x40>
    stat = osErrorParameter;
 80046d0:	f06f 0303 	mvn.w	r3, #3
 80046d4:	617b      	str	r3, [r7, #20]
 80046d6:	e025      	b.n	8004724 <osMutexAcquire+0x8c>
  }
  else {
    if (rmtx != 0U) {
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d011      	beq.n	8004702 <osMutexAcquire+0x6a>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 80046de:	6839      	ldr	r1, [r7, #0]
 80046e0:	6938      	ldr	r0, [r7, #16]
 80046e2:	f000 fd62 	bl	80051aa <xQueueTakeMutexRecursive>
 80046e6:	4603      	mov	r3, r0
 80046e8:	2b01      	cmp	r3, #1
 80046ea:	d01b      	beq.n	8004724 <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 80046ec:	683b      	ldr	r3, [r7, #0]
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d003      	beq.n	80046fa <osMutexAcquire+0x62>
          stat = osErrorTimeout;
 80046f2:	f06f 0301 	mvn.w	r3, #1
 80046f6:	617b      	str	r3, [r7, #20]
 80046f8:	e014      	b.n	8004724 <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 80046fa:	f06f 0302 	mvn.w	r3, #2
 80046fe:	617b      	str	r3, [r7, #20]
 8004700:	e010      	b.n	8004724 <osMutexAcquire+0x8c>
        }
      }
      #endif
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 8004702:	6839      	ldr	r1, [r7, #0]
 8004704:	6938      	ldr	r0, [r7, #16]
 8004706:	f001 f907 	bl	8005918 <xQueueSemaphoreTake>
 800470a:	4603      	mov	r3, r0
 800470c:	2b01      	cmp	r3, #1
 800470e:	d009      	beq.n	8004724 <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 8004710:	683b      	ldr	r3, [r7, #0]
 8004712:	2b00      	cmp	r3, #0
 8004714:	d003      	beq.n	800471e <osMutexAcquire+0x86>
          stat = osErrorTimeout;
 8004716:	f06f 0301 	mvn.w	r3, #1
 800471a:	617b      	str	r3, [r7, #20]
 800471c:	e002      	b.n	8004724 <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 800471e:	f06f 0302 	mvn.w	r3, #2
 8004722:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return (stat);
 8004724:	697b      	ldr	r3, [r7, #20]
}
 8004726:	4618      	mov	r0, r3
 8004728:	3718      	adds	r7, #24
 800472a:	46bd      	mov	sp, r7
 800472c:	bd80      	pop	{r7, pc}

0800472e <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 800472e:	b580      	push	{r7, lr}
 8004730:	b086      	sub	sp, #24
 8004732:	af00      	add	r7, sp, #0
 8004734:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	f023 0301 	bic.w	r3, r3, #1
 800473c:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	f003 0301 	and.w	r3, r3, #1
 8004744:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 8004746:	2300      	movs	r3, #0
 8004748:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800474a:	f3ef 8305 	mrs	r3, IPSR
 800474e:	60bb      	str	r3, [r7, #8]
  return(result);
 8004750:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 8004752:	2b00      	cmp	r3, #0
 8004754:	d003      	beq.n	800475e <osMutexRelease+0x30>
    stat = osErrorISR;
 8004756:	f06f 0305 	mvn.w	r3, #5
 800475a:	617b      	str	r3, [r7, #20]
 800475c:	e01f      	b.n	800479e <osMutexRelease+0x70>
  }
  else if (hMutex == NULL) {
 800475e:	693b      	ldr	r3, [r7, #16]
 8004760:	2b00      	cmp	r3, #0
 8004762:	d103      	bne.n	800476c <osMutexRelease+0x3e>
    stat = osErrorParameter;
 8004764:	f06f 0303 	mvn.w	r3, #3
 8004768:	617b      	str	r3, [r7, #20]
 800476a:	e018      	b.n	800479e <osMutexRelease+0x70>
  }
  else {
    if (rmtx != 0U) {
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	2b00      	cmp	r3, #0
 8004770:	d009      	beq.n	8004786 <osMutexRelease+0x58>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 8004772:	6938      	ldr	r0, [r7, #16]
 8004774:	f000 fce4 	bl	8005140 <xQueueGiveMutexRecursive>
 8004778:	4603      	mov	r3, r0
 800477a:	2b01      	cmp	r3, #1
 800477c:	d00f      	beq.n	800479e <osMutexRelease+0x70>
        stat = osErrorResource;
 800477e:	f06f 0302 	mvn.w	r3, #2
 8004782:	617b      	str	r3, [r7, #20]
 8004784:	e00b      	b.n	800479e <osMutexRelease+0x70>
      }
      #endif
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 8004786:	2300      	movs	r3, #0
 8004788:	2200      	movs	r2, #0
 800478a:	2100      	movs	r1, #0
 800478c:	6938      	ldr	r0, [r7, #16]
 800478e:	f000 fdb1 	bl	80052f4 <xQueueGenericSend>
 8004792:	4603      	mov	r3, r0
 8004794:	2b01      	cmp	r3, #1
 8004796:	d002      	beq.n	800479e <osMutexRelease+0x70>
        stat = osErrorResource;
 8004798:	f06f 0302 	mvn.w	r3, #2
 800479c:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 800479e:	697b      	ldr	r3, [r7, #20]
}
 80047a0:	4618      	mov	r0, r3
 80047a2:	3718      	adds	r7, #24
 80047a4:	46bd      	mov	sp, r7
 80047a6:	bd80      	pop	{r7, pc}

080047a8 <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 80047a8:	b580      	push	{r7, lr}
 80047aa:	b08a      	sub	sp, #40	@ 0x28
 80047ac:	af02      	add	r7, sp, #8
 80047ae:	60f8      	str	r0, [r7, #12]
 80047b0:	60b9      	str	r1, [r7, #8]
 80047b2:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 80047b4:	2300      	movs	r3, #0
 80047b6:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80047b8:	f3ef 8305 	mrs	r3, IPSR
 80047bc:	613b      	str	r3, [r7, #16]
  return(result);
 80047be:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	d175      	bne.n	80048b0 <osSemaphoreNew+0x108>
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d072      	beq.n	80048b0 <osSemaphoreNew+0x108>
 80047ca:	68ba      	ldr	r2, [r7, #8]
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	429a      	cmp	r2, r3
 80047d0:	d86e      	bhi.n	80048b0 <osSemaphoreNew+0x108>
    mem = -1;
 80047d2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80047d6:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d015      	beq.n	800480a <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	689b      	ldr	r3, [r3, #8]
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	d006      	beq.n	80047f4 <osSemaphoreNew+0x4c>
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	68db      	ldr	r3, [r3, #12]
 80047ea:	2b4f      	cmp	r3, #79	@ 0x4f
 80047ec:	d902      	bls.n	80047f4 <osSemaphoreNew+0x4c>
        mem = 1;
 80047ee:	2301      	movs	r3, #1
 80047f0:	61bb      	str	r3, [r7, #24]
 80047f2:	e00c      	b.n	800480e <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	689b      	ldr	r3, [r3, #8]
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	d108      	bne.n	800480e <osSemaphoreNew+0x66>
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	68db      	ldr	r3, [r3, #12]
 8004800:	2b00      	cmp	r3, #0
 8004802:	d104      	bne.n	800480e <osSemaphoreNew+0x66>
          mem = 0;
 8004804:	2300      	movs	r3, #0
 8004806:	61bb      	str	r3, [r7, #24]
 8004808:	e001      	b.n	800480e <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 800480a:	2300      	movs	r3, #0
 800480c:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 800480e:	69bb      	ldr	r3, [r7, #24]
 8004810:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004814:	d04c      	beq.n	80048b0 <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	2b01      	cmp	r3, #1
 800481a:	d128      	bne.n	800486e <osSemaphoreNew+0xc6>
        if (mem == 1) {
 800481c:	69bb      	ldr	r3, [r7, #24]
 800481e:	2b01      	cmp	r3, #1
 8004820:	d10a      	bne.n	8004838 <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	689b      	ldr	r3, [r3, #8]
 8004826:	2203      	movs	r2, #3
 8004828:	9200      	str	r2, [sp, #0]
 800482a:	2200      	movs	r2, #0
 800482c:	2100      	movs	r1, #0
 800482e:	2001      	movs	r0, #1
 8004830:	f000 fb5e 	bl	8004ef0 <xQueueGenericCreateStatic>
 8004834:	61f8      	str	r0, [r7, #28]
 8004836:	e005      	b.n	8004844 <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 8004838:	2203      	movs	r2, #3
 800483a:	2100      	movs	r1, #0
 800483c:	2001      	movs	r0, #1
 800483e:	f000 fbd4 	bl	8004fea <xQueueGenericCreate>
 8004842:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 8004844:	69fb      	ldr	r3, [r7, #28]
 8004846:	2b00      	cmp	r3, #0
 8004848:	d022      	beq.n	8004890 <osSemaphoreNew+0xe8>
 800484a:	68bb      	ldr	r3, [r7, #8]
 800484c:	2b00      	cmp	r3, #0
 800484e:	d01f      	beq.n	8004890 <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8004850:	2300      	movs	r3, #0
 8004852:	2200      	movs	r2, #0
 8004854:	2100      	movs	r1, #0
 8004856:	69f8      	ldr	r0, [r7, #28]
 8004858:	f000 fd4c 	bl	80052f4 <xQueueGenericSend>
 800485c:	4603      	mov	r3, r0
 800485e:	2b01      	cmp	r3, #1
 8004860:	d016      	beq.n	8004890 <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 8004862:	69f8      	ldr	r0, [r7, #28]
 8004864:	f001 f9ea 	bl	8005c3c <vQueueDelete>
            hSemaphore = NULL;
 8004868:	2300      	movs	r3, #0
 800486a:	61fb      	str	r3, [r7, #28]
 800486c:	e010      	b.n	8004890 <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 800486e:	69bb      	ldr	r3, [r7, #24]
 8004870:	2b01      	cmp	r3, #1
 8004872:	d108      	bne.n	8004886 <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	689b      	ldr	r3, [r3, #8]
 8004878:	461a      	mov	r2, r3
 800487a:	68b9      	ldr	r1, [r7, #8]
 800487c:	68f8      	ldr	r0, [r7, #12]
 800487e:	f000 fccb 	bl	8005218 <xQueueCreateCountingSemaphoreStatic>
 8004882:	61f8      	str	r0, [r7, #28]
 8004884:	e004      	b.n	8004890 <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 8004886:	68b9      	ldr	r1, [r7, #8]
 8004888:	68f8      	ldr	r0, [r7, #12]
 800488a:	f000 fcfe 	bl	800528a <xQueueCreateCountingSemaphore>
 800488e:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 8004890:	69fb      	ldr	r3, [r7, #28]
 8004892:	2b00      	cmp	r3, #0
 8004894:	d00c      	beq.n	80048b0 <osSemaphoreNew+0x108>
        if (attr != NULL) {
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	2b00      	cmp	r3, #0
 800489a:	d003      	beq.n	80048a4 <osSemaphoreNew+0xfc>
          name = attr->name;
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	617b      	str	r3, [r7, #20]
 80048a2:	e001      	b.n	80048a8 <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 80048a4:	2300      	movs	r3, #0
 80048a6:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 80048a8:	6979      	ldr	r1, [r7, #20]
 80048aa:	69f8      	ldr	r0, [r7, #28]
 80048ac:	f001 fb12 	bl	8005ed4 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 80048b0:	69fb      	ldr	r3, [r7, #28]
}
 80048b2:	4618      	mov	r0, r3
 80048b4:	3720      	adds	r7, #32
 80048b6:	46bd      	mov	sp, r7
 80048b8:	bd80      	pop	{r7, pc}
	...

080048bc <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 80048bc:	b580      	push	{r7, lr}
 80048be:	b086      	sub	sp, #24
 80048c0:	af00      	add	r7, sp, #0
 80048c2:	6078      	str	r0, [r7, #4]
 80048c4:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 80048ca:	2300      	movs	r3, #0
 80048cc:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 80048ce:	693b      	ldr	r3, [r7, #16]
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	d103      	bne.n	80048dc <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 80048d4:	f06f 0303 	mvn.w	r3, #3
 80048d8:	617b      	str	r3, [r7, #20]
 80048da:	e039      	b.n	8004950 <osSemaphoreAcquire+0x94>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80048dc:	f3ef 8305 	mrs	r3, IPSR
 80048e0:	60fb      	str	r3, [r7, #12]
  return(result);
 80048e2:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	d022      	beq.n	800492e <osSemaphoreAcquire+0x72>
    if (timeout != 0U) {
 80048e8:	683b      	ldr	r3, [r7, #0]
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d003      	beq.n	80048f6 <osSemaphoreAcquire+0x3a>
      stat = osErrorParameter;
 80048ee:	f06f 0303 	mvn.w	r3, #3
 80048f2:	617b      	str	r3, [r7, #20]
 80048f4:	e02c      	b.n	8004950 <osSemaphoreAcquire+0x94>
    }
    else {
      yield = pdFALSE;
 80048f6:	2300      	movs	r3, #0
 80048f8:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 80048fa:	f107 0308 	add.w	r3, r7, #8
 80048fe:	461a      	mov	r2, r3
 8004900:	2100      	movs	r1, #0
 8004902:	6938      	ldr	r0, [r7, #16]
 8004904:	f001 f918 	bl	8005b38 <xQueueReceiveFromISR>
 8004908:	4603      	mov	r3, r0
 800490a:	2b01      	cmp	r3, #1
 800490c:	d003      	beq.n	8004916 <osSemaphoreAcquire+0x5a>
        stat = osErrorResource;
 800490e:	f06f 0302 	mvn.w	r3, #2
 8004912:	617b      	str	r3, [r7, #20]
 8004914:	e01c      	b.n	8004950 <osSemaphoreAcquire+0x94>
      } else {
        portYIELD_FROM_ISR (yield);
 8004916:	68bb      	ldr	r3, [r7, #8]
 8004918:	2b00      	cmp	r3, #0
 800491a:	d019      	beq.n	8004950 <osSemaphoreAcquire+0x94>
 800491c:	4b0f      	ldr	r3, [pc, #60]	@ (800495c <osSemaphoreAcquire+0xa0>)
 800491e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004922:	601a      	str	r2, [r3, #0]
 8004924:	f3bf 8f4f 	dsb	sy
 8004928:	f3bf 8f6f 	isb	sy
 800492c:	e010      	b.n	8004950 <osSemaphoreAcquire+0x94>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 800492e:	6839      	ldr	r1, [r7, #0]
 8004930:	6938      	ldr	r0, [r7, #16]
 8004932:	f000 fff1 	bl	8005918 <xQueueSemaphoreTake>
 8004936:	4603      	mov	r3, r0
 8004938:	2b01      	cmp	r3, #1
 800493a:	d009      	beq.n	8004950 <osSemaphoreAcquire+0x94>
      if (timeout != 0U) {
 800493c:	683b      	ldr	r3, [r7, #0]
 800493e:	2b00      	cmp	r3, #0
 8004940:	d003      	beq.n	800494a <osSemaphoreAcquire+0x8e>
        stat = osErrorTimeout;
 8004942:	f06f 0301 	mvn.w	r3, #1
 8004946:	617b      	str	r3, [r7, #20]
 8004948:	e002      	b.n	8004950 <osSemaphoreAcquire+0x94>
      } else {
        stat = osErrorResource;
 800494a:	f06f 0302 	mvn.w	r3, #2
 800494e:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 8004950:	697b      	ldr	r3, [r7, #20]
}
 8004952:	4618      	mov	r0, r3
 8004954:	3718      	adds	r7, #24
 8004956:	46bd      	mov	sp, r7
 8004958:	bd80      	pop	{r7, pc}
 800495a:	bf00      	nop
 800495c:	e000ed04 	.word	0xe000ed04

08004960 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 8004960:	b580      	push	{r7, lr}
 8004962:	b086      	sub	sp, #24
 8004964:	af00      	add	r7, sp, #0
 8004966:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 800496c:	2300      	movs	r3, #0
 800496e:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 8004970:	693b      	ldr	r3, [r7, #16]
 8004972:	2b00      	cmp	r3, #0
 8004974:	d103      	bne.n	800497e <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 8004976:	f06f 0303 	mvn.w	r3, #3
 800497a:	617b      	str	r3, [r7, #20]
 800497c:	e02c      	b.n	80049d8 <osSemaphoreRelease+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800497e:	f3ef 8305 	mrs	r3, IPSR
 8004982:	60fb      	str	r3, [r7, #12]
  return(result);
 8004984:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8004986:	2b00      	cmp	r3, #0
 8004988:	d01a      	beq.n	80049c0 <osSemaphoreRelease+0x60>
    yield = pdFALSE;
 800498a:	2300      	movs	r3, #0
 800498c:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800498e:	f107 0308 	add.w	r3, r7, #8
 8004992:	4619      	mov	r1, r3
 8004994:	6938      	ldr	r0, [r7, #16]
 8004996:	f000 fe4d 	bl	8005634 <xQueueGiveFromISR>
 800499a:	4603      	mov	r3, r0
 800499c:	2b01      	cmp	r3, #1
 800499e:	d003      	beq.n	80049a8 <osSemaphoreRelease+0x48>
      stat = osErrorResource;
 80049a0:	f06f 0302 	mvn.w	r3, #2
 80049a4:	617b      	str	r3, [r7, #20]
 80049a6:	e017      	b.n	80049d8 <osSemaphoreRelease+0x78>
    } else {
      portYIELD_FROM_ISR (yield);
 80049a8:	68bb      	ldr	r3, [r7, #8]
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d014      	beq.n	80049d8 <osSemaphoreRelease+0x78>
 80049ae:	4b0d      	ldr	r3, [pc, #52]	@ (80049e4 <osSemaphoreRelease+0x84>)
 80049b0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80049b4:	601a      	str	r2, [r3, #0]
 80049b6:	f3bf 8f4f 	dsb	sy
 80049ba:	f3bf 8f6f 	isb	sy
 80049be:	e00b      	b.n	80049d8 <osSemaphoreRelease+0x78>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 80049c0:	2300      	movs	r3, #0
 80049c2:	2200      	movs	r2, #0
 80049c4:	2100      	movs	r1, #0
 80049c6:	6938      	ldr	r0, [r7, #16]
 80049c8:	f000 fc94 	bl	80052f4 <xQueueGenericSend>
 80049cc:	4603      	mov	r3, r0
 80049ce:	2b01      	cmp	r3, #1
 80049d0:	d002      	beq.n	80049d8 <osSemaphoreRelease+0x78>
      stat = osErrorResource;
 80049d2:	f06f 0302 	mvn.w	r3, #2
 80049d6:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 80049d8:	697b      	ldr	r3, [r7, #20]
}
 80049da:	4618      	mov	r0, r3
 80049dc:	3718      	adds	r7, #24
 80049de:	46bd      	mov	sp, r7
 80049e0:	bd80      	pop	{r7, pc}
 80049e2:	bf00      	nop
 80049e4:	e000ed04 	.word	0xe000ed04

080049e8 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 80049e8:	b580      	push	{r7, lr}
 80049ea:	b08a      	sub	sp, #40	@ 0x28
 80049ec:	af02      	add	r7, sp, #8
 80049ee:	60f8      	str	r0, [r7, #12]
 80049f0:	60b9      	str	r1, [r7, #8]
 80049f2:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 80049f4:	2300      	movs	r3, #0
 80049f6:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80049f8:	f3ef 8305 	mrs	r3, IPSR
 80049fc:	613b      	str	r3, [r7, #16]
  return(result);
 80049fe:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	d15f      	bne.n	8004ac4 <osMessageQueueNew+0xdc>
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d05c      	beq.n	8004ac4 <osMessageQueueNew+0xdc>
 8004a0a:	68bb      	ldr	r3, [r7, #8]
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	d059      	beq.n	8004ac4 <osMessageQueueNew+0xdc>
    mem = -1;
 8004a10:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8004a14:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	d029      	beq.n	8004a70 <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	689b      	ldr	r3, [r3, #8]
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	d012      	beq.n	8004a4a <osMessageQueueNew+0x62>
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	68db      	ldr	r3, [r3, #12]
 8004a28:	2b4f      	cmp	r3, #79	@ 0x4f
 8004a2a:	d90e      	bls.n	8004a4a <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	d00a      	beq.n	8004a4a <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	695a      	ldr	r2, [r3, #20]
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	68b9      	ldr	r1, [r7, #8]
 8004a3c:	fb01 f303 	mul.w	r3, r1, r3
 8004a40:	429a      	cmp	r2, r3
 8004a42:	d302      	bcc.n	8004a4a <osMessageQueueNew+0x62>
        mem = 1;
 8004a44:	2301      	movs	r3, #1
 8004a46:	61bb      	str	r3, [r7, #24]
 8004a48:	e014      	b.n	8004a74 <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	689b      	ldr	r3, [r3, #8]
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d110      	bne.n	8004a74 <osMessageQueueNew+0x8c>
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	68db      	ldr	r3, [r3, #12]
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d10c      	bne.n	8004a74 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	d108      	bne.n	8004a74 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	695b      	ldr	r3, [r3, #20]
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d104      	bne.n	8004a74 <osMessageQueueNew+0x8c>
          mem = 0;
 8004a6a:	2300      	movs	r3, #0
 8004a6c:	61bb      	str	r3, [r7, #24]
 8004a6e:	e001      	b.n	8004a74 <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 8004a70:	2300      	movs	r3, #0
 8004a72:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8004a74:	69bb      	ldr	r3, [r7, #24]
 8004a76:	2b01      	cmp	r3, #1
 8004a78:	d10b      	bne.n	8004a92 <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	691a      	ldr	r2, [r3, #16]
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	689b      	ldr	r3, [r3, #8]
 8004a82:	2100      	movs	r1, #0
 8004a84:	9100      	str	r1, [sp, #0]
 8004a86:	68b9      	ldr	r1, [r7, #8]
 8004a88:	68f8      	ldr	r0, [r7, #12]
 8004a8a:	f000 fa31 	bl	8004ef0 <xQueueGenericCreateStatic>
 8004a8e:	61f8      	str	r0, [r7, #28]
 8004a90:	e008      	b.n	8004aa4 <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 8004a92:	69bb      	ldr	r3, [r7, #24]
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	d105      	bne.n	8004aa4 <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 8004a98:	2200      	movs	r2, #0
 8004a9a:	68b9      	ldr	r1, [r7, #8]
 8004a9c:	68f8      	ldr	r0, [r7, #12]
 8004a9e:	f000 faa4 	bl	8004fea <xQueueGenericCreate>
 8004aa2:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8004aa4:	69fb      	ldr	r3, [r7, #28]
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d00c      	beq.n	8004ac4 <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	d003      	beq.n	8004ab8 <osMessageQueueNew+0xd0>
        name = attr->name;
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	617b      	str	r3, [r7, #20]
 8004ab6:	e001      	b.n	8004abc <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 8004ab8:	2300      	movs	r3, #0
 8004aba:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 8004abc:	6979      	ldr	r1, [r7, #20]
 8004abe:	69f8      	ldr	r0, [r7, #28]
 8004ac0:	f001 fa08 	bl	8005ed4 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 8004ac4:	69fb      	ldr	r3, [r7, #28]
}
 8004ac6:	4618      	mov	r0, r3
 8004ac8:	3720      	adds	r7, #32
 8004aca:	46bd      	mov	sp, r7
 8004acc:	bd80      	pop	{r7, pc}
	...

08004ad0 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 8004ad0:	b580      	push	{r7, lr}
 8004ad2:	b088      	sub	sp, #32
 8004ad4:	af00      	add	r7, sp, #0
 8004ad6:	60f8      	str	r0, [r7, #12]
 8004ad8:	60b9      	str	r1, [r7, #8]
 8004ada:	603b      	str	r3, [r7, #0]
 8004adc:	4613      	mov	r3, r2
 8004ade:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8004ae4:	2300      	movs	r3, #0
 8004ae6:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004ae8:	f3ef 8305 	mrs	r3, IPSR
 8004aec:	617b      	str	r3, [r7, #20]
  return(result);
 8004aee:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	d028      	beq.n	8004b46 <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8004af4:	69bb      	ldr	r3, [r7, #24]
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d005      	beq.n	8004b06 <osMessageQueuePut+0x36>
 8004afa:	68bb      	ldr	r3, [r7, #8]
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	d002      	beq.n	8004b06 <osMessageQueuePut+0x36>
 8004b00:	683b      	ldr	r3, [r7, #0]
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d003      	beq.n	8004b0e <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 8004b06:	f06f 0303 	mvn.w	r3, #3
 8004b0a:	61fb      	str	r3, [r7, #28]
 8004b0c:	e038      	b.n	8004b80 <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 8004b0e:	2300      	movs	r3, #0
 8004b10:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 8004b12:	f107 0210 	add.w	r2, r7, #16
 8004b16:	2300      	movs	r3, #0
 8004b18:	68b9      	ldr	r1, [r7, #8]
 8004b1a:	69b8      	ldr	r0, [r7, #24]
 8004b1c:	f000 fcec 	bl	80054f8 <xQueueGenericSendFromISR>
 8004b20:	4603      	mov	r3, r0
 8004b22:	2b01      	cmp	r3, #1
 8004b24:	d003      	beq.n	8004b2e <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 8004b26:	f06f 0302 	mvn.w	r3, #2
 8004b2a:	61fb      	str	r3, [r7, #28]
 8004b2c:	e028      	b.n	8004b80 <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 8004b2e:	693b      	ldr	r3, [r7, #16]
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	d025      	beq.n	8004b80 <osMessageQueuePut+0xb0>
 8004b34:	4b15      	ldr	r3, [pc, #84]	@ (8004b8c <osMessageQueuePut+0xbc>)
 8004b36:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004b3a:	601a      	str	r2, [r3, #0]
 8004b3c:	f3bf 8f4f 	dsb	sy
 8004b40:	f3bf 8f6f 	isb	sy
 8004b44:	e01c      	b.n	8004b80 <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8004b46:	69bb      	ldr	r3, [r7, #24]
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	d002      	beq.n	8004b52 <osMessageQueuePut+0x82>
 8004b4c:	68bb      	ldr	r3, [r7, #8]
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d103      	bne.n	8004b5a <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 8004b52:	f06f 0303 	mvn.w	r3, #3
 8004b56:	61fb      	str	r3, [r7, #28]
 8004b58:	e012      	b.n	8004b80 <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8004b5a:	2300      	movs	r3, #0
 8004b5c:	683a      	ldr	r2, [r7, #0]
 8004b5e:	68b9      	ldr	r1, [r7, #8]
 8004b60:	69b8      	ldr	r0, [r7, #24]
 8004b62:	f000 fbc7 	bl	80052f4 <xQueueGenericSend>
 8004b66:	4603      	mov	r3, r0
 8004b68:	2b01      	cmp	r3, #1
 8004b6a:	d009      	beq.n	8004b80 <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 8004b6c:	683b      	ldr	r3, [r7, #0]
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	d003      	beq.n	8004b7a <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 8004b72:	f06f 0301 	mvn.w	r3, #1
 8004b76:	61fb      	str	r3, [r7, #28]
 8004b78:	e002      	b.n	8004b80 <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 8004b7a:	f06f 0302 	mvn.w	r3, #2
 8004b7e:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8004b80:	69fb      	ldr	r3, [r7, #28]
}
 8004b82:	4618      	mov	r0, r3
 8004b84:	3720      	adds	r7, #32
 8004b86:	46bd      	mov	sp, r7
 8004b88:	bd80      	pop	{r7, pc}
 8004b8a:	bf00      	nop
 8004b8c:	e000ed04 	.word	0xe000ed04

08004b90 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 8004b90:	b580      	push	{r7, lr}
 8004b92:	b088      	sub	sp, #32
 8004b94:	af00      	add	r7, sp, #0
 8004b96:	60f8      	str	r0, [r7, #12]
 8004b98:	60b9      	str	r1, [r7, #8]
 8004b9a:	607a      	str	r2, [r7, #4]
 8004b9c:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8004ba2:	2300      	movs	r3, #0
 8004ba4:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004ba6:	f3ef 8305 	mrs	r3, IPSR
 8004baa:	617b      	str	r3, [r7, #20]
  return(result);
 8004bac:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d028      	beq.n	8004c04 <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8004bb2:	69bb      	ldr	r3, [r7, #24]
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	d005      	beq.n	8004bc4 <osMessageQueueGet+0x34>
 8004bb8:	68bb      	ldr	r3, [r7, #8]
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	d002      	beq.n	8004bc4 <osMessageQueueGet+0x34>
 8004bbe:	683b      	ldr	r3, [r7, #0]
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	d003      	beq.n	8004bcc <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 8004bc4:	f06f 0303 	mvn.w	r3, #3
 8004bc8:	61fb      	str	r3, [r7, #28]
 8004bca:	e037      	b.n	8004c3c <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 8004bcc:	2300      	movs	r3, #0
 8004bce:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 8004bd0:	f107 0310 	add.w	r3, r7, #16
 8004bd4:	461a      	mov	r2, r3
 8004bd6:	68b9      	ldr	r1, [r7, #8]
 8004bd8:	69b8      	ldr	r0, [r7, #24]
 8004bda:	f000 ffad 	bl	8005b38 <xQueueReceiveFromISR>
 8004bde:	4603      	mov	r3, r0
 8004be0:	2b01      	cmp	r3, #1
 8004be2:	d003      	beq.n	8004bec <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 8004be4:	f06f 0302 	mvn.w	r3, #2
 8004be8:	61fb      	str	r3, [r7, #28]
 8004bea:	e027      	b.n	8004c3c <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 8004bec:	693b      	ldr	r3, [r7, #16]
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d024      	beq.n	8004c3c <osMessageQueueGet+0xac>
 8004bf2:	4b15      	ldr	r3, [pc, #84]	@ (8004c48 <osMessageQueueGet+0xb8>)
 8004bf4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004bf8:	601a      	str	r2, [r3, #0]
 8004bfa:	f3bf 8f4f 	dsb	sy
 8004bfe:	f3bf 8f6f 	isb	sy
 8004c02:	e01b      	b.n	8004c3c <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8004c04:	69bb      	ldr	r3, [r7, #24]
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	d002      	beq.n	8004c10 <osMessageQueueGet+0x80>
 8004c0a:	68bb      	ldr	r3, [r7, #8]
 8004c0c:	2b00      	cmp	r3, #0
 8004c0e:	d103      	bne.n	8004c18 <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 8004c10:	f06f 0303 	mvn.w	r3, #3
 8004c14:	61fb      	str	r3, [r7, #28]
 8004c16:	e011      	b.n	8004c3c <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8004c18:	683a      	ldr	r2, [r7, #0]
 8004c1a:	68b9      	ldr	r1, [r7, #8]
 8004c1c:	69b8      	ldr	r0, [r7, #24]
 8004c1e:	f000 fd99 	bl	8005754 <xQueueReceive>
 8004c22:	4603      	mov	r3, r0
 8004c24:	2b01      	cmp	r3, #1
 8004c26:	d009      	beq.n	8004c3c <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 8004c28:	683b      	ldr	r3, [r7, #0]
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d003      	beq.n	8004c36 <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 8004c2e:	f06f 0301 	mvn.w	r3, #1
 8004c32:	61fb      	str	r3, [r7, #28]
 8004c34:	e002      	b.n	8004c3c <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 8004c36:	f06f 0302 	mvn.w	r3, #2
 8004c3a:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8004c3c:	69fb      	ldr	r3, [r7, #28]
}
 8004c3e:	4618      	mov	r0, r3
 8004c40:	3720      	adds	r7, #32
 8004c42:	46bd      	mov	sp, r7
 8004c44:	bd80      	pop	{r7, pc}
 8004c46:	bf00      	nop
 8004c48:	e000ed04 	.word	0xe000ed04

08004c4c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8004c4c:	b480      	push	{r7}
 8004c4e:	b085      	sub	sp, #20
 8004c50:	af00      	add	r7, sp, #0
 8004c52:	60f8      	str	r0, [r7, #12]
 8004c54:	60b9      	str	r1, [r7, #8]
 8004c56:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	4a07      	ldr	r2, [pc, #28]	@ (8004c78 <vApplicationGetIdleTaskMemory+0x2c>)
 8004c5c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8004c5e:	68bb      	ldr	r3, [r7, #8]
 8004c60:	4a06      	ldr	r2, [pc, #24]	@ (8004c7c <vApplicationGetIdleTaskMemory+0x30>)
 8004c62:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	2280      	movs	r2, #128	@ 0x80
 8004c68:	601a      	str	r2, [r3, #0]
}
 8004c6a:	bf00      	nop
 8004c6c:	3714      	adds	r7, #20
 8004c6e:	46bd      	mov	sp, r7
 8004c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c74:	4770      	bx	lr
 8004c76:	bf00      	nop
 8004c78:	20005df4 	.word	0x20005df4
 8004c7c:	20005e9c 	.word	0x20005e9c

08004c80 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8004c80:	b480      	push	{r7}
 8004c82:	b085      	sub	sp, #20
 8004c84:	af00      	add	r7, sp, #0
 8004c86:	60f8      	str	r0, [r7, #12]
 8004c88:	60b9      	str	r1, [r7, #8]
 8004c8a:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	4a07      	ldr	r2, [pc, #28]	@ (8004cac <vApplicationGetTimerTaskMemory+0x2c>)
 8004c90:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8004c92:	68bb      	ldr	r3, [r7, #8]
 8004c94:	4a06      	ldr	r2, [pc, #24]	@ (8004cb0 <vApplicationGetTimerTaskMemory+0x30>)
 8004c96:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8004c9e:	601a      	str	r2, [r3, #0]
}
 8004ca0:	bf00      	nop
 8004ca2:	3714      	adds	r7, #20
 8004ca4:	46bd      	mov	sp, r7
 8004ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004caa:	4770      	bx	lr
 8004cac:	2000609c 	.word	0x2000609c
 8004cb0:	20006144 	.word	0x20006144

08004cb4 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8004cb4:	b480      	push	{r7}
 8004cb6:	b083      	sub	sp, #12
 8004cb8:	af00      	add	r7, sp, #0
 8004cba:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	f103 0208 	add.w	r2, r3, #8
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8004ccc:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	f103 0208 	add.w	r2, r3, #8
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	f103 0208 	add.w	r2, r3, #8
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	2200      	movs	r2, #0
 8004ce6:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8004ce8:	bf00      	nop
 8004cea:	370c      	adds	r7, #12
 8004cec:	46bd      	mov	sp, r7
 8004cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cf2:	4770      	bx	lr

08004cf4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8004cf4:	b480      	push	{r7}
 8004cf6:	b083      	sub	sp, #12
 8004cf8:	af00      	add	r7, sp, #0
 8004cfa:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	2200      	movs	r2, #0
 8004d00:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8004d02:	bf00      	nop
 8004d04:	370c      	adds	r7, #12
 8004d06:	46bd      	mov	sp, r7
 8004d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d0c:	4770      	bx	lr

08004d0e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004d0e:	b480      	push	{r7}
 8004d10:	b085      	sub	sp, #20
 8004d12:	af00      	add	r7, sp, #0
 8004d14:	6078      	str	r0, [r7, #4]
 8004d16:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	685b      	ldr	r3, [r3, #4]
 8004d1c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8004d1e:	683b      	ldr	r3, [r7, #0]
 8004d20:	68fa      	ldr	r2, [r7, #12]
 8004d22:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	689a      	ldr	r2, [r3, #8]
 8004d28:	683b      	ldr	r3, [r7, #0]
 8004d2a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	689b      	ldr	r3, [r3, #8]
 8004d30:	683a      	ldr	r2, [r7, #0]
 8004d32:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	683a      	ldr	r2, [r7, #0]
 8004d38:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8004d3a:	683b      	ldr	r3, [r7, #0]
 8004d3c:	687a      	ldr	r2, [r7, #4]
 8004d3e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	1c5a      	adds	r2, r3, #1
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	601a      	str	r2, [r3, #0]
}
 8004d4a:	bf00      	nop
 8004d4c:	3714      	adds	r7, #20
 8004d4e:	46bd      	mov	sp, r7
 8004d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d54:	4770      	bx	lr

08004d56 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004d56:	b480      	push	{r7}
 8004d58:	b085      	sub	sp, #20
 8004d5a:	af00      	add	r7, sp, #0
 8004d5c:	6078      	str	r0, [r7, #4]
 8004d5e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8004d60:	683b      	ldr	r3, [r7, #0]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8004d66:	68bb      	ldr	r3, [r7, #8]
 8004d68:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004d6c:	d103      	bne.n	8004d76 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	691b      	ldr	r3, [r3, #16]
 8004d72:	60fb      	str	r3, [r7, #12]
 8004d74:	e00c      	b.n	8004d90 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	3308      	adds	r3, #8
 8004d7a:	60fb      	str	r3, [r7, #12]
 8004d7c:	e002      	b.n	8004d84 <vListInsert+0x2e>
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	685b      	ldr	r3, [r3, #4]
 8004d82:	60fb      	str	r3, [r7, #12]
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	685b      	ldr	r3, [r3, #4]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	68ba      	ldr	r2, [r7, #8]
 8004d8c:	429a      	cmp	r2, r3
 8004d8e:	d2f6      	bcs.n	8004d7e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	685a      	ldr	r2, [r3, #4]
 8004d94:	683b      	ldr	r3, [r7, #0]
 8004d96:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8004d98:	683b      	ldr	r3, [r7, #0]
 8004d9a:	685b      	ldr	r3, [r3, #4]
 8004d9c:	683a      	ldr	r2, [r7, #0]
 8004d9e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8004da0:	683b      	ldr	r3, [r7, #0]
 8004da2:	68fa      	ldr	r2, [r7, #12]
 8004da4:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	683a      	ldr	r2, [r7, #0]
 8004daa:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8004dac:	683b      	ldr	r3, [r7, #0]
 8004dae:	687a      	ldr	r2, [r7, #4]
 8004db0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	1c5a      	adds	r2, r3, #1
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	601a      	str	r2, [r3, #0]
}
 8004dbc:	bf00      	nop
 8004dbe:	3714      	adds	r7, #20
 8004dc0:	46bd      	mov	sp, r7
 8004dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dc6:	4770      	bx	lr

08004dc8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8004dc8:	b480      	push	{r7}
 8004dca:	b085      	sub	sp, #20
 8004dcc:	af00      	add	r7, sp, #0
 8004dce:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	691b      	ldr	r3, [r3, #16]
 8004dd4:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	685b      	ldr	r3, [r3, #4]
 8004dda:	687a      	ldr	r2, [r7, #4]
 8004ddc:	6892      	ldr	r2, [r2, #8]
 8004dde:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	689b      	ldr	r3, [r3, #8]
 8004de4:	687a      	ldr	r2, [r7, #4]
 8004de6:	6852      	ldr	r2, [r2, #4]
 8004de8:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	685b      	ldr	r3, [r3, #4]
 8004dee:	687a      	ldr	r2, [r7, #4]
 8004df0:	429a      	cmp	r2, r3
 8004df2:	d103      	bne.n	8004dfc <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	689a      	ldr	r2, [r3, #8]
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	2200      	movs	r2, #0
 8004e00:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	1e5a      	subs	r2, r3, #1
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	681b      	ldr	r3, [r3, #0]
}
 8004e10:	4618      	mov	r0, r3
 8004e12:	3714      	adds	r7, #20
 8004e14:	46bd      	mov	sp, r7
 8004e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e1a:	4770      	bx	lr

08004e1c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8004e1c:	b580      	push	{r7, lr}
 8004e1e:	b084      	sub	sp, #16
 8004e20:	af00      	add	r7, sp, #0
 8004e22:	6078      	str	r0, [r7, #4]
 8004e24:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	2b00      	cmp	r3, #0
 8004e2e:	d10b      	bne.n	8004e48 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8004e30:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004e34:	f383 8811 	msr	BASEPRI, r3
 8004e38:	f3bf 8f6f 	isb	sy
 8004e3c:	f3bf 8f4f 	dsb	sy
 8004e40:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8004e42:	bf00      	nop
 8004e44:	bf00      	nop
 8004e46:	e7fd      	b.n	8004e44 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8004e48:	f002 fdb6 	bl	80079b8 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	681a      	ldr	r2, [r3, #0]
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004e54:	68f9      	ldr	r1, [r7, #12]
 8004e56:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8004e58:	fb01 f303 	mul.w	r3, r1, r3
 8004e5c:	441a      	add	r2, r3
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	2200      	movs	r2, #0
 8004e66:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	681a      	ldr	r2, [r3, #0]
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	681a      	ldr	r2, [r3, #0]
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004e78:	3b01      	subs	r3, #1
 8004e7a:	68f9      	ldr	r1, [r7, #12]
 8004e7c:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8004e7e:	fb01 f303 	mul.w	r3, r1, r3
 8004e82:	441a      	add	r2, r3
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	22ff      	movs	r2, #255	@ 0xff
 8004e8c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	22ff      	movs	r2, #255	@ 0xff
 8004e94:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8004e98:	683b      	ldr	r3, [r7, #0]
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	d114      	bne.n	8004ec8 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	691b      	ldr	r3, [r3, #16]
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	d01a      	beq.n	8004edc <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	3310      	adds	r3, #16
 8004eaa:	4618      	mov	r0, r3
 8004eac:	f001 fd3e 	bl	800692c <xTaskRemoveFromEventList>
 8004eb0:	4603      	mov	r3, r0
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d012      	beq.n	8004edc <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8004eb6:	4b0d      	ldr	r3, [pc, #52]	@ (8004eec <xQueueGenericReset+0xd0>)
 8004eb8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004ebc:	601a      	str	r2, [r3, #0]
 8004ebe:	f3bf 8f4f 	dsb	sy
 8004ec2:	f3bf 8f6f 	isb	sy
 8004ec6:	e009      	b.n	8004edc <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	3310      	adds	r3, #16
 8004ecc:	4618      	mov	r0, r3
 8004ece:	f7ff fef1 	bl	8004cb4 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	3324      	adds	r3, #36	@ 0x24
 8004ed6:	4618      	mov	r0, r3
 8004ed8:	f7ff feec 	bl	8004cb4 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8004edc:	f002 fd9e 	bl	8007a1c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8004ee0:	2301      	movs	r3, #1
}
 8004ee2:	4618      	mov	r0, r3
 8004ee4:	3710      	adds	r7, #16
 8004ee6:	46bd      	mov	sp, r7
 8004ee8:	bd80      	pop	{r7, pc}
 8004eea:	bf00      	nop
 8004eec:	e000ed04 	.word	0xe000ed04

08004ef0 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8004ef0:	b580      	push	{r7, lr}
 8004ef2:	b08e      	sub	sp, #56	@ 0x38
 8004ef4:	af02      	add	r7, sp, #8
 8004ef6:	60f8      	str	r0, [r7, #12]
 8004ef8:	60b9      	str	r1, [r7, #8]
 8004efa:	607a      	str	r2, [r7, #4]
 8004efc:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	2b00      	cmp	r3, #0
 8004f02:	d10b      	bne.n	8004f1c <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8004f04:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004f08:	f383 8811 	msr	BASEPRI, r3
 8004f0c:	f3bf 8f6f 	isb	sy
 8004f10:	f3bf 8f4f 	dsb	sy
 8004f14:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8004f16:	bf00      	nop
 8004f18:	bf00      	nop
 8004f1a:	e7fd      	b.n	8004f18 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8004f1c:	683b      	ldr	r3, [r7, #0]
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	d10b      	bne.n	8004f3a <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8004f22:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004f26:	f383 8811 	msr	BASEPRI, r3
 8004f2a:	f3bf 8f6f 	isb	sy
 8004f2e:	f3bf 8f4f 	dsb	sy
 8004f32:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8004f34:	bf00      	nop
 8004f36:	bf00      	nop
 8004f38:	e7fd      	b.n	8004f36 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	2b00      	cmp	r3, #0
 8004f3e:	d002      	beq.n	8004f46 <xQueueGenericCreateStatic+0x56>
 8004f40:	68bb      	ldr	r3, [r7, #8]
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	d001      	beq.n	8004f4a <xQueueGenericCreateStatic+0x5a>
 8004f46:	2301      	movs	r3, #1
 8004f48:	e000      	b.n	8004f4c <xQueueGenericCreateStatic+0x5c>
 8004f4a:	2300      	movs	r3, #0
 8004f4c:	2b00      	cmp	r3, #0
 8004f4e:	d10b      	bne.n	8004f68 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8004f50:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004f54:	f383 8811 	msr	BASEPRI, r3
 8004f58:	f3bf 8f6f 	isb	sy
 8004f5c:	f3bf 8f4f 	dsb	sy
 8004f60:	623b      	str	r3, [r7, #32]
}
 8004f62:	bf00      	nop
 8004f64:	bf00      	nop
 8004f66:	e7fd      	b.n	8004f64 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	d102      	bne.n	8004f74 <xQueueGenericCreateStatic+0x84>
 8004f6e:	68bb      	ldr	r3, [r7, #8]
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	d101      	bne.n	8004f78 <xQueueGenericCreateStatic+0x88>
 8004f74:	2301      	movs	r3, #1
 8004f76:	e000      	b.n	8004f7a <xQueueGenericCreateStatic+0x8a>
 8004f78:	2300      	movs	r3, #0
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	d10b      	bne.n	8004f96 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8004f7e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004f82:	f383 8811 	msr	BASEPRI, r3
 8004f86:	f3bf 8f6f 	isb	sy
 8004f8a:	f3bf 8f4f 	dsb	sy
 8004f8e:	61fb      	str	r3, [r7, #28]
}
 8004f90:	bf00      	nop
 8004f92:	bf00      	nop
 8004f94:	e7fd      	b.n	8004f92 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8004f96:	2350      	movs	r3, #80	@ 0x50
 8004f98:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8004f9a:	697b      	ldr	r3, [r7, #20]
 8004f9c:	2b50      	cmp	r3, #80	@ 0x50
 8004f9e:	d00b      	beq.n	8004fb8 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8004fa0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004fa4:	f383 8811 	msr	BASEPRI, r3
 8004fa8:	f3bf 8f6f 	isb	sy
 8004fac:	f3bf 8f4f 	dsb	sy
 8004fb0:	61bb      	str	r3, [r7, #24]
}
 8004fb2:	bf00      	nop
 8004fb4:	bf00      	nop
 8004fb6:	e7fd      	b.n	8004fb4 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8004fb8:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004fba:	683b      	ldr	r3, [r7, #0]
 8004fbc:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8004fbe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004fc0:	2b00      	cmp	r3, #0
 8004fc2:	d00d      	beq.n	8004fe0 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8004fc4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004fc6:	2201      	movs	r2, #1
 8004fc8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004fcc:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8004fd0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004fd2:	9300      	str	r3, [sp, #0]
 8004fd4:	4613      	mov	r3, r2
 8004fd6:	687a      	ldr	r2, [r7, #4]
 8004fd8:	68b9      	ldr	r1, [r7, #8]
 8004fda:	68f8      	ldr	r0, [r7, #12]
 8004fdc:	f000 f840 	bl	8005060 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8004fe0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8004fe2:	4618      	mov	r0, r3
 8004fe4:	3730      	adds	r7, #48	@ 0x30
 8004fe6:	46bd      	mov	sp, r7
 8004fe8:	bd80      	pop	{r7, pc}

08004fea <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8004fea:	b580      	push	{r7, lr}
 8004fec:	b08a      	sub	sp, #40	@ 0x28
 8004fee:	af02      	add	r7, sp, #8
 8004ff0:	60f8      	str	r0, [r7, #12]
 8004ff2:	60b9      	str	r1, [r7, #8]
 8004ff4:	4613      	mov	r3, r2
 8004ff6:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d10b      	bne.n	8005016 <xQueueGenericCreate+0x2c>
	__asm volatile
 8004ffe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005002:	f383 8811 	msr	BASEPRI, r3
 8005006:	f3bf 8f6f 	isb	sy
 800500a:	f3bf 8f4f 	dsb	sy
 800500e:	613b      	str	r3, [r7, #16]
}
 8005010:	bf00      	nop
 8005012:	bf00      	nop
 8005014:	e7fd      	b.n	8005012 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	68ba      	ldr	r2, [r7, #8]
 800501a:	fb02 f303 	mul.w	r3, r2, r3
 800501e:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8005020:	69fb      	ldr	r3, [r7, #28]
 8005022:	3350      	adds	r3, #80	@ 0x50
 8005024:	4618      	mov	r0, r3
 8005026:	f002 fde9 	bl	8007bfc <pvPortMalloc>
 800502a:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800502c:	69bb      	ldr	r3, [r7, #24]
 800502e:	2b00      	cmp	r3, #0
 8005030:	d011      	beq.n	8005056 <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8005032:	69bb      	ldr	r3, [r7, #24]
 8005034:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005036:	697b      	ldr	r3, [r7, #20]
 8005038:	3350      	adds	r3, #80	@ 0x50
 800503a:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800503c:	69bb      	ldr	r3, [r7, #24]
 800503e:	2200      	movs	r2, #0
 8005040:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005044:	79fa      	ldrb	r2, [r7, #7]
 8005046:	69bb      	ldr	r3, [r7, #24]
 8005048:	9300      	str	r3, [sp, #0]
 800504a:	4613      	mov	r3, r2
 800504c:	697a      	ldr	r2, [r7, #20]
 800504e:	68b9      	ldr	r1, [r7, #8]
 8005050:	68f8      	ldr	r0, [r7, #12]
 8005052:	f000 f805 	bl	8005060 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8005056:	69bb      	ldr	r3, [r7, #24]
	}
 8005058:	4618      	mov	r0, r3
 800505a:	3720      	adds	r7, #32
 800505c:	46bd      	mov	sp, r7
 800505e:	bd80      	pop	{r7, pc}

08005060 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8005060:	b580      	push	{r7, lr}
 8005062:	b084      	sub	sp, #16
 8005064:	af00      	add	r7, sp, #0
 8005066:	60f8      	str	r0, [r7, #12]
 8005068:	60b9      	str	r1, [r7, #8]
 800506a:	607a      	str	r2, [r7, #4]
 800506c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800506e:	68bb      	ldr	r3, [r7, #8]
 8005070:	2b00      	cmp	r3, #0
 8005072:	d103      	bne.n	800507c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8005074:	69bb      	ldr	r3, [r7, #24]
 8005076:	69ba      	ldr	r2, [r7, #24]
 8005078:	601a      	str	r2, [r3, #0]
 800507a:	e002      	b.n	8005082 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800507c:	69bb      	ldr	r3, [r7, #24]
 800507e:	687a      	ldr	r2, [r7, #4]
 8005080:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8005082:	69bb      	ldr	r3, [r7, #24]
 8005084:	68fa      	ldr	r2, [r7, #12]
 8005086:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8005088:	69bb      	ldr	r3, [r7, #24]
 800508a:	68ba      	ldr	r2, [r7, #8]
 800508c:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800508e:	2101      	movs	r1, #1
 8005090:	69b8      	ldr	r0, [r7, #24]
 8005092:	f7ff fec3 	bl	8004e1c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8005096:	69bb      	ldr	r3, [r7, #24]
 8005098:	78fa      	ldrb	r2, [r7, #3]
 800509a:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800509e:	bf00      	nop
 80050a0:	3710      	adds	r7, #16
 80050a2:	46bd      	mov	sp, r7
 80050a4:	bd80      	pop	{r7, pc}

080050a6 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 80050a6:	b580      	push	{r7, lr}
 80050a8:	b082      	sub	sp, #8
 80050aa:	af00      	add	r7, sp, #0
 80050ac:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	d00e      	beq.n	80050d2 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	2200      	movs	r2, #0
 80050b8:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	2200      	movs	r2, #0
 80050be:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	2200      	movs	r2, #0
 80050c4:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 80050c6:	2300      	movs	r3, #0
 80050c8:	2200      	movs	r2, #0
 80050ca:	2100      	movs	r1, #0
 80050cc:	6878      	ldr	r0, [r7, #4]
 80050ce:	f000 f911 	bl	80052f4 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 80050d2:	bf00      	nop
 80050d4:	3708      	adds	r7, #8
 80050d6:	46bd      	mov	sp, r7
 80050d8:	bd80      	pop	{r7, pc}

080050da <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 80050da:	b580      	push	{r7, lr}
 80050dc:	b086      	sub	sp, #24
 80050de:	af00      	add	r7, sp, #0
 80050e0:	4603      	mov	r3, r0
 80050e2:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 80050e4:	2301      	movs	r3, #1
 80050e6:	617b      	str	r3, [r7, #20]
 80050e8:	2300      	movs	r3, #0
 80050ea:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 80050ec:	79fb      	ldrb	r3, [r7, #7]
 80050ee:	461a      	mov	r2, r3
 80050f0:	6939      	ldr	r1, [r7, #16]
 80050f2:	6978      	ldr	r0, [r7, #20]
 80050f4:	f7ff ff79 	bl	8004fea <xQueueGenericCreate>
 80050f8:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 80050fa:	68f8      	ldr	r0, [r7, #12]
 80050fc:	f7ff ffd3 	bl	80050a6 <prvInitialiseMutex>

		return xNewQueue;
 8005100:	68fb      	ldr	r3, [r7, #12]
	}
 8005102:	4618      	mov	r0, r3
 8005104:	3718      	adds	r7, #24
 8005106:	46bd      	mov	sp, r7
 8005108:	bd80      	pop	{r7, pc}

0800510a <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 800510a:	b580      	push	{r7, lr}
 800510c:	b088      	sub	sp, #32
 800510e:	af02      	add	r7, sp, #8
 8005110:	4603      	mov	r3, r0
 8005112:	6039      	str	r1, [r7, #0]
 8005114:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8005116:	2301      	movs	r3, #1
 8005118:	617b      	str	r3, [r7, #20]
 800511a:	2300      	movs	r3, #0
 800511c:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 800511e:	79fb      	ldrb	r3, [r7, #7]
 8005120:	9300      	str	r3, [sp, #0]
 8005122:	683b      	ldr	r3, [r7, #0]
 8005124:	2200      	movs	r2, #0
 8005126:	6939      	ldr	r1, [r7, #16]
 8005128:	6978      	ldr	r0, [r7, #20]
 800512a:	f7ff fee1 	bl	8004ef0 <xQueueGenericCreateStatic>
 800512e:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8005130:	68f8      	ldr	r0, [r7, #12]
 8005132:	f7ff ffb8 	bl	80050a6 <prvInitialiseMutex>

		return xNewQueue;
 8005136:	68fb      	ldr	r3, [r7, #12]
	}
 8005138:	4618      	mov	r0, r3
 800513a:	3718      	adds	r7, #24
 800513c:	46bd      	mov	sp, r7
 800513e:	bd80      	pop	{r7, pc}

08005140 <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 8005140:	b590      	push	{r4, r7, lr}
 8005142:	b087      	sub	sp, #28
 8005144:	af00      	add	r7, sp, #0
 8005146:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 800514c:	693b      	ldr	r3, [r7, #16]
 800514e:	2b00      	cmp	r3, #0
 8005150:	d10b      	bne.n	800516a <xQueueGiveMutexRecursive+0x2a>
	__asm volatile
 8005152:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005156:	f383 8811 	msr	BASEPRI, r3
 800515a:	f3bf 8f6f 	isb	sy
 800515e:	f3bf 8f4f 	dsb	sy
 8005162:	60fb      	str	r3, [r7, #12]
}
 8005164:	bf00      	nop
 8005166:	bf00      	nop
 8005168:	e7fd      	b.n	8005166 <xQueueGiveMutexRecursive+0x26>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 800516a:	693b      	ldr	r3, [r7, #16]
 800516c:	689c      	ldr	r4, [r3, #8]
 800516e:	f001 fda3 	bl	8006cb8 <xTaskGetCurrentTaskHandle>
 8005172:	4603      	mov	r3, r0
 8005174:	429c      	cmp	r4, r3
 8005176:	d111      	bne.n	800519c <xQueueGiveMutexRecursive+0x5c>
			/* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 8005178:	693b      	ldr	r3, [r7, #16]
 800517a:	68db      	ldr	r3, [r3, #12]
 800517c:	1e5a      	subs	r2, r3, #1
 800517e:	693b      	ldr	r3, [r7, #16]
 8005180:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 8005182:	693b      	ldr	r3, [r7, #16]
 8005184:	68db      	ldr	r3, [r3, #12]
 8005186:	2b00      	cmp	r3, #0
 8005188:	d105      	bne.n	8005196 <xQueueGiveMutexRecursive+0x56>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 800518a:	2300      	movs	r3, #0
 800518c:	2200      	movs	r2, #0
 800518e:	2100      	movs	r1, #0
 8005190:	6938      	ldr	r0, [r7, #16]
 8005192:	f000 f8af 	bl	80052f4 <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 8005196:	2301      	movs	r3, #1
 8005198:	617b      	str	r3, [r7, #20]
 800519a:	e001      	b.n	80051a0 <xQueueGiveMutexRecursive+0x60>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 800519c:	2300      	movs	r3, #0
 800519e:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 80051a0:	697b      	ldr	r3, [r7, #20]
	}
 80051a2:	4618      	mov	r0, r3
 80051a4:	371c      	adds	r7, #28
 80051a6:	46bd      	mov	sp, r7
 80051a8:	bd90      	pop	{r4, r7, pc}

080051aa <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 80051aa:	b590      	push	{r4, r7, lr}
 80051ac:	b087      	sub	sp, #28
 80051ae:	af00      	add	r7, sp, #0
 80051b0:	6078      	str	r0, [r7, #4]
 80051b2:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 80051b8:	693b      	ldr	r3, [r7, #16]
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	d10b      	bne.n	80051d6 <xQueueTakeMutexRecursive+0x2c>
	__asm volatile
 80051be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80051c2:	f383 8811 	msr	BASEPRI, r3
 80051c6:	f3bf 8f6f 	isb	sy
 80051ca:	f3bf 8f4f 	dsb	sy
 80051ce:	60fb      	str	r3, [r7, #12]
}
 80051d0:	bf00      	nop
 80051d2:	bf00      	nop
 80051d4:	e7fd      	b.n	80051d2 <xQueueTakeMutexRecursive+0x28>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 80051d6:	693b      	ldr	r3, [r7, #16]
 80051d8:	689c      	ldr	r4, [r3, #8]
 80051da:	f001 fd6d 	bl	8006cb8 <xTaskGetCurrentTaskHandle>
 80051de:	4603      	mov	r3, r0
 80051e0:	429c      	cmp	r4, r3
 80051e2:	d107      	bne.n	80051f4 <xQueueTakeMutexRecursive+0x4a>
		{
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 80051e4:	693b      	ldr	r3, [r7, #16]
 80051e6:	68db      	ldr	r3, [r3, #12]
 80051e8:	1c5a      	adds	r2, r3, #1
 80051ea:	693b      	ldr	r3, [r7, #16]
 80051ec:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 80051ee:	2301      	movs	r3, #1
 80051f0:	617b      	str	r3, [r7, #20]
 80051f2:	e00c      	b.n	800520e <xQueueTakeMutexRecursive+0x64>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 80051f4:	6839      	ldr	r1, [r7, #0]
 80051f6:	6938      	ldr	r0, [r7, #16]
 80051f8:	f000 fb8e 	bl	8005918 <xQueueSemaphoreTake>
 80051fc:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 80051fe:	697b      	ldr	r3, [r7, #20]
 8005200:	2b00      	cmp	r3, #0
 8005202:	d004      	beq.n	800520e <xQueueTakeMutexRecursive+0x64>
			{
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8005204:	693b      	ldr	r3, [r7, #16]
 8005206:	68db      	ldr	r3, [r3, #12]
 8005208:	1c5a      	adds	r2, r3, #1
 800520a:	693b      	ldr	r3, [r7, #16]
 800520c:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 800520e:	697b      	ldr	r3, [r7, #20]
	}
 8005210:	4618      	mov	r0, r3
 8005212:	371c      	adds	r7, #28
 8005214:	46bd      	mov	sp, r7
 8005216:	bd90      	pop	{r4, r7, pc}

08005218 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 8005218:	b580      	push	{r7, lr}
 800521a:	b08a      	sub	sp, #40	@ 0x28
 800521c:	af02      	add	r7, sp, #8
 800521e:	60f8      	str	r0, [r7, #12]
 8005220:	60b9      	str	r1, [r7, #8]
 8005222:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	2b00      	cmp	r3, #0
 8005228:	d10b      	bne.n	8005242 <xQueueCreateCountingSemaphoreStatic+0x2a>
	__asm volatile
 800522a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800522e:	f383 8811 	msr	BASEPRI, r3
 8005232:	f3bf 8f6f 	isb	sy
 8005236:	f3bf 8f4f 	dsb	sy
 800523a:	61bb      	str	r3, [r7, #24]
}
 800523c:	bf00      	nop
 800523e:	bf00      	nop
 8005240:	e7fd      	b.n	800523e <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 8005242:	68ba      	ldr	r2, [r7, #8]
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	429a      	cmp	r2, r3
 8005248:	d90b      	bls.n	8005262 <xQueueCreateCountingSemaphoreStatic+0x4a>
	__asm volatile
 800524a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800524e:	f383 8811 	msr	BASEPRI, r3
 8005252:	f3bf 8f6f 	isb	sy
 8005256:	f3bf 8f4f 	dsb	sy
 800525a:	617b      	str	r3, [r7, #20]
}
 800525c:	bf00      	nop
 800525e:	bf00      	nop
 8005260:	e7fd      	b.n	800525e <xQueueCreateCountingSemaphoreStatic+0x46>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8005262:	2302      	movs	r3, #2
 8005264:	9300      	str	r3, [sp, #0]
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	2200      	movs	r2, #0
 800526a:	2100      	movs	r1, #0
 800526c:	68f8      	ldr	r0, [r7, #12]
 800526e:	f7ff fe3f 	bl	8004ef0 <xQueueGenericCreateStatic>
 8005272:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 8005274:	69fb      	ldr	r3, [r7, #28]
 8005276:	2b00      	cmp	r3, #0
 8005278:	d002      	beq.n	8005280 <xQueueCreateCountingSemaphoreStatic+0x68>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800527a:	69fb      	ldr	r3, [r7, #28]
 800527c:	68ba      	ldr	r2, [r7, #8]
 800527e:	639a      	str	r2, [r3, #56]	@ 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8005280:	69fb      	ldr	r3, [r7, #28]
	}
 8005282:	4618      	mov	r0, r3
 8005284:	3720      	adds	r7, #32
 8005286:	46bd      	mov	sp, r7
 8005288:	bd80      	pop	{r7, pc}

0800528a <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 800528a:	b580      	push	{r7, lr}
 800528c:	b086      	sub	sp, #24
 800528e:	af00      	add	r7, sp, #0
 8005290:	6078      	str	r0, [r7, #4]
 8005292:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	2b00      	cmp	r3, #0
 8005298:	d10b      	bne.n	80052b2 <xQueueCreateCountingSemaphore+0x28>
	__asm volatile
 800529a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800529e:	f383 8811 	msr	BASEPRI, r3
 80052a2:	f3bf 8f6f 	isb	sy
 80052a6:	f3bf 8f4f 	dsb	sy
 80052aa:	613b      	str	r3, [r7, #16]
}
 80052ac:	bf00      	nop
 80052ae:	bf00      	nop
 80052b0:	e7fd      	b.n	80052ae <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 80052b2:	683a      	ldr	r2, [r7, #0]
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	429a      	cmp	r2, r3
 80052b8:	d90b      	bls.n	80052d2 <xQueueCreateCountingSemaphore+0x48>
	__asm volatile
 80052ba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80052be:	f383 8811 	msr	BASEPRI, r3
 80052c2:	f3bf 8f6f 	isb	sy
 80052c6:	f3bf 8f4f 	dsb	sy
 80052ca:	60fb      	str	r3, [r7, #12]
}
 80052cc:	bf00      	nop
 80052ce:	bf00      	nop
 80052d0:	e7fd      	b.n	80052ce <xQueueCreateCountingSemaphore+0x44>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 80052d2:	2202      	movs	r2, #2
 80052d4:	2100      	movs	r1, #0
 80052d6:	6878      	ldr	r0, [r7, #4]
 80052d8:	f7ff fe87 	bl	8004fea <xQueueGenericCreate>
 80052dc:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 80052de:	697b      	ldr	r3, [r7, #20]
 80052e0:	2b00      	cmp	r3, #0
 80052e2:	d002      	beq.n	80052ea <xQueueCreateCountingSemaphore+0x60>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 80052e4:	697b      	ldr	r3, [r7, #20]
 80052e6:	683a      	ldr	r2, [r7, #0]
 80052e8:	639a      	str	r2, [r3, #56]	@ 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 80052ea:	697b      	ldr	r3, [r7, #20]
	}
 80052ec:	4618      	mov	r0, r3
 80052ee:	3718      	adds	r7, #24
 80052f0:	46bd      	mov	sp, r7
 80052f2:	bd80      	pop	{r7, pc}

080052f4 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80052f4:	b580      	push	{r7, lr}
 80052f6:	b08e      	sub	sp, #56	@ 0x38
 80052f8:	af00      	add	r7, sp, #0
 80052fa:	60f8      	str	r0, [r7, #12]
 80052fc:	60b9      	str	r1, [r7, #8]
 80052fe:	607a      	str	r2, [r7, #4]
 8005300:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8005302:	2300      	movs	r3, #0
 8005304:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800530a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800530c:	2b00      	cmp	r3, #0
 800530e:	d10b      	bne.n	8005328 <xQueueGenericSend+0x34>
	__asm volatile
 8005310:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005314:	f383 8811 	msr	BASEPRI, r3
 8005318:	f3bf 8f6f 	isb	sy
 800531c:	f3bf 8f4f 	dsb	sy
 8005320:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8005322:	bf00      	nop
 8005324:	bf00      	nop
 8005326:	e7fd      	b.n	8005324 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005328:	68bb      	ldr	r3, [r7, #8]
 800532a:	2b00      	cmp	r3, #0
 800532c:	d103      	bne.n	8005336 <xQueueGenericSend+0x42>
 800532e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005330:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005332:	2b00      	cmp	r3, #0
 8005334:	d101      	bne.n	800533a <xQueueGenericSend+0x46>
 8005336:	2301      	movs	r3, #1
 8005338:	e000      	b.n	800533c <xQueueGenericSend+0x48>
 800533a:	2300      	movs	r3, #0
 800533c:	2b00      	cmp	r3, #0
 800533e:	d10b      	bne.n	8005358 <xQueueGenericSend+0x64>
	__asm volatile
 8005340:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005344:	f383 8811 	msr	BASEPRI, r3
 8005348:	f3bf 8f6f 	isb	sy
 800534c:	f3bf 8f4f 	dsb	sy
 8005350:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8005352:	bf00      	nop
 8005354:	bf00      	nop
 8005356:	e7fd      	b.n	8005354 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005358:	683b      	ldr	r3, [r7, #0]
 800535a:	2b02      	cmp	r3, #2
 800535c:	d103      	bne.n	8005366 <xQueueGenericSend+0x72>
 800535e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005360:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005362:	2b01      	cmp	r3, #1
 8005364:	d101      	bne.n	800536a <xQueueGenericSend+0x76>
 8005366:	2301      	movs	r3, #1
 8005368:	e000      	b.n	800536c <xQueueGenericSend+0x78>
 800536a:	2300      	movs	r3, #0
 800536c:	2b00      	cmp	r3, #0
 800536e:	d10b      	bne.n	8005388 <xQueueGenericSend+0x94>
	__asm volatile
 8005370:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005374:	f383 8811 	msr	BASEPRI, r3
 8005378:	f3bf 8f6f 	isb	sy
 800537c:	f3bf 8f4f 	dsb	sy
 8005380:	623b      	str	r3, [r7, #32]
}
 8005382:	bf00      	nop
 8005384:	bf00      	nop
 8005386:	e7fd      	b.n	8005384 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005388:	f001 fca6 	bl	8006cd8 <xTaskGetSchedulerState>
 800538c:	4603      	mov	r3, r0
 800538e:	2b00      	cmp	r3, #0
 8005390:	d102      	bne.n	8005398 <xQueueGenericSend+0xa4>
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	2b00      	cmp	r3, #0
 8005396:	d101      	bne.n	800539c <xQueueGenericSend+0xa8>
 8005398:	2301      	movs	r3, #1
 800539a:	e000      	b.n	800539e <xQueueGenericSend+0xaa>
 800539c:	2300      	movs	r3, #0
 800539e:	2b00      	cmp	r3, #0
 80053a0:	d10b      	bne.n	80053ba <xQueueGenericSend+0xc6>
	__asm volatile
 80053a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80053a6:	f383 8811 	msr	BASEPRI, r3
 80053aa:	f3bf 8f6f 	isb	sy
 80053ae:	f3bf 8f4f 	dsb	sy
 80053b2:	61fb      	str	r3, [r7, #28]
}
 80053b4:	bf00      	nop
 80053b6:	bf00      	nop
 80053b8:	e7fd      	b.n	80053b6 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80053ba:	f002 fafd 	bl	80079b8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80053be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80053c0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80053c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80053c4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80053c6:	429a      	cmp	r2, r3
 80053c8:	d302      	bcc.n	80053d0 <xQueueGenericSend+0xdc>
 80053ca:	683b      	ldr	r3, [r7, #0]
 80053cc:	2b02      	cmp	r3, #2
 80053ce:	d129      	bne.n	8005424 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80053d0:	683a      	ldr	r2, [r7, #0]
 80053d2:	68b9      	ldr	r1, [r7, #8]
 80053d4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80053d6:	f000 fc6d 	bl	8005cb4 <prvCopyDataToQueue>
 80053da:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80053dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80053de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80053e0:	2b00      	cmp	r3, #0
 80053e2:	d010      	beq.n	8005406 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80053e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80053e6:	3324      	adds	r3, #36	@ 0x24
 80053e8:	4618      	mov	r0, r3
 80053ea:	f001 fa9f 	bl	800692c <xTaskRemoveFromEventList>
 80053ee:	4603      	mov	r3, r0
 80053f0:	2b00      	cmp	r3, #0
 80053f2:	d013      	beq.n	800541c <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80053f4:	4b3f      	ldr	r3, [pc, #252]	@ (80054f4 <xQueueGenericSend+0x200>)
 80053f6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80053fa:	601a      	str	r2, [r3, #0]
 80053fc:	f3bf 8f4f 	dsb	sy
 8005400:	f3bf 8f6f 	isb	sy
 8005404:	e00a      	b.n	800541c <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8005406:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005408:	2b00      	cmp	r3, #0
 800540a:	d007      	beq.n	800541c <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800540c:	4b39      	ldr	r3, [pc, #228]	@ (80054f4 <xQueueGenericSend+0x200>)
 800540e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005412:	601a      	str	r2, [r3, #0]
 8005414:	f3bf 8f4f 	dsb	sy
 8005418:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800541c:	f002 fafe 	bl	8007a1c <vPortExitCritical>
				return pdPASS;
 8005420:	2301      	movs	r3, #1
 8005422:	e063      	b.n	80054ec <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	2b00      	cmp	r3, #0
 8005428:	d103      	bne.n	8005432 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800542a:	f002 faf7 	bl	8007a1c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800542e:	2300      	movs	r3, #0
 8005430:	e05c      	b.n	80054ec <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005432:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005434:	2b00      	cmp	r3, #0
 8005436:	d106      	bne.n	8005446 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005438:	f107 0314 	add.w	r3, r7, #20
 800543c:	4618      	mov	r0, r3
 800543e:	f001 fad9 	bl	80069f4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005442:	2301      	movs	r3, #1
 8005444:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005446:	f002 fae9 	bl	8007a1c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800544a:	f001 f82f 	bl	80064ac <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800544e:	f002 fab3 	bl	80079b8 <vPortEnterCritical>
 8005452:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005454:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005458:	b25b      	sxtb	r3, r3
 800545a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800545e:	d103      	bne.n	8005468 <xQueueGenericSend+0x174>
 8005460:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005462:	2200      	movs	r2, #0
 8005464:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005468:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800546a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800546e:	b25b      	sxtb	r3, r3
 8005470:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005474:	d103      	bne.n	800547e <xQueueGenericSend+0x18a>
 8005476:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005478:	2200      	movs	r2, #0
 800547a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800547e:	f002 facd 	bl	8007a1c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005482:	1d3a      	adds	r2, r7, #4
 8005484:	f107 0314 	add.w	r3, r7, #20
 8005488:	4611      	mov	r1, r2
 800548a:	4618      	mov	r0, r3
 800548c:	f001 fac8 	bl	8006a20 <xTaskCheckForTimeOut>
 8005490:	4603      	mov	r3, r0
 8005492:	2b00      	cmp	r3, #0
 8005494:	d124      	bne.n	80054e0 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8005496:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005498:	f000 fd04 	bl	8005ea4 <prvIsQueueFull>
 800549c:	4603      	mov	r3, r0
 800549e:	2b00      	cmp	r3, #0
 80054a0:	d018      	beq.n	80054d4 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80054a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80054a4:	3310      	adds	r3, #16
 80054a6:	687a      	ldr	r2, [r7, #4]
 80054a8:	4611      	mov	r1, r2
 80054aa:	4618      	mov	r0, r3
 80054ac:	f001 f9ec 	bl	8006888 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80054b0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80054b2:	f000 fc8f 	bl	8005dd4 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80054b6:	f001 f807 	bl	80064c8 <xTaskResumeAll>
 80054ba:	4603      	mov	r3, r0
 80054bc:	2b00      	cmp	r3, #0
 80054be:	f47f af7c 	bne.w	80053ba <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 80054c2:	4b0c      	ldr	r3, [pc, #48]	@ (80054f4 <xQueueGenericSend+0x200>)
 80054c4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80054c8:	601a      	str	r2, [r3, #0]
 80054ca:	f3bf 8f4f 	dsb	sy
 80054ce:	f3bf 8f6f 	isb	sy
 80054d2:	e772      	b.n	80053ba <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80054d4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80054d6:	f000 fc7d 	bl	8005dd4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80054da:	f000 fff5 	bl	80064c8 <xTaskResumeAll>
 80054de:	e76c      	b.n	80053ba <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80054e0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80054e2:	f000 fc77 	bl	8005dd4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80054e6:	f000 ffef 	bl	80064c8 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80054ea:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80054ec:	4618      	mov	r0, r3
 80054ee:	3738      	adds	r7, #56	@ 0x38
 80054f0:	46bd      	mov	sp, r7
 80054f2:	bd80      	pop	{r7, pc}
 80054f4:	e000ed04 	.word	0xe000ed04

080054f8 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80054f8:	b580      	push	{r7, lr}
 80054fa:	b090      	sub	sp, #64	@ 0x40
 80054fc:	af00      	add	r7, sp, #0
 80054fe:	60f8      	str	r0, [r7, #12]
 8005500:	60b9      	str	r1, [r7, #8]
 8005502:	607a      	str	r2, [r7, #4]
 8005504:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 800550a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800550c:	2b00      	cmp	r3, #0
 800550e:	d10b      	bne.n	8005528 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8005510:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005514:	f383 8811 	msr	BASEPRI, r3
 8005518:	f3bf 8f6f 	isb	sy
 800551c:	f3bf 8f4f 	dsb	sy
 8005520:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8005522:	bf00      	nop
 8005524:	bf00      	nop
 8005526:	e7fd      	b.n	8005524 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005528:	68bb      	ldr	r3, [r7, #8]
 800552a:	2b00      	cmp	r3, #0
 800552c:	d103      	bne.n	8005536 <xQueueGenericSendFromISR+0x3e>
 800552e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005530:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005532:	2b00      	cmp	r3, #0
 8005534:	d101      	bne.n	800553a <xQueueGenericSendFromISR+0x42>
 8005536:	2301      	movs	r3, #1
 8005538:	e000      	b.n	800553c <xQueueGenericSendFromISR+0x44>
 800553a:	2300      	movs	r3, #0
 800553c:	2b00      	cmp	r3, #0
 800553e:	d10b      	bne.n	8005558 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8005540:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005544:	f383 8811 	msr	BASEPRI, r3
 8005548:	f3bf 8f6f 	isb	sy
 800554c:	f3bf 8f4f 	dsb	sy
 8005550:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8005552:	bf00      	nop
 8005554:	bf00      	nop
 8005556:	e7fd      	b.n	8005554 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005558:	683b      	ldr	r3, [r7, #0]
 800555a:	2b02      	cmp	r3, #2
 800555c:	d103      	bne.n	8005566 <xQueueGenericSendFromISR+0x6e>
 800555e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005560:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005562:	2b01      	cmp	r3, #1
 8005564:	d101      	bne.n	800556a <xQueueGenericSendFromISR+0x72>
 8005566:	2301      	movs	r3, #1
 8005568:	e000      	b.n	800556c <xQueueGenericSendFromISR+0x74>
 800556a:	2300      	movs	r3, #0
 800556c:	2b00      	cmp	r3, #0
 800556e:	d10b      	bne.n	8005588 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8005570:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005574:	f383 8811 	msr	BASEPRI, r3
 8005578:	f3bf 8f6f 	isb	sy
 800557c:	f3bf 8f4f 	dsb	sy
 8005580:	623b      	str	r3, [r7, #32]
}
 8005582:	bf00      	nop
 8005584:	bf00      	nop
 8005586:	e7fd      	b.n	8005584 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005588:	f002 faf6 	bl	8007b78 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800558c:	f3ef 8211 	mrs	r2, BASEPRI
 8005590:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005594:	f383 8811 	msr	BASEPRI, r3
 8005598:	f3bf 8f6f 	isb	sy
 800559c:	f3bf 8f4f 	dsb	sy
 80055a0:	61fa      	str	r2, [r7, #28]
 80055a2:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80055a4:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80055a6:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80055a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80055aa:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80055ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80055ae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80055b0:	429a      	cmp	r2, r3
 80055b2:	d302      	bcc.n	80055ba <xQueueGenericSendFromISR+0xc2>
 80055b4:	683b      	ldr	r3, [r7, #0]
 80055b6:	2b02      	cmp	r3, #2
 80055b8:	d12f      	bne.n	800561a <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80055ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80055bc:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80055c0:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80055c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80055c6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80055c8:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80055ca:	683a      	ldr	r2, [r7, #0]
 80055cc:	68b9      	ldr	r1, [r7, #8]
 80055ce:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80055d0:	f000 fb70 	bl	8005cb4 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80055d4:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 80055d8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80055dc:	d112      	bne.n	8005604 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80055de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80055e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	d016      	beq.n	8005614 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80055e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80055e8:	3324      	adds	r3, #36	@ 0x24
 80055ea:	4618      	mov	r0, r3
 80055ec:	f001 f99e 	bl	800692c <xTaskRemoveFromEventList>
 80055f0:	4603      	mov	r3, r0
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	d00e      	beq.n	8005614 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	2b00      	cmp	r3, #0
 80055fa:	d00b      	beq.n	8005614 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	2201      	movs	r2, #1
 8005600:	601a      	str	r2, [r3, #0]
 8005602:	e007      	b.n	8005614 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8005604:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8005608:	3301      	adds	r3, #1
 800560a:	b2db      	uxtb	r3, r3
 800560c:	b25a      	sxtb	r2, r3
 800560e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005610:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8005614:	2301      	movs	r3, #1
 8005616:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8005618:	e001      	b.n	800561e <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800561a:	2300      	movs	r3, #0
 800561c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800561e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005620:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8005622:	697b      	ldr	r3, [r7, #20]
 8005624:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8005628:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800562a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800562c:	4618      	mov	r0, r3
 800562e:	3740      	adds	r7, #64	@ 0x40
 8005630:	46bd      	mov	sp, r7
 8005632:	bd80      	pop	{r7, pc}

08005634 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8005634:	b580      	push	{r7, lr}
 8005636:	b08e      	sub	sp, #56	@ 0x38
 8005638:	af00      	add	r7, sp, #0
 800563a:	6078      	str	r0, [r7, #4]
 800563c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	633b      	str	r3, [r7, #48]	@ 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8005642:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005644:	2b00      	cmp	r3, #0
 8005646:	d10b      	bne.n	8005660 <xQueueGiveFromISR+0x2c>
	__asm volatile
 8005648:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800564c:	f383 8811 	msr	BASEPRI, r3
 8005650:	f3bf 8f6f 	isb	sy
 8005654:	f3bf 8f4f 	dsb	sy
 8005658:	623b      	str	r3, [r7, #32]
}
 800565a:	bf00      	nop
 800565c:	bf00      	nop
 800565e:	e7fd      	b.n	800565c <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8005660:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005662:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005664:	2b00      	cmp	r3, #0
 8005666:	d00b      	beq.n	8005680 <xQueueGiveFromISR+0x4c>
	__asm volatile
 8005668:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800566c:	f383 8811 	msr	BASEPRI, r3
 8005670:	f3bf 8f6f 	isb	sy
 8005674:	f3bf 8f4f 	dsb	sy
 8005678:	61fb      	str	r3, [r7, #28]
}
 800567a:	bf00      	nop
 800567c:	bf00      	nop
 800567e:	e7fd      	b.n	800567c <xQueueGiveFromISR+0x48>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8005680:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	2b00      	cmp	r3, #0
 8005686:	d103      	bne.n	8005690 <xQueueGiveFromISR+0x5c>
 8005688:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800568a:	689b      	ldr	r3, [r3, #8]
 800568c:	2b00      	cmp	r3, #0
 800568e:	d101      	bne.n	8005694 <xQueueGiveFromISR+0x60>
 8005690:	2301      	movs	r3, #1
 8005692:	e000      	b.n	8005696 <xQueueGiveFromISR+0x62>
 8005694:	2300      	movs	r3, #0
 8005696:	2b00      	cmp	r3, #0
 8005698:	d10b      	bne.n	80056b2 <xQueueGiveFromISR+0x7e>
	__asm volatile
 800569a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800569e:	f383 8811 	msr	BASEPRI, r3
 80056a2:	f3bf 8f6f 	isb	sy
 80056a6:	f3bf 8f4f 	dsb	sy
 80056aa:	61bb      	str	r3, [r7, #24]
}
 80056ac:	bf00      	nop
 80056ae:	bf00      	nop
 80056b0:	e7fd      	b.n	80056ae <xQueueGiveFromISR+0x7a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80056b2:	f002 fa61 	bl	8007b78 <vPortValidateInterruptPriority>
	__asm volatile
 80056b6:	f3ef 8211 	mrs	r2, BASEPRI
 80056ba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80056be:	f383 8811 	msr	BASEPRI, r3
 80056c2:	f3bf 8f6f 	isb	sy
 80056c6:	f3bf 8f4f 	dsb	sy
 80056ca:	617a      	str	r2, [r7, #20]
 80056cc:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 80056ce:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80056d0:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80056d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80056d4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80056d6:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 80056d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80056da:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80056dc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80056de:	429a      	cmp	r2, r3
 80056e0:	d22b      	bcs.n	800573a <xQueueGiveFromISR+0x106>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80056e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80056e4:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80056e8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80056ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80056ee:	1c5a      	adds	r2, r3, #1
 80056f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80056f2:	639a      	str	r2, [r3, #56]	@ 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80056f4:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 80056f8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80056fc:	d112      	bne.n	8005724 <xQueueGiveFromISR+0xf0>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80056fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005700:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005702:	2b00      	cmp	r3, #0
 8005704:	d016      	beq.n	8005734 <xQueueGiveFromISR+0x100>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005706:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005708:	3324      	adds	r3, #36	@ 0x24
 800570a:	4618      	mov	r0, r3
 800570c:	f001 f90e 	bl	800692c <xTaskRemoveFromEventList>
 8005710:	4603      	mov	r3, r0
 8005712:	2b00      	cmp	r3, #0
 8005714:	d00e      	beq.n	8005734 <xQueueGiveFromISR+0x100>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8005716:	683b      	ldr	r3, [r7, #0]
 8005718:	2b00      	cmp	r3, #0
 800571a:	d00b      	beq.n	8005734 <xQueueGiveFromISR+0x100>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800571c:	683b      	ldr	r3, [r7, #0]
 800571e:	2201      	movs	r2, #1
 8005720:	601a      	str	r2, [r3, #0]
 8005722:	e007      	b.n	8005734 <xQueueGiveFromISR+0x100>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8005724:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005728:	3301      	adds	r3, #1
 800572a:	b2db      	uxtb	r3, r3
 800572c:	b25a      	sxtb	r2, r3
 800572e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005730:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8005734:	2301      	movs	r3, #1
 8005736:	637b      	str	r3, [r7, #52]	@ 0x34
 8005738:	e001      	b.n	800573e <xQueueGiveFromISR+0x10a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800573a:	2300      	movs	r3, #0
 800573c:	637b      	str	r3, [r7, #52]	@ 0x34
 800573e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005740:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	f383 8811 	msr	BASEPRI, r3
}
 8005748:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800574a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800574c:	4618      	mov	r0, r3
 800574e:	3738      	adds	r7, #56	@ 0x38
 8005750:	46bd      	mov	sp, r7
 8005752:	bd80      	pop	{r7, pc}

08005754 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8005754:	b580      	push	{r7, lr}
 8005756:	b08c      	sub	sp, #48	@ 0x30
 8005758:	af00      	add	r7, sp, #0
 800575a:	60f8      	str	r0, [r7, #12]
 800575c:	60b9      	str	r1, [r7, #8]
 800575e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8005760:	2300      	movs	r3, #0
 8005762:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8005768:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800576a:	2b00      	cmp	r3, #0
 800576c:	d10b      	bne.n	8005786 <xQueueReceive+0x32>
	__asm volatile
 800576e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005772:	f383 8811 	msr	BASEPRI, r3
 8005776:	f3bf 8f6f 	isb	sy
 800577a:	f3bf 8f4f 	dsb	sy
 800577e:	623b      	str	r3, [r7, #32]
}
 8005780:	bf00      	nop
 8005782:	bf00      	nop
 8005784:	e7fd      	b.n	8005782 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005786:	68bb      	ldr	r3, [r7, #8]
 8005788:	2b00      	cmp	r3, #0
 800578a:	d103      	bne.n	8005794 <xQueueReceive+0x40>
 800578c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800578e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005790:	2b00      	cmp	r3, #0
 8005792:	d101      	bne.n	8005798 <xQueueReceive+0x44>
 8005794:	2301      	movs	r3, #1
 8005796:	e000      	b.n	800579a <xQueueReceive+0x46>
 8005798:	2300      	movs	r3, #0
 800579a:	2b00      	cmp	r3, #0
 800579c:	d10b      	bne.n	80057b6 <xQueueReceive+0x62>
	__asm volatile
 800579e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80057a2:	f383 8811 	msr	BASEPRI, r3
 80057a6:	f3bf 8f6f 	isb	sy
 80057aa:	f3bf 8f4f 	dsb	sy
 80057ae:	61fb      	str	r3, [r7, #28]
}
 80057b0:	bf00      	nop
 80057b2:	bf00      	nop
 80057b4:	e7fd      	b.n	80057b2 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80057b6:	f001 fa8f 	bl	8006cd8 <xTaskGetSchedulerState>
 80057ba:	4603      	mov	r3, r0
 80057bc:	2b00      	cmp	r3, #0
 80057be:	d102      	bne.n	80057c6 <xQueueReceive+0x72>
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	2b00      	cmp	r3, #0
 80057c4:	d101      	bne.n	80057ca <xQueueReceive+0x76>
 80057c6:	2301      	movs	r3, #1
 80057c8:	e000      	b.n	80057cc <xQueueReceive+0x78>
 80057ca:	2300      	movs	r3, #0
 80057cc:	2b00      	cmp	r3, #0
 80057ce:	d10b      	bne.n	80057e8 <xQueueReceive+0x94>
	__asm volatile
 80057d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80057d4:	f383 8811 	msr	BASEPRI, r3
 80057d8:	f3bf 8f6f 	isb	sy
 80057dc:	f3bf 8f4f 	dsb	sy
 80057e0:	61bb      	str	r3, [r7, #24]
}
 80057e2:	bf00      	nop
 80057e4:	bf00      	nop
 80057e6:	e7fd      	b.n	80057e4 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80057e8:	f002 f8e6 	bl	80079b8 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80057ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80057ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80057f0:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80057f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80057f4:	2b00      	cmp	r3, #0
 80057f6:	d01f      	beq.n	8005838 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80057f8:	68b9      	ldr	r1, [r7, #8]
 80057fa:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80057fc:	f000 fac4 	bl	8005d88 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8005800:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005802:	1e5a      	subs	r2, r3, #1
 8005804:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005806:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005808:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800580a:	691b      	ldr	r3, [r3, #16]
 800580c:	2b00      	cmp	r3, #0
 800580e:	d00f      	beq.n	8005830 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005810:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005812:	3310      	adds	r3, #16
 8005814:	4618      	mov	r0, r3
 8005816:	f001 f889 	bl	800692c <xTaskRemoveFromEventList>
 800581a:	4603      	mov	r3, r0
 800581c:	2b00      	cmp	r3, #0
 800581e:	d007      	beq.n	8005830 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8005820:	4b3c      	ldr	r3, [pc, #240]	@ (8005914 <xQueueReceive+0x1c0>)
 8005822:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005826:	601a      	str	r2, [r3, #0]
 8005828:	f3bf 8f4f 	dsb	sy
 800582c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8005830:	f002 f8f4 	bl	8007a1c <vPortExitCritical>
				return pdPASS;
 8005834:	2301      	movs	r3, #1
 8005836:	e069      	b.n	800590c <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	2b00      	cmp	r3, #0
 800583c:	d103      	bne.n	8005846 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800583e:	f002 f8ed 	bl	8007a1c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8005842:	2300      	movs	r3, #0
 8005844:	e062      	b.n	800590c <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005846:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005848:	2b00      	cmp	r3, #0
 800584a:	d106      	bne.n	800585a <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800584c:	f107 0310 	add.w	r3, r7, #16
 8005850:	4618      	mov	r0, r3
 8005852:	f001 f8cf 	bl	80069f4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005856:	2301      	movs	r3, #1
 8005858:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800585a:	f002 f8df 	bl	8007a1c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800585e:	f000 fe25 	bl	80064ac <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005862:	f002 f8a9 	bl	80079b8 <vPortEnterCritical>
 8005866:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005868:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800586c:	b25b      	sxtb	r3, r3
 800586e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005872:	d103      	bne.n	800587c <xQueueReceive+0x128>
 8005874:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005876:	2200      	movs	r2, #0
 8005878:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800587c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800587e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005882:	b25b      	sxtb	r3, r3
 8005884:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005888:	d103      	bne.n	8005892 <xQueueReceive+0x13e>
 800588a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800588c:	2200      	movs	r2, #0
 800588e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005892:	f002 f8c3 	bl	8007a1c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005896:	1d3a      	adds	r2, r7, #4
 8005898:	f107 0310 	add.w	r3, r7, #16
 800589c:	4611      	mov	r1, r2
 800589e:	4618      	mov	r0, r3
 80058a0:	f001 f8be 	bl	8006a20 <xTaskCheckForTimeOut>
 80058a4:	4603      	mov	r3, r0
 80058a6:	2b00      	cmp	r3, #0
 80058a8:	d123      	bne.n	80058f2 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80058aa:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80058ac:	f000 fae4 	bl	8005e78 <prvIsQueueEmpty>
 80058b0:	4603      	mov	r3, r0
 80058b2:	2b00      	cmp	r3, #0
 80058b4:	d017      	beq.n	80058e6 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80058b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80058b8:	3324      	adds	r3, #36	@ 0x24
 80058ba:	687a      	ldr	r2, [r7, #4]
 80058bc:	4611      	mov	r1, r2
 80058be:	4618      	mov	r0, r3
 80058c0:	f000 ffe2 	bl	8006888 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80058c4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80058c6:	f000 fa85 	bl	8005dd4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80058ca:	f000 fdfd 	bl	80064c8 <xTaskResumeAll>
 80058ce:	4603      	mov	r3, r0
 80058d0:	2b00      	cmp	r3, #0
 80058d2:	d189      	bne.n	80057e8 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 80058d4:	4b0f      	ldr	r3, [pc, #60]	@ (8005914 <xQueueReceive+0x1c0>)
 80058d6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80058da:	601a      	str	r2, [r3, #0]
 80058dc:	f3bf 8f4f 	dsb	sy
 80058e0:	f3bf 8f6f 	isb	sy
 80058e4:	e780      	b.n	80057e8 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80058e6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80058e8:	f000 fa74 	bl	8005dd4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80058ec:	f000 fdec 	bl	80064c8 <xTaskResumeAll>
 80058f0:	e77a      	b.n	80057e8 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80058f2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80058f4:	f000 fa6e 	bl	8005dd4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80058f8:	f000 fde6 	bl	80064c8 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80058fc:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80058fe:	f000 fabb 	bl	8005e78 <prvIsQueueEmpty>
 8005902:	4603      	mov	r3, r0
 8005904:	2b00      	cmp	r3, #0
 8005906:	f43f af6f 	beq.w	80057e8 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800590a:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800590c:	4618      	mov	r0, r3
 800590e:	3730      	adds	r7, #48	@ 0x30
 8005910:	46bd      	mov	sp, r7
 8005912:	bd80      	pop	{r7, pc}
 8005914:	e000ed04 	.word	0xe000ed04

08005918 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8005918:	b580      	push	{r7, lr}
 800591a:	b08e      	sub	sp, #56	@ 0x38
 800591c:	af00      	add	r7, sp, #0
 800591e:	6078      	str	r0, [r7, #4]
 8005920:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8005922:	2300      	movs	r3, #0
 8005924:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800592a:	2300      	movs	r3, #0
 800592c:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800592e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005930:	2b00      	cmp	r3, #0
 8005932:	d10b      	bne.n	800594c <xQueueSemaphoreTake+0x34>
	__asm volatile
 8005934:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005938:	f383 8811 	msr	BASEPRI, r3
 800593c:	f3bf 8f6f 	isb	sy
 8005940:	f3bf 8f4f 	dsb	sy
 8005944:	623b      	str	r3, [r7, #32]
}
 8005946:	bf00      	nop
 8005948:	bf00      	nop
 800594a:	e7fd      	b.n	8005948 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800594c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800594e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005950:	2b00      	cmp	r3, #0
 8005952:	d00b      	beq.n	800596c <xQueueSemaphoreTake+0x54>
	__asm volatile
 8005954:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005958:	f383 8811 	msr	BASEPRI, r3
 800595c:	f3bf 8f6f 	isb	sy
 8005960:	f3bf 8f4f 	dsb	sy
 8005964:	61fb      	str	r3, [r7, #28]
}
 8005966:	bf00      	nop
 8005968:	bf00      	nop
 800596a:	e7fd      	b.n	8005968 <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800596c:	f001 f9b4 	bl	8006cd8 <xTaskGetSchedulerState>
 8005970:	4603      	mov	r3, r0
 8005972:	2b00      	cmp	r3, #0
 8005974:	d102      	bne.n	800597c <xQueueSemaphoreTake+0x64>
 8005976:	683b      	ldr	r3, [r7, #0]
 8005978:	2b00      	cmp	r3, #0
 800597a:	d101      	bne.n	8005980 <xQueueSemaphoreTake+0x68>
 800597c:	2301      	movs	r3, #1
 800597e:	e000      	b.n	8005982 <xQueueSemaphoreTake+0x6a>
 8005980:	2300      	movs	r3, #0
 8005982:	2b00      	cmp	r3, #0
 8005984:	d10b      	bne.n	800599e <xQueueSemaphoreTake+0x86>
	__asm volatile
 8005986:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800598a:	f383 8811 	msr	BASEPRI, r3
 800598e:	f3bf 8f6f 	isb	sy
 8005992:	f3bf 8f4f 	dsb	sy
 8005996:	61bb      	str	r3, [r7, #24]
}
 8005998:	bf00      	nop
 800599a:	bf00      	nop
 800599c:	e7fd      	b.n	800599a <xQueueSemaphoreTake+0x82>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800599e:	f002 f80b 	bl	80079b8 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 80059a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80059a4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80059a6:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 80059a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80059aa:	2b00      	cmp	r3, #0
 80059ac:	d024      	beq.n	80059f8 <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 80059ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80059b0:	1e5a      	subs	r2, r3, #1
 80059b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80059b4:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80059b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	2b00      	cmp	r3, #0
 80059bc:	d104      	bne.n	80059c8 <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 80059be:	f001 fb05 	bl	8006fcc <pvTaskIncrementMutexHeldCount>
 80059c2:	4602      	mov	r2, r0
 80059c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80059c6:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80059c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80059ca:	691b      	ldr	r3, [r3, #16]
 80059cc:	2b00      	cmp	r3, #0
 80059ce:	d00f      	beq.n	80059f0 <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80059d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80059d2:	3310      	adds	r3, #16
 80059d4:	4618      	mov	r0, r3
 80059d6:	f000 ffa9 	bl	800692c <xTaskRemoveFromEventList>
 80059da:	4603      	mov	r3, r0
 80059dc:	2b00      	cmp	r3, #0
 80059de:	d007      	beq.n	80059f0 <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80059e0:	4b54      	ldr	r3, [pc, #336]	@ (8005b34 <xQueueSemaphoreTake+0x21c>)
 80059e2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80059e6:	601a      	str	r2, [r3, #0]
 80059e8:	f3bf 8f4f 	dsb	sy
 80059ec:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80059f0:	f002 f814 	bl	8007a1c <vPortExitCritical>
				return pdPASS;
 80059f4:	2301      	movs	r3, #1
 80059f6:	e098      	b.n	8005b2a <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80059f8:	683b      	ldr	r3, [r7, #0]
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	d112      	bne.n	8005a24 <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 80059fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a00:	2b00      	cmp	r3, #0
 8005a02:	d00b      	beq.n	8005a1c <xQueueSemaphoreTake+0x104>
	__asm volatile
 8005a04:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005a08:	f383 8811 	msr	BASEPRI, r3
 8005a0c:	f3bf 8f6f 	isb	sy
 8005a10:	f3bf 8f4f 	dsb	sy
 8005a14:	617b      	str	r3, [r7, #20]
}
 8005a16:	bf00      	nop
 8005a18:	bf00      	nop
 8005a1a:	e7fd      	b.n	8005a18 <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8005a1c:	f001 fffe 	bl	8007a1c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8005a20:	2300      	movs	r3, #0
 8005a22:	e082      	b.n	8005b2a <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005a24:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	d106      	bne.n	8005a38 <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005a2a:	f107 030c 	add.w	r3, r7, #12
 8005a2e:	4618      	mov	r0, r3
 8005a30:	f000 ffe0 	bl	80069f4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005a34:	2301      	movs	r3, #1
 8005a36:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005a38:	f001 fff0 	bl	8007a1c <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005a3c:	f000 fd36 	bl	80064ac <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005a40:	f001 ffba 	bl	80079b8 <vPortEnterCritical>
 8005a44:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005a46:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005a4a:	b25b      	sxtb	r3, r3
 8005a4c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005a50:	d103      	bne.n	8005a5a <xQueueSemaphoreTake+0x142>
 8005a52:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005a54:	2200      	movs	r2, #0
 8005a56:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005a5a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005a5c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005a60:	b25b      	sxtb	r3, r3
 8005a62:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005a66:	d103      	bne.n	8005a70 <xQueueSemaphoreTake+0x158>
 8005a68:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005a6a:	2200      	movs	r2, #0
 8005a6c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005a70:	f001 ffd4 	bl	8007a1c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005a74:	463a      	mov	r2, r7
 8005a76:	f107 030c 	add.w	r3, r7, #12
 8005a7a:	4611      	mov	r1, r2
 8005a7c:	4618      	mov	r0, r3
 8005a7e:	f000 ffcf 	bl	8006a20 <xTaskCheckForTimeOut>
 8005a82:	4603      	mov	r3, r0
 8005a84:	2b00      	cmp	r3, #0
 8005a86:	d132      	bne.n	8005aee <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005a88:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8005a8a:	f000 f9f5 	bl	8005e78 <prvIsQueueEmpty>
 8005a8e:	4603      	mov	r3, r0
 8005a90:	2b00      	cmp	r3, #0
 8005a92:	d026      	beq.n	8005ae2 <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005a94:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	2b00      	cmp	r3, #0
 8005a9a:	d109      	bne.n	8005ab0 <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 8005a9c:	f001 ff8c 	bl	80079b8 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8005aa0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005aa2:	689b      	ldr	r3, [r3, #8]
 8005aa4:	4618      	mov	r0, r3
 8005aa6:	f001 f935 	bl	8006d14 <xTaskPriorityInherit>
 8005aaa:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 8005aac:	f001 ffb6 	bl	8007a1c <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8005ab0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005ab2:	3324      	adds	r3, #36	@ 0x24
 8005ab4:	683a      	ldr	r2, [r7, #0]
 8005ab6:	4611      	mov	r1, r2
 8005ab8:	4618      	mov	r0, r3
 8005aba:	f000 fee5 	bl	8006888 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8005abe:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8005ac0:	f000 f988 	bl	8005dd4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8005ac4:	f000 fd00 	bl	80064c8 <xTaskResumeAll>
 8005ac8:	4603      	mov	r3, r0
 8005aca:	2b00      	cmp	r3, #0
 8005acc:	f47f af67 	bne.w	800599e <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 8005ad0:	4b18      	ldr	r3, [pc, #96]	@ (8005b34 <xQueueSemaphoreTake+0x21c>)
 8005ad2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005ad6:	601a      	str	r2, [r3, #0]
 8005ad8:	f3bf 8f4f 	dsb	sy
 8005adc:	f3bf 8f6f 	isb	sy
 8005ae0:	e75d      	b.n	800599e <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8005ae2:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8005ae4:	f000 f976 	bl	8005dd4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005ae8:	f000 fcee 	bl	80064c8 <xTaskResumeAll>
 8005aec:	e757      	b.n	800599e <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8005aee:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8005af0:	f000 f970 	bl	8005dd4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005af4:	f000 fce8 	bl	80064c8 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005af8:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8005afa:	f000 f9bd 	bl	8005e78 <prvIsQueueEmpty>
 8005afe:	4603      	mov	r3, r0
 8005b00:	2b00      	cmp	r3, #0
 8005b02:	f43f af4c 	beq.w	800599e <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8005b06:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b08:	2b00      	cmp	r3, #0
 8005b0a:	d00d      	beq.n	8005b28 <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 8005b0c:	f001 ff54 	bl	80079b8 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8005b10:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8005b12:	f000 f8b7 	bl	8005c84 <prvGetDisinheritPriorityAfterTimeout>
 8005b16:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8005b18:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005b1a:	689b      	ldr	r3, [r3, #8]
 8005b1c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8005b1e:	4618      	mov	r0, r3
 8005b20:	f001 f9d0 	bl	8006ec4 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8005b24:	f001 ff7a 	bl	8007a1c <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8005b28:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8005b2a:	4618      	mov	r0, r3
 8005b2c:	3738      	adds	r7, #56	@ 0x38
 8005b2e:	46bd      	mov	sp, r7
 8005b30:	bd80      	pop	{r7, pc}
 8005b32:	bf00      	nop
 8005b34:	e000ed04 	.word	0xe000ed04

08005b38 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8005b38:	b580      	push	{r7, lr}
 8005b3a:	b08e      	sub	sp, #56	@ 0x38
 8005b3c:	af00      	add	r7, sp, #0
 8005b3e:	60f8      	str	r0, [r7, #12]
 8005b40:	60b9      	str	r1, [r7, #8]
 8005b42:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8005b48:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	d10b      	bne.n	8005b66 <xQueueReceiveFromISR+0x2e>
	__asm volatile
 8005b4e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005b52:	f383 8811 	msr	BASEPRI, r3
 8005b56:	f3bf 8f6f 	isb	sy
 8005b5a:	f3bf 8f4f 	dsb	sy
 8005b5e:	623b      	str	r3, [r7, #32]
}
 8005b60:	bf00      	nop
 8005b62:	bf00      	nop
 8005b64:	e7fd      	b.n	8005b62 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005b66:	68bb      	ldr	r3, [r7, #8]
 8005b68:	2b00      	cmp	r3, #0
 8005b6a:	d103      	bne.n	8005b74 <xQueueReceiveFromISR+0x3c>
 8005b6c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b6e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005b70:	2b00      	cmp	r3, #0
 8005b72:	d101      	bne.n	8005b78 <xQueueReceiveFromISR+0x40>
 8005b74:	2301      	movs	r3, #1
 8005b76:	e000      	b.n	8005b7a <xQueueReceiveFromISR+0x42>
 8005b78:	2300      	movs	r3, #0
 8005b7a:	2b00      	cmp	r3, #0
 8005b7c:	d10b      	bne.n	8005b96 <xQueueReceiveFromISR+0x5e>
	__asm volatile
 8005b7e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005b82:	f383 8811 	msr	BASEPRI, r3
 8005b86:	f3bf 8f6f 	isb	sy
 8005b8a:	f3bf 8f4f 	dsb	sy
 8005b8e:	61fb      	str	r3, [r7, #28]
}
 8005b90:	bf00      	nop
 8005b92:	bf00      	nop
 8005b94:	e7fd      	b.n	8005b92 <xQueueReceiveFromISR+0x5a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005b96:	f001 ffef 	bl	8007b78 <vPortValidateInterruptPriority>
	__asm volatile
 8005b9a:	f3ef 8211 	mrs	r2, BASEPRI
 8005b9e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005ba2:	f383 8811 	msr	BASEPRI, r3
 8005ba6:	f3bf 8f6f 	isb	sy
 8005baa:	f3bf 8f4f 	dsb	sy
 8005bae:	61ba      	str	r2, [r7, #24]
 8005bb0:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8005bb2:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005bb4:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005bb6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005bb8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005bba:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005bbc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005bbe:	2b00      	cmp	r3, #0
 8005bc0:	d02f      	beq.n	8005c22 <xQueueReceiveFromISR+0xea>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8005bc2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005bc4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005bc8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8005bcc:	68b9      	ldr	r1, [r7, #8]
 8005bce:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005bd0:	f000 f8da 	bl	8005d88 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8005bd4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005bd6:	1e5a      	subs	r2, r3, #1
 8005bd8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005bda:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8005bdc:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8005be0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005be4:	d112      	bne.n	8005c0c <xQueueReceiveFromISR+0xd4>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005be6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005be8:	691b      	ldr	r3, [r3, #16]
 8005bea:	2b00      	cmp	r3, #0
 8005bec:	d016      	beq.n	8005c1c <xQueueReceiveFromISR+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005bee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005bf0:	3310      	adds	r3, #16
 8005bf2:	4618      	mov	r0, r3
 8005bf4:	f000 fe9a 	bl	800692c <xTaskRemoveFromEventList>
 8005bf8:	4603      	mov	r3, r0
 8005bfa:	2b00      	cmp	r3, #0
 8005bfc:	d00e      	beq.n	8005c1c <xQueueReceiveFromISR+0xe4>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	2b00      	cmp	r3, #0
 8005c02:	d00b      	beq.n	8005c1c <xQueueReceiveFromISR+0xe4>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	2201      	movs	r2, #1
 8005c08:	601a      	str	r2, [r3, #0]
 8005c0a:	e007      	b.n	8005c1c <xQueueReceiveFromISR+0xe4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8005c0c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005c10:	3301      	adds	r3, #1
 8005c12:	b2db      	uxtb	r3, r3
 8005c14:	b25a      	sxtb	r2, r3
 8005c16:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005c18:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 8005c1c:	2301      	movs	r3, #1
 8005c1e:	637b      	str	r3, [r7, #52]	@ 0x34
 8005c20:	e001      	b.n	8005c26 <xQueueReceiveFromISR+0xee>
		}
		else
		{
			xReturn = pdFAIL;
 8005c22:	2300      	movs	r3, #0
 8005c24:	637b      	str	r3, [r7, #52]	@ 0x34
 8005c26:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005c28:	613b      	str	r3, [r7, #16]
	__asm volatile
 8005c2a:	693b      	ldr	r3, [r7, #16]
 8005c2c:	f383 8811 	msr	BASEPRI, r3
}
 8005c30:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8005c32:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8005c34:	4618      	mov	r0, r3
 8005c36:	3738      	adds	r7, #56	@ 0x38
 8005c38:	46bd      	mov	sp, r7
 8005c3a:	bd80      	pop	{r7, pc}

08005c3c <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8005c3c:	b580      	push	{r7, lr}
 8005c3e:	b084      	sub	sp, #16
 8005c40:	af00      	add	r7, sp, #0
 8005c42:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	2b00      	cmp	r3, #0
 8005c4c:	d10b      	bne.n	8005c66 <vQueueDelete+0x2a>
	__asm volatile
 8005c4e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005c52:	f383 8811 	msr	BASEPRI, r3
 8005c56:	f3bf 8f6f 	isb	sy
 8005c5a:	f3bf 8f4f 	dsb	sy
 8005c5e:	60bb      	str	r3, [r7, #8]
}
 8005c60:	bf00      	nop
 8005c62:	bf00      	nop
 8005c64:	e7fd      	b.n	8005c62 <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 8005c66:	68f8      	ldr	r0, [r7, #12]
 8005c68:	f000 f95e 	bl	8005f28 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 8005c72:	2b00      	cmp	r3, #0
 8005c74:	d102      	bne.n	8005c7c <vQueueDelete+0x40>
		{
			vPortFree( pxQueue );
 8005c76:	68f8      	ldr	r0, [r7, #12]
 8005c78:	f002 f88e 	bl	8007d98 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 8005c7c:	bf00      	nop
 8005c7e:	3710      	adds	r7, #16
 8005c80:	46bd      	mov	sp, r7
 8005c82:	bd80      	pop	{r7, pc}

08005c84 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8005c84:	b480      	push	{r7}
 8005c86:	b085      	sub	sp, #20
 8005c88:	af00      	add	r7, sp, #0
 8005c8a:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005c90:	2b00      	cmp	r3, #0
 8005c92:	d006      	beq.n	8005ca2 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	f1c3 0338 	rsb	r3, r3, #56	@ 0x38
 8005c9e:	60fb      	str	r3, [r7, #12]
 8005ca0:	e001      	b.n	8005ca6 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8005ca2:	2300      	movs	r3, #0
 8005ca4:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8005ca6:	68fb      	ldr	r3, [r7, #12]
	}
 8005ca8:	4618      	mov	r0, r3
 8005caa:	3714      	adds	r7, #20
 8005cac:	46bd      	mov	sp, r7
 8005cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cb2:	4770      	bx	lr

08005cb4 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8005cb4:	b580      	push	{r7, lr}
 8005cb6:	b086      	sub	sp, #24
 8005cb8:	af00      	add	r7, sp, #0
 8005cba:	60f8      	str	r0, [r7, #12]
 8005cbc:	60b9      	str	r1, [r7, #8]
 8005cbe:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8005cc0:	2300      	movs	r3, #0
 8005cc2:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005cc8:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8005cca:	68fb      	ldr	r3, [r7, #12]
 8005ccc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005cce:	2b00      	cmp	r3, #0
 8005cd0:	d10d      	bne.n	8005cee <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005cd2:	68fb      	ldr	r3, [r7, #12]
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	2b00      	cmp	r3, #0
 8005cd8:	d14d      	bne.n	8005d76 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8005cda:	68fb      	ldr	r3, [r7, #12]
 8005cdc:	689b      	ldr	r3, [r3, #8]
 8005cde:	4618      	mov	r0, r3
 8005ce0:	f001 f880 	bl	8006de4 <xTaskPriorityDisinherit>
 8005ce4:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8005ce6:	68fb      	ldr	r3, [r7, #12]
 8005ce8:	2200      	movs	r2, #0
 8005cea:	609a      	str	r2, [r3, #8]
 8005cec:	e043      	b.n	8005d76 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	2b00      	cmp	r3, #0
 8005cf2:	d119      	bne.n	8005d28 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	6858      	ldr	r0, [r3, #4]
 8005cf8:	68fb      	ldr	r3, [r7, #12]
 8005cfa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005cfc:	461a      	mov	r2, r3
 8005cfe:	68b9      	ldr	r1, [r7, #8]
 8005d00:	f00c fc0d 	bl	801251e <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	685a      	ldr	r2, [r3, #4]
 8005d08:	68fb      	ldr	r3, [r7, #12]
 8005d0a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005d0c:	441a      	add	r2, r3
 8005d0e:	68fb      	ldr	r3, [r7, #12]
 8005d10:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005d12:	68fb      	ldr	r3, [r7, #12]
 8005d14:	685a      	ldr	r2, [r3, #4]
 8005d16:	68fb      	ldr	r3, [r7, #12]
 8005d18:	689b      	ldr	r3, [r3, #8]
 8005d1a:	429a      	cmp	r2, r3
 8005d1c:	d32b      	bcc.n	8005d76 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8005d1e:	68fb      	ldr	r3, [r7, #12]
 8005d20:	681a      	ldr	r2, [r3, #0]
 8005d22:	68fb      	ldr	r3, [r7, #12]
 8005d24:	605a      	str	r2, [r3, #4]
 8005d26:	e026      	b.n	8005d76 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8005d28:	68fb      	ldr	r3, [r7, #12]
 8005d2a:	68d8      	ldr	r0, [r3, #12]
 8005d2c:	68fb      	ldr	r3, [r7, #12]
 8005d2e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005d30:	461a      	mov	r2, r3
 8005d32:	68b9      	ldr	r1, [r7, #8]
 8005d34:	f00c fbf3 	bl	801251e <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8005d38:	68fb      	ldr	r3, [r7, #12]
 8005d3a:	68da      	ldr	r2, [r3, #12]
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005d40:	425b      	negs	r3, r3
 8005d42:	441a      	add	r2, r3
 8005d44:	68fb      	ldr	r3, [r7, #12]
 8005d46:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005d48:	68fb      	ldr	r3, [r7, #12]
 8005d4a:	68da      	ldr	r2, [r3, #12]
 8005d4c:	68fb      	ldr	r3, [r7, #12]
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	429a      	cmp	r2, r3
 8005d52:	d207      	bcs.n	8005d64 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8005d54:	68fb      	ldr	r3, [r7, #12]
 8005d56:	689a      	ldr	r2, [r3, #8]
 8005d58:	68fb      	ldr	r3, [r7, #12]
 8005d5a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005d5c:	425b      	negs	r3, r3
 8005d5e:	441a      	add	r2, r3
 8005d60:	68fb      	ldr	r3, [r7, #12]
 8005d62:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	2b02      	cmp	r3, #2
 8005d68:	d105      	bne.n	8005d76 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005d6a:	693b      	ldr	r3, [r7, #16]
 8005d6c:	2b00      	cmp	r3, #0
 8005d6e:	d002      	beq.n	8005d76 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8005d70:	693b      	ldr	r3, [r7, #16]
 8005d72:	3b01      	subs	r3, #1
 8005d74:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8005d76:	693b      	ldr	r3, [r7, #16]
 8005d78:	1c5a      	adds	r2, r3, #1
 8005d7a:	68fb      	ldr	r3, [r7, #12]
 8005d7c:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8005d7e:	697b      	ldr	r3, [r7, #20]
}
 8005d80:	4618      	mov	r0, r3
 8005d82:	3718      	adds	r7, #24
 8005d84:	46bd      	mov	sp, r7
 8005d86:	bd80      	pop	{r7, pc}

08005d88 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8005d88:	b580      	push	{r7, lr}
 8005d8a:	b082      	sub	sp, #8
 8005d8c:	af00      	add	r7, sp, #0
 8005d8e:	6078      	str	r0, [r7, #4]
 8005d90:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005d96:	2b00      	cmp	r3, #0
 8005d98:	d018      	beq.n	8005dcc <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	68da      	ldr	r2, [r3, #12]
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005da2:	441a      	add	r2, r3
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	68da      	ldr	r2, [r3, #12]
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	689b      	ldr	r3, [r3, #8]
 8005db0:	429a      	cmp	r2, r3
 8005db2:	d303      	bcc.n	8005dbc <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	681a      	ldr	r2, [r3, #0]
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	68d9      	ldr	r1, [r3, #12]
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005dc4:	461a      	mov	r2, r3
 8005dc6:	6838      	ldr	r0, [r7, #0]
 8005dc8:	f00c fba9 	bl	801251e <memcpy>
	}
}
 8005dcc:	bf00      	nop
 8005dce:	3708      	adds	r7, #8
 8005dd0:	46bd      	mov	sp, r7
 8005dd2:	bd80      	pop	{r7, pc}

08005dd4 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8005dd4:	b580      	push	{r7, lr}
 8005dd6:	b084      	sub	sp, #16
 8005dd8:	af00      	add	r7, sp, #0
 8005dda:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8005ddc:	f001 fdec 	bl	80079b8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005de6:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005de8:	e011      	b.n	8005e0e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005dee:	2b00      	cmp	r3, #0
 8005df0:	d012      	beq.n	8005e18 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	3324      	adds	r3, #36	@ 0x24
 8005df6:	4618      	mov	r0, r3
 8005df8:	f000 fd98 	bl	800692c <xTaskRemoveFromEventList>
 8005dfc:	4603      	mov	r3, r0
 8005dfe:	2b00      	cmp	r3, #0
 8005e00:	d001      	beq.n	8005e06 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8005e02:	f000 fe71 	bl	8006ae8 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8005e06:	7bfb      	ldrb	r3, [r7, #15]
 8005e08:	3b01      	subs	r3, #1
 8005e0a:	b2db      	uxtb	r3, r3
 8005e0c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005e0e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005e12:	2b00      	cmp	r3, #0
 8005e14:	dce9      	bgt.n	8005dea <prvUnlockQueue+0x16>
 8005e16:	e000      	b.n	8005e1a <prvUnlockQueue+0x46>
					break;
 8005e18:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	22ff      	movs	r2, #255	@ 0xff
 8005e1e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8005e22:	f001 fdfb 	bl	8007a1c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8005e26:	f001 fdc7 	bl	80079b8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005e30:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005e32:	e011      	b.n	8005e58 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	691b      	ldr	r3, [r3, #16]
 8005e38:	2b00      	cmp	r3, #0
 8005e3a:	d012      	beq.n	8005e62 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	3310      	adds	r3, #16
 8005e40:	4618      	mov	r0, r3
 8005e42:	f000 fd73 	bl	800692c <xTaskRemoveFromEventList>
 8005e46:	4603      	mov	r3, r0
 8005e48:	2b00      	cmp	r3, #0
 8005e4a:	d001      	beq.n	8005e50 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8005e4c:	f000 fe4c 	bl	8006ae8 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8005e50:	7bbb      	ldrb	r3, [r7, #14]
 8005e52:	3b01      	subs	r3, #1
 8005e54:	b2db      	uxtb	r3, r3
 8005e56:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005e58:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005e5c:	2b00      	cmp	r3, #0
 8005e5e:	dce9      	bgt.n	8005e34 <prvUnlockQueue+0x60>
 8005e60:	e000      	b.n	8005e64 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8005e62:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	22ff      	movs	r2, #255	@ 0xff
 8005e68:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8005e6c:	f001 fdd6 	bl	8007a1c <vPortExitCritical>
}
 8005e70:	bf00      	nop
 8005e72:	3710      	adds	r7, #16
 8005e74:	46bd      	mov	sp, r7
 8005e76:	bd80      	pop	{r7, pc}

08005e78 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8005e78:	b580      	push	{r7, lr}
 8005e7a:	b084      	sub	sp, #16
 8005e7c:	af00      	add	r7, sp, #0
 8005e7e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005e80:	f001 fd9a 	bl	80079b8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005e88:	2b00      	cmp	r3, #0
 8005e8a:	d102      	bne.n	8005e92 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8005e8c:	2301      	movs	r3, #1
 8005e8e:	60fb      	str	r3, [r7, #12]
 8005e90:	e001      	b.n	8005e96 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8005e92:	2300      	movs	r3, #0
 8005e94:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005e96:	f001 fdc1 	bl	8007a1c <vPortExitCritical>

	return xReturn;
 8005e9a:	68fb      	ldr	r3, [r7, #12]
}
 8005e9c:	4618      	mov	r0, r3
 8005e9e:	3710      	adds	r7, #16
 8005ea0:	46bd      	mov	sp, r7
 8005ea2:	bd80      	pop	{r7, pc}

08005ea4 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8005ea4:	b580      	push	{r7, lr}
 8005ea6:	b084      	sub	sp, #16
 8005ea8:	af00      	add	r7, sp, #0
 8005eaa:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005eac:	f001 fd84 	bl	80079b8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005eb8:	429a      	cmp	r2, r3
 8005eba:	d102      	bne.n	8005ec2 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8005ebc:	2301      	movs	r3, #1
 8005ebe:	60fb      	str	r3, [r7, #12]
 8005ec0:	e001      	b.n	8005ec6 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8005ec2:	2300      	movs	r3, #0
 8005ec4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005ec6:	f001 fda9 	bl	8007a1c <vPortExitCritical>

	return xReturn;
 8005eca:	68fb      	ldr	r3, [r7, #12]
}
 8005ecc:	4618      	mov	r0, r3
 8005ece:	3710      	adds	r7, #16
 8005ed0:	46bd      	mov	sp, r7
 8005ed2:	bd80      	pop	{r7, pc}

08005ed4 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8005ed4:	b480      	push	{r7}
 8005ed6:	b085      	sub	sp, #20
 8005ed8:	af00      	add	r7, sp, #0
 8005eda:	6078      	str	r0, [r7, #4]
 8005edc:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005ede:	2300      	movs	r3, #0
 8005ee0:	60fb      	str	r3, [r7, #12]
 8005ee2:	e014      	b.n	8005f0e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8005ee4:	4a0f      	ldr	r2, [pc, #60]	@ (8005f24 <vQueueAddToRegistry+0x50>)
 8005ee6:	68fb      	ldr	r3, [r7, #12]
 8005ee8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8005eec:	2b00      	cmp	r3, #0
 8005eee:	d10b      	bne.n	8005f08 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8005ef0:	490c      	ldr	r1, [pc, #48]	@ (8005f24 <vQueueAddToRegistry+0x50>)
 8005ef2:	68fb      	ldr	r3, [r7, #12]
 8005ef4:	683a      	ldr	r2, [r7, #0]
 8005ef6:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8005efa:	4a0a      	ldr	r2, [pc, #40]	@ (8005f24 <vQueueAddToRegistry+0x50>)
 8005efc:	68fb      	ldr	r3, [r7, #12]
 8005efe:	00db      	lsls	r3, r3, #3
 8005f00:	4413      	add	r3, r2
 8005f02:	687a      	ldr	r2, [r7, #4]
 8005f04:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8005f06:	e006      	b.n	8005f16 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005f08:	68fb      	ldr	r3, [r7, #12]
 8005f0a:	3301      	adds	r3, #1
 8005f0c:	60fb      	str	r3, [r7, #12]
 8005f0e:	68fb      	ldr	r3, [r7, #12]
 8005f10:	2b07      	cmp	r3, #7
 8005f12:	d9e7      	bls.n	8005ee4 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8005f14:	bf00      	nop
 8005f16:	bf00      	nop
 8005f18:	3714      	adds	r7, #20
 8005f1a:	46bd      	mov	sp, r7
 8005f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f20:	4770      	bx	lr
 8005f22:	bf00      	nop
 8005f24:	20006544 	.word	0x20006544

08005f28 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8005f28:	b480      	push	{r7}
 8005f2a:	b085      	sub	sp, #20
 8005f2c:	af00      	add	r7, sp, #0
 8005f2e:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005f30:	2300      	movs	r3, #0
 8005f32:	60fb      	str	r3, [r7, #12]
 8005f34:	e016      	b.n	8005f64 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8005f36:	4a10      	ldr	r2, [pc, #64]	@ (8005f78 <vQueueUnregisterQueue+0x50>)
 8005f38:	68fb      	ldr	r3, [r7, #12]
 8005f3a:	00db      	lsls	r3, r3, #3
 8005f3c:	4413      	add	r3, r2
 8005f3e:	685b      	ldr	r3, [r3, #4]
 8005f40:	687a      	ldr	r2, [r7, #4]
 8005f42:	429a      	cmp	r2, r3
 8005f44:	d10b      	bne.n	8005f5e <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 8005f46:	4a0c      	ldr	r2, [pc, #48]	@ (8005f78 <vQueueUnregisterQueue+0x50>)
 8005f48:	68fb      	ldr	r3, [r7, #12]
 8005f4a:	2100      	movs	r1, #0
 8005f4c:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8005f50:	4a09      	ldr	r2, [pc, #36]	@ (8005f78 <vQueueUnregisterQueue+0x50>)
 8005f52:	68fb      	ldr	r3, [r7, #12]
 8005f54:	00db      	lsls	r3, r3, #3
 8005f56:	4413      	add	r3, r2
 8005f58:	2200      	movs	r2, #0
 8005f5a:	605a      	str	r2, [r3, #4]
				break;
 8005f5c:	e006      	b.n	8005f6c <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005f5e:	68fb      	ldr	r3, [r7, #12]
 8005f60:	3301      	adds	r3, #1
 8005f62:	60fb      	str	r3, [r7, #12]
 8005f64:	68fb      	ldr	r3, [r7, #12]
 8005f66:	2b07      	cmp	r3, #7
 8005f68:	d9e5      	bls.n	8005f36 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8005f6a:	bf00      	nop
 8005f6c:	bf00      	nop
 8005f6e:	3714      	adds	r7, #20
 8005f70:	46bd      	mov	sp, r7
 8005f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f76:	4770      	bx	lr
 8005f78:	20006544 	.word	0x20006544

08005f7c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005f7c:	b580      	push	{r7, lr}
 8005f7e:	b086      	sub	sp, #24
 8005f80:	af00      	add	r7, sp, #0
 8005f82:	60f8      	str	r0, [r7, #12]
 8005f84:	60b9      	str	r1, [r7, #8]
 8005f86:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8005f88:	68fb      	ldr	r3, [r7, #12]
 8005f8a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8005f8c:	f001 fd14 	bl	80079b8 <vPortEnterCritical>
 8005f90:	697b      	ldr	r3, [r7, #20]
 8005f92:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005f96:	b25b      	sxtb	r3, r3
 8005f98:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005f9c:	d103      	bne.n	8005fa6 <vQueueWaitForMessageRestricted+0x2a>
 8005f9e:	697b      	ldr	r3, [r7, #20]
 8005fa0:	2200      	movs	r2, #0
 8005fa2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005fa6:	697b      	ldr	r3, [r7, #20]
 8005fa8:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005fac:	b25b      	sxtb	r3, r3
 8005fae:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005fb2:	d103      	bne.n	8005fbc <vQueueWaitForMessageRestricted+0x40>
 8005fb4:	697b      	ldr	r3, [r7, #20]
 8005fb6:	2200      	movs	r2, #0
 8005fb8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005fbc:	f001 fd2e 	bl	8007a1c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8005fc0:	697b      	ldr	r3, [r7, #20]
 8005fc2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005fc4:	2b00      	cmp	r3, #0
 8005fc6:	d106      	bne.n	8005fd6 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8005fc8:	697b      	ldr	r3, [r7, #20]
 8005fca:	3324      	adds	r3, #36	@ 0x24
 8005fcc:	687a      	ldr	r2, [r7, #4]
 8005fce:	68b9      	ldr	r1, [r7, #8]
 8005fd0:	4618      	mov	r0, r3
 8005fd2:	f000 fc7f 	bl	80068d4 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8005fd6:	6978      	ldr	r0, [r7, #20]
 8005fd8:	f7ff fefc 	bl	8005dd4 <prvUnlockQueue>
	}
 8005fdc:	bf00      	nop
 8005fde:	3718      	adds	r7, #24
 8005fe0:	46bd      	mov	sp, r7
 8005fe2:	bd80      	pop	{r7, pc}

08005fe4 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8005fe4:	b580      	push	{r7, lr}
 8005fe6:	b08e      	sub	sp, #56	@ 0x38
 8005fe8:	af04      	add	r7, sp, #16
 8005fea:	60f8      	str	r0, [r7, #12]
 8005fec:	60b9      	str	r1, [r7, #8]
 8005fee:	607a      	str	r2, [r7, #4]
 8005ff0:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8005ff2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005ff4:	2b00      	cmp	r3, #0
 8005ff6:	d10b      	bne.n	8006010 <xTaskCreateStatic+0x2c>
	__asm volatile
 8005ff8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005ffc:	f383 8811 	msr	BASEPRI, r3
 8006000:	f3bf 8f6f 	isb	sy
 8006004:	f3bf 8f4f 	dsb	sy
 8006008:	623b      	str	r3, [r7, #32]
}
 800600a:	bf00      	nop
 800600c:	bf00      	nop
 800600e:	e7fd      	b.n	800600c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8006010:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006012:	2b00      	cmp	r3, #0
 8006014:	d10b      	bne.n	800602e <xTaskCreateStatic+0x4a>
	__asm volatile
 8006016:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800601a:	f383 8811 	msr	BASEPRI, r3
 800601e:	f3bf 8f6f 	isb	sy
 8006022:	f3bf 8f4f 	dsb	sy
 8006026:	61fb      	str	r3, [r7, #28]
}
 8006028:	bf00      	nop
 800602a:	bf00      	nop
 800602c:	e7fd      	b.n	800602a <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800602e:	23a8      	movs	r3, #168	@ 0xa8
 8006030:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8006032:	693b      	ldr	r3, [r7, #16]
 8006034:	2ba8      	cmp	r3, #168	@ 0xa8
 8006036:	d00b      	beq.n	8006050 <xTaskCreateStatic+0x6c>
	__asm volatile
 8006038:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800603c:	f383 8811 	msr	BASEPRI, r3
 8006040:	f3bf 8f6f 	isb	sy
 8006044:	f3bf 8f4f 	dsb	sy
 8006048:	61bb      	str	r3, [r7, #24]
}
 800604a:	bf00      	nop
 800604c:	bf00      	nop
 800604e:	e7fd      	b.n	800604c <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8006050:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8006052:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006054:	2b00      	cmp	r3, #0
 8006056:	d01e      	beq.n	8006096 <xTaskCreateStatic+0xb2>
 8006058:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800605a:	2b00      	cmp	r3, #0
 800605c:	d01b      	beq.n	8006096 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800605e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006060:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8006062:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006064:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8006066:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8006068:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800606a:	2202      	movs	r2, #2
 800606c:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8006070:	2300      	movs	r3, #0
 8006072:	9303      	str	r3, [sp, #12]
 8006074:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006076:	9302      	str	r3, [sp, #8]
 8006078:	f107 0314 	add.w	r3, r7, #20
 800607c:	9301      	str	r3, [sp, #4]
 800607e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006080:	9300      	str	r3, [sp, #0]
 8006082:	683b      	ldr	r3, [r7, #0]
 8006084:	687a      	ldr	r2, [r7, #4]
 8006086:	68b9      	ldr	r1, [r7, #8]
 8006088:	68f8      	ldr	r0, [r7, #12]
 800608a:	f000 f851 	bl	8006130 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800608e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8006090:	f000 f8f6 	bl	8006280 <prvAddNewTaskToReadyList>
 8006094:	e001      	b.n	800609a <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8006096:	2300      	movs	r3, #0
 8006098:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800609a:	697b      	ldr	r3, [r7, #20]
	}
 800609c:	4618      	mov	r0, r3
 800609e:	3728      	adds	r7, #40	@ 0x28
 80060a0:	46bd      	mov	sp, r7
 80060a2:	bd80      	pop	{r7, pc}

080060a4 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80060a4:	b580      	push	{r7, lr}
 80060a6:	b08c      	sub	sp, #48	@ 0x30
 80060a8:	af04      	add	r7, sp, #16
 80060aa:	60f8      	str	r0, [r7, #12]
 80060ac:	60b9      	str	r1, [r7, #8]
 80060ae:	603b      	str	r3, [r7, #0]
 80060b0:	4613      	mov	r3, r2
 80060b2:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80060b4:	88fb      	ldrh	r3, [r7, #6]
 80060b6:	009b      	lsls	r3, r3, #2
 80060b8:	4618      	mov	r0, r3
 80060ba:	f001 fd9f 	bl	8007bfc <pvPortMalloc>
 80060be:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80060c0:	697b      	ldr	r3, [r7, #20]
 80060c2:	2b00      	cmp	r3, #0
 80060c4:	d00e      	beq.n	80060e4 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80060c6:	20a8      	movs	r0, #168	@ 0xa8
 80060c8:	f001 fd98 	bl	8007bfc <pvPortMalloc>
 80060cc:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80060ce:	69fb      	ldr	r3, [r7, #28]
 80060d0:	2b00      	cmp	r3, #0
 80060d2:	d003      	beq.n	80060dc <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80060d4:	69fb      	ldr	r3, [r7, #28]
 80060d6:	697a      	ldr	r2, [r7, #20]
 80060d8:	631a      	str	r2, [r3, #48]	@ 0x30
 80060da:	e005      	b.n	80060e8 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80060dc:	6978      	ldr	r0, [r7, #20]
 80060de:	f001 fe5b 	bl	8007d98 <vPortFree>
 80060e2:	e001      	b.n	80060e8 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80060e4:	2300      	movs	r3, #0
 80060e6:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80060e8:	69fb      	ldr	r3, [r7, #28]
 80060ea:	2b00      	cmp	r3, #0
 80060ec:	d017      	beq.n	800611e <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80060ee:	69fb      	ldr	r3, [r7, #28]
 80060f0:	2200      	movs	r2, #0
 80060f2:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80060f6:	88fa      	ldrh	r2, [r7, #6]
 80060f8:	2300      	movs	r3, #0
 80060fa:	9303      	str	r3, [sp, #12]
 80060fc:	69fb      	ldr	r3, [r7, #28]
 80060fe:	9302      	str	r3, [sp, #8]
 8006100:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006102:	9301      	str	r3, [sp, #4]
 8006104:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006106:	9300      	str	r3, [sp, #0]
 8006108:	683b      	ldr	r3, [r7, #0]
 800610a:	68b9      	ldr	r1, [r7, #8]
 800610c:	68f8      	ldr	r0, [r7, #12]
 800610e:	f000 f80f 	bl	8006130 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006112:	69f8      	ldr	r0, [r7, #28]
 8006114:	f000 f8b4 	bl	8006280 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8006118:	2301      	movs	r3, #1
 800611a:	61bb      	str	r3, [r7, #24]
 800611c:	e002      	b.n	8006124 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800611e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8006122:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8006124:	69bb      	ldr	r3, [r7, #24]
	}
 8006126:	4618      	mov	r0, r3
 8006128:	3720      	adds	r7, #32
 800612a:	46bd      	mov	sp, r7
 800612c:	bd80      	pop	{r7, pc}
	...

08006130 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8006130:	b580      	push	{r7, lr}
 8006132:	b088      	sub	sp, #32
 8006134:	af00      	add	r7, sp, #0
 8006136:	60f8      	str	r0, [r7, #12]
 8006138:	60b9      	str	r1, [r7, #8]
 800613a:	607a      	str	r2, [r7, #4]
 800613c:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800613e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006140:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	009b      	lsls	r3, r3, #2
 8006146:	461a      	mov	r2, r3
 8006148:	21a5      	movs	r1, #165	@ 0xa5
 800614a:	f00c f91c 	bl	8012386 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800614e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006150:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8006158:	3b01      	subs	r3, #1
 800615a:	009b      	lsls	r3, r3, #2
 800615c:	4413      	add	r3, r2
 800615e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8006160:	69bb      	ldr	r3, [r7, #24]
 8006162:	f023 0307 	bic.w	r3, r3, #7
 8006166:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8006168:	69bb      	ldr	r3, [r7, #24]
 800616a:	f003 0307 	and.w	r3, r3, #7
 800616e:	2b00      	cmp	r3, #0
 8006170:	d00b      	beq.n	800618a <prvInitialiseNewTask+0x5a>
	__asm volatile
 8006172:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006176:	f383 8811 	msr	BASEPRI, r3
 800617a:	f3bf 8f6f 	isb	sy
 800617e:	f3bf 8f4f 	dsb	sy
 8006182:	617b      	str	r3, [r7, #20]
}
 8006184:	bf00      	nop
 8006186:	bf00      	nop
 8006188:	e7fd      	b.n	8006186 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800618a:	68bb      	ldr	r3, [r7, #8]
 800618c:	2b00      	cmp	r3, #0
 800618e:	d01f      	beq.n	80061d0 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006190:	2300      	movs	r3, #0
 8006192:	61fb      	str	r3, [r7, #28]
 8006194:	e012      	b.n	80061bc <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8006196:	68ba      	ldr	r2, [r7, #8]
 8006198:	69fb      	ldr	r3, [r7, #28]
 800619a:	4413      	add	r3, r2
 800619c:	7819      	ldrb	r1, [r3, #0]
 800619e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80061a0:	69fb      	ldr	r3, [r7, #28]
 80061a2:	4413      	add	r3, r2
 80061a4:	3334      	adds	r3, #52	@ 0x34
 80061a6:	460a      	mov	r2, r1
 80061a8:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80061aa:	68ba      	ldr	r2, [r7, #8]
 80061ac:	69fb      	ldr	r3, [r7, #28]
 80061ae:	4413      	add	r3, r2
 80061b0:	781b      	ldrb	r3, [r3, #0]
 80061b2:	2b00      	cmp	r3, #0
 80061b4:	d006      	beq.n	80061c4 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80061b6:	69fb      	ldr	r3, [r7, #28]
 80061b8:	3301      	adds	r3, #1
 80061ba:	61fb      	str	r3, [r7, #28]
 80061bc:	69fb      	ldr	r3, [r7, #28]
 80061be:	2b0f      	cmp	r3, #15
 80061c0:	d9e9      	bls.n	8006196 <prvInitialiseNewTask+0x66>
 80061c2:	e000      	b.n	80061c6 <prvInitialiseNewTask+0x96>
			{
				break;
 80061c4:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80061c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80061c8:	2200      	movs	r2, #0
 80061ca:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80061ce:	e003      	b.n	80061d8 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80061d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80061d2:	2200      	movs	r2, #0
 80061d4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80061d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80061da:	2b37      	cmp	r3, #55	@ 0x37
 80061dc:	d901      	bls.n	80061e2 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80061de:	2337      	movs	r3, #55	@ 0x37
 80061e0:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80061e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80061e4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80061e6:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80061e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80061ea:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80061ec:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80061ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80061f0:	2200      	movs	r2, #0
 80061f2:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80061f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80061f6:	3304      	adds	r3, #4
 80061f8:	4618      	mov	r0, r3
 80061fa:	f7fe fd7b 	bl	8004cf4 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80061fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006200:	3318      	adds	r3, #24
 8006202:	4618      	mov	r0, r3
 8006204:	f7fe fd76 	bl	8004cf4 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8006208:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800620a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800620c:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800620e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006210:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8006214:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006216:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8006218:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800621a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800621c:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800621e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006220:	2200      	movs	r2, #0
 8006222:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8006226:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006228:	2200      	movs	r2, #0
 800622a:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800622e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006230:	3354      	adds	r3, #84	@ 0x54
 8006232:	224c      	movs	r2, #76	@ 0x4c
 8006234:	2100      	movs	r1, #0
 8006236:	4618      	mov	r0, r3
 8006238:	f00c f8a5 	bl	8012386 <memset>
 800623c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800623e:	4a0d      	ldr	r2, [pc, #52]	@ (8006274 <prvInitialiseNewTask+0x144>)
 8006240:	659a      	str	r2, [r3, #88]	@ 0x58
 8006242:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006244:	4a0c      	ldr	r2, [pc, #48]	@ (8006278 <prvInitialiseNewTask+0x148>)
 8006246:	65da      	str	r2, [r3, #92]	@ 0x5c
 8006248:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800624a:	4a0c      	ldr	r2, [pc, #48]	@ (800627c <prvInitialiseNewTask+0x14c>)
 800624c:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800624e:	683a      	ldr	r2, [r7, #0]
 8006250:	68f9      	ldr	r1, [r7, #12]
 8006252:	69b8      	ldr	r0, [r7, #24]
 8006254:	f001 fa7c 	bl	8007750 <pxPortInitialiseStack>
 8006258:	4602      	mov	r2, r0
 800625a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800625c:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800625e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006260:	2b00      	cmp	r3, #0
 8006262:	d002      	beq.n	800626a <prvInitialiseNewTask+0x13a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8006264:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006266:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006268:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800626a:	bf00      	nop
 800626c:	3720      	adds	r7, #32
 800626e:	46bd      	mov	sp, r7
 8006270:	bd80      	pop	{r7, pc}
 8006272:	bf00      	nop
 8006274:	2001025c 	.word	0x2001025c
 8006278:	200102c4 	.word	0x200102c4
 800627c:	2001032c 	.word	0x2001032c

08006280 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8006280:	b580      	push	{r7, lr}
 8006282:	b082      	sub	sp, #8
 8006284:	af00      	add	r7, sp, #0
 8006286:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8006288:	f001 fb96 	bl	80079b8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800628c:	4b2d      	ldr	r3, [pc, #180]	@ (8006344 <prvAddNewTaskToReadyList+0xc4>)
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	3301      	adds	r3, #1
 8006292:	4a2c      	ldr	r2, [pc, #176]	@ (8006344 <prvAddNewTaskToReadyList+0xc4>)
 8006294:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8006296:	4b2c      	ldr	r3, [pc, #176]	@ (8006348 <prvAddNewTaskToReadyList+0xc8>)
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	2b00      	cmp	r3, #0
 800629c:	d109      	bne.n	80062b2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800629e:	4a2a      	ldr	r2, [pc, #168]	@ (8006348 <prvAddNewTaskToReadyList+0xc8>)
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80062a4:	4b27      	ldr	r3, [pc, #156]	@ (8006344 <prvAddNewTaskToReadyList+0xc4>)
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	2b01      	cmp	r3, #1
 80062aa:	d110      	bne.n	80062ce <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80062ac:	f000 fc40 	bl	8006b30 <prvInitialiseTaskLists>
 80062b0:	e00d      	b.n	80062ce <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80062b2:	4b26      	ldr	r3, [pc, #152]	@ (800634c <prvAddNewTaskToReadyList+0xcc>)
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	2b00      	cmp	r3, #0
 80062b8:	d109      	bne.n	80062ce <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80062ba:	4b23      	ldr	r3, [pc, #140]	@ (8006348 <prvAddNewTaskToReadyList+0xc8>)
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80062c4:	429a      	cmp	r2, r3
 80062c6:	d802      	bhi.n	80062ce <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80062c8:	4a1f      	ldr	r2, [pc, #124]	@ (8006348 <prvAddNewTaskToReadyList+0xc8>)
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80062ce:	4b20      	ldr	r3, [pc, #128]	@ (8006350 <prvAddNewTaskToReadyList+0xd0>)
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	3301      	adds	r3, #1
 80062d4:	4a1e      	ldr	r2, [pc, #120]	@ (8006350 <prvAddNewTaskToReadyList+0xd0>)
 80062d6:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80062d8:	4b1d      	ldr	r3, [pc, #116]	@ (8006350 <prvAddNewTaskToReadyList+0xd0>)
 80062da:	681a      	ldr	r2, [r3, #0]
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80062e4:	4b1b      	ldr	r3, [pc, #108]	@ (8006354 <prvAddNewTaskToReadyList+0xd4>)
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	429a      	cmp	r2, r3
 80062ea:	d903      	bls.n	80062f4 <prvAddNewTaskToReadyList+0x74>
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80062f0:	4a18      	ldr	r2, [pc, #96]	@ (8006354 <prvAddNewTaskToReadyList+0xd4>)
 80062f2:	6013      	str	r3, [r2, #0]
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80062f8:	4613      	mov	r3, r2
 80062fa:	009b      	lsls	r3, r3, #2
 80062fc:	4413      	add	r3, r2
 80062fe:	009b      	lsls	r3, r3, #2
 8006300:	4a15      	ldr	r2, [pc, #84]	@ (8006358 <prvAddNewTaskToReadyList+0xd8>)
 8006302:	441a      	add	r2, r3
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	3304      	adds	r3, #4
 8006308:	4619      	mov	r1, r3
 800630a:	4610      	mov	r0, r2
 800630c:	f7fe fcff 	bl	8004d0e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8006310:	f001 fb84 	bl	8007a1c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8006314:	4b0d      	ldr	r3, [pc, #52]	@ (800634c <prvAddNewTaskToReadyList+0xcc>)
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	2b00      	cmp	r3, #0
 800631a:	d00e      	beq.n	800633a <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800631c:	4b0a      	ldr	r3, [pc, #40]	@ (8006348 <prvAddNewTaskToReadyList+0xc8>)
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006326:	429a      	cmp	r2, r3
 8006328:	d207      	bcs.n	800633a <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800632a:	4b0c      	ldr	r3, [pc, #48]	@ (800635c <prvAddNewTaskToReadyList+0xdc>)
 800632c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006330:	601a      	str	r2, [r3, #0]
 8006332:	f3bf 8f4f 	dsb	sy
 8006336:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800633a:	bf00      	nop
 800633c:	3708      	adds	r7, #8
 800633e:	46bd      	mov	sp, r7
 8006340:	bd80      	pop	{r7, pc}
 8006342:	bf00      	nop
 8006344:	20006a58 	.word	0x20006a58
 8006348:	20006584 	.word	0x20006584
 800634c:	20006a64 	.word	0x20006a64
 8006350:	20006a74 	.word	0x20006a74
 8006354:	20006a60 	.word	0x20006a60
 8006358:	20006588 	.word	0x20006588
 800635c:	e000ed04 	.word	0xe000ed04

08006360 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8006360:	b580      	push	{r7, lr}
 8006362:	b084      	sub	sp, #16
 8006364:	af00      	add	r7, sp, #0
 8006366:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8006368:	2300      	movs	r3, #0
 800636a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	2b00      	cmp	r3, #0
 8006370:	d018      	beq.n	80063a4 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8006372:	4b14      	ldr	r3, [pc, #80]	@ (80063c4 <vTaskDelay+0x64>)
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	2b00      	cmp	r3, #0
 8006378:	d00b      	beq.n	8006392 <vTaskDelay+0x32>
	__asm volatile
 800637a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800637e:	f383 8811 	msr	BASEPRI, r3
 8006382:	f3bf 8f6f 	isb	sy
 8006386:	f3bf 8f4f 	dsb	sy
 800638a:	60bb      	str	r3, [r7, #8]
}
 800638c:	bf00      	nop
 800638e:	bf00      	nop
 8006390:	e7fd      	b.n	800638e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8006392:	f000 f88b 	bl	80064ac <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8006396:	2100      	movs	r1, #0
 8006398:	6878      	ldr	r0, [r7, #4]
 800639a:	f000 fe2b 	bl	8006ff4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800639e:	f000 f893 	bl	80064c8 <xTaskResumeAll>
 80063a2:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80063a4:	68fb      	ldr	r3, [r7, #12]
 80063a6:	2b00      	cmp	r3, #0
 80063a8:	d107      	bne.n	80063ba <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 80063aa:	4b07      	ldr	r3, [pc, #28]	@ (80063c8 <vTaskDelay+0x68>)
 80063ac:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80063b0:	601a      	str	r2, [r3, #0]
 80063b2:	f3bf 8f4f 	dsb	sy
 80063b6:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80063ba:	bf00      	nop
 80063bc:	3710      	adds	r7, #16
 80063be:	46bd      	mov	sp, r7
 80063c0:	bd80      	pop	{r7, pc}
 80063c2:	bf00      	nop
 80063c4:	20006a80 	.word	0x20006a80
 80063c8:	e000ed04 	.word	0xe000ed04

080063cc <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80063cc:	b580      	push	{r7, lr}
 80063ce:	b08a      	sub	sp, #40	@ 0x28
 80063d0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80063d2:	2300      	movs	r3, #0
 80063d4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80063d6:	2300      	movs	r3, #0
 80063d8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80063da:	463a      	mov	r2, r7
 80063dc:	1d39      	adds	r1, r7, #4
 80063de:	f107 0308 	add.w	r3, r7, #8
 80063e2:	4618      	mov	r0, r3
 80063e4:	f7fe fc32 	bl	8004c4c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80063e8:	6839      	ldr	r1, [r7, #0]
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	68ba      	ldr	r2, [r7, #8]
 80063ee:	9202      	str	r2, [sp, #8]
 80063f0:	9301      	str	r3, [sp, #4]
 80063f2:	2300      	movs	r3, #0
 80063f4:	9300      	str	r3, [sp, #0]
 80063f6:	2300      	movs	r3, #0
 80063f8:	460a      	mov	r2, r1
 80063fa:	4924      	ldr	r1, [pc, #144]	@ (800648c <vTaskStartScheduler+0xc0>)
 80063fc:	4824      	ldr	r0, [pc, #144]	@ (8006490 <vTaskStartScheduler+0xc4>)
 80063fe:	f7ff fdf1 	bl	8005fe4 <xTaskCreateStatic>
 8006402:	4603      	mov	r3, r0
 8006404:	4a23      	ldr	r2, [pc, #140]	@ (8006494 <vTaskStartScheduler+0xc8>)
 8006406:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8006408:	4b22      	ldr	r3, [pc, #136]	@ (8006494 <vTaskStartScheduler+0xc8>)
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	2b00      	cmp	r3, #0
 800640e:	d002      	beq.n	8006416 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8006410:	2301      	movs	r3, #1
 8006412:	617b      	str	r3, [r7, #20]
 8006414:	e001      	b.n	800641a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8006416:	2300      	movs	r3, #0
 8006418:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800641a:	697b      	ldr	r3, [r7, #20]
 800641c:	2b01      	cmp	r3, #1
 800641e:	d102      	bne.n	8006426 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8006420:	f000 fe3c 	bl	800709c <xTimerCreateTimerTask>
 8006424:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8006426:	697b      	ldr	r3, [r7, #20]
 8006428:	2b01      	cmp	r3, #1
 800642a:	d11b      	bne.n	8006464 <vTaskStartScheduler+0x98>
	__asm volatile
 800642c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006430:	f383 8811 	msr	BASEPRI, r3
 8006434:	f3bf 8f6f 	isb	sy
 8006438:	f3bf 8f4f 	dsb	sy
 800643c:	613b      	str	r3, [r7, #16]
}
 800643e:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8006440:	4b15      	ldr	r3, [pc, #84]	@ (8006498 <vTaskStartScheduler+0xcc>)
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	3354      	adds	r3, #84	@ 0x54
 8006446:	4a15      	ldr	r2, [pc, #84]	@ (800649c <vTaskStartScheduler+0xd0>)
 8006448:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800644a:	4b15      	ldr	r3, [pc, #84]	@ (80064a0 <vTaskStartScheduler+0xd4>)
 800644c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8006450:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8006452:	4b14      	ldr	r3, [pc, #80]	@ (80064a4 <vTaskStartScheduler+0xd8>)
 8006454:	2201      	movs	r2, #1
 8006456:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8006458:	4b13      	ldr	r3, [pc, #76]	@ (80064a8 <vTaskStartScheduler+0xdc>)
 800645a:	2200      	movs	r2, #0
 800645c:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800645e:	f001 fa07 	bl	8007870 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8006462:	e00f      	b.n	8006484 <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8006464:	697b      	ldr	r3, [r7, #20]
 8006466:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800646a:	d10b      	bne.n	8006484 <vTaskStartScheduler+0xb8>
	__asm volatile
 800646c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006470:	f383 8811 	msr	BASEPRI, r3
 8006474:	f3bf 8f6f 	isb	sy
 8006478:	f3bf 8f4f 	dsb	sy
 800647c:	60fb      	str	r3, [r7, #12]
}
 800647e:	bf00      	nop
 8006480:	bf00      	nop
 8006482:	e7fd      	b.n	8006480 <vTaskStartScheduler+0xb4>
}
 8006484:	bf00      	nop
 8006486:	3718      	adds	r7, #24
 8006488:	46bd      	mov	sp, r7
 800648a:	bd80      	pop	{r7, pc}
 800648c:	08013204 	.word	0x08013204
 8006490:	08006b01 	.word	0x08006b01
 8006494:	20006a7c 	.word	0x20006a7c
 8006498:	20006584 	.word	0x20006584
 800649c:	2000003c 	.word	0x2000003c
 80064a0:	20006a78 	.word	0x20006a78
 80064a4:	20006a64 	.word	0x20006a64
 80064a8:	20006a5c 	.word	0x20006a5c

080064ac <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80064ac:	b480      	push	{r7}
 80064ae:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80064b0:	4b04      	ldr	r3, [pc, #16]	@ (80064c4 <vTaskSuspendAll+0x18>)
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	3301      	adds	r3, #1
 80064b6:	4a03      	ldr	r2, [pc, #12]	@ (80064c4 <vTaskSuspendAll+0x18>)
 80064b8:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80064ba:	bf00      	nop
 80064bc:	46bd      	mov	sp, r7
 80064be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064c2:	4770      	bx	lr
 80064c4:	20006a80 	.word	0x20006a80

080064c8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80064c8:	b580      	push	{r7, lr}
 80064ca:	b084      	sub	sp, #16
 80064cc:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80064ce:	2300      	movs	r3, #0
 80064d0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80064d2:	2300      	movs	r3, #0
 80064d4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80064d6:	4b42      	ldr	r3, [pc, #264]	@ (80065e0 <xTaskResumeAll+0x118>)
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	2b00      	cmp	r3, #0
 80064dc:	d10b      	bne.n	80064f6 <xTaskResumeAll+0x2e>
	__asm volatile
 80064de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80064e2:	f383 8811 	msr	BASEPRI, r3
 80064e6:	f3bf 8f6f 	isb	sy
 80064ea:	f3bf 8f4f 	dsb	sy
 80064ee:	603b      	str	r3, [r7, #0]
}
 80064f0:	bf00      	nop
 80064f2:	bf00      	nop
 80064f4:	e7fd      	b.n	80064f2 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80064f6:	f001 fa5f 	bl	80079b8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80064fa:	4b39      	ldr	r3, [pc, #228]	@ (80065e0 <xTaskResumeAll+0x118>)
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	3b01      	subs	r3, #1
 8006500:	4a37      	ldr	r2, [pc, #220]	@ (80065e0 <xTaskResumeAll+0x118>)
 8006502:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006504:	4b36      	ldr	r3, [pc, #216]	@ (80065e0 <xTaskResumeAll+0x118>)
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	2b00      	cmp	r3, #0
 800650a:	d162      	bne.n	80065d2 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800650c:	4b35      	ldr	r3, [pc, #212]	@ (80065e4 <xTaskResumeAll+0x11c>)
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	2b00      	cmp	r3, #0
 8006512:	d05e      	beq.n	80065d2 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006514:	e02f      	b.n	8006576 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006516:	4b34      	ldr	r3, [pc, #208]	@ (80065e8 <xTaskResumeAll+0x120>)
 8006518:	68db      	ldr	r3, [r3, #12]
 800651a:	68db      	ldr	r3, [r3, #12]
 800651c:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800651e:	68fb      	ldr	r3, [r7, #12]
 8006520:	3318      	adds	r3, #24
 8006522:	4618      	mov	r0, r3
 8006524:	f7fe fc50 	bl	8004dc8 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006528:	68fb      	ldr	r3, [r7, #12]
 800652a:	3304      	adds	r3, #4
 800652c:	4618      	mov	r0, r3
 800652e:	f7fe fc4b 	bl	8004dc8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8006532:	68fb      	ldr	r3, [r7, #12]
 8006534:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006536:	4b2d      	ldr	r3, [pc, #180]	@ (80065ec <xTaskResumeAll+0x124>)
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	429a      	cmp	r2, r3
 800653c:	d903      	bls.n	8006546 <xTaskResumeAll+0x7e>
 800653e:	68fb      	ldr	r3, [r7, #12]
 8006540:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006542:	4a2a      	ldr	r2, [pc, #168]	@ (80065ec <xTaskResumeAll+0x124>)
 8006544:	6013      	str	r3, [r2, #0]
 8006546:	68fb      	ldr	r3, [r7, #12]
 8006548:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800654a:	4613      	mov	r3, r2
 800654c:	009b      	lsls	r3, r3, #2
 800654e:	4413      	add	r3, r2
 8006550:	009b      	lsls	r3, r3, #2
 8006552:	4a27      	ldr	r2, [pc, #156]	@ (80065f0 <xTaskResumeAll+0x128>)
 8006554:	441a      	add	r2, r3
 8006556:	68fb      	ldr	r3, [r7, #12]
 8006558:	3304      	adds	r3, #4
 800655a:	4619      	mov	r1, r3
 800655c:	4610      	mov	r0, r2
 800655e:	f7fe fbd6 	bl	8004d0e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006562:	68fb      	ldr	r3, [r7, #12]
 8006564:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006566:	4b23      	ldr	r3, [pc, #140]	@ (80065f4 <xTaskResumeAll+0x12c>)
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800656c:	429a      	cmp	r2, r3
 800656e:	d302      	bcc.n	8006576 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8006570:	4b21      	ldr	r3, [pc, #132]	@ (80065f8 <xTaskResumeAll+0x130>)
 8006572:	2201      	movs	r2, #1
 8006574:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006576:	4b1c      	ldr	r3, [pc, #112]	@ (80065e8 <xTaskResumeAll+0x120>)
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	2b00      	cmp	r3, #0
 800657c:	d1cb      	bne.n	8006516 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800657e:	68fb      	ldr	r3, [r7, #12]
 8006580:	2b00      	cmp	r3, #0
 8006582:	d001      	beq.n	8006588 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8006584:	f000 fb78 	bl	8006c78 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8006588:	4b1c      	ldr	r3, [pc, #112]	@ (80065fc <xTaskResumeAll+0x134>)
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	2b00      	cmp	r3, #0
 8006592:	d010      	beq.n	80065b6 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8006594:	f000 f858 	bl	8006648 <xTaskIncrementTick>
 8006598:	4603      	mov	r3, r0
 800659a:	2b00      	cmp	r3, #0
 800659c:	d002      	beq.n	80065a4 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 800659e:	4b16      	ldr	r3, [pc, #88]	@ (80065f8 <xTaskResumeAll+0x130>)
 80065a0:	2201      	movs	r2, #1
 80065a2:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	3b01      	subs	r3, #1
 80065a8:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	2b00      	cmp	r3, #0
 80065ae:	d1f1      	bne.n	8006594 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 80065b0:	4b12      	ldr	r3, [pc, #72]	@ (80065fc <xTaskResumeAll+0x134>)
 80065b2:	2200      	movs	r2, #0
 80065b4:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80065b6:	4b10      	ldr	r3, [pc, #64]	@ (80065f8 <xTaskResumeAll+0x130>)
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	2b00      	cmp	r3, #0
 80065bc:	d009      	beq.n	80065d2 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80065be:	2301      	movs	r3, #1
 80065c0:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80065c2:	4b0f      	ldr	r3, [pc, #60]	@ (8006600 <xTaskResumeAll+0x138>)
 80065c4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80065c8:	601a      	str	r2, [r3, #0]
 80065ca:	f3bf 8f4f 	dsb	sy
 80065ce:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80065d2:	f001 fa23 	bl	8007a1c <vPortExitCritical>

	return xAlreadyYielded;
 80065d6:	68bb      	ldr	r3, [r7, #8]
}
 80065d8:	4618      	mov	r0, r3
 80065da:	3710      	adds	r7, #16
 80065dc:	46bd      	mov	sp, r7
 80065de:	bd80      	pop	{r7, pc}
 80065e0:	20006a80 	.word	0x20006a80
 80065e4:	20006a58 	.word	0x20006a58
 80065e8:	20006a18 	.word	0x20006a18
 80065ec:	20006a60 	.word	0x20006a60
 80065f0:	20006588 	.word	0x20006588
 80065f4:	20006584 	.word	0x20006584
 80065f8:	20006a6c 	.word	0x20006a6c
 80065fc:	20006a68 	.word	0x20006a68
 8006600:	e000ed04 	.word	0xe000ed04

08006604 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8006604:	b480      	push	{r7}
 8006606:	b083      	sub	sp, #12
 8006608:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800660a:	4b05      	ldr	r3, [pc, #20]	@ (8006620 <xTaskGetTickCount+0x1c>)
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8006610:	687b      	ldr	r3, [r7, #4]
}
 8006612:	4618      	mov	r0, r3
 8006614:	370c      	adds	r7, #12
 8006616:	46bd      	mov	sp, r7
 8006618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800661c:	4770      	bx	lr
 800661e:	bf00      	nop
 8006620:	20006a5c 	.word	0x20006a5c

08006624 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8006624:	b580      	push	{r7, lr}
 8006626:	b082      	sub	sp, #8
 8006628:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800662a:	f001 faa5 	bl	8007b78 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 800662e:	2300      	movs	r3, #0
 8006630:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 8006632:	4b04      	ldr	r3, [pc, #16]	@ (8006644 <xTaskGetTickCountFromISR+0x20>)
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006638:	683b      	ldr	r3, [r7, #0]
}
 800663a:	4618      	mov	r0, r3
 800663c:	3708      	adds	r7, #8
 800663e:	46bd      	mov	sp, r7
 8006640:	bd80      	pop	{r7, pc}
 8006642:	bf00      	nop
 8006644:	20006a5c 	.word	0x20006a5c

08006648 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8006648:	b580      	push	{r7, lr}
 800664a:	b086      	sub	sp, #24
 800664c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800664e:	2300      	movs	r3, #0
 8006650:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006652:	4b4f      	ldr	r3, [pc, #316]	@ (8006790 <xTaskIncrementTick+0x148>)
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	2b00      	cmp	r3, #0
 8006658:	f040 8090 	bne.w	800677c <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800665c:	4b4d      	ldr	r3, [pc, #308]	@ (8006794 <xTaskIncrementTick+0x14c>)
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	3301      	adds	r3, #1
 8006662:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8006664:	4a4b      	ldr	r2, [pc, #300]	@ (8006794 <xTaskIncrementTick+0x14c>)
 8006666:	693b      	ldr	r3, [r7, #16]
 8006668:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800666a:	693b      	ldr	r3, [r7, #16]
 800666c:	2b00      	cmp	r3, #0
 800666e:	d121      	bne.n	80066b4 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8006670:	4b49      	ldr	r3, [pc, #292]	@ (8006798 <xTaskIncrementTick+0x150>)
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	2b00      	cmp	r3, #0
 8006678:	d00b      	beq.n	8006692 <xTaskIncrementTick+0x4a>
	__asm volatile
 800667a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800667e:	f383 8811 	msr	BASEPRI, r3
 8006682:	f3bf 8f6f 	isb	sy
 8006686:	f3bf 8f4f 	dsb	sy
 800668a:	603b      	str	r3, [r7, #0]
}
 800668c:	bf00      	nop
 800668e:	bf00      	nop
 8006690:	e7fd      	b.n	800668e <xTaskIncrementTick+0x46>
 8006692:	4b41      	ldr	r3, [pc, #260]	@ (8006798 <xTaskIncrementTick+0x150>)
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	60fb      	str	r3, [r7, #12]
 8006698:	4b40      	ldr	r3, [pc, #256]	@ (800679c <xTaskIncrementTick+0x154>)
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	4a3e      	ldr	r2, [pc, #248]	@ (8006798 <xTaskIncrementTick+0x150>)
 800669e:	6013      	str	r3, [r2, #0]
 80066a0:	4a3e      	ldr	r2, [pc, #248]	@ (800679c <xTaskIncrementTick+0x154>)
 80066a2:	68fb      	ldr	r3, [r7, #12]
 80066a4:	6013      	str	r3, [r2, #0]
 80066a6:	4b3e      	ldr	r3, [pc, #248]	@ (80067a0 <xTaskIncrementTick+0x158>)
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	3301      	adds	r3, #1
 80066ac:	4a3c      	ldr	r2, [pc, #240]	@ (80067a0 <xTaskIncrementTick+0x158>)
 80066ae:	6013      	str	r3, [r2, #0]
 80066b0:	f000 fae2 	bl	8006c78 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80066b4:	4b3b      	ldr	r3, [pc, #236]	@ (80067a4 <xTaskIncrementTick+0x15c>)
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	693a      	ldr	r2, [r7, #16]
 80066ba:	429a      	cmp	r2, r3
 80066bc:	d349      	bcc.n	8006752 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80066be:	4b36      	ldr	r3, [pc, #216]	@ (8006798 <xTaskIncrementTick+0x150>)
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	2b00      	cmp	r3, #0
 80066c6:	d104      	bne.n	80066d2 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80066c8:	4b36      	ldr	r3, [pc, #216]	@ (80067a4 <xTaskIncrementTick+0x15c>)
 80066ca:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80066ce:	601a      	str	r2, [r3, #0]
					break;
 80066d0:	e03f      	b.n	8006752 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80066d2:	4b31      	ldr	r3, [pc, #196]	@ (8006798 <xTaskIncrementTick+0x150>)
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	68db      	ldr	r3, [r3, #12]
 80066d8:	68db      	ldr	r3, [r3, #12]
 80066da:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80066dc:	68bb      	ldr	r3, [r7, #8]
 80066de:	685b      	ldr	r3, [r3, #4]
 80066e0:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80066e2:	693a      	ldr	r2, [r7, #16]
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	429a      	cmp	r2, r3
 80066e8:	d203      	bcs.n	80066f2 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80066ea:	4a2e      	ldr	r2, [pc, #184]	@ (80067a4 <xTaskIncrementTick+0x15c>)
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80066f0:	e02f      	b.n	8006752 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80066f2:	68bb      	ldr	r3, [r7, #8]
 80066f4:	3304      	adds	r3, #4
 80066f6:	4618      	mov	r0, r3
 80066f8:	f7fe fb66 	bl	8004dc8 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80066fc:	68bb      	ldr	r3, [r7, #8]
 80066fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006700:	2b00      	cmp	r3, #0
 8006702:	d004      	beq.n	800670e <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006704:	68bb      	ldr	r3, [r7, #8]
 8006706:	3318      	adds	r3, #24
 8006708:	4618      	mov	r0, r3
 800670a:	f7fe fb5d 	bl	8004dc8 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800670e:	68bb      	ldr	r3, [r7, #8]
 8006710:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006712:	4b25      	ldr	r3, [pc, #148]	@ (80067a8 <xTaskIncrementTick+0x160>)
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	429a      	cmp	r2, r3
 8006718:	d903      	bls.n	8006722 <xTaskIncrementTick+0xda>
 800671a:	68bb      	ldr	r3, [r7, #8]
 800671c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800671e:	4a22      	ldr	r2, [pc, #136]	@ (80067a8 <xTaskIncrementTick+0x160>)
 8006720:	6013      	str	r3, [r2, #0]
 8006722:	68bb      	ldr	r3, [r7, #8]
 8006724:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006726:	4613      	mov	r3, r2
 8006728:	009b      	lsls	r3, r3, #2
 800672a:	4413      	add	r3, r2
 800672c:	009b      	lsls	r3, r3, #2
 800672e:	4a1f      	ldr	r2, [pc, #124]	@ (80067ac <xTaskIncrementTick+0x164>)
 8006730:	441a      	add	r2, r3
 8006732:	68bb      	ldr	r3, [r7, #8]
 8006734:	3304      	adds	r3, #4
 8006736:	4619      	mov	r1, r3
 8006738:	4610      	mov	r0, r2
 800673a:	f7fe fae8 	bl	8004d0e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800673e:	68bb      	ldr	r3, [r7, #8]
 8006740:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006742:	4b1b      	ldr	r3, [pc, #108]	@ (80067b0 <xTaskIncrementTick+0x168>)
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006748:	429a      	cmp	r2, r3
 800674a:	d3b8      	bcc.n	80066be <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800674c:	2301      	movs	r3, #1
 800674e:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006750:	e7b5      	b.n	80066be <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8006752:	4b17      	ldr	r3, [pc, #92]	@ (80067b0 <xTaskIncrementTick+0x168>)
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006758:	4914      	ldr	r1, [pc, #80]	@ (80067ac <xTaskIncrementTick+0x164>)
 800675a:	4613      	mov	r3, r2
 800675c:	009b      	lsls	r3, r3, #2
 800675e:	4413      	add	r3, r2
 8006760:	009b      	lsls	r3, r3, #2
 8006762:	440b      	add	r3, r1
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	2b01      	cmp	r3, #1
 8006768:	d901      	bls.n	800676e <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 800676a:	2301      	movs	r3, #1
 800676c:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800676e:	4b11      	ldr	r3, [pc, #68]	@ (80067b4 <xTaskIncrementTick+0x16c>)
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	2b00      	cmp	r3, #0
 8006774:	d007      	beq.n	8006786 <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 8006776:	2301      	movs	r3, #1
 8006778:	617b      	str	r3, [r7, #20]
 800677a:	e004      	b.n	8006786 <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800677c:	4b0e      	ldr	r3, [pc, #56]	@ (80067b8 <xTaskIncrementTick+0x170>)
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	3301      	adds	r3, #1
 8006782:	4a0d      	ldr	r2, [pc, #52]	@ (80067b8 <xTaskIncrementTick+0x170>)
 8006784:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8006786:	697b      	ldr	r3, [r7, #20]
}
 8006788:	4618      	mov	r0, r3
 800678a:	3718      	adds	r7, #24
 800678c:	46bd      	mov	sp, r7
 800678e:	bd80      	pop	{r7, pc}
 8006790:	20006a80 	.word	0x20006a80
 8006794:	20006a5c 	.word	0x20006a5c
 8006798:	20006a10 	.word	0x20006a10
 800679c:	20006a14 	.word	0x20006a14
 80067a0:	20006a70 	.word	0x20006a70
 80067a4:	20006a78 	.word	0x20006a78
 80067a8:	20006a60 	.word	0x20006a60
 80067ac:	20006588 	.word	0x20006588
 80067b0:	20006584 	.word	0x20006584
 80067b4:	20006a6c 	.word	0x20006a6c
 80067b8:	20006a68 	.word	0x20006a68

080067bc <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80067bc:	b480      	push	{r7}
 80067be:	b085      	sub	sp, #20
 80067c0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80067c2:	4b2b      	ldr	r3, [pc, #172]	@ (8006870 <vTaskSwitchContext+0xb4>)
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	2b00      	cmp	r3, #0
 80067c8:	d003      	beq.n	80067d2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80067ca:	4b2a      	ldr	r3, [pc, #168]	@ (8006874 <vTaskSwitchContext+0xb8>)
 80067cc:	2201      	movs	r2, #1
 80067ce:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80067d0:	e047      	b.n	8006862 <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 80067d2:	4b28      	ldr	r3, [pc, #160]	@ (8006874 <vTaskSwitchContext+0xb8>)
 80067d4:	2200      	movs	r2, #0
 80067d6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80067d8:	4b27      	ldr	r3, [pc, #156]	@ (8006878 <vTaskSwitchContext+0xbc>)
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	60fb      	str	r3, [r7, #12]
 80067de:	e011      	b.n	8006804 <vTaskSwitchContext+0x48>
 80067e0:	68fb      	ldr	r3, [r7, #12]
 80067e2:	2b00      	cmp	r3, #0
 80067e4:	d10b      	bne.n	80067fe <vTaskSwitchContext+0x42>
	__asm volatile
 80067e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80067ea:	f383 8811 	msr	BASEPRI, r3
 80067ee:	f3bf 8f6f 	isb	sy
 80067f2:	f3bf 8f4f 	dsb	sy
 80067f6:	607b      	str	r3, [r7, #4]
}
 80067f8:	bf00      	nop
 80067fa:	bf00      	nop
 80067fc:	e7fd      	b.n	80067fa <vTaskSwitchContext+0x3e>
 80067fe:	68fb      	ldr	r3, [r7, #12]
 8006800:	3b01      	subs	r3, #1
 8006802:	60fb      	str	r3, [r7, #12]
 8006804:	491d      	ldr	r1, [pc, #116]	@ (800687c <vTaskSwitchContext+0xc0>)
 8006806:	68fa      	ldr	r2, [r7, #12]
 8006808:	4613      	mov	r3, r2
 800680a:	009b      	lsls	r3, r3, #2
 800680c:	4413      	add	r3, r2
 800680e:	009b      	lsls	r3, r3, #2
 8006810:	440b      	add	r3, r1
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	2b00      	cmp	r3, #0
 8006816:	d0e3      	beq.n	80067e0 <vTaskSwitchContext+0x24>
 8006818:	68fa      	ldr	r2, [r7, #12]
 800681a:	4613      	mov	r3, r2
 800681c:	009b      	lsls	r3, r3, #2
 800681e:	4413      	add	r3, r2
 8006820:	009b      	lsls	r3, r3, #2
 8006822:	4a16      	ldr	r2, [pc, #88]	@ (800687c <vTaskSwitchContext+0xc0>)
 8006824:	4413      	add	r3, r2
 8006826:	60bb      	str	r3, [r7, #8]
 8006828:	68bb      	ldr	r3, [r7, #8]
 800682a:	685b      	ldr	r3, [r3, #4]
 800682c:	685a      	ldr	r2, [r3, #4]
 800682e:	68bb      	ldr	r3, [r7, #8]
 8006830:	605a      	str	r2, [r3, #4]
 8006832:	68bb      	ldr	r3, [r7, #8]
 8006834:	685a      	ldr	r2, [r3, #4]
 8006836:	68bb      	ldr	r3, [r7, #8]
 8006838:	3308      	adds	r3, #8
 800683a:	429a      	cmp	r2, r3
 800683c:	d104      	bne.n	8006848 <vTaskSwitchContext+0x8c>
 800683e:	68bb      	ldr	r3, [r7, #8]
 8006840:	685b      	ldr	r3, [r3, #4]
 8006842:	685a      	ldr	r2, [r3, #4]
 8006844:	68bb      	ldr	r3, [r7, #8]
 8006846:	605a      	str	r2, [r3, #4]
 8006848:	68bb      	ldr	r3, [r7, #8]
 800684a:	685b      	ldr	r3, [r3, #4]
 800684c:	68db      	ldr	r3, [r3, #12]
 800684e:	4a0c      	ldr	r2, [pc, #48]	@ (8006880 <vTaskSwitchContext+0xc4>)
 8006850:	6013      	str	r3, [r2, #0]
 8006852:	4a09      	ldr	r2, [pc, #36]	@ (8006878 <vTaskSwitchContext+0xbc>)
 8006854:	68fb      	ldr	r3, [r7, #12]
 8006856:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8006858:	4b09      	ldr	r3, [pc, #36]	@ (8006880 <vTaskSwitchContext+0xc4>)
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	3354      	adds	r3, #84	@ 0x54
 800685e:	4a09      	ldr	r2, [pc, #36]	@ (8006884 <vTaskSwitchContext+0xc8>)
 8006860:	6013      	str	r3, [r2, #0]
}
 8006862:	bf00      	nop
 8006864:	3714      	adds	r7, #20
 8006866:	46bd      	mov	sp, r7
 8006868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800686c:	4770      	bx	lr
 800686e:	bf00      	nop
 8006870:	20006a80 	.word	0x20006a80
 8006874:	20006a6c 	.word	0x20006a6c
 8006878:	20006a60 	.word	0x20006a60
 800687c:	20006588 	.word	0x20006588
 8006880:	20006584 	.word	0x20006584
 8006884:	2000003c 	.word	0x2000003c

08006888 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8006888:	b580      	push	{r7, lr}
 800688a:	b084      	sub	sp, #16
 800688c:	af00      	add	r7, sp, #0
 800688e:	6078      	str	r0, [r7, #4]
 8006890:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	2b00      	cmp	r3, #0
 8006896:	d10b      	bne.n	80068b0 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8006898:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800689c:	f383 8811 	msr	BASEPRI, r3
 80068a0:	f3bf 8f6f 	isb	sy
 80068a4:	f3bf 8f4f 	dsb	sy
 80068a8:	60fb      	str	r3, [r7, #12]
}
 80068aa:	bf00      	nop
 80068ac:	bf00      	nop
 80068ae:	e7fd      	b.n	80068ac <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80068b0:	4b07      	ldr	r3, [pc, #28]	@ (80068d0 <vTaskPlaceOnEventList+0x48>)
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	3318      	adds	r3, #24
 80068b6:	4619      	mov	r1, r3
 80068b8:	6878      	ldr	r0, [r7, #4]
 80068ba:	f7fe fa4c 	bl	8004d56 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80068be:	2101      	movs	r1, #1
 80068c0:	6838      	ldr	r0, [r7, #0]
 80068c2:	f000 fb97 	bl	8006ff4 <prvAddCurrentTaskToDelayedList>
}
 80068c6:	bf00      	nop
 80068c8:	3710      	adds	r7, #16
 80068ca:	46bd      	mov	sp, r7
 80068cc:	bd80      	pop	{r7, pc}
 80068ce:	bf00      	nop
 80068d0:	20006584 	.word	0x20006584

080068d4 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80068d4:	b580      	push	{r7, lr}
 80068d6:	b086      	sub	sp, #24
 80068d8:	af00      	add	r7, sp, #0
 80068da:	60f8      	str	r0, [r7, #12]
 80068dc:	60b9      	str	r1, [r7, #8]
 80068de:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80068e0:	68fb      	ldr	r3, [r7, #12]
 80068e2:	2b00      	cmp	r3, #0
 80068e4:	d10b      	bne.n	80068fe <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 80068e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80068ea:	f383 8811 	msr	BASEPRI, r3
 80068ee:	f3bf 8f6f 	isb	sy
 80068f2:	f3bf 8f4f 	dsb	sy
 80068f6:	617b      	str	r3, [r7, #20]
}
 80068f8:	bf00      	nop
 80068fa:	bf00      	nop
 80068fc:	e7fd      	b.n	80068fa <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80068fe:	4b0a      	ldr	r3, [pc, #40]	@ (8006928 <vTaskPlaceOnEventListRestricted+0x54>)
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	3318      	adds	r3, #24
 8006904:	4619      	mov	r1, r3
 8006906:	68f8      	ldr	r0, [r7, #12]
 8006908:	f7fe fa01 	bl	8004d0e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	2b00      	cmp	r3, #0
 8006910:	d002      	beq.n	8006918 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 8006912:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8006916:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8006918:	6879      	ldr	r1, [r7, #4]
 800691a:	68b8      	ldr	r0, [r7, #8]
 800691c:	f000 fb6a 	bl	8006ff4 <prvAddCurrentTaskToDelayedList>
	}
 8006920:	bf00      	nop
 8006922:	3718      	adds	r7, #24
 8006924:	46bd      	mov	sp, r7
 8006926:	bd80      	pop	{r7, pc}
 8006928:	20006584 	.word	0x20006584

0800692c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800692c:	b580      	push	{r7, lr}
 800692e:	b086      	sub	sp, #24
 8006930:	af00      	add	r7, sp, #0
 8006932:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	68db      	ldr	r3, [r3, #12]
 8006938:	68db      	ldr	r3, [r3, #12]
 800693a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800693c:	693b      	ldr	r3, [r7, #16]
 800693e:	2b00      	cmp	r3, #0
 8006940:	d10b      	bne.n	800695a <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8006942:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006946:	f383 8811 	msr	BASEPRI, r3
 800694a:	f3bf 8f6f 	isb	sy
 800694e:	f3bf 8f4f 	dsb	sy
 8006952:	60fb      	str	r3, [r7, #12]
}
 8006954:	bf00      	nop
 8006956:	bf00      	nop
 8006958:	e7fd      	b.n	8006956 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800695a:	693b      	ldr	r3, [r7, #16]
 800695c:	3318      	adds	r3, #24
 800695e:	4618      	mov	r0, r3
 8006960:	f7fe fa32 	bl	8004dc8 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006964:	4b1d      	ldr	r3, [pc, #116]	@ (80069dc <xTaskRemoveFromEventList+0xb0>)
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	2b00      	cmp	r3, #0
 800696a:	d11d      	bne.n	80069a8 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800696c:	693b      	ldr	r3, [r7, #16]
 800696e:	3304      	adds	r3, #4
 8006970:	4618      	mov	r0, r3
 8006972:	f7fe fa29 	bl	8004dc8 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8006976:	693b      	ldr	r3, [r7, #16]
 8006978:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800697a:	4b19      	ldr	r3, [pc, #100]	@ (80069e0 <xTaskRemoveFromEventList+0xb4>)
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	429a      	cmp	r2, r3
 8006980:	d903      	bls.n	800698a <xTaskRemoveFromEventList+0x5e>
 8006982:	693b      	ldr	r3, [r7, #16]
 8006984:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006986:	4a16      	ldr	r2, [pc, #88]	@ (80069e0 <xTaskRemoveFromEventList+0xb4>)
 8006988:	6013      	str	r3, [r2, #0]
 800698a:	693b      	ldr	r3, [r7, #16]
 800698c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800698e:	4613      	mov	r3, r2
 8006990:	009b      	lsls	r3, r3, #2
 8006992:	4413      	add	r3, r2
 8006994:	009b      	lsls	r3, r3, #2
 8006996:	4a13      	ldr	r2, [pc, #76]	@ (80069e4 <xTaskRemoveFromEventList+0xb8>)
 8006998:	441a      	add	r2, r3
 800699a:	693b      	ldr	r3, [r7, #16]
 800699c:	3304      	adds	r3, #4
 800699e:	4619      	mov	r1, r3
 80069a0:	4610      	mov	r0, r2
 80069a2:	f7fe f9b4 	bl	8004d0e <vListInsertEnd>
 80069a6:	e005      	b.n	80069b4 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80069a8:	693b      	ldr	r3, [r7, #16]
 80069aa:	3318      	adds	r3, #24
 80069ac:	4619      	mov	r1, r3
 80069ae:	480e      	ldr	r0, [pc, #56]	@ (80069e8 <xTaskRemoveFromEventList+0xbc>)
 80069b0:	f7fe f9ad 	bl	8004d0e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80069b4:	693b      	ldr	r3, [r7, #16]
 80069b6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80069b8:	4b0c      	ldr	r3, [pc, #48]	@ (80069ec <xTaskRemoveFromEventList+0xc0>)
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80069be:	429a      	cmp	r2, r3
 80069c0:	d905      	bls.n	80069ce <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80069c2:	2301      	movs	r3, #1
 80069c4:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80069c6:	4b0a      	ldr	r3, [pc, #40]	@ (80069f0 <xTaskRemoveFromEventList+0xc4>)
 80069c8:	2201      	movs	r2, #1
 80069ca:	601a      	str	r2, [r3, #0]
 80069cc:	e001      	b.n	80069d2 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 80069ce:	2300      	movs	r3, #0
 80069d0:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80069d2:	697b      	ldr	r3, [r7, #20]
}
 80069d4:	4618      	mov	r0, r3
 80069d6:	3718      	adds	r7, #24
 80069d8:	46bd      	mov	sp, r7
 80069da:	bd80      	pop	{r7, pc}
 80069dc:	20006a80 	.word	0x20006a80
 80069e0:	20006a60 	.word	0x20006a60
 80069e4:	20006588 	.word	0x20006588
 80069e8:	20006a18 	.word	0x20006a18
 80069ec:	20006584 	.word	0x20006584
 80069f0:	20006a6c 	.word	0x20006a6c

080069f4 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80069f4:	b480      	push	{r7}
 80069f6:	b083      	sub	sp, #12
 80069f8:	af00      	add	r7, sp, #0
 80069fa:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80069fc:	4b06      	ldr	r3, [pc, #24]	@ (8006a18 <vTaskInternalSetTimeOutState+0x24>)
 80069fe:	681a      	ldr	r2, [r3, #0]
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8006a04:	4b05      	ldr	r3, [pc, #20]	@ (8006a1c <vTaskInternalSetTimeOutState+0x28>)
 8006a06:	681a      	ldr	r2, [r3, #0]
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	605a      	str	r2, [r3, #4]
}
 8006a0c:	bf00      	nop
 8006a0e:	370c      	adds	r7, #12
 8006a10:	46bd      	mov	sp, r7
 8006a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a16:	4770      	bx	lr
 8006a18:	20006a70 	.word	0x20006a70
 8006a1c:	20006a5c 	.word	0x20006a5c

08006a20 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8006a20:	b580      	push	{r7, lr}
 8006a22:	b088      	sub	sp, #32
 8006a24:	af00      	add	r7, sp, #0
 8006a26:	6078      	str	r0, [r7, #4]
 8006a28:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	2b00      	cmp	r3, #0
 8006a2e:	d10b      	bne.n	8006a48 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8006a30:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006a34:	f383 8811 	msr	BASEPRI, r3
 8006a38:	f3bf 8f6f 	isb	sy
 8006a3c:	f3bf 8f4f 	dsb	sy
 8006a40:	613b      	str	r3, [r7, #16]
}
 8006a42:	bf00      	nop
 8006a44:	bf00      	nop
 8006a46:	e7fd      	b.n	8006a44 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8006a48:	683b      	ldr	r3, [r7, #0]
 8006a4a:	2b00      	cmp	r3, #0
 8006a4c:	d10b      	bne.n	8006a66 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8006a4e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006a52:	f383 8811 	msr	BASEPRI, r3
 8006a56:	f3bf 8f6f 	isb	sy
 8006a5a:	f3bf 8f4f 	dsb	sy
 8006a5e:	60fb      	str	r3, [r7, #12]
}
 8006a60:	bf00      	nop
 8006a62:	bf00      	nop
 8006a64:	e7fd      	b.n	8006a62 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8006a66:	f000 ffa7 	bl	80079b8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8006a6a:	4b1d      	ldr	r3, [pc, #116]	@ (8006ae0 <xTaskCheckForTimeOut+0xc0>)
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	685b      	ldr	r3, [r3, #4]
 8006a74:	69ba      	ldr	r2, [r7, #24]
 8006a76:	1ad3      	subs	r3, r2, r3
 8006a78:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8006a7a:	683b      	ldr	r3, [r7, #0]
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006a82:	d102      	bne.n	8006a8a <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8006a84:	2300      	movs	r3, #0
 8006a86:	61fb      	str	r3, [r7, #28]
 8006a88:	e023      	b.n	8006ad2 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	681a      	ldr	r2, [r3, #0]
 8006a8e:	4b15      	ldr	r3, [pc, #84]	@ (8006ae4 <xTaskCheckForTimeOut+0xc4>)
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	429a      	cmp	r2, r3
 8006a94:	d007      	beq.n	8006aa6 <xTaskCheckForTimeOut+0x86>
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	685b      	ldr	r3, [r3, #4]
 8006a9a:	69ba      	ldr	r2, [r7, #24]
 8006a9c:	429a      	cmp	r2, r3
 8006a9e:	d302      	bcc.n	8006aa6 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8006aa0:	2301      	movs	r3, #1
 8006aa2:	61fb      	str	r3, [r7, #28]
 8006aa4:	e015      	b.n	8006ad2 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8006aa6:	683b      	ldr	r3, [r7, #0]
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	697a      	ldr	r2, [r7, #20]
 8006aac:	429a      	cmp	r2, r3
 8006aae:	d20b      	bcs.n	8006ac8 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8006ab0:	683b      	ldr	r3, [r7, #0]
 8006ab2:	681a      	ldr	r2, [r3, #0]
 8006ab4:	697b      	ldr	r3, [r7, #20]
 8006ab6:	1ad2      	subs	r2, r2, r3
 8006ab8:	683b      	ldr	r3, [r7, #0]
 8006aba:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8006abc:	6878      	ldr	r0, [r7, #4]
 8006abe:	f7ff ff99 	bl	80069f4 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8006ac2:	2300      	movs	r3, #0
 8006ac4:	61fb      	str	r3, [r7, #28]
 8006ac6:	e004      	b.n	8006ad2 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8006ac8:	683b      	ldr	r3, [r7, #0]
 8006aca:	2200      	movs	r2, #0
 8006acc:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8006ace:	2301      	movs	r3, #1
 8006ad0:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8006ad2:	f000 ffa3 	bl	8007a1c <vPortExitCritical>

	return xReturn;
 8006ad6:	69fb      	ldr	r3, [r7, #28]
}
 8006ad8:	4618      	mov	r0, r3
 8006ada:	3720      	adds	r7, #32
 8006adc:	46bd      	mov	sp, r7
 8006ade:	bd80      	pop	{r7, pc}
 8006ae0:	20006a5c 	.word	0x20006a5c
 8006ae4:	20006a70 	.word	0x20006a70

08006ae8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8006ae8:	b480      	push	{r7}
 8006aea:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8006aec:	4b03      	ldr	r3, [pc, #12]	@ (8006afc <vTaskMissedYield+0x14>)
 8006aee:	2201      	movs	r2, #1
 8006af0:	601a      	str	r2, [r3, #0]
}
 8006af2:	bf00      	nop
 8006af4:	46bd      	mov	sp, r7
 8006af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006afa:	4770      	bx	lr
 8006afc:	20006a6c 	.word	0x20006a6c

08006b00 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8006b00:	b580      	push	{r7, lr}
 8006b02:	b082      	sub	sp, #8
 8006b04:	af00      	add	r7, sp, #0
 8006b06:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8006b08:	f000 f852 	bl	8006bb0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8006b0c:	4b06      	ldr	r3, [pc, #24]	@ (8006b28 <prvIdleTask+0x28>)
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	2b01      	cmp	r3, #1
 8006b12:	d9f9      	bls.n	8006b08 <prvIdleTask+0x8>
			{
				taskYIELD();
 8006b14:	4b05      	ldr	r3, [pc, #20]	@ (8006b2c <prvIdleTask+0x2c>)
 8006b16:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006b1a:	601a      	str	r2, [r3, #0]
 8006b1c:	f3bf 8f4f 	dsb	sy
 8006b20:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8006b24:	e7f0      	b.n	8006b08 <prvIdleTask+0x8>
 8006b26:	bf00      	nop
 8006b28:	20006588 	.word	0x20006588
 8006b2c:	e000ed04 	.word	0xe000ed04

08006b30 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8006b30:	b580      	push	{r7, lr}
 8006b32:	b082      	sub	sp, #8
 8006b34:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006b36:	2300      	movs	r3, #0
 8006b38:	607b      	str	r3, [r7, #4]
 8006b3a:	e00c      	b.n	8006b56 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8006b3c:	687a      	ldr	r2, [r7, #4]
 8006b3e:	4613      	mov	r3, r2
 8006b40:	009b      	lsls	r3, r3, #2
 8006b42:	4413      	add	r3, r2
 8006b44:	009b      	lsls	r3, r3, #2
 8006b46:	4a12      	ldr	r2, [pc, #72]	@ (8006b90 <prvInitialiseTaskLists+0x60>)
 8006b48:	4413      	add	r3, r2
 8006b4a:	4618      	mov	r0, r3
 8006b4c:	f7fe f8b2 	bl	8004cb4 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	3301      	adds	r3, #1
 8006b54:	607b      	str	r3, [r7, #4]
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	2b37      	cmp	r3, #55	@ 0x37
 8006b5a:	d9ef      	bls.n	8006b3c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8006b5c:	480d      	ldr	r0, [pc, #52]	@ (8006b94 <prvInitialiseTaskLists+0x64>)
 8006b5e:	f7fe f8a9 	bl	8004cb4 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8006b62:	480d      	ldr	r0, [pc, #52]	@ (8006b98 <prvInitialiseTaskLists+0x68>)
 8006b64:	f7fe f8a6 	bl	8004cb4 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8006b68:	480c      	ldr	r0, [pc, #48]	@ (8006b9c <prvInitialiseTaskLists+0x6c>)
 8006b6a:	f7fe f8a3 	bl	8004cb4 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8006b6e:	480c      	ldr	r0, [pc, #48]	@ (8006ba0 <prvInitialiseTaskLists+0x70>)
 8006b70:	f7fe f8a0 	bl	8004cb4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8006b74:	480b      	ldr	r0, [pc, #44]	@ (8006ba4 <prvInitialiseTaskLists+0x74>)
 8006b76:	f7fe f89d 	bl	8004cb4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8006b7a:	4b0b      	ldr	r3, [pc, #44]	@ (8006ba8 <prvInitialiseTaskLists+0x78>)
 8006b7c:	4a05      	ldr	r2, [pc, #20]	@ (8006b94 <prvInitialiseTaskLists+0x64>)
 8006b7e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8006b80:	4b0a      	ldr	r3, [pc, #40]	@ (8006bac <prvInitialiseTaskLists+0x7c>)
 8006b82:	4a05      	ldr	r2, [pc, #20]	@ (8006b98 <prvInitialiseTaskLists+0x68>)
 8006b84:	601a      	str	r2, [r3, #0]
}
 8006b86:	bf00      	nop
 8006b88:	3708      	adds	r7, #8
 8006b8a:	46bd      	mov	sp, r7
 8006b8c:	bd80      	pop	{r7, pc}
 8006b8e:	bf00      	nop
 8006b90:	20006588 	.word	0x20006588
 8006b94:	200069e8 	.word	0x200069e8
 8006b98:	200069fc 	.word	0x200069fc
 8006b9c:	20006a18 	.word	0x20006a18
 8006ba0:	20006a2c 	.word	0x20006a2c
 8006ba4:	20006a44 	.word	0x20006a44
 8006ba8:	20006a10 	.word	0x20006a10
 8006bac:	20006a14 	.word	0x20006a14

08006bb0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8006bb0:	b580      	push	{r7, lr}
 8006bb2:	b082      	sub	sp, #8
 8006bb4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006bb6:	e019      	b.n	8006bec <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8006bb8:	f000 fefe 	bl	80079b8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006bbc:	4b10      	ldr	r3, [pc, #64]	@ (8006c00 <prvCheckTasksWaitingTermination+0x50>)
 8006bbe:	68db      	ldr	r3, [r3, #12]
 8006bc0:	68db      	ldr	r3, [r3, #12]
 8006bc2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	3304      	adds	r3, #4
 8006bc8:	4618      	mov	r0, r3
 8006bca:	f7fe f8fd 	bl	8004dc8 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8006bce:	4b0d      	ldr	r3, [pc, #52]	@ (8006c04 <prvCheckTasksWaitingTermination+0x54>)
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	3b01      	subs	r3, #1
 8006bd4:	4a0b      	ldr	r2, [pc, #44]	@ (8006c04 <prvCheckTasksWaitingTermination+0x54>)
 8006bd6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8006bd8:	4b0b      	ldr	r3, [pc, #44]	@ (8006c08 <prvCheckTasksWaitingTermination+0x58>)
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	3b01      	subs	r3, #1
 8006bde:	4a0a      	ldr	r2, [pc, #40]	@ (8006c08 <prvCheckTasksWaitingTermination+0x58>)
 8006be0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8006be2:	f000 ff1b 	bl	8007a1c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8006be6:	6878      	ldr	r0, [r7, #4]
 8006be8:	f000 f810 	bl	8006c0c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006bec:	4b06      	ldr	r3, [pc, #24]	@ (8006c08 <prvCheckTasksWaitingTermination+0x58>)
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	2b00      	cmp	r3, #0
 8006bf2:	d1e1      	bne.n	8006bb8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8006bf4:	bf00      	nop
 8006bf6:	bf00      	nop
 8006bf8:	3708      	adds	r7, #8
 8006bfa:	46bd      	mov	sp, r7
 8006bfc:	bd80      	pop	{r7, pc}
 8006bfe:	bf00      	nop
 8006c00:	20006a2c 	.word	0x20006a2c
 8006c04:	20006a58 	.word	0x20006a58
 8006c08:	20006a40 	.word	0x20006a40

08006c0c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8006c0c:	b580      	push	{r7, lr}
 8006c0e:	b084      	sub	sp, #16
 8006c10:	af00      	add	r7, sp, #0
 8006c12:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	3354      	adds	r3, #84	@ 0x54
 8006c18:	4618      	mov	r0, r3
 8006c1a:	f00b fbcd 	bl	80123b8 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8006c24:	2b00      	cmp	r3, #0
 8006c26:	d108      	bne.n	8006c3a <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006c2c:	4618      	mov	r0, r3
 8006c2e:	f001 f8b3 	bl	8007d98 <vPortFree>
				vPortFree( pxTCB );
 8006c32:	6878      	ldr	r0, [r7, #4]
 8006c34:	f001 f8b0 	bl	8007d98 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8006c38:	e019      	b.n	8006c6e <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8006c40:	2b01      	cmp	r3, #1
 8006c42:	d103      	bne.n	8006c4c <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8006c44:	6878      	ldr	r0, [r7, #4]
 8006c46:	f001 f8a7 	bl	8007d98 <vPortFree>
	}
 8006c4a:	e010      	b.n	8006c6e <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8006c52:	2b02      	cmp	r3, #2
 8006c54:	d00b      	beq.n	8006c6e <prvDeleteTCB+0x62>
	__asm volatile
 8006c56:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006c5a:	f383 8811 	msr	BASEPRI, r3
 8006c5e:	f3bf 8f6f 	isb	sy
 8006c62:	f3bf 8f4f 	dsb	sy
 8006c66:	60fb      	str	r3, [r7, #12]
}
 8006c68:	bf00      	nop
 8006c6a:	bf00      	nop
 8006c6c:	e7fd      	b.n	8006c6a <prvDeleteTCB+0x5e>
	}
 8006c6e:	bf00      	nop
 8006c70:	3710      	adds	r7, #16
 8006c72:	46bd      	mov	sp, r7
 8006c74:	bd80      	pop	{r7, pc}
	...

08006c78 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8006c78:	b480      	push	{r7}
 8006c7a:	b083      	sub	sp, #12
 8006c7c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006c7e:	4b0c      	ldr	r3, [pc, #48]	@ (8006cb0 <prvResetNextTaskUnblockTime+0x38>)
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	2b00      	cmp	r3, #0
 8006c86:	d104      	bne.n	8006c92 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8006c88:	4b0a      	ldr	r3, [pc, #40]	@ (8006cb4 <prvResetNextTaskUnblockTime+0x3c>)
 8006c8a:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8006c8e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8006c90:	e008      	b.n	8006ca4 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006c92:	4b07      	ldr	r3, [pc, #28]	@ (8006cb0 <prvResetNextTaskUnblockTime+0x38>)
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	68db      	ldr	r3, [r3, #12]
 8006c98:	68db      	ldr	r3, [r3, #12]
 8006c9a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	685b      	ldr	r3, [r3, #4]
 8006ca0:	4a04      	ldr	r2, [pc, #16]	@ (8006cb4 <prvResetNextTaskUnblockTime+0x3c>)
 8006ca2:	6013      	str	r3, [r2, #0]
}
 8006ca4:	bf00      	nop
 8006ca6:	370c      	adds	r7, #12
 8006ca8:	46bd      	mov	sp, r7
 8006caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cae:	4770      	bx	lr
 8006cb0:	20006a10 	.word	0x20006a10
 8006cb4:	20006a78 	.word	0x20006a78

08006cb8 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 8006cb8:	b480      	push	{r7}
 8006cba:	b083      	sub	sp, #12
 8006cbc:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 8006cbe:	4b05      	ldr	r3, [pc, #20]	@ (8006cd4 <xTaskGetCurrentTaskHandle+0x1c>)
 8006cc0:	681b      	ldr	r3, [r3, #0]
 8006cc2:	607b      	str	r3, [r7, #4]

		return xReturn;
 8006cc4:	687b      	ldr	r3, [r7, #4]
	}
 8006cc6:	4618      	mov	r0, r3
 8006cc8:	370c      	adds	r7, #12
 8006cca:	46bd      	mov	sp, r7
 8006ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cd0:	4770      	bx	lr
 8006cd2:	bf00      	nop
 8006cd4:	20006584 	.word	0x20006584

08006cd8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8006cd8:	b480      	push	{r7}
 8006cda:	b083      	sub	sp, #12
 8006cdc:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8006cde:	4b0b      	ldr	r3, [pc, #44]	@ (8006d0c <xTaskGetSchedulerState+0x34>)
 8006ce0:	681b      	ldr	r3, [r3, #0]
 8006ce2:	2b00      	cmp	r3, #0
 8006ce4:	d102      	bne.n	8006cec <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8006ce6:	2301      	movs	r3, #1
 8006ce8:	607b      	str	r3, [r7, #4]
 8006cea:	e008      	b.n	8006cfe <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006cec:	4b08      	ldr	r3, [pc, #32]	@ (8006d10 <xTaskGetSchedulerState+0x38>)
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	2b00      	cmp	r3, #0
 8006cf2:	d102      	bne.n	8006cfa <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8006cf4:	2302      	movs	r3, #2
 8006cf6:	607b      	str	r3, [r7, #4]
 8006cf8:	e001      	b.n	8006cfe <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8006cfa:	2300      	movs	r3, #0
 8006cfc:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8006cfe:	687b      	ldr	r3, [r7, #4]
	}
 8006d00:	4618      	mov	r0, r3
 8006d02:	370c      	adds	r7, #12
 8006d04:	46bd      	mov	sp, r7
 8006d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d0a:	4770      	bx	lr
 8006d0c:	20006a64 	.word	0x20006a64
 8006d10:	20006a80 	.word	0x20006a80

08006d14 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8006d14:	b580      	push	{r7, lr}
 8006d16:	b084      	sub	sp, #16
 8006d18:	af00      	add	r7, sp, #0
 8006d1a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8006d20:	2300      	movs	r3, #0
 8006d22:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	2b00      	cmp	r3, #0
 8006d28:	d051      	beq.n	8006dce <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8006d2a:	68bb      	ldr	r3, [r7, #8]
 8006d2c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006d2e:	4b2a      	ldr	r3, [pc, #168]	@ (8006dd8 <xTaskPriorityInherit+0xc4>)
 8006d30:	681b      	ldr	r3, [r3, #0]
 8006d32:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006d34:	429a      	cmp	r2, r3
 8006d36:	d241      	bcs.n	8006dbc <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8006d38:	68bb      	ldr	r3, [r7, #8]
 8006d3a:	699b      	ldr	r3, [r3, #24]
 8006d3c:	2b00      	cmp	r3, #0
 8006d3e:	db06      	blt.n	8006d4e <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006d40:	4b25      	ldr	r3, [pc, #148]	@ (8006dd8 <xTaskPriorityInherit+0xc4>)
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006d46:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8006d4a:	68bb      	ldr	r3, [r7, #8]
 8006d4c:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8006d4e:	68bb      	ldr	r3, [r7, #8]
 8006d50:	6959      	ldr	r1, [r3, #20]
 8006d52:	68bb      	ldr	r3, [r7, #8]
 8006d54:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006d56:	4613      	mov	r3, r2
 8006d58:	009b      	lsls	r3, r3, #2
 8006d5a:	4413      	add	r3, r2
 8006d5c:	009b      	lsls	r3, r3, #2
 8006d5e:	4a1f      	ldr	r2, [pc, #124]	@ (8006ddc <xTaskPriorityInherit+0xc8>)
 8006d60:	4413      	add	r3, r2
 8006d62:	4299      	cmp	r1, r3
 8006d64:	d122      	bne.n	8006dac <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006d66:	68bb      	ldr	r3, [r7, #8]
 8006d68:	3304      	adds	r3, #4
 8006d6a:	4618      	mov	r0, r3
 8006d6c:	f7fe f82c 	bl	8004dc8 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8006d70:	4b19      	ldr	r3, [pc, #100]	@ (8006dd8 <xTaskPriorityInherit+0xc4>)
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006d76:	68bb      	ldr	r3, [r7, #8]
 8006d78:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8006d7a:	68bb      	ldr	r3, [r7, #8]
 8006d7c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006d7e:	4b18      	ldr	r3, [pc, #96]	@ (8006de0 <xTaskPriorityInherit+0xcc>)
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	429a      	cmp	r2, r3
 8006d84:	d903      	bls.n	8006d8e <xTaskPriorityInherit+0x7a>
 8006d86:	68bb      	ldr	r3, [r7, #8]
 8006d88:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006d8a:	4a15      	ldr	r2, [pc, #84]	@ (8006de0 <xTaskPriorityInherit+0xcc>)
 8006d8c:	6013      	str	r3, [r2, #0]
 8006d8e:	68bb      	ldr	r3, [r7, #8]
 8006d90:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006d92:	4613      	mov	r3, r2
 8006d94:	009b      	lsls	r3, r3, #2
 8006d96:	4413      	add	r3, r2
 8006d98:	009b      	lsls	r3, r3, #2
 8006d9a:	4a10      	ldr	r2, [pc, #64]	@ (8006ddc <xTaskPriorityInherit+0xc8>)
 8006d9c:	441a      	add	r2, r3
 8006d9e:	68bb      	ldr	r3, [r7, #8]
 8006da0:	3304      	adds	r3, #4
 8006da2:	4619      	mov	r1, r3
 8006da4:	4610      	mov	r0, r2
 8006da6:	f7fd ffb2 	bl	8004d0e <vListInsertEnd>
 8006daa:	e004      	b.n	8006db6 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8006dac:	4b0a      	ldr	r3, [pc, #40]	@ (8006dd8 <xTaskPriorityInherit+0xc4>)
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006db2:	68bb      	ldr	r3, [r7, #8]
 8006db4:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8006db6:	2301      	movs	r3, #1
 8006db8:	60fb      	str	r3, [r7, #12]
 8006dba:	e008      	b.n	8006dce <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8006dbc:	68bb      	ldr	r3, [r7, #8]
 8006dbe:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8006dc0:	4b05      	ldr	r3, [pc, #20]	@ (8006dd8 <xTaskPriorityInherit+0xc4>)
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006dc6:	429a      	cmp	r2, r3
 8006dc8:	d201      	bcs.n	8006dce <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8006dca:	2301      	movs	r3, #1
 8006dcc:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8006dce:	68fb      	ldr	r3, [r7, #12]
	}
 8006dd0:	4618      	mov	r0, r3
 8006dd2:	3710      	adds	r7, #16
 8006dd4:	46bd      	mov	sp, r7
 8006dd6:	bd80      	pop	{r7, pc}
 8006dd8:	20006584 	.word	0x20006584
 8006ddc:	20006588 	.word	0x20006588
 8006de0:	20006a60 	.word	0x20006a60

08006de4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8006de4:	b580      	push	{r7, lr}
 8006de6:	b086      	sub	sp, #24
 8006de8:	af00      	add	r7, sp, #0
 8006dea:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8006df0:	2300      	movs	r3, #0
 8006df2:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	2b00      	cmp	r3, #0
 8006df8:	d058      	beq.n	8006eac <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8006dfa:	4b2f      	ldr	r3, [pc, #188]	@ (8006eb8 <xTaskPriorityDisinherit+0xd4>)
 8006dfc:	681b      	ldr	r3, [r3, #0]
 8006dfe:	693a      	ldr	r2, [r7, #16]
 8006e00:	429a      	cmp	r2, r3
 8006e02:	d00b      	beq.n	8006e1c <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8006e04:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006e08:	f383 8811 	msr	BASEPRI, r3
 8006e0c:	f3bf 8f6f 	isb	sy
 8006e10:	f3bf 8f4f 	dsb	sy
 8006e14:	60fb      	str	r3, [r7, #12]
}
 8006e16:	bf00      	nop
 8006e18:	bf00      	nop
 8006e1a:	e7fd      	b.n	8006e18 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8006e1c:	693b      	ldr	r3, [r7, #16]
 8006e1e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006e20:	2b00      	cmp	r3, #0
 8006e22:	d10b      	bne.n	8006e3c <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8006e24:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006e28:	f383 8811 	msr	BASEPRI, r3
 8006e2c:	f3bf 8f6f 	isb	sy
 8006e30:	f3bf 8f4f 	dsb	sy
 8006e34:	60bb      	str	r3, [r7, #8]
}
 8006e36:	bf00      	nop
 8006e38:	bf00      	nop
 8006e3a:	e7fd      	b.n	8006e38 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8006e3c:	693b      	ldr	r3, [r7, #16]
 8006e3e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006e40:	1e5a      	subs	r2, r3, #1
 8006e42:	693b      	ldr	r3, [r7, #16]
 8006e44:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8006e46:	693b      	ldr	r3, [r7, #16]
 8006e48:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006e4a:	693b      	ldr	r3, [r7, #16]
 8006e4c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006e4e:	429a      	cmp	r2, r3
 8006e50:	d02c      	beq.n	8006eac <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8006e52:	693b      	ldr	r3, [r7, #16]
 8006e54:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006e56:	2b00      	cmp	r3, #0
 8006e58:	d128      	bne.n	8006eac <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006e5a:	693b      	ldr	r3, [r7, #16]
 8006e5c:	3304      	adds	r3, #4
 8006e5e:	4618      	mov	r0, r3
 8006e60:	f7fd ffb2 	bl	8004dc8 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8006e64:	693b      	ldr	r3, [r7, #16]
 8006e66:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8006e68:	693b      	ldr	r3, [r7, #16]
 8006e6a:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006e6c:	693b      	ldr	r3, [r7, #16]
 8006e6e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006e70:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8006e74:	693b      	ldr	r3, [r7, #16]
 8006e76:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8006e78:	693b      	ldr	r3, [r7, #16]
 8006e7a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006e7c:	4b0f      	ldr	r3, [pc, #60]	@ (8006ebc <xTaskPriorityDisinherit+0xd8>)
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	429a      	cmp	r2, r3
 8006e82:	d903      	bls.n	8006e8c <xTaskPriorityDisinherit+0xa8>
 8006e84:	693b      	ldr	r3, [r7, #16]
 8006e86:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006e88:	4a0c      	ldr	r2, [pc, #48]	@ (8006ebc <xTaskPriorityDisinherit+0xd8>)
 8006e8a:	6013      	str	r3, [r2, #0]
 8006e8c:	693b      	ldr	r3, [r7, #16]
 8006e8e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006e90:	4613      	mov	r3, r2
 8006e92:	009b      	lsls	r3, r3, #2
 8006e94:	4413      	add	r3, r2
 8006e96:	009b      	lsls	r3, r3, #2
 8006e98:	4a09      	ldr	r2, [pc, #36]	@ (8006ec0 <xTaskPriorityDisinherit+0xdc>)
 8006e9a:	441a      	add	r2, r3
 8006e9c:	693b      	ldr	r3, [r7, #16]
 8006e9e:	3304      	adds	r3, #4
 8006ea0:	4619      	mov	r1, r3
 8006ea2:	4610      	mov	r0, r2
 8006ea4:	f7fd ff33 	bl	8004d0e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8006ea8:	2301      	movs	r3, #1
 8006eaa:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8006eac:	697b      	ldr	r3, [r7, #20]
	}
 8006eae:	4618      	mov	r0, r3
 8006eb0:	3718      	adds	r7, #24
 8006eb2:	46bd      	mov	sp, r7
 8006eb4:	bd80      	pop	{r7, pc}
 8006eb6:	bf00      	nop
 8006eb8:	20006584 	.word	0x20006584
 8006ebc:	20006a60 	.word	0x20006a60
 8006ec0:	20006588 	.word	0x20006588

08006ec4 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8006ec4:	b580      	push	{r7, lr}
 8006ec6:	b088      	sub	sp, #32
 8006ec8:	af00      	add	r7, sp, #0
 8006eca:	6078      	str	r0, [r7, #4]
 8006ecc:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8006ed2:	2301      	movs	r3, #1
 8006ed4:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	2b00      	cmp	r3, #0
 8006eda:	d06c      	beq.n	8006fb6 <vTaskPriorityDisinheritAfterTimeout+0xf2>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8006edc:	69bb      	ldr	r3, [r7, #24]
 8006ede:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006ee0:	2b00      	cmp	r3, #0
 8006ee2:	d10b      	bne.n	8006efc <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 8006ee4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006ee8:	f383 8811 	msr	BASEPRI, r3
 8006eec:	f3bf 8f6f 	isb	sy
 8006ef0:	f3bf 8f4f 	dsb	sy
 8006ef4:	60fb      	str	r3, [r7, #12]
}
 8006ef6:	bf00      	nop
 8006ef8:	bf00      	nop
 8006efa:	e7fd      	b.n	8006ef8 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8006efc:	69bb      	ldr	r3, [r7, #24]
 8006efe:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006f00:	683a      	ldr	r2, [r7, #0]
 8006f02:	429a      	cmp	r2, r3
 8006f04:	d902      	bls.n	8006f0c <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8006f06:	683b      	ldr	r3, [r7, #0]
 8006f08:	61fb      	str	r3, [r7, #28]
 8006f0a:	e002      	b.n	8006f12 <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8006f0c:	69bb      	ldr	r3, [r7, #24]
 8006f0e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006f10:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8006f12:	69bb      	ldr	r3, [r7, #24]
 8006f14:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006f16:	69fa      	ldr	r2, [r7, #28]
 8006f18:	429a      	cmp	r2, r3
 8006f1a:	d04c      	beq.n	8006fb6 <vTaskPriorityDisinheritAfterTimeout+0xf2>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8006f1c:	69bb      	ldr	r3, [r7, #24]
 8006f1e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006f20:	697a      	ldr	r2, [r7, #20]
 8006f22:	429a      	cmp	r2, r3
 8006f24:	d147      	bne.n	8006fb6 <vTaskPriorityDisinheritAfterTimeout+0xf2>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8006f26:	4b26      	ldr	r3, [pc, #152]	@ (8006fc0 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8006f28:	681b      	ldr	r3, [r3, #0]
 8006f2a:	69ba      	ldr	r2, [r7, #24]
 8006f2c:	429a      	cmp	r2, r3
 8006f2e:	d10b      	bne.n	8006f48 <vTaskPriorityDisinheritAfterTimeout+0x84>
	__asm volatile
 8006f30:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006f34:	f383 8811 	msr	BASEPRI, r3
 8006f38:	f3bf 8f6f 	isb	sy
 8006f3c:	f3bf 8f4f 	dsb	sy
 8006f40:	60bb      	str	r3, [r7, #8]
}
 8006f42:	bf00      	nop
 8006f44:	bf00      	nop
 8006f46:	e7fd      	b.n	8006f44 <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8006f48:	69bb      	ldr	r3, [r7, #24]
 8006f4a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006f4c:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8006f4e:	69bb      	ldr	r3, [r7, #24]
 8006f50:	69fa      	ldr	r2, [r7, #28]
 8006f52:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8006f54:	69bb      	ldr	r3, [r7, #24]
 8006f56:	699b      	ldr	r3, [r3, #24]
 8006f58:	2b00      	cmp	r3, #0
 8006f5a:	db04      	blt.n	8006f66 <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006f5c:	69fb      	ldr	r3, [r7, #28]
 8006f5e:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8006f62:	69bb      	ldr	r3, [r7, #24]
 8006f64:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8006f66:	69bb      	ldr	r3, [r7, #24]
 8006f68:	6959      	ldr	r1, [r3, #20]
 8006f6a:	693a      	ldr	r2, [r7, #16]
 8006f6c:	4613      	mov	r3, r2
 8006f6e:	009b      	lsls	r3, r3, #2
 8006f70:	4413      	add	r3, r2
 8006f72:	009b      	lsls	r3, r3, #2
 8006f74:	4a13      	ldr	r2, [pc, #76]	@ (8006fc4 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8006f76:	4413      	add	r3, r2
 8006f78:	4299      	cmp	r1, r3
 8006f7a:	d11c      	bne.n	8006fb6 <vTaskPriorityDisinheritAfterTimeout+0xf2>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006f7c:	69bb      	ldr	r3, [r7, #24]
 8006f7e:	3304      	adds	r3, #4
 8006f80:	4618      	mov	r0, r3
 8006f82:	f7fd ff21 	bl	8004dc8 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8006f86:	69bb      	ldr	r3, [r7, #24]
 8006f88:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006f8a:	4b0f      	ldr	r3, [pc, #60]	@ (8006fc8 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8006f8c:	681b      	ldr	r3, [r3, #0]
 8006f8e:	429a      	cmp	r2, r3
 8006f90:	d903      	bls.n	8006f9a <vTaskPriorityDisinheritAfterTimeout+0xd6>
 8006f92:	69bb      	ldr	r3, [r7, #24]
 8006f94:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006f96:	4a0c      	ldr	r2, [pc, #48]	@ (8006fc8 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8006f98:	6013      	str	r3, [r2, #0]
 8006f9a:	69bb      	ldr	r3, [r7, #24]
 8006f9c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006f9e:	4613      	mov	r3, r2
 8006fa0:	009b      	lsls	r3, r3, #2
 8006fa2:	4413      	add	r3, r2
 8006fa4:	009b      	lsls	r3, r3, #2
 8006fa6:	4a07      	ldr	r2, [pc, #28]	@ (8006fc4 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8006fa8:	441a      	add	r2, r3
 8006faa:	69bb      	ldr	r3, [r7, #24]
 8006fac:	3304      	adds	r3, #4
 8006fae:	4619      	mov	r1, r3
 8006fb0:	4610      	mov	r0, r2
 8006fb2:	f7fd feac 	bl	8004d0e <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006fb6:	bf00      	nop
 8006fb8:	3720      	adds	r7, #32
 8006fba:	46bd      	mov	sp, r7
 8006fbc:	bd80      	pop	{r7, pc}
 8006fbe:	bf00      	nop
 8006fc0:	20006584 	.word	0x20006584
 8006fc4:	20006588 	.word	0x20006588
 8006fc8:	20006a60 	.word	0x20006a60

08006fcc <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8006fcc:	b480      	push	{r7}
 8006fce:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8006fd0:	4b07      	ldr	r3, [pc, #28]	@ (8006ff0 <pvTaskIncrementMutexHeldCount+0x24>)
 8006fd2:	681b      	ldr	r3, [r3, #0]
 8006fd4:	2b00      	cmp	r3, #0
 8006fd6:	d004      	beq.n	8006fe2 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8006fd8:	4b05      	ldr	r3, [pc, #20]	@ (8006ff0 <pvTaskIncrementMutexHeldCount+0x24>)
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8006fde:	3201      	adds	r2, #1
 8006fe0:	651a      	str	r2, [r3, #80]	@ 0x50
		}

		return pxCurrentTCB;
 8006fe2:	4b03      	ldr	r3, [pc, #12]	@ (8006ff0 <pvTaskIncrementMutexHeldCount+0x24>)
 8006fe4:	681b      	ldr	r3, [r3, #0]
	}
 8006fe6:	4618      	mov	r0, r3
 8006fe8:	46bd      	mov	sp, r7
 8006fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fee:	4770      	bx	lr
 8006ff0:	20006584 	.word	0x20006584

08006ff4 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8006ff4:	b580      	push	{r7, lr}
 8006ff6:	b084      	sub	sp, #16
 8006ff8:	af00      	add	r7, sp, #0
 8006ffa:	6078      	str	r0, [r7, #4]
 8006ffc:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8006ffe:	4b21      	ldr	r3, [pc, #132]	@ (8007084 <prvAddCurrentTaskToDelayedList+0x90>)
 8007000:	681b      	ldr	r3, [r3, #0]
 8007002:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007004:	4b20      	ldr	r3, [pc, #128]	@ (8007088 <prvAddCurrentTaskToDelayedList+0x94>)
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	3304      	adds	r3, #4
 800700a:	4618      	mov	r0, r3
 800700c:	f7fd fedc 	bl	8004dc8 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007016:	d10a      	bne.n	800702e <prvAddCurrentTaskToDelayedList+0x3a>
 8007018:	683b      	ldr	r3, [r7, #0]
 800701a:	2b00      	cmp	r3, #0
 800701c:	d007      	beq.n	800702e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800701e:	4b1a      	ldr	r3, [pc, #104]	@ (8007088 <prvAddCurrentTaskToDelayedList+0x94>)
 8007020:	681b      	ldr	r3, [r3, #0]
 8007022:	3304      	adds	r3, #4
 8007024:	4619      	mov	r1, r3
 8007026:	4819      	ldr	r0, [pc, #100]	@ (800708c <prvAddCurrentTaskToDelayedList+0x98>)
 8007028:	f7fd fe71 	bl	8004d0e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800702c:	e026      	b.n	800707c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800702e:	68fa      	ldr	r2, [r7, #12]
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	4413      	add	r3, r2
 8007034:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8007036:	4b14      	ldr	r3, [pc, #80]	@ (8007088 <prvAddCurrentTaskToDelayedList+0x94>)
 8007038:	681b      	ldr	r3, [r3, #0]
 800703a:	68ba      	ldr	r2, [r7, #8]
 800703c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800703e:	68ba      	ldr	r2, [r7, #8]
 8007040:	68fb      	ldr	r3, [r7, #12]
 8007042:	429a      	cmp	r2, r3
 8007044:	d209      	bcs.n	800705a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007046:	4b12      	ldr	r3, [pc, #72]	@ (8007090 <prvAddCurrentTaskToDelayedList+0x9c>)
 8007048:	681a      	ldr	r2, [r3, #0]
 800704a:	4b0f      	ldr	r3, [pc, #60]	@ (8007088 <prvAddCurrentTaskToDelayedList+0x94>)
 800704c:	681b      	ldr	r3, [r3, #0]
 800704e:	3304      	adds	r3, #4
 8007050:	4619      	mov	r1, r3
 8007052:	4610      	mov	r0, r2
 8007054:	f7fd fe7f 	bl	8004d56 <vListInsert>
}
 8007058:	e010      	b.n	800707c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800705a:	4b0e      	ldr	r3, [pc, #56]	@ (8007094 <prvAddCurrentTaskToDelayedList+0xa0>)
 800705c:	681a      	ldr	r2, [r3, #0]
 800705e:	4b0a      	ldr	r3, [pc, #40]	@ (8007088 <prvAddCurrentTaskToDelayedList+0x94>)
 8007060:	681b      	ldr	r3, [r3, #0]
 8007062:	3304      	adds	r3, #4
 8007064:	4619      	mov	r1, r3
 8007066:	4610      	mov	r0, r2
 8007068:	f7fd fe75 	bl	8004d56 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800706c:	4b0a      	ldr	r3, [pc, #40]	@ (8007098 <prvAddCurrentTaskToDelayedList+0xa4>)
 800706e:	681b      	ldr	r3, [r3, #0]
 8007070:	68ba      	ldr	r2, [r7, #8]
 8007072:	429a      	cmp	r2, r3
 8007074:	d202      	bcs.n	800707c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8007076:	4a08      	ldr	r2, [pc, #32]	@ (8007098 <prvAddCurrentTaskToDelayedList+0xa4>)
 8007078:	68bb      	ldr	r3, [r7, #8]
 800707a:	6013      	str	r3, [r2, #0]
}
 800707c:	bf00      	nop
 800707e:	3710      	adds	r7, #16
 8007080:	46bd      	mov	sp, r7
 8007082:	bd80      	pop	{r7, pc}
 8007084:	20006a5c 	.word	0x20006a5c
 8007088:	20006584 	.word	0x20006584
 800708c:	20006a44 	.word	0x20006a44
 8007090:	20006a14 	.word	0x20006a14
 8007094:	20006a10 	.word	0x20006a10
 8007098:	20006a78 	.word	0x20006a78

0800709c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800709c:	b580      	push	{r7, lr}
 800709e:	b08a      	sub	sp, #40	@ 0x28
 80070a0:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80070a2:	2300      	movs	r3, #0
 80070a4:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80070a6:	f000 fb13 	bl	80076d0 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80070aa:	4b1d      	ldr	r3, [pc, #116]	@ (8007120 <xTimerCreateTimerTask+0x84>)
 80070ac:	681b      	ldr	r3, [r3, #0]
 80070ae:	2b00      	cmp	r3, #0
 80070b0:	d021      	beq.n	80070f6 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80070b2:	2300      	movs	r3, #0
 80070b4:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80070b6:	2300      	movs	r3, #0
 80070b8:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80070ba:	1d3a      	adds	r2, r7, #4
 80070bc:	f107 0108 	add.w	r1, r7, #8
 80070c0:	f107 030c 	add.w	r3, r7, #12
 80070c4:	4618      	mov	r0, r3
 80070c6:	f7fd fddb 	bl	8004c80 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80070ca:	6879      	ldr	r1, [r7, #4]
 80070cc:	68bb      	ldr	r3, [r7, #8]
 80070ce:	68fa      	ldr	r2, [r7, #12]
 80070d0:	9202      	str	r2, [sp, #8]
 80070d2:	9301      	str	r3, [sp, #4]
 80070d4:	2302      	movs	r3, #2
 80070d6:	9300      	str	r3, [sp, #0]
 80070d8:	2300      	movs	r3, #0
 80070da:	460a      	mov	r2, r1
 80070dc:	4911      	ldr	r1, [pc, #68]	@ (8007124 <xTimerCreateTimerTask+0x88>)
 80070de:	4812      	ldr	r0, [pc, #72]	@ (8007128 <xTimerCreateTimerTask+0x8c>)
 80070e0:	f7fe ff80 	bl	8005fe4 <xTaskCreateStatic>
 80070e4:	4603      	mov	r3, r0
 80070e6:	4a11      	ldr	r2, [pc, #68]	@ (800712c <xTimerCreateTimerTask+0x90>)
 80070e8:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80070ea:	4b10      	ldr	r3, [pc, #64]	@ (800712c <xTimerCreateTimerTask+0x90>)
 80070ec:	681b      	ldr	r3, [r3, #0]
 80070ee:	2b00      	cmp	r3, #0
 80070f0:	d001      	beq.n	80070f6 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80070f2:	2301      	movs	r3, #1
 80070f4:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80070f6:	697b      	ldr	r3, [r7, #20]
 80070f8:	2b00      	cmp	r3, #0
 80070fa:	d10b      	bne.n	8007114 <xTimerCreateTimerTask+0x78>
	__asm volatile
 80070fc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007100:	f383 8811 	msr	BASEPRI, r3
 8007104:	f3bf 8f6f 	isb	sy
 8007108:	f3bf 8f4f 	dsb	sy
 800710c:	613b      	str	r3, [r7, #16]
}
 800710e:	bf00      	nop
 8007110:	bf00      	nop
 8007112:	e7fd      	b.n	8007110 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8007114:	697b      	ldr	r3, [r7, #20]
}
 8007116:	4618      	mov	r0, r3
 8007118:	3718      	adds	r7, #24
 800711a:	46bd      	mov	sp, r7
 800711c:	bd80      	pop	{r7, pc}
 800711e:	bf00      	nop
 8007120:	20006ab4 	.word	0x20006ab4
 8007124:	0801320c 	.word	0x0801320c
 8007128:	08007269 	.word	0x08007269
 800712c:	20006ab8 	.word	0x20006ab8

08007130 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8007130:	b580      	push	{r7, lr}
 8007132:	b08a      	sub	sp, #40	@ 0x28
 8007134:	af00      	add	r7, sp, #0
 8007136:	60f8      	str	r0, [r7, #12]
 8007138:	60b9      	str	r1, [r7, #8]
 800713a:	607a      	str	r2, [r7, #4]
 800713c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800713e:	2300      	movs	r3, #0
 8007140:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8007142:	68fb      	ldr	r3, [r7, #12]
 8007144:	2b00      	cmp	r3, #0
 8007146:	d10b      	bne.n	8007160 <xTimerGenericCommand+0x30>
	__asm volatile
 8007148:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800714c:	f383 8811 	msr	BASEPRI, r3
 8007150:	f3bf 8f6f 	isb	sy
 8007154:	f3bf 8f4f 	dsb	sy
 8007158:	623b      	str	r3, [r7, #32]
}
 800715a:	bf00      	nop
 800715c:	bf00      	nop
 800715e:	e7fd      	b.n	800715c <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8007160:	4b19      	ldr	r3, [pc, #100]	@ (80071c8 <xTimerGenericCommand+0x98>)
 8007162:	681b      	ldr	r3, [r3, #0]
 8007164:	2b00      	cmp	r3, #0
 8007166:	d02a      	beq.n	80071be <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8007168:	68bb      	ldr	r3, [r7, #8]
 800716a:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8007170:	68fb      	ldr	r3, [r7, #12]
 8007172:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8007174:	68bb      	ldr	r3, [r7, #8]
 8007176:	2b05      	cmp	r3, #5
 8007178:	dc18      	bgt.n	80071ac <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800717a:	f7ff fdad 	bl	8006cd8 <xTaskGetSchedulerState>
 800717e:	4603      	mov	r3, r0
 8007180:	2b02      	cmp	r3, #2
 8007182:	d109      	bne.n	8007198 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8007184:	4b10      	ldr	r3, [pc, #64]	@ (80071c8 <xTimerGenericCommand+0x98>)
 8007186:	6818      	ldr	r0, [r3, #0]
 8007188:	f107 0110 	add.w	r1, r7, #16
 800718c:	2300      	movs	r3, #0
 800718e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007190:	f7fe f8b0 	bl	80052f4 <xQueueGenericSend>
 8007194:	6278      	str	r0, [r7, #36]	@ 0x24
 8007196:	e012      	b.n	80071be <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8007198:	4b0b      	ldr	r3, [pc, #44]	@ (80071c8 <xTimerGenericCommand+0x98>)
 800719a:	6818      	ldr	r0, [r3, #0]
 800719c:	f107 0110 	add.w	r1, r7, #16
 80071a0:	2300      	movs	r3, #0
 80071a2:	2200      	movs	r2, #0
 80071a4:	f7fe f8a6 	bl	80052f4 <xQueueGenericSend>
 80071a8:	6278      	str	r0, [r7, #36]	@ 0x24
 80071aa:	e008      	b.n	80071be <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80071ac:	4b06      	ldr	r3, [pc, #24]	@ (80071c8 <xTimerGenericCommand+0x98>)
 80071ae:	6818      	ldr	r0, [r3, #0]
 80071b0:	f107 0110 	add.w	r1, r7, #16
 80071b4:	2300      	movs	r3, #0
 80071b6:	683a      	ldr	r2, [r7, #0]
 80071b8:	f7fe f99e 	bl	80054f8 <xQueueGenericSendFromISR>
 80071bc:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80071be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80071c0:	4618      	mov	r0, r3
 80071c2:	3728      	adds	r7, #40	@ 0x28
 80071c4:	46bd      	mov	sp, r7
 80071c6:	bd80      	pop	{r7, pc}
 80071c8:	20006ab4 	.word	0x20006ab4

080071cc <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80071cc:	b580      	push	{r7, lr}
 80071ce:	b088      	sub	sp, #32
 80071d0:	af02      	add	r7, sp, #8
 80071d2:	6078      	str	r0, [r7, #4]
 80071d4:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80071d6:	4b23      	ldr	r3, [pc, #140]	@ (8007264 <prvProcessExpiredTimer+0x98>)
 80071d8:	681b      	ldr	r3, [r3, #0]
 80071da:	68db      	ldr	r3, [r3, #12]
 80071dc:	68db      	ldr	r3, [r3, #12]
 80071de:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80071e0:	697b      	ldr	r3, [r7, #20]
 80071e2:	3304      	adds	r3, #4
 80071e4:	4618      	mov	r0, r3
 80071e6:	f7fd fdef 	bl	8004dc8 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80071ea:	697b      	ldr	r3, [r7, #20]
 80071ec:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80071f0:	f003 0304 	and.w	r3, r3, #4
 80071f4:	2b00      	cmp	r3, #0
 80071f6:	d023      	beq.n	8007240 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80071f8:	697b      	ldr	r3, [r7, #20]
 80071fa:	699a      	ldr	r2, [r3, #24]
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	18d1      	adds	r1, r2, r3
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	683a      	ldr	r2, [r7, #0]
 8007204:	6978      	ldr	r0, [r7, #20]
 8007206:	f000 f8d5 	bl	80073b4 <prvInsertTimerInActiveList>
 800720a:	4603      	mov	r3, r0
 800720c:	2b00      	cmp	r3, #0
 800720e:	d020      	beq.n	8007252 <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007210:	2300      	movs	r3, #0
 8007212:	9300      	str	r3, [sp, #0]
 8007214:	2300      	movs	r3, #0
 8007216:	687a      	ldr	r2, [r7, #4]
 8007218:	2100      	movs	r1, #0
 800721a:	6978      	ldr	r0, [r7, #20]
 800721c:	f7ff ff88 	bl	8007130 <xTimerGenericCommand>
 8007220:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8007222:	693b      	ldr	r3, [r7, #16]
 8007224:	2b00      	cmp	r3, #0
 8007226:	d114      	bne.n	8007252 <prvProcessExpiredTimer+0x86>
	__asm volatile
 8007228:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800722c:	f383 8811 	msr	BASEPRI, r3
 8007230:	f3bf 8f6f 	isb	sy
 8007234:	f3bf 8f4f 	dsb	sy
 8007238:	60fb      	str	r3, [r7, #12]
}
 800723a:	bf00      	nop
 800723c:	bf00      	nop
 800723e:	e7fd      	b.n	800723c <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007240:	697b      	ldr	r3, [r7, #20]
 8007242:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007246:	f023 0301 	bic.w	r3, r3, #1
 800724a:	b2da      	uxtb	r2, r3
 800724c:	697b      	ldr	r3, [r7, #20]
 800724e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007252:	697b      	ldr	r3, [r7, #20]
 8007254:	6a1b      	ldr	r3, [r3, #32]
 8007256:	6978      	ldr	r0, [r7, #20]
 8007258:	4798      	blx	r3
}
 800725a:	bf00      	nop
 800725c:	3718      	adds	r7, #24
 800725e:	46bd      	mov	sp, r7
 8007260:	bd80      	pop	{r7, pc}
 8007262:	bf00      	nop
 8007264:	20006aac 	.word	0x20006aac

08007268 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8007268:	b580      	push	{r7, lr}
 800726a:	b084      	sub	sp, #16
 800726c:	af00      	add	r7, sp, #0
 800726e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8007270:	f107 0308 	add.w	r3, r7, #8
 8007274:	4618      	mov	r0, r3
 8007276:	f000 f859 	bl	800732c <prvGetNextExpireTime>
 800727a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800727c:	68bb      	ldr	r3, [r7, #8]
 800727e:	4619      	mov	r1, r3
 8007280:	68f8      	ldr	r0, [r7, #12]
 8007282:	f000 f805 	bl	8007290 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8007286:	f000 f8d7 	bl	8007438 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800728a:	bf00      	nop
 800728c:	e7f0      	b.n	8007270 <prvTimerTask+0x8>
	...

08007290 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8007290:	b580      	push	{r7, lr}
 8007292:	b084      	sub	sp, #16
 8007294:	af00      	add	r7, sp, #0
 8007296:	6078      	str	r0, [r7, #4]
 8007298:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800729a:	f7ff f907 	bl	80064ac <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800729e:	f107 0308 	add.w	r3, r7, #8
 80072a2:	4618      	mov	r0, r3
 80072a4:	f000 f866 	bl	8007374 <prvSampleTimeNow>
 80072a8:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80072aa:	68bb      	ldr	r3, [r7, #8]
 80072ac:	2b00      	cmp	r3, #0
 80072ae:	d130      	bne.n	8007312 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80072b0:	683b      	ldr	r3, [r7, #0]
 80072b2:	2b00      	cmp	r3, #0
 80072b4:	d10a      	bne.n	80072cc <prvProcessTimerOrBlockTask+0x3c>
 80072b6:	687a      	ldr	r2, [r7, #4]
 80072b8:	68fb      	ldr	r3, [r7, #12]
 80072ba:	429a      	cmp	r2, r3
 80072bc:	d806      	bhi.n	80072cc <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80072be:	f7ff f903 	bl	80064c8 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80072c2:	68f9      	ldr	r1, [r7, #12]
 80072c4:	6878      	ldr	r0, [r7, #4]
 80072c6:	f7ff ff81 	bl	80071cc <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80072ca:	e024      	b.n	8007316 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80072cc:	683b      	ldr	r3, [r7, #0]
 80072ce:	2b00      	cmp	r3, #0
 80072d0:	d008      	beq.n	80072e4 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80072d2:	4b13      	ldr	r3, [pc, #76]	@ (8007320 <prvProcessTimerOrBlockTask+0x90>)
 80072d4:	681b      	ldr	r3, [r3, #0]
 80072d6:	681b      	ldr	r3, [r3, #0]
 80072d8:	2b00      	cmp	r3, #0
 80072da:	d101      	bne.n	80072e0 <prvProcessTimerOrBlockTask+0x50>
 80072dc:	2301      	movs	r3, #1
 80072de:	e000      	b.n	80072e2 <prvProcessTimerOrBlockTask+0x52>
 80072e0:	2300      	movs	r3, #0
 80072e2:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80072e4:	4b0f      	ldr	r3, [pc, #60]	@ (8007324 <prvProcessTimerOrBlockTask+0x94>)
 80072e6:	6818      	ldr	r0, [r3, #0]
 80072e8:	687a      	ldr	r2, [r7, #4]
 80072ea:	68fb      	ldr	r3, [r7, #12]
 80072ec:	1ad3      	subs	r3, r2, r3
 80072ee:	683a      	ldr	r2, [r7, #0]
 80072f0:	4619      	mov	r1, r3
 80072f2:	f7fe fe43 	bl	8005f7c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80072f6:	f7ff f8e7 	bl	80064c8 <xTaskResumeAll>
 80072fa:	4603      	mov	r3, r0
 80072fc:	2b00      	cmp	r3, #0
 80072fe:	d10a      	bne.n	8007316 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8007300:	4b09      	ldr	r3, [pc, #36]	@ (8007328 <prvProcessTimerOrBlockTask+0x98>)
 8007302:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007306:	601a      	str	r2, [r3, #0]
 8007308:	f3bf 8f4f 	dsb	sy
 800730c:	f3bf 8f6f 	isb	sy
}
 8007310:	e001      	b.n	8007316 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8007312:	f7ff f8d9 	bl	80064c8 <xTaskResumeAll>
}
 8007316:	bf00      	nop
 8007318:	3710      	adds	r7, #16
 800731a:	46bd      	mov	sp, r7
 800731c:	bd80      	pop	{r7, pc}
 800731e:	bf00      	nop
 8007320:	20006ab0 	.word	0x20006ab0
 8007324:	20006ab4 	.word	0x20006ab4
 8007328:	e000ed04 	.word	0xe000ed04

0800732c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800732c:	b480      	push	{r7}
 800732e:	b085      	sub	sp, #20
 8007330:	af00      	add	r7, sp, #0
 8007332:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8007334:	4b0e      	ldr	r3, [pc, #56]	@ (8007370 <prvGetNextExpireTime+0x44>)
 8007336:	681b      	ldr	r3, [r3, #0]
 8007338:	681b      	ldr	r3, [r3, #0]
 800733a:	2b00      	cmp	r3, #0
 800733c:	d101      	bne.n	8007342 <prvGetNextExpireTime+0x16>
 800733e:	2201      	movs	r2, #1
 8007340:	e000      	b.n	8007344 <prvGetNextExpireTime+0x18>
 8007342:	2200      	movs	r2, #0
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	681b      	ldr	r3, [r3, #0]
 800734c:	2b00      	cmp	r3, #0
 800734e:	d105      	bne.n	800735c <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007350:	4b07      	ldr	r3, [pc, #28]	@ (8007370 <prvGetNextExpireTime+0x44>)
 8007352:	681b      	ldr	r3, [r3, #0]
 8007354:	68db      	ldr	r3, [r3, #12]
 8007356:	681b      	ldr	r3, [r3, #0]
 8007358:	60fb      	str	r3, [r7, #12]
 800735a:	e001      	b.n	8007360 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800735c:	2300      	movs	r3, #0
 800735e:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8007360:	68fb      	ldr	r3, [r7, #12]
}
 8007362:	4618      	mov	r0, r3
 8007364:	3714      	adds	r7, #20
 8007366:	46bd      	mov	sp, r7
 8007368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800736c:	4770      	bx	lr
 800736e:	bf00      	nop
 8007370:	20006aac 	.word	0x20006aac

08007374 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8007374:	b580      	push	{r7, lr}
 8007376:	b084      	sub	sp, #16
 8007378:	af00      	add	r7, sp, #0
 800737a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800737c:	f7ff f942 	bl	8006604 <xTaskGetTickCount>
 8007380:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8007382:	4b0b      	ldr	r3, [pc, #44]	@ (80073b0 <prvSampleTimeNow+0x3c>)
 8007384:	681b      	ldr	r3, [r3, #0]
 8007386:	68fa      	ldr	r2, [r7, #12]
 8007388:	429a      	cmp	r2, r3
 800738a:	d205      	bcs.n	8007398 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800738c:	f000 f93a 	bl	8007604 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	2201      	movs	r2, #1
 8007394:	601a      	str	r2, [r3, #0]
 8007396:	e002      	b.n	800739e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	2200      	movs	r2, #0
 800739c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800739e:	4a04      	ldr	r2, [pc, #16]	@ (80073b0 <prvSampleTimeNow+0x3c>)
 80073a0:	68fb      	ldr	r3, [r7, #12]
 80073a2:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80073a4:	68fb      	ldr	r3, [r7, #12]
}
 80073a6:	4618      	mov	r0, r3
 80073a8:	3710      	adds	r7, #16
 80073aa:	46bd      	mov	sp, r7
 80073ac:	bd80      	pop	{r7, pc}
 80073ae:	bf00      	nop
 80073b0:	20006abc 	.word	0x20006abc

080073b4 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80073b4:	b580      	push	{r7, lr}
 80073b6:	b086      	sub	sp, #24
 80073b8:	af00      	add	r7, sp, #0
 80073ba:	60f8      	str	r0, [r7, #12]
 80073bc:	60b9      	str	r1, [r7, #8]
 80073be:	607a      	str	r2, [r7, #4]
 80073c0:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80073c2:	2300      	movs	r3, #0
 80073c4:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80073c6:	68fb      	ldr	r3, [r7, #12]
 80073c8:	68ba      	ldr	r2, [r7, #8]
 80073ca:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80073cc:	68fb      	ldr	r3, [r7, #12]
 80073ce:	68fa      	ldr	r2, [r7, #12]
 80073d0:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80073d2:	68ba      	ldr	r2, [r7, #8]
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	429a      	cmp	r2, r3
 80073d8:	d812      	bhi.n	8007400 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80073da:	687a      	ldr	r2, [r7, #4]
 80073dc:	683b      	ldr	r3, [r7, #0]
 80073de:	1ad2      	subs	r2, r2, r3
 80073e0:	68fb      	ldr	r3, [r7, #12]
 80073e2:	699b      	ldr	r3, [r3, #24]
 80073e4:	429a      	cmp	r2, r3
 80073e6:	d302      	bcc.n	80073ee <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80073e8:	2301      	movs	r3, #1
 80073ea:	617b      	str	r3, [r7, #20]
 80073ec:	e01b      	b.n	8007426 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80073ee:	4b10      	ldr	r3, [pc, #64]	@ (8007430 <prvInsertTimerInActiveList+0x7c>)
 80073f0:	681a      	ldr	r2, [r3, #0]
 80073f2:	68fb      	ldr	r3, [r7, #12]
 80073f4:	3304      	adds	r3, #4
 80073f6:	4619      	mov	r1, r3
 80073f8:	4610      	mov	r0, r2
 80073fa:	f7fd fcac 	bl	8004d56 <vListInsert>
 80073fe:	e012      	b.n	8007426 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8007400:	687a      	ldr	r2, [r7, #4]
 8007402:	683b      	ldr	r3, [r7, #0]
 8007404:	429a      	cmp	r2, r3
 8007406:	d206      	bcs.n	8007416 <prvInsertTimerInActiveList+0x62>
 8007408:	68ba      	ldr	r2, [r7, #8]
 800740a:	683b      	ldr	r3, [r7, #0]
 800740c:	429a      	cmp	r2, r3
 800740e:	d302      	bcc.n	8007416 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8007410:	2301      	movs	r3, #1
 8007412:	617b      	str	r3, [r7, #20]
 8007414:	e007      	b.n	8007426 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8007416:	4b07      	ldr	r3, [pc, #28]	@ (8007434 <prvInsertTimerInActiveList+0x80>)
 8007418:	681a      	ldr	r2, [r3, #0]
 800741a:	68fb      	ldr	r3, [r7, #12]
 800741c:	3304      	adds	r3, #4
 800741e:	4619      	mov	r1, r3
 8007420:	4610      	mov	r0, r2
 8007422:	f7fd fc98 	bl	8004d56 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8007426:	697b      	ldr	r3, [r7, #20]
}
 8007428:	4618      	mov	r0, r3
 800742a:	3718      	adds	r7, #24
 800742c:	46bd      	mov	sp, r7
 800742e:	bd80      	pop	{r7, pc}
 8007430:	20006ab0 	.word	0x20006ab0
 8007434:	20006aac 	.word	0x20006aac

08007438 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8007438:	b580      	push	{r7, lr}
 800743a:	b08e      	sub	sp, #56	@ 0x38
 800743c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800743e:	e0ce      	b.n	80075de <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	2b00      	cmp	r3, #0
 8007444:	da19      	bge.n	800747a <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8007446:	1d3b      	adds	r3, r7, #4
 8007448:	3304      	adds	r3, #4
 800744a:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800744c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800744e:	2b00      	cmp	r3, #0
 8007450:	d10b      	bne.n	800746a <prvProcessReceivedCommands+0x32>
	__asm volatile
 8007452:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007456:	f383 8811 	msr	BASEPRI, r3
 800745a:	f3bf 8f6f 	isb	sy
 800745e:	f3bf 8f4f 	dsb	sy
 8007462:	61fb      	str	r3, [r7, #28]
}
 8007464:	bf00      	nop
 8007466:	bf00      	nop
 8007468:	e7fd      	b.n	8007466 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800746a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800746c:	681b      	ldr	r3, [r3, #0]
 800746e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007470:	6850      	ldr	r0, [r2, #4]
 8007472:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007474:	6892      	ldr	r2, [r2, #8]
 8007476:	4611      	mov	r1, r2
 8007478:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	2b00      	cmp	r3, #0
 800747e:	f2c0 80ae 	blt.w	80075de <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8007482:	68fb      	ldr	r3, [r7, #12]
 8007484:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8007486:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007488:	695b      	ldr	r3, [r3, #20]
 800748a:	2b00      	cmp	r3, #0
 800748c:	d004      	beq.n	8007498 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800748e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007490:	3304      	adds	r3, #4
 8007492:	4618      	mov	r0, r3
 8007494:	f7fd fc98 	bl	8004dc8 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8007498:	463b      	mov	r3, r7
 800749a:	4618      	mov	r0, r3
 800749c:	f7ff ff6a 	bl	8007374 <prvSampleTimeNow>
 80074a0:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	2b09      	cmp	r3, #9
 80074a6:	f200 8097 	bhi.w	80075d8 <prvProcessReceivedCommands+0x1a0>
 80074aa:	a201      	add	r2, pc, #4	@ (adr r2, 80074b0 <prvProcessReceivedCommands+0x78>)
 80074ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80074b0:	080074d9 	.word	0x080074d9
 80074b4:	080074d9 	.word	0x080074d9
 80074b8:	080074d9 	.word	0x080074d9
 80074bc:	0800754f 	.word	0x0800754f
 80074c0:	08007563 	.word	0x08007563
 80074c4:	080075af 	.word	0x080075af
 80074c8:	080074d9 	.word	0x080074d9
 80074cc:	080074d9 	.word	0x080074d9
 80074d0:	0800754f 	.word	0x0800754f
 80074d4:	08007563 	.word	0x08007563
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80074d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80074da:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80074de:	f043 0301 	orr.w	r3, r3, #1
 80074e2:	b2da      	uxtb	r2, r3
 80074e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80074e6:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80074ea:	68ba      	ldr	r2, [r7, #8]
 80074ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80074ee:	699b      	ldr	r3, [r3, #24]
 80074f0:	18d1      	adds	r1, r2, r3
 80074f2:	68bb      	ldr	r3, [r7, #8]
 80074f4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80074f6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80074f8:	f7ff ff5c 	bl	80073b4 <prvInsertTimerInActiveList>
 80074fc:	4603      	mov	r3, r0
 80074fe:	2b00      	cmp	r3, #0
 8007500:	d06c      	beq.n	80075dc <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007502:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007504:	6a1b      	ldr	r3, [r3, #32]
 8007506:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007508:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800750a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800750c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007510:	f003 0304 	and.w	r3, r3, #4
 8007514:	2b00      	cmp	r3, #0
 8007516:	d061      	beq.n	80075dc <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8007518:	68ba      	ldr	r2, [r7, #8]
 800751a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800751c:	699b      	ldr	r3, [r3, #24]
 800751e:	441a      	add	r2, r3
 8007520:	2300      	movs	r3, #0
 8007522:	9300      	str	r3, [sp, #0]
 8007524:	2300      	movs	r3, #0
 8007526:	2100      	movs	r1, #0
 8007528:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800752a:	f7ff fe01 	bl	8007130 <xTimerGenericCommand>
 800752e:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8007530:	6a3b      	ldr	r3, [r7, #32]
 8007532:	2b00      	cmp	r3, #0
 8007534:	d152      	bne.n	80075dc <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 8007536:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800753a:	f383 8811 	msr	BASEPRI, r3
 800753e:	f3bf 8f6f 	isb	sy
 8007542:	f3bf 8f4f 	dsb	sy
 8007546:	61bb      	str	r3, [r7, #24]
}
 8007548:	bf00      	nop
 800754a:	bf00      	nop
 800754c:	e7fd      	b.n	800754a <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800754e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007550:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007554:	f023 0301 	bic.w	r3, r3, #1
 8007558:	b2da      	uxtb	r2, r3
 800755a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800755c:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8007560:	e03d      	b.n	80075de <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8007562:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007564:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007568:	f043 0301 	orr.w	r3, r3, #1
 800756c:	b2da      	uxtb	r2, r3
 800756e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007570:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8007574:	68ba      	ldr	r2, [r7, #8]
 8007576:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007578:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800757a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800757c:	699b      	ldr	r3, [r3, #24]
 800757e:	2b00      	cmp	r3, #0
 8007580:	d10b      	bne.n	800759a <prvProcessReceivedCommands+0x162>
	__asm volatile
 8007582:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007586:	f383 8811 	msr	BASEPRI, r3
 800758a:	f3bf 8f6f 	isb	sy
 800758e:	f3bf 8f4f 	dsb	sy
 8007592:	617b      	str	r3, [r7, #20]
}
 8007594:	bf00      	nop
 8007596:	bf00      	nop
 8007598:	e7fd      	b.n	8007596 <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800759a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800759c:	699a      	ldr	r2, [r3, #24]
 800759e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80075a0:	18d1      	adds	r1, r2, r3
 80075a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80075a4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80075a6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80075a8:	f7ff ff04 	bl	80073b4 <prvInsertTimerInActiveList>
					break;
 80075ac:	e017      	b.n	80075de <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80075ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80075b0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80075b4:	f003 0302 	and.w	r3, r3, #2
 80075b8:	2b00      	cmp	r3, #0
 80075ba:	d103      	bne.n	80075c4 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 80075bc:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80075be:	f000 fbeb 	bl	8007d98 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80075c2:	e00c      	b.n	80075de <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80075c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80075c6:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80075ca:	f023 0301 	bic.w	r3, r3, #1
 80075ce:	b2da      	uxtb	r2, r3
 80075d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80075d2:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 80075d6:	e002      	b.n	80075de <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 80075d8:	bf00      	nop
 80075da:	e000      	b.n	80075de <prvProcessReceivedCommands+0x1a6>
					break;
 80075dc:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80075de:	4b08      	ldr	r3, [pc, #32]	@ (8007600 <prvProcessReceivedCommands+0x1c8>)
 80075e0:	681b      	ldr	r3, [r3, #0]
 80075e2:	1d39      	adds	r1, r7, #4
 80075e4:	2200      	movs	r2, #0
 80075e6:	4618      	mov	r0, r3
 80075e8:	f7fe f8b4 	bl	8005754 <xQueueReceive>
 80075ec:	4603      	mov	r3, r0
 80075ee:	2b00      	cmp	r3, #0
 80075f0:	f47f af26 	bne.w	8007440 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 80075f4:	bf00      	nop
 80075f6:	bf00      	nop
 80075f8:	3730      	adds	r7, #48	@ 0x30
 80075fa:	46bd      	mov	sp, r7
 80075fc:	bd80      	pop	{r7, pc}
 80075fe:	bf00      	nop
 8007600:	20006ab4 	.word	0x20006ab4

08007604 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8007604:	b580      	push	{r7, lr}
 8007606:	b088      	sub	sp, #32
 8007608:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800760a:	e049      	b.n	80076a0 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800760c:	4b2e      	ldr	r3, [pc, #184]	@ (80076c8 <prvSwitchTimerLists+0xc4>)
 800760e:	681b      	ldr	r3, [r3, #0]
 8007610:	68db      	ldr	r3, [r3, #12]
 8007612:	681b      	ldr	r3, [r3, #0]
 8007614:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007616:	4b2c      	ldr	r3, [pc, #176]	@ (80076c8 <prvSwitchTimerLists+0xc4>)
 8007618:	681b      	ldr	r3, [r3, #0]
 800761a:	68db      	ldr	r3, [r3, #12]
 800761c:	68db      	ldr	r3, [r3, #12]
 800761e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007620:	68fb      	ldr	r3, [r7, #12]
 8007622:	3304      	adds	r3, #4
 8007624:	4618      	mov	r0, r3
 8007626:	f7fd fbcf 	bl	8004dc8 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800762a:	68fb      	ldr	r3, [r7, #12]
 800762c:	6a1b      	ldr	r3, [r3, #32]
 800762e:	68f8      	ldr	r0, [r7, #12]
 8007630:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007632:	68fb      	ldr	r3, [r7, #12]
 8007634:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007638:	f003 0304 	and.w	r3, r3, #4
 800763c:	2b00      	cmp	r3, #0
 800763e:	d02f      	beq.n	80076a0 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8007640:	68fb      	ldr	r3, [r7, #12]
 8007642:	699b      	ldr	r3, [r3, #24]
 8007644:	693a      	ldr	r2, [r7, #16]
 8007646:	4413      	add	r3, r2
 8007648:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800764a:	68ba      	ldr	r2, [r7, #8]
 800764c:	693b      	ldr	r3, [r7, #16]
 800764e:	429a      	cmp	r2, r3
 8007650:	d90e      	bls.n	8007670 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8007652:	68fb      	ldr	r3, [r7, #12]
 8007654:	68ba      	ldr	r2, [r7, #8]
 8007656:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007658:	68fb      	ldr	r3, [r7, #12]
 800765a:	68fa      	ldr	r2, [r7, #12]
 800765c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800765e:	4b1a      	ldr	r3, [pc, #104]	@ (80076c8 <prvSwitchTimerLists+0xc4>)
 8007660:	681a      	ldr	r2, [r3, #0]
 8007662:	68fb      	ldr	r3, [r7, #12]
 8007664:	3304      	adds	r3, #4
 8007666:	4619      	mov	r1, r3
 8007668:	4610      	mov	r0, r2
 800766a:	f7fd fb74 	bl	8004d56 <vListInsert>
 800766e:	e017      	b.n	80076a0 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007670:	2300      	movs	r3, #0
 8007672:	9300      	str	r3, [sp, #0]
 8007674:	2300      	movs	r3, #0
 8007676:	693a      	ldr	r2, [r7, #16]
 8007678:	2100      	movs	r1, #0
 800767a:	68f8      	ldr	r0, [r7, #12]
 800767c:	f7ff fd58 	bl	8007130 <xTimerGenericCommand>
 8007680:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	2b00      	cmp	r3, #0
 8007686:	d10b      	bne.n	80076a0 <prvSwitchTimerLists+0x9c>
	__asm volatile
 8007688:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800768c:	f383 8811 	msr	BASEPRI, r3
 8007690:	f3bf 8f6f 	isb	sy
 8007694:	f3bf 8f4f 	dsb	sy
 8007698:	603b      	str	r3, [r7, #0]
}
 800769a:	bf00      	nop
 800769c:	bf00      	nop
 800769e:	e7fd      	b.n	800769c <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80076a0:	4b09      	ldr	r3, [pc, #36]	@ (80076c8 <prvSwitchTimerLists+0xc4>)
 80076a2:	681b      	ldr	r3, [r3, #0]
 80076a4:	681b      	ldr	r3, [r3, #0]
 80076a6:	2b00      	cmp	r3, #0
 80076a8:	d1b0      	bne.n	800760c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80076aa:	4b07      	ldr	r3, [pc, #28]	@ (80076c8 <prvSwitchTimerLists+0xc4>)
 80076ac:	681b      	ldr	r3, [r3, #0]
 80076ae:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80076b0:	4b06      	ldr	r3, [pc, #24]	@ (80076cc <prvSwitchTimerLists+0xc8>)
 80076b2:	681b      	ldr	r3, [r3, #0]
 80076b4:	4a04      	ldr	r2, [pc, #16]	@ (80076c8 <prvSwitchTimerLists+0xc4>)
 80076b6:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80076b8:	4a04      	ldr	r2, [pc, #16]	@ (80076cc <prvSwitchTimerLists+0xc8>)
 80076ba:	697b      	ldr	r3, [r7, #20]
 80076bc:	6013      	str	r3, [r2, #0]
}
 80076be:	bf00      	nop
 80076c0:	3718      	adds	r7, #24
 80076c2:	46bd      	mov	sp, r7
 80076c4:	bd80      	pop	{r7, pc}
 80076c6:	bf00      	nop
 80076c8:	20006aac 	.word	0x20006aac
 80076cc:	20006ab0 	.word	0x20006ab0

080076d0 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80076d0:	b580      	push	{r7, lr}
 80076d2:	b082      	sub	sp, #8
 80076d4:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80076d6:	f000 f96f 	bl	80079b8 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80076da:	4b15      	ldr	r3, [pc, #84]	@ (8007730 <prvCheckForValidListAndQueue+0x60>)
 80076dc:	681b      	ldr	r3, [r3, #0]
 80076de:	2b00      	cmp	r3, #0
 80076e0:	d120      	bne.n	8007724 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80076e2:	4814      	ldr	r0, [pc, #80]	@ (8007734 <prvCheckForValidListAndQueue+0x64>)
 80076e4:	f7fd fae6 	bl	8004cb4 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80076e8:	4813      	ldr	r0, [pc, #76]	@ (8007738 <prvCheckForValidListAndQueue+0x68>)
 80076ea:	f7fd fae3 	bl	8004cb4 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80076ee:	4b13      	ldr	r3, [pc, #76]	@ (800773c <prvCheckForValidListAndQueue+0x6c>)
 80076f0:	4a10      	ldr	r2, [pc, #64]	@ (8007734 <prvCheckForValidListAndQueue+0x64>)
 80076f2:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80076f4:	4b12      	ldr	r3, [pc, #72]	@ (8007740 <prvCheckForValidListAndQueue+0x70>)
 80076f6:	4a10      	ldr	r2, [pc, #64]	@ (8007738 <prvCheckForValidListAndQueue+0x68>)
 80076f8:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80076fa:	2300      	movs	r3, #0
 80076fc:	9300      	str	r3, [sp, #0]
 80076fe:	4b11      	ldr	r3, [pc, #68]	@ (8007744 <prvCheckForValidListAndQueue+0x74>)
 8007700:	4a11      	ldr	r2, [pc, #68]	@ (8007748 <prvCheckForValidListAndQueue+0x78>)
 8007702:	2110      	movs	r1, #16
 8007704:	200a      	movs	r0, #10
 8007706:	f7fd fbf3 	bl	8004ef0 <xQueueGenericCreateStatic>
 800770a:	4603      	mov	r3, r0
 800770c:	4a08      	ldr	r2, [pc, #32]	@ (8007730 <prvCheckForValidListAndQueue+0x60>)
 800770e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8007710:	4b07      	ldr	r3, [pc, #28]	@ (8007730 <prvCheckForValidListAndQueue+0x60>)
 8007712:	681b      	ldr	r3, [r3, #0]
 8007714:	2b00      	cmp	r3, #0
 8007716:	d005      	beq.n	8007724 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8007718:	4b05      	ldr	r3, [pc, #20]	@ (8007730 <prvCheckForValidListAndQueue+0x60>)
 800771a:	681b      	ldr	r3, [r3, #0]
 800771c:	490b      	ldr	r1, [pc, #44]	@ (800774c <prvCheckForValidListAndQueue+0x7c>)
 800771e:	4618      	mov	r0, r3
 8007720:	f7fe fbd8 	bl	8005ed4 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007724:	f000 f97a 	bl	8007a1c <vPortExitCritical>
}
 8007728:	bf00      	nop
 800772a:	46bd      	mov	sp, r7
 800772c:	bd80      	pop	{r7, pc}
 800772e:	bf00      	nop
 8007730:	20006ab4 	.word	0x20006ab4
 8007734:	20006a84 	.word	0x20006a84
 8007738:	20006a98 	.word	0x20006a98
 800773c:	20006aac 	.word	0x20006aac
 8007740:	20006ab0 	.word	0x20006ab0
 8007744:	20006b60 	.word	0x20006b60
 8007748:	20006ac0 	.word	0x20006ac0
 800774c:	08013214 	.word	0x08013214

08007750 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8007750:	b480      	push	{r7}
 8007752:	b085      	sub	sp, #20
 8007754:	af00      	add	r7, sp, #0
 8007756:	60f8      	str	r0, [r7, #12]
 8007758:	60b9      	str	r1, [r7, #8]
 800775a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800775c:	68fb      	ldr	r3, [r7, #12]
 800775e:	3b04      	subs	r3, #4
 8007760:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8007762:	68fb      	ldr	r3, [r7, #12]
 8007764:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8007768:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800776a:	68fb      	ldr	r3, [r7, #12]
 800776c:	3b04      	subs	r3, #4
 800776e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8007770:	68bb      	ldr	r3, [r7, #8]
 8007772:	f023 0201 	bic.w	r2, r3, #1
 8007776:	68fb      	ldr	r3, [r7, #12]
 8007778:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800777a:	68fb      	ldr	r3, [r7, #12]
 800777c:	3b04      	subs	r3, #4
 800777e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8007780:	4a0c      	ldr	r2, [pc, #48]	@ (80077b4 <pxPortInitialiseStack+0x64>)
 8007782:	68fb      	ldr	r3, [r7, #12]
 8007784:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8007786:	68fb      	ldr	r3, [r7, #12]
 8007788:	3b14      	subs	r3, #20
 800778a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800778c:	687a      	ldr	r2, [r7, #4]
 800778e:	68fb      	ldr	r3, [r7, #12]
 8007790:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8007792:	68fb      	ldr	r3, [r7, #12]
 8007794:	3b04      	subs	r3, #4
 8007796:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8007798:	68fb      	ldr	r3, [r7, #12]
 800779a:	f06f 0202 	mvn.w	r2, #2
 800779e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80077a0:	68fb      	ldr	r3, [r7, #12]
 80077a2:	3b20      	subs	r3, #32
 80077a4:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80077a6:	68fb      	ldr	r3, [r7, #12]
}
 80077a8:	4618      	mov	r0, r3
 80077aa:	3714      	adds	r7, #20
 80077ac:	46bd      	mov	sp, r7
 80077ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077b2:	4770      	bx	lr
 80077b4:	080077b9 	.word	0x080077b9

080077b8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80077b8:	b480      	push	{r7}
 80077ba:	b085      	sub	sp, #20
 80077bc:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80077be:	2300      	movs	r3, #0
 80077c0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80077c2:	4b13      	ldr	r3, [pc, #76]	@ (8007810 <prvTaskExitError+0x58>)
 80077c4:	681b      	ldr	r3, [r3, #0]
 80077c6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80077ca:	d00b      	beq.n	80077e4 <prvTaskExitError+0x2c>
	__asm volatile
 80077cc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80077d0:	f383 8811 	msr	BASEPRI, r3
 80077d4:	f3bf 8f6f 	isb	sy
 80077d8:	f3bf 8f4f 	dsb	sy
 80077dc:	60fb      	str	r3, [r7, #12]
}
 80077de:	bf00      	nop
 80077e0:	bf00      	nop
 80077e2:	e7fd      	b.n	80077e0 <prvTaskExitError+0x28>
	__asm volatile
 80077e4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80077e8:	f383 8811 	msr	BASEPRI, r3
 80077ec:	f3bf 8f6f 	isb	sy
 80077f0:	f3bf 8f4f 	dsb	sy
 80077f4:	60bb      	str	r3, [r7, #8]
}
 80077f6:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80077f8:	bf00      	nop
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	2b00      	cmp	r3, #0
 80077fe:	d0fc      	beq.n	80077fa <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8007800:	bf00      	nop
 8007802:	bf00      	nop
 8007804:	3714      	adds	r7, #20
 8007806:	46bd      	mov	sp, r7
 8007808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800780c:	4770      	bx	lr
 800780e:	bf00      	nop
 8007810:	20000020 	.word	0x20000020
	...

08007820 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8007820:	4b07      	ldr	r3, [pc, #28]	@ (8007840 <pxCurrentTCBConst2>)
 8007822:	6819      	ldr	r1, [r3, #0]
 8007824:	6808      	ldr	r0, [r1, #0]
 8007826:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800782a:	f380 8809 	msr	PSP, r0
 800782e:	f3bf 8f6f 	isb	sy
 8007832:	f04f 0000 	mov.w	r0, #0
 8007836:	f380 8811 	msr	BASEPRI, r0
 800783a:	4770      	bx	lr
 800783c:	f3af 8000 	nop.w

08007840 <pxCurrentTCBConst2>:
 8007840:	20006584 	.word	0x20006584
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8007844:	bf00      	nop
 8007846:	bf00      	nop

08007848 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8007848:	4808      	ldr	r0, [pc, #32]	@ (800786c <prvPortStartFirstTask+0x24>)
 800784a:	6800      	ldr	r0, [r0, #0]
 800784c:	6800      	ldr	r0, [r0, #0]
 800784e:	f380 8808 	msr	MSP, r0
 8007852:	f04f 0000 	mov.w	r0, #0
 8007856:	f380 8814 	msr	CONTROL, r0
 800785a:	b662      	cpsie	i
 800785c:	b661      	cpsie	f
 800785e:	f3bf 8f4f 	dsb	sy
 8007862:	f3bf 8f6f 	isb	sy
 8007866:	df00      	svc	0
 8007868:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800786a:	bf00      	nop
 800786c:	e000ed08 	.word	0xe000ed08

08007870 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8007870:	b580      	push	{r7, lr}
 8007872:	b086      	sub	sp, #24
 8007874:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8007876:	4b47      	ldr	r3, [pc, #284]	@ (8007994 <xPortStartScheduler+0x124>)
 8007878:	681b      	ldr	r3, [r3, #0]
 800787a:	4a47      	ldr	r2, [pc, #284]	@ (8007998 <xPortStartScheduler+0x128>)
 800787c:	4293      	cmp	r3, r2
 800787e:	d10b      	bne.n	8007898 <xPortStartScheduler+0x28>
	__asm volatile
 8007880:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007884:	f383 8811 	msr	BASEPRI, r3
 8007888:	f3bf 8f6f 	isb	sy
 800788c:	f3bf 8f4f 	dsb	sy
 8007890:	613b      	str	r3, [r7, #16]
}
 8007892:	bf00      	nop
 8007894:	bf00      	nop
 8007896:	e7fd      	b.n	8007894 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8007898:	4b3e      	ldr	r3, [pc, #248]	@ (8007994 <xPortStartScheduler+0x124>)
 800789a:	681b      	ldr	r3, [r3, #0]
 800789c:	4a3f      	ldr	r2, [pc, #252]	@ (800799c <xPortStartScheduler+0x12c>)
 800789e:	4293      	cmp	r3, r2
 80078a0:	d10b      	bne.n	80078ba <xPortStartScheduler+0x4a>
	__asm volatile
 80078a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80078a6:	f383 8811 	msr	BASEPRI, r3
 80078aa:	f3bf 8f6f 	isb	sy
 80078ae:	f3bf 8f4f 	dsb	sy
 80078b2:	60fb      	str	r3, [r7, #12]
}
 80078b4:	bf00      	nop
 80078b6:	bf00      	nop
 80078b8:	e7fd      	b.n	80078b6 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80078ba:	4b39      	ldr	r3, [pc, #228]	@ (80079a0 <xPortStartScheduler+0x130>)
 80078bc:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80078be:	697b      	ldr	r3, [r7, #20]
 80078c0:	781b      	ldrb	r3, [r3, #0]
 80078c2:	b2db      	uxtb	r3, r3
 80078c4:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80078c6:	697b      	ldr	r3, [r7, #20]
 80078c8:	22ff      	movs	r2, #255	@ 0xff
 80078ca:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80078cc:	697b      	ldr	r3, [r7, #20]
 80078ce:	781b      	ldrb	r3, [r3, #0]
 80078d0:	b2db      	uxtb	r3, r3
 80078d2:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80078d4:	78fb      	ldrb	r3, [r7, #3]
 80078d6:	b2db      	uxtb	r3, r3
 80078d8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80078dc:	b2da      	uxtb	r2, r3
 80078de:	4b31      	ldr	r3, [pc, #196]	@ (80079a4 <xPortStartScheduler+0x134>)
 80078e0:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80078e2:	4b31      	ldr	r3, [pc, #196]	@ (80079a8 <xPortStartScheduler+0x138>)
 80078e4:	2207      	movs	r2, #7
 80078e6:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80078e8:	e009      	b.n	80078fe <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 80078ea:	4b2f      	ldr	r3, [pc, #188]	@ (80079a8 <xPortStartScheduler+0x138>)
 80078ec:	681b      	ldr	r3, [r3, #0]
 80078ee:	3b01      	subs	r3, #1
 80078f0:	4a2d      	ldr	r2, [pc, #180]	@ (80079a8 <xPortStartScheduler+0x138>)
 80078f2:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80078f4:	78fb      	ldrb	r3, [r7, #3]
 80078f6:	b2db      	uxtb	r3, r3
 80078f8:	005b      	lsls	r3, r3, #1
 80078fa:	b2db      	uxtb	r3, r3
 80078fc:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80078fe:	78fb      	ldrb	r3, [r7, #3]
 8007900:	b2db      	uxtb	r3, r3
 8007902:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007906:	2b80      	cmp	r3, #128	@ 0x80
 8007908:	d0ef      	beq.n	80078ea <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800790a:	4b27      	ldr	r3, [pc, #156]	@ (80079a8 <xPortStartScheduler+0x138>)
 800790c:	681b      	ldr	r3, [r3, #0]
 800790e:	f1c3 0307 	rsb	r3, r3, #7
 8007912:	2b04      	cmp	r3, #4
 8007914:	d00b      	beq.n	800792e <xPortStartScheduler+0xbe>
	__asm volatile
 8007916:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800791a:	f383 8811 	msr	BASEPRI, r3
 800791e:	f3bf 8f6f 	isb	sy
 8007922:	f3bf 8f4f 	dsb	sy
 8007926:	60bb      	str	r3, [r7, #8]
}
 8007928:	bf00      	nop
 800792a:	bf00      	nop
 800792c:	e7fd      	b.n	800792a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800792e:	4b1e      	ldr	r3, [pc, #120]	@ (80079a8 <xPortStartScheduler+0x138>)
 8007930:	681b      	ldr	r3, [r3, #0]
 8007932:	021b      	lsls	r3, r3, #8
 8007934:	4a1c      	ldr	r2, [pc, #112]	@ (80079a8 <xPortStartScheduler+0x138>)
 8007936:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8007938:	4b1b      	ldr	r3, [pc, #108]	@ (80079a8 <xPortStartScheduler+0x138>)
 800793a:	681b      	ldr	r3, [r3, #0]
 800793c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8007940:	4a19      	ldr	r2, [pc, #100]	@ (80079a8 <xPortStartScheduler+0x138>)
 8007942:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	b2da      	uxtb	r2, r3
 8007948:	697b      	ldr	r3, [r7, #20]
 800794a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800794c:	4b17      	ldr	r3, [pc, #92]	@ (80079ac <xPortStartScheduler+0x13c>)
 800794e:	681b      	ldr	r3, [r3, #0]
 8007950:	4a16      	ldr	r2, [pc, #88]	@ (80079ac <xPortStartScheduler+0x13c>)
 8007952:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8007956:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8007958:	4b14      	ldr	r3, [pc, #80]	@ (80079ac <xPortStartScheduler+0x13c>)
 800795a:	681b      	ldr	r3, [r3, #0]
 800795c:	4a13      	ldr	r2, [pc, #76]	@ (80079ac <xPortStartScheduler+0x13c>)
 800795e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8007962:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8007964:	f000 f8da 	bl	8007b1c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8007968:	4b11      	ldr	r3, [pc, #68]	@ (80079b0 <xPortStartScheduler+0x140>)
 800796a:	2200      	movs	r2, #0
 800796c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800796e:	f000 f8f9 	bl	8007b64 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8007972:	4b10      	ldr	r3, [pc, #64]	@ (80079b4 <xPortStartScheduler+0x144>)
 8007974:	681b      	ldr	r3, [r3, #0]
 8007976:	4a0f      	ldr	r2, [pc, #60]	@ (80079b4 <xPortStartScheduler+0x144>)
 8007978:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800797c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800797e:	f7ff ff63 	bl	8007848 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8007982:	f7fe ff1b 	bl	80067bc <vTaskSwitchContext>
	prvTaskExitError();
 8007986:	f7ff ff17 	bl	80077b8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800798a:	2300      	movs	r3, #0
}
 800798c:	4618      	mov	r0, r3
 800798e:	3718      	adds	r7, #24
 8007990:	46bd      	mov	sp, r7
 8007992:	bd80      	pop	{r7, pc}
 8007994:	e000ed00 	.word	0xe000ed00
 8007998:	410fc271 	.word	0x410fc271
 800799c:	410fc270 	.word	0x410fc270
 80079a0:	e000e400 	.word	0xe000e400
 80079a4:	20006bb0 	.word	0x20006bb0
 80079a8:	20006bb4 	.word	0x20006bb4
 80079ac:	e000ed20 	.word	0xe000ed20
 80079b0:	20000020 	.word	0x20000020
 80079b4:	e000ef34 	.word	0xe000ef34

080079b8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80079b8:	b480      	push	{r7}
 80079ba:	b083      	sub	sp, #12
 80079bc:	af00      	add	r7, sp, #0
	__asm volatile
 80079be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80079c2:	f383 8811 	msr	BASEPRI, r3
 80079c6:	f3bf 8f6f 	isb	sy
 80079ca:	f3bf 8f4f 	dsb	sy
 80079ce:	607b      	str	r3, [r7, #4]
}
 80079d0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80079d2:	4b10      	ldr	r3, [pc, #64]	@ (8007a14 <vPortEnterCritical+0x5c>)
 80079d4:	681b      	ldr	r3, [r3, #0]
 80079d6:	3301      	adds	r3, #1
 80079d8:	4a0e      	ldr	r2, [pc, #56]	@ (8007a14 <vPortEnterCritical+0x5c>)
 80079da:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80079dc:	4b0d      	ldr	r3, [pc, #52]	@ (8007a14 <vPortEnterCritical+0x5c>)
 80079de:	681b      	ldr	r3, [r3, #0]
 80079e0:	2b01      	cmp	r3, #1
 80079e2:	d110      	bne.n	8007a06 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80079e4:	4b0c      	ldr	r3, [pc, #48]	@ (8007a18 <vPortEnterCritical+0x60>)
 80079e6:	681b      	ldr	r3, [r3, #0]
 80079e8:	b2db      	uxtb	r3, r3
 80079ea:	2b00      	cmp	r3, #0
 80079ec:	d00b      	beq.n	8007a06 <vPortEnterCritical+0x4e>
	__asm volatile
 80079ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80079f2:	f383 8811 	msr	BASEPRI, r3
 80079f6:	f3bf 8f6f 	isb	sy
 80079fa:	f3bf 8f4f 	dsb	sy
 80079fe:	603b      	str	r3, [r7, #0]
}
 8007a00:	bf00      	nop
 8007a02:	bf00      	nop
 8007a04:	e7fd      	b.n	8007a02 <vPortEnterCritical+0x4a>
	}
}
 8007a06:	bf00      	nop
 8007a08:	370c      	adds	r7, #12
 8007a0a:	46bd      	mov	sp, r7
 8007a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a10:	4770      	bx	lr
 8007a12:	bf00      	nop
 8007a14:	20000020 	.word	0x20000020
 8007a18:	e000ed04 	.word	0xe000ed04

08007a1c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8007a1c:	b480      	push	{r7}
 8007a1e:	b083      	sub	sp, #12
 8007a20:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8007a22:	4b12      	ldr	r3, [pc, #72]	@ (8007a6c <vPortExitCritical+0x50>)
 8007a24:	681b      	ldr	r3, [r3, #0]
 8007a26:	2b00      	cmp	r3, #0
 8007a28:	d10b      	bne.n	8007a42 <vPortExitCritical+0x26>
	__asm volatile
 8007a2a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007a2e:	f383 8811 	msr	BASEPRI, r3
 8007a32:	f3bf 8f6f 	isb	sy
 8007a36:	f3bf 8f4f 	dsb	sy
 8007a3a:	607b      	str	r3, [r7, #4]
}
 8007a3c:	bf00      	nop
 8007a3e:	bf00      	nop
 8007a40:	e7fd      	b.n	8007a3e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8007a42:	4b0a      	ldr	r3, [pc, #40]	@ (8007a6c <vPortExitCritical+0x50>)
 8007a44:	681b      	ldr	r3, [r3, #0]
 8007a46:	3b01      	subs	r3, #1
 8007a48:	4a08      	ldr	r2, [pc, #32]	@ (8007a6c <vPortExitCritical+0x50>)
 8007a4a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8007a4c:	4b07      	ldr	r3, [pc, #28]	@ (8007a6c <vPortExitCritical+0x50>)
 8007a4e:	681b      	ldr	r3, [r3, #0]
 8007a50:	2b00      	cmp	r3, #0
 8007a52:	d105      	bne.n	8007a60 <vPortExitCritical+0x44>
 8007a54:	2300      	movs	r3, #0
 8007a56:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007a58:	683b      	ldr	r3, [r7, #0]
 8007a5a:	f383 8811 	msr	BASEPRI, r3
}
 8007a5e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8007a60:	bf00      	nop
 8007a62:	370c      	adds	r7, #12
 8007a64:	46bd      	mov	sp, r7
 8007a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a6a:	4770      	bx	lr
 8007a6c:	20000020 	.word	0x20000020

08007a70 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8007a70:	f3ef 8009 	mrs	r0, PSP
 8007a74:	f3bf 8f6f 	isb	sy
 8007a78:	4b15      	ldr	r3, [pc, #84]	@ (8007ad0 <pxCurrentTCBConst>)
 8007a7a:	681a      	ldr	r2, [r3, #0]
 8007a7c:	f01e 0f10 	tst.w	lr, #16
 8007a80:	bf08      	it	eq
 8007a82:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8007a86:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007a8a:	6010      	str	r0, [r2, #0]
 8007a8c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8007a90:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8007a94:	f380 8811 	msr	BASEPRI, r0
 8007a98:	f3bf 8f4f 	dsb	sy
 8007a9c:	f3bf 8f6f 	isb	sy
 8007aa0:	f7fe fe8c 	bl	80067bc <vTaskSwitchContext>
 8007aa4:	f04f 0000 	mov.w	r0, #0
 8007aa8:	f380 8811 	msr	BASEPRI, r0
 8007aac:	bc09      	pop	{r0, r3}
 8007aae:	6819      	ldr	r1, [r3, #0]
 8007ab0:	6808      	ldr	r0, [r1, #0]
 8007ab2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007ab6:	f01e 0f10 	tst.w	lr, #16
 8007aba:	bf08      	it	eq
 8007abc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8007ac0:	f380 8809 	msr	PSP, r0
 8007ac4:	f3bf 8f6f 	isb	sy
 8007ac8:	4770      	bx	lr
 8007aca:	bf00      	nop
 8007acc:	f3af 8000 	nop.w

08007ad0 <pxCurrentTCBConst>:
 8007ad0:	20006584 	.word	0x20006584
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8007ad4:	bf00      	nop
 8007ad6:	bf00      	nop

08007ad8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8007ad8:	b580      	push	{r7, lr}
 8007ada:	b082      	sub	sp, #8
 8007adc:	af00      	add	r7, sp, #0
	__asm volatile
 8007ade:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007ae2:	f383 8811 	msr	BASEPRI, r3
 8007ae6:	f3bf 8f6f 	isb	sy
 8007aea:	f3bf 8f4f 	dsb	sy
 8007aee:	607b      	str	r3, [r7, #4]
}
 8007af0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8007af2:	f7fe fda9 	bl	8006648 <xTaskIncrementTick>
 8007af6:	4603      	mov	r3, r0
 8007af8:	2b00      	cmp	r3, #0
 8007afa:	d003      	beq.n	8007b04 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8007afc:	4b06      	ldr	r3, [pc, #24]	@ (8007b18 <xPortSysTickHandler+0x40>)
 8007afe:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007b02:	601a      	str	r2, [r3, #0]
 8007b04:	2300      	movs	r3, #0
 8007b06:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007b08:	683b      	ldr	r3, [r7, #0]
 8007b0a:	f383 8811 	msr	BASEPRI, r3
}
 8007b0e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8007b10:	bf00      	nop
 8007b12:	3708      	adds	r7, #8
 8007b14:	46bd      	mov	sp, r7
 8007b16:	bd80      	pop	{r7, pc}
 8007b18:	e000ed04 	.word	0xe000ed04

08007b1c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8007b1c:	b480      	push	{r7}
 8007b1e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8007b20:	4b0b      	ldr	r3, [pc, #44]	@ (8007b50 <vPortSetupTimerInterrupt+0x34>)
 8007b22:	2200      	movs	r2, #0
 8007b24:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8007b26:	4b0b      	ldr	r3, [pc, #44]	@ (8007b54 <vPortSetupTimerInterrupt+0x38>)
 8007b28:	2200      	movs	r2, #0
 8007b2a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8007b2c:	4b0a      	ldr	r3, [pc, #40]	@ (8007b58 <vPortSetupTimerInterrupt+0x3c>)
 8007b2e:	681b      	ldr	r3, [r3, #0]
 8007b30:	4a0a      	ldr	r2, [pc, #40]	@ (8007b5c <vPortSetupTimerInterrupt+0x40>)
 8007b32:	fba2 2303 	umull	r2, r3, r2, r3
 8007b36:	099b      	lsrs	r3, r3, #6
 8007b38:	4a09      	ldr	r2, [pc, #36]	@ (8007b60 <vPortSetupTimerInterrupt+0x44>)
 8007b3a:	3b01      	subs	r3, #1
 8007b3c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8007b3e:	4b04      	ldr	r3, [pc, #16]	@ (8007b50 <vPortSetupTimerInterrupt+0x34>)
 8007b40:	2207      	movs	r2, #7
 8007b42:	601a      	str	r2, [r3, #0]
}
 8007b44:	bf00      	nop
 8007b46:	46bd      	mov	sp, r7
 8007b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b4c:	4770      	bx	lr
 8007b4e:	bf00      	nop
 8007b50:	e000e010 	.word	0xe000e010
 8007b54:	e000e018 	.word	0xe000e018
 8007b58:	20000000 	.word	0x20000000
 8007b5c:	10624dd3 	.word	0x10624dd3
 8007b60:	e000e014 	.word	0xe000e014

08007b64 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8007b64:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8007b74 <vPortEnableVFP+0x10>
 8007b68:	6801      	ldr	r1, [r0, #0]
 8007b6a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8007b6e:	6001      	str	r1, [r0, #0]
 8007b70:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8007b72:	bf00      	nop
 8007b74:	e000ed88 	.word	0xe000ed88

08007b78 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8007b78:	b480      	push	{r7}
 8007b7a:	b085      	sub	sp, #20
 8007b7c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8007b7e:	f3ef 8305 	mrs	r3, IPSR
 8007b82:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8007b84:	68fb      	ldr	r3, [r7, #12]
 8007b86:	2b0f      	cmp	r3, #15
 8007b88:	d915      	bls.n	8007bb6 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8007b8a:	4a18      	ldr	r2, [pc, #96]	@ (8007bec <vPortValidateInterruptPriority+0x74>)
 8007b8c:	68fb      	ldr	r3, [r7, #12]
 8007b8e:	4413      	add	r3, r2
 8007b90:	781b      	ldrb	r3, [r3, #0]
 8007b92:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8007b94:	4b16      	ldr	r3, [pc, #88]	@ (8007bf0 <vPortValidateInterruptPriority+0x78>)
 8007b96:	781b      	ldrb	r3, [r3, #0]
 8007b98:	7afa      	ldrb	r2, [r7, #11]
 8007b9a:	429a      	cmp	r2, r3
 8007b9c:	d20b      	bcs.n	8007bb6 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 8007b9e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007ba2:	f383 8811 	msr	BASEPRI, r3
 8007ba6:	f3bf 8f6f 	isb	sy
 8007baa:	f3bf 8f4f 	dsb	sy
 8007bae:	607b      	str	r3, [r7, #4]
}
 8007bb0:	bf00      	nop
 8007bb2:	bf00      	nop
 8007bb4:	e7fd      	b.n	8007bb2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8007bb6:	4b0f      	ldr	r3, [pc, #60]	@ (8007bf4 <vPortValidateInterruptPriority+0x7c>)
 8007bb8:	681b      	ldr	r3, [r3, #0]
 8007bba:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8007bbe:	4b0e      	ldr	r3, [pc, #56]	@ (8007bf8 <vPortValidateInterruptPriority+0x80>)
 8007bc0:	681b      	ldr	r3, [r3, #0]
 8007bc2:	429a      	cmp	r2, r3
 8007bc4:	d90b      	bls.n	8007bde <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8007bc6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007bca:	f383 8811 	msr	BASEPRI, r3
 8007bce:	f3bf 8f6f 	isb	sy
 8007bd2:	f3bf 8f4f 	dsb	sy
 8007bd6:	603b      	str	r3, [r7, #0]
}
 8007bd8:	bf00      	nop
 8007bda:	bf00      	nop
 8007bdc:	e7fd      	b.n	8007bda <vPortValidateInterruptPriority+0x62>
	}
 8007bde:	bf00      	nop
 8007be0:	3714      	adds	r7, #20
 8007be2:	46bd      	mov	sp, r7
 8007be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007be8:	4770      	bx	lr
 8007bea:	bf00      	nop
 8007bec:	e000e3f0 	.word	0xe000e3f0
 8007bf0:	20006bb0 	.word	0x20006bb0
 8007bf4:	e000ed0c 	.word	0xe000ed0c
 8007bf8:	20006bb4 	.word	0x20006bb4

08007bfc <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8007bfc:	b580      	push	{r7, lr}
 8007bfe:	b08a      	sub	sp, #40	@ 0x28
 8007c00:	af00      	add	r7, sp, #0
 8007c02:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8007c04:	2300      	movs	r3, #0
 8007c06:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8007c08:	f7fe fc50 	bl	80064ac <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8007c0c:	4b5c      	ldr	r3, [pc, #368]	@ (8007d80 <pvPortMalloc+0x184>)
 8007c0e:	681b      	ldr	r3, [r3, #0]
 8007c10:	2b00      	cmp	r3, #0
 8007c12:	d101      	bne.n	8007c18 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8007c14:	f000 f924 	bl	8007e60 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8007c18:	4b5a      	ldr	r3, [pc, #360]	@ (8007d84 <pvPortMalloc+0x188>)
 8007c1a:	681a      	ldr	r2, [r3, #0]
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	4013      	ands	r3, r2
 8007c20:	2b00      	cmp	r3, #0
 8007c22:	f040 8095 	bne.w	8007d50 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	2b00      	cmp	r3, #0
 8007c2a:	d01e      	beq.n	8007c6a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8007c2c:	2208      	movs	r2, #8
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	4413      	add	r3, r2
 8007c32:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	f003 0307 	and.w	r3, r3, #7
 8007c3a:	2b00      	cmp	r3, #0
 8007c3c:	d015      	beq.n	8007c6a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	f023 0307 	bic.w	r3, r3, #7
 8007c44:	3308      	adds	r3, #8
 8007c46:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	f003 0307 	and.w	r3, r3, #7
 8007c4e:	2b00      	cmp	r3, #0
 8007c50:	d00b      	beq.n	8007c6a <pvPortMalloc+0x6e>
	__asm volatile
 8007c52:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007c56:	f383 8811 	msr	BASEPRI, r3
 8007c5a:	f3bf 8f6f 	isb	sy
 8007c5e:	f3bf 8f4f 	dsb	sy
 8007c62:	617b      	str	r3, [r7, #20]
}
 8007c64:	bf00      	nop
 8007c66:	bf00      	nop
 8007c68:	e7fd      	b.n	8007c66 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	2b00      	cmp	r3, #0
 8007c6e:	d06f      	beq.n	8007d50 <pvPortMalloc+0x154>
 8007c70:	4b45      	ldr	r3, [pc, #276]	@ (8007d88 <pvPortMalloc+0x18c>)
 8007c72:	681b      	ldr	r3, [r3, #0]
 8007c74:	687a      	ldr	r2, [r7, #4]
 8007c76:	429a      	cmp	r2, r3
 8007c78:	d86a      	bhi.n	8007d50 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8007c7a:	4b44      	ldr	r3, [pc, #272]	@ (8007d8c <pvPortMalloc+0x190>)
 8007c7c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8007c7e:	4b43      	ldr	r3, [pc, #268]	@ (8007d8c <pvPortMalloc+0x190>)
 8007c80:	681b      	ldr	r3, [r3, #0]
 8007c82:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007c84:	e004      	b.n	8007c90 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8007c86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c88:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8007c8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c8c:	681b      	ldr	r3, [r3, #0]
 8007c8e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007c90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c92:	685b      	ldr	r3, [r3, #4]
 8007c94:	687a      	ldr	r2, [r7, #4]
 8007c96:	429a      	cmp	r2, r3
 8007c98:	d903      	bls.n	8007ca2 <pvPortMalloc+0xa6>
 8007c9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c9c:	681b      	ldr	r3, [r3, #0]
 8007c9e:	2b00      	cmp	r3, #0
 8007ca0:	d1f1      	bne.n	8007c86 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8007ca2:	4b37      	ldr	r3, [pc, #220]	@ (8007d80 <pvPortMalloc+0x184>)
 8007ca4:	681b      	ldr	r3, [r3, #0]
 8007ca6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007ca8:	429a      	cmp	r2, r3
 8007caa:	d051      	beq.n	8007d50 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8007cac:	6a3b      	ldr	r3, [r7, #32]
 8007cae:	681b      	ldr	r3, [r3, #0]
 8007cb0:	2208      	movs	r2, #8
 8007cb2:	4413      	add	r3, r2
 8007cb4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8007cb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007cb8:	681a      	ldr	r2, [r3, #0]
 8007cba:	6a3b      	ldr	r3, [r7, #32]
 8007cbc:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8007cbe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007cc0:	685a      	ldr	r2, [r3, #4]
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	1ad2      	subs	r2, r2, r3
 8007cc6:	2308      	movs	r3, #8
 8007cc8:	005b      	lsls	r3, r3, #1
 8007cca:	429a      	cmp	r2, r3
 8007ccc:	d920      	bls.n	8007d10 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8007cce:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	4413      	add	r3, r2
 8007cd4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007cd6:	69bb      	ldr	r3, [r7, #24]
 8007cd8:	f003 0307 	and.w	r3, r3, #7
 8007cdc:	2b00      	cmp	r3, #0
 8007cde:	d00b      	beq.n	8007cf8 <pvPortMalloc+0xfc>
	__asm volatile
 8007ce0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007ce4:	f383 8811 	msr	BASEPRI, r3
 8007ce8:	f3bf 8f6f 	isb	sy
 8007cec:	f3bf 8f4f 	dsb	sy
 8007cf0:	613b      	str	r3, [r7, #16]
}
 8007cf2:	bf00      	nop
 8007cf4:	bf00      	nop
 8007cf6:	e7fd      	b.n	8007cf4 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8007cf8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007cfa:	685a      	ldr	r2, [r3, #4]
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	1ad2      	subs	r2, r2, r3
 8007d00:	69bb      	ldr	r3, [r7, #24]
 8007d02:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8007d04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d06:	687a      	ldr	r2, [r7, #4]
 8007d08:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8007d0a:	69b8      	ldr	r0, [r7, #24]
 8007d0c:	f000 f90a 	bl	8007f24 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8007d10:	4b1d      	ldr	r3, [pc, #116]	@ (8007d88 <pvPortMalloc+0x18c>)
 8007d12:	681a      	ldr	r2, [r3, #0]
 8007d14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d16:	685b      	ldr	r3, [r3, #4]
 8007d18:	1ad3      	subs	r3, r2, r3
 8007d1a:	4a1b      	ldr	r2, [pc, #108]	@ (8007d88 <pvPortMalloc+0x18c>)
 8007d1c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8007d1e:	4b1a      	ldr	r3, [pc, #104]	@ (8007d88 <pvPortMalloc+0x18c>)
 8007d20:	681a      	ldr	r2, [r3, #0]
 8007d22:	4b1b      	ldr	r3, [pc, #108]	@ (8007d90 <pvPortMalloc+0x194>)
 8007d24:	681b      	ldr	r3, [r3, #0]
 8007d26:	429a      	cmp	r2, r3
 8007d28:	d203      	bcs.n	8007d32 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8007d2a:	4b17      	ldr	r3, [pc, #92]	@ (8007d88 <pvPortMalloc+0x18c>)
 8007d2c:	681b      	ldr	r3, [r3, #0]
 8007d2e:	4a18      	ldr	r2, [pc, #96]	@ (8007d90 <pvPortMalloc+0x194>)
 8007d30:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8007d32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d34:	685a      	ldr	r2, [r3, #4]
 8007d36:	4b13      	ldr	r3, [pc, #76]	@ (8007d84 <pvPortMalloc+0x188>)
 8007d38:	681b      	ldr	r3, [r3, #0]
 8007d3a:	431a      	orrs	r2, r3
 8007d3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d3e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8007d40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d42:	2200      	movs	r2, #0
 8007d44:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8007d46:	4b13      	ldr	r3, [pc, #76]	@ (8007d94 <pvPortMalloc+0x198>)
 8007d48:	681b      	ldr	r3, [r3, #0]
 8007d4a:	3301      	adds	r3, #1
 8007d4c:	4a11      	ldr	r2, [pc, #68]	@ (8007d94 <pvPortMalloc+0x198>)
 8007d4e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8007d50:	f7fe fbba 	bl	80064c8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8007d54:	69fb      	ldr	r3, [r7, #28]
 8007d56:	f003 0307 	and.w	r3, r3, #7
 8007d5a:	2b00      	cmp	r3, #0
 8007d5c:	d00b      	beq.n	8007d76 <pvPortMalloc+0x17a>
	__asm volatile
 8007d5e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007d62:	f383 8811 	msr	BASEPRI, r3
 8007d66:	f3bf 8f6f 	isb	sy
 8007d6a:	f3bf 8f4f 	dsb	sy
 8007d6e:	60fb      	str	r3, [r7, #12]
}
 8007d70:	bf00      	nop
 8007d72:	bf00      	nop
 8007d74:	e7fd      	b.n	8007d72 <pvPortMalloc+0x176>
	return pvReturn;
 8007d76:	69fb      	ldr	r3, [r7, #28]
}
 8007d78:	4618      	mov	r0, r3
 8007d7a:	3728      	adds	r7, #40	@ 0x28
 8007d7c:	46bd      	mov	sp, r7
 8007d7e:	bd80      	pop	{r7, pc}
 8007d80:	2000a7c0 	.word	0x2000a7c0
 8007d84:	2000a7d4 	.word	0x2000a7d4
 8007d88:	2000a7c4 	.word	0x2000a7c4
 8007d8c:	2000a7b8 	.word	0x2000a7b8
 8007d90:	2000a7c8 	.word	0x2000a7c8
 8007d94:	2000a7cc 	.word	0x2000a7cc

08007d98 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8007d98:	b580      	push	{r7, lr}
 8007d9a:	b086      	sub	sp, #24
 8007d9c:	af00      	add	r7, sp, #0
 8007d9e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	2b00      	cmp	r3, #0
 8007da8:	d04f      	beq.n	8007e4a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8007daa:	2308      	movs	r3, #8
 8007dac:	425b      	negs	r3, r3
 8007dae:	697a      	ldr	r2, [r7, #20]
 8007db0:	4413      	add	r3, r2
 8007db2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8007db4:	697b      	ldr	r3, [r7, #20]
 8007db6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8007db8:	693b      	ldr	r3, [r7, #16]
 8007dba:	685a      	ldr	r2, [r3, #4]
 8007dbc:	4b25      	ldr	r3, [pc, #148]	@ (8007e54 <vPortFree+0xbc>)
 8007dbe:	681b      	ldr	r3, [r3, #0]
 8007dc0:	4013      	ands	r3, r2
 8007dc2:	2b00      	cmp	r3, #0
 8007dc4:	d10b      	bne.n	8007dde <vPortFree+0x46>
	__asm volatile
 8007dc6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007dca:	f383 8811 	msr	BASEPRI, r3
 8007dce:	f3bf 8f6f 	isb	sy
 8007dd2:	f3bf 8f4f 	dsb	sy
 8007dd6:	60fb      	str	r3, [r7, #12]
}
 8007dd8:	bf00      	nop
 8007dda:	bf00      	nop
 8007ddc:	e7fd      	b.n	8007dda <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8007dde:	693b      	ldr	r3, [r7, #16]
 8007de0:	681b      	ldr	r3, [r3, #0]
 8007de2:	2b00      	cmp	r3, #0
 8007de4:	d00b      	beq.n	8007dfe <vPortFree+0x66>
	__asm volatile
 8007de6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007dea:	f383 8811 	msr	BASEPRI, r3
 8007dee:	f3bf 8f6f 	isb	sy
 8007df2:	f3bf 8f4f 	dsb	sy
 8007df6:	60bb      	str	r3, [r7, #8]
}
 8007df8:	bf00      	nop
 8007dfa:	bf00      	nop
 8007dfc:	e7fd      	b.n	8007dfa <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8007dfe:	693b      	ldr	r3, [r7, #16]
 8007e00:	685a      	ldr	r2, [r3, #4]
 8007e02:	4b14      	ldr	r3, [pc, #80]	@ (8007e54 <vPortFree+0xbc>)
 8007e04:	681b      	ldr	r3, [r3, #0]
 8007e06:	4013      	ands	r3, r2
 8007e08:	2b00      	cmp	r3, #0
 8007e0a:	d01e      	beq.n	8007e4a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8007e0c:	693b      	ldr	r3, [r7, #16]
 8007e0e:	681b      	ldr	r3, [r3, #0]
 8007e10:	2b00      	cmp	r3, #0
 8007e12:	d11a      	bne.n	8007e4a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8007e14:	693b      	ldr	r3, [r7, #16]
 8007e16:	685a      	ldr	r2, [r3, #4]
 8007e18:	4b0e      	ldr	r3, [pc, #56]	@ (8007e54 <vPortFree+0xbc>)
 8007e1a:	681b      	ldr	r3, [r3, #0]
 8007e1c:	43db      	mvns	r3, r3
 8007e1e:	401a      	ands	r2, r3
 8007e20:	693b      	ldr	r3, [r7, #16]
 8007e22:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8007e24:	f7fe fb42 	bl	80064ac <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8007e28:	693b      	ldr	r3, [r7, #16]
 8007e2a:	685a      	ldr	r2, [r3, #4]
 8007e2c:	4b0a      	ldr	r3, [pc, #40]	@ (8007e58 <vPortFree+0xc0>)
 8007e2e:	681b      	ldr	r3, [r3, #0]
 8007e30:	4413      	add	r3, r2
 8007e32:	4a09      	ldr	r2, [pc, #36]	@ (8007e58 <vPortFree+0xc0>)
 8007e34:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8007e36:	6938      	ldr	r0, [r7, #16]
 8007e38:	f000 f874 	bl	8007f24 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8007e3c:	4b07      	ldr	r3, [pc, #28]	@ (8007e5c <vPortFree+0xc4>)
 8007e3e:	681b      	ldr	r3, [r3, #0]
 8007e40:	3301      	adds	r3, #1
 8007e42:	4a06      	ldr	r2, [pc, #24]	@ (8007e5c <vPortFree+0xc4>)
 8007e44:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8007e46:	f7fe fb3f 	bl	80064c8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8007e4a:	bf00      	nop
 8007e4c:	3718      	adds	r7, #24
 8007e4e:	46bd      	mov	sp, r7
 8007e50:	bd80      	pop	{r7, pc}
 8007e52:	bf00      	nop
 8007e54:	2000a7d4 	.word	0x2000a7d4
 8007e58:	2000a7c4 	.word	0x2000a7c4
 8007e5c:	2000a7d0 	.word	0x2000a7d0

08007e60 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8007e60:	b480      	push	{r7}
 8007e62:	b085      	sub	sp, #20
 8007e64:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8007e66:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 8007e6a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8007e6c:	4b27      	ldr	r3, [pc, #156]	@ (8007f0c <prvHeapInit+0xac>)
 8007e6e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8007e70:	68fb      	ldr	r3, [r7, #12]
 8007e72:	f003 0307 	and.w	r3, r3, #7
 8007e76:	2b00      	cmp	r3, #0
 8007e78:	d00c      	beq.n	8007e94 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8007e7a:	68fb      	ldr	r3, [r7, #12]
 8007e7c:	3307      	adds	r3, #7
 8007e7e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007e80:	68fb      	ldr	r3, [r7, #12]
 8007e82:	f023 0307 	bic.w	r3, r3, #7
 8007e86:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8007e88:	68ba      	ldr	r2, [r7, #8]
 8007e8a:	68fb      	ldr	r3, [r7, #12]
 8007e8c:	1ad3      	subs	r3, r2, r3
 8007e8e:	4a1f      	ldr	r2, [pc, #124]	@ (8007f0c <prvHeapInit+0xac>)
 8007e90:	4413      	add	r3, r2
 8007e92:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8007e94:	68fb      	ldr	r3, [r7, #12]
 8007e96:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8007e98:	4a1d      	ldr	r2, [pc, #116]	@ (8007f10 <prvHeapInit+0xb0>)
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8007e9e:	4b1c      	ldr	r3, [pc, #112]	@ (8007f10 <prvHeapInit+0xb0>)
 8007ea0:	2200      	movs	r2, #0
 8007ea2:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	68ba      	ldr	r2, [r7, #8]
 8007ea8:	4413      	add	r3, r2
 8007eaa:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8007eac:	2208      	movs	r2, #8
 8007eae:	68fb      	ldr	r3, [r7, #12]
 8007eb0:	1a9b      	subs	r3, r3, r2
 8007eb2:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007eb4:	68fb      	ldr	r3, [r7, #12]
 8007eb6:	f023 0307 	bic.w	r3, r3, #7
 8007eba:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8007ebc:	68fb      	ldr	r3, [r7, #12]
 8007ebe:	4a15      	ldr	r2, [pc, #84]	@ (8007f14 <prvHeapInit+0xb4>)
 8007ec0:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8007ec2:	4b14      	ldr	r3, [pc, #80]	@ (8007f14 <prvHeapInit+0xb4>)
 8007ec4:	681b      	ldr	r3, [r3, #0]
 8007ec6:	2200      	movs	r2, #0
 8007ec8:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8007eca:	4b12      	ldr	r3, [pc, #72]	@ (8007f14 <prvHeapInit+0xb4>)
 8007ecc:	681b      	ldr	r3, [r3, #0]
 8007ece:	2200      	movs	r2, #0
 8007ed0:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8007ed6:	683b      	ldr	r3, [r7, #0]
 8007ed8:	68fa      	ldr	r2, [r7, #12]
 8007eda:	1ad2      	subs	r2, r2, r3
 8007edc:	683b      	ldr	r3, [r7, #0]
 8007ede:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8007ee0:	4b0c      	ldr	r3, [pc, #48]	@ (8007f14 <prvHeapInit+0xb4>)
 8007ee2:	681a      	ldr	r2, [r3, #0]
 8007ee4:	683b      	ldr	r3, [r7, #0]
 8007ee6:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007ee8:	683b      	ldr	r3, [r7, #0]
 8007eea:	685b      	ldr	r3, [r3, #4]
 8007eec:	4a0a      	ldr	r2, [pc, #40]	@ (8007f18 <prvHeapInit+0xb8>)
 8007eee:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007ef0:	683b      	ldr	r3, [r7, #0]
 8007ef2:	685b      	ldr	r3, [r3, #4]
 8007ef4:	4a09      	ldr	r2, [pc, #36]	@ (8007f1c <prvHeapInit+0xbc>)
 8007ef6:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8007ef8:	4b09      	ldr	r3, [pc, #36]	@ (8007f20 <prvHeapInit+0xc0>)
 8007efa:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8007efe:	601a      	str	r2, [r3, #0]
}
 8007f00:	bf00      	nop
 8007f02:	3714      	adds	r7, #20
 8007f04:	46bd      	mov	sp, r7
 8007f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f0a:	4770      	bx	lr
 8007f0c:	20006bb8 	.word	0x20006bb8
 8007f10:	2000a7b8 	.word	0x2000a7b8
 8007f14:	2000a7c0 	.word	0x2000a7c0
 8007f18:	2000a7c8 	.word	0x2000a7c8
 8007f1c:	2000a7c4 	.word	0x2000a7c4
 8007f20:	2000a7d4 	.word	0x2000a7d4

08007f24 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8007f24:	b480      	push	{r7}
 8007f26:	b085      	sub	sp, #20
 8007f28:	af00      	add	r7, sp, #0
 8007f2a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8007f2c:	4b28      	ldr	r3, [pc, #160]	@ (8007fd0 <prvInsertBlockIntoFreeList+0xac>)
 8007f2e:	60fb      	str	r3, [r7, #12]
 8007f30:	e002      	b.n	8007f38 <prvInsertBlockIntoFreeList+0x14>
 8007f32:	68fb      	ldr	r3, [r7, #12]
 8007f34:	681b      	ldr	r3, [r3, #0]
 8007f36:	60fb      	str	r3, [r7, #12]
 8007f38:	68fb      	ldr	r3, [r7, #12]
 8007f3a:	681b      	ldr	r3, [r3, #0]
 8007f3c:	687a      	ldr	r2, [r7, #4]
 8007f3e:	429a      	cmp	r2, r3
 8007f40:	d8f7      	bhi.n	8007f32 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8007f42:	68fb      	ldr	r3, [r7, #12]
 8007f44:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8007f46:	68fb      	ldr	r3, [r7, #12]
 8007f48:	685b      	ldr	r3, [r3, #4]
 8007f4a:	68ba      	ldr	r2, [r7, #8]
 8007f4c:	4413      	add	r3, r2
 8007f4e:	687a      	ldr	r2, [r7, #4]
 8007f50:	429a      	cmp	r2, r3
 8007f52:	d108      	bne.n	8007f66 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8007f54:	68fb      	ldr	r3, [r7, #12]
 8007f56:	685a      	ldr	r2, [r3, #4]
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	685b      	ldr	r3, [r3, #4]
 8007f5c:	441a      	add	r2, r3
 8007f5e:	68fb      	ldr	r3, [r7, #12]
 8007f60:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8007f62:	68fb      	ldr	r3, [r7, #12]
 8007f64:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	685b      	ldr	r3, [r3, #4]
 8007f6e:	68ba      	ldr	r2, [r7, #8]
 8007f70:	441a      	add	r2, r3
 8007f72:	68fb      	ldr	r3, [r7, #12]
 8007f74:	681b      	ldr	r3, [r3, #0]
 8007f76:	429a      	cmp	r2, r3
 8007f78:	d118      	bne.n	8007fac <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8007f7a:	68fb      	ldr	r3, [r7, #12]
 8007f7c:	681a      	ldr	r2, [r3, #0]
 8007f7e:	4b15      	ldr	r3, [pc, #84]	@ (8007fd4 <prvInsertBlockIntoFreeList+0xb0>)
 8007f80:	681b      	ldr	r3, [r3, #0]
 8007f82:	429a      	cmp	r2, r3
 8007f84:	d00d      	beq.n	8007fa2 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	685a      	ldr	r2, [r3, #4]
 8007f8a:	68fb      	ldr	r3, [r7, #12]
 8007f8c:	681b      	ldr	r3, [r3, #0]
 8007f8e:	685b      	ldr	r3, [r3, #4]
 8007f90:	441a      	add	r2, r3
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8007f96:	68fb      	ldr	r3, [r7, #12]
 8007f98:	681b      	ldr	r3, [r3, #0]
 8007f9a:	681a      	ldr	r2, [r3, #0]
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	601a      	str	r2, [r3, #0]
 8007fa0:	e008      	b.n	8007fb4 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8007fa2:	4b0c      	ldr	r3, [pc, #48]	@ (8007fd4 <prvInsertBlockIntoFreeList+0xb0>)
 8007fa4:	681a      	ldr	r2, [r3, #0]
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	601a      	str	r2, [r3, #0]
 8007faa:	e003      	b.n	8007fb4 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8007fac:	68fb      	ldr	r3, [r7, #12]
 8007fae:	681a      	ldr	r2, [r3, #0]
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8007fb4:	68fa      	ldr	r2, [r7, #12]
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	429a      	cmp	r2, r3
 8007fba:	d002      	beq.n	8007fc2 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8007fbc:	68fb      	ldr	r3, [r7, #12]
 8007fbe:	687a      	ldr	r2, [r7, #4]
 8007fc0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007fc2:	bf00      	nop
 8007fc4:	3714      	adds	r7, #20
 8007fc6:	46bd      	mov	sp, r7
 8007fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fcc:	4770      	bx	lr
 8007fce:	bf00      	nop
 8007fd0:	2000a7b8 	.word	0x2000a7b8
 8007fd4:	2000a7c0 	.word	0x2000a7c0

08007fd8 <tcpip_timeouts_mbox_fetch>:
 * @param mbox the mbox to fetch the message from
 * @param msg the place to store the message
 */
static void
tcpip_timeouts_mbox_fetch(sys_mbox_t *mbox, void **msg)
{
 8007fd8:	b580      	push	{r7, lr}
 8007fda:	b084      	sub	sp, #16
 8007fdc:	af00      	add	r7, sp, #0
 8007fde:	6078      	str	r0, [r7, #4]
 8007fe0:	6039      	str	r1, [r7, #0]
  u32_t sleeptime, res;

again:
  LWIP_ASSERT_CORE_LOCKED();

  sleeptime = sys_timeouts_sleeptime();
 8007fe2:	f007 fac1 	bl	800f568 <sys_timeouts_sleeptime>
 8007fe6:	60f8      	str	r0, [r7, #12]
  if (sleeptime == SYS_TIMEOUTS_SLEEPTIME_INFINITE) {
 8007fe8:	68fb      	ldr	r3, [r7, #12]
 8007fea:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007fee:	d10b      	bne.n	8008008 <tcpip_timeouts_mbox_fetch+0x30>
    UNLOCK_TCPIP_CORE();
 8007ff0:	4813      	ldr	r0, [pc, #76]	@ (8008040 <tcpip_timeouts_mbox_fetch+0x68>)
 8007ff2:	f00a f818 	bl	8012026 <sys_mutex_unlock>
    sys_arch_mbox_fetch(mbox, msg, 0);
 8007ff6:	2200      	movs	r2, #0
 8007ff8:	6839      	ldr	r1, [r7, #0]
 8007ffa:	6878      	ldr	r0, [r7, #4]
 8007ffc:	f009 ffa0 	bl	8011f40 <sys_arch_mbox_fetch>
    LOCK_TCPIP_CORE();
 8008000:	480f      	ldr	r0, [pc, #60]	@ (8008040 <tcpip_timeouts_mbox_fetch+0x68>)
 8008002:	f00a f801 	bl	8012008 <sys_mutex_lock>
    return;
 8008006:	e018      	b.n	800803a <tcpip_timeouts_mbox_fetch+0x62>
  } else if (sleeptime == 0) {
 8008008:	68fb      	ldr	r3, [r7, #12]
 800800a:	2b00      	cmp	r3, #0
 800800c:	d102      	bne.n	8008014 <tcpip_timeouts_mbox_fetch+0x3c>
    sys_check_timeouts();
 800800e:	f007 fa71 	bl	800f4f4 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 8008012:	e7e6      	b.n	8007fe2 <tcpip_timeouts_mbox_fetch+0xa>
  }

  UNLOCK_TCPIP_CORE();
 8008014:	480a      	ldr	r0, [pc, #40]	@ (8008040 <tcpip_timeouts_mbox_fetch+0x68>)
 8008016:	f00a f806 	bl	8012026 <sys_mutex_unlock>
  res = sys_arch_mbox_fetch(mbox, msg, sleeptime);
 800801a:	68fa      	ldr	r2, [r7, #12]
 800801c:	6839      	ldr	r1, [r7, #0]
 800801e:	6878      	ldr	r0, [r7, #4]
 8008020:	f009 ff8e 	bl	8011f40 <sys_arch_mbox_fetch>
 8008024:	60b8      	str	r0, [r7, #8]
  LOCK_TCPIP_CORE();
 8008026:	4806      	ldr	r0, [pc, #24]	@ (8008040 <tcpip_timeouts_mbox_fetch+0x68>)
 8008028:	f009 ffee 	bl	8012008 <sys_mutex_lock>
  if (res == SYS_ARCH_TIMEOUT) {
 800802c:	68bb      	ldr	r3, [r7, #8]
 800802e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8008032:	d102      	bne.n	800803a <tcpip_timeouts_mbox_fetch+0x62>
    /* If a SYS_ARCH_TIMEOUT value is returned, a timeout occurred
       before a message could be fetched. */
    sys_check_timeouts();
 8008034:	f007 fa5e 	bl	800f4f4 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 8008038:	e7d3      	b.n	8007fe2 <tcpip_timeouts_mbox_fetch+0xa>
  }
}
 800803a:	3710      	adds	r7, #16
 800803c:	46bd      	mov	sp, r7
 800803e:	bd80      	pop	{r7, pc}
 8008040:	2000a7e4 	.word	0x2000a7e4

08008044 <tcpip_thread>:
 *
 * @param arg unused argument
 */
static void
tcpip_thread(void *arg)
{
 8008044:	b580      	push	{r7, lr}
 8008046:	b084      	sub	sp, #16
 8008048:	af00      	add	r7, sp, #0
 800804a:	6078      	str	r0, [r7, #4]
  struct tcpip_msg *msg;
  LWIP_UNUSED_ARG(arg);

  LWIP_MARK_TCPIP_THREAD();

  LOCK_TCPIP_CORE();
 800804c:	4810      	ldr	r0, [pc, #64]	@ (8008090 <tcpip_thread+0x4c>)
 800804e:	f009 ffdb 	bl	8012008 <sys_mutex_lock>
  if (tcpip_init_done != NULL) {
 8008052:	4b10      	ldr	r3, [pc, #64]	@ (8008094 <tcpip_thread+0x50>)
 8008054:	681b      	ldr	r3, [r3, #0]
 8008056:	2b00      	cmp	r3, #0
 8008058:	d005      	beq.n	8008066 <tcpip_thread+0x22>
    tcpip_init_done(tcpip_init_done_arg);
 800805a:	4b0e      	ldr	r3, [pc, #56]	@ (8008094 <tcpip_thread+0x50>)
 800805c:	681b      	ldr	r3, [r3, #0]
 800805e:	4a0e      	ldr	r2, [pc, #56]	@ (8008098 <tcpip_thread+0x54>)
 8008060:	6812      	ldr	r2, [r2, #0]
 8008062:	4610      	mov	r0, r2
 8008064:	4798      	blx	r3
  }

  while (1) {                          /* MAIN Loop */
    LWIP_TCPIP_THREAD_ALIVE();
    /* wait for a message, timeouts are processed while waiting */
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 8008066:	f107 030c 	add.w	r3, r7, #12
 800806a:	4619      	mov	r1, r3
 800806c:	480b      	ldr	r0, [pc, #44]	@ (800809c <tcpip_thread+0x58>)
 800806e:	f7ff ffb3 	bl	8007fd8 <tcpip_timeouts_mbox_fetch>
    if (msg == NULL) {
 8008072:	68fb      	ldr	r3, [r7, #12]
 8008074:	2b00      	cmp	r3, #0
 8008076:	d106      	bne.n	8008086 <tcpip_thread+0x42>
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: NULL\n"));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 8008078:	4b09      	ldr	r3, [pc, #36]	@ (80080a0 <tcpip_thread+0x5c>)
 800807a:	2291      	movs	r2, #145	@ 0x91
 800807c:	4909      	ldr	r1, [pc, #36]	@ (80080a4 <tcpip_thread+0x60>)
 800807e:	480a      	ldr	r0, [pc, #40]	@ (80080a8 <tcpip_thread+0x64>)
 8008080:	f00a f91c 	bl	80122bc <iprintf>
      continue;
 8008084:	e003      	b.n	800808e <tcpip_thread+0x4a>
    }
    tcpip_thread_handle_msg(msg);
 8008086:	68fb      	ldr	r3, [r7, #12]
 8008088:	4618      	mov	r0, r3
 800808a:	f000 f80f 	bl	80080ac <tcpip_thread_handle_msg>
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 800808e:	e7ea      	b.n	8008066 <tcpip_thread+0x22>
 8008090:	2000a7e4 	.word	0x2000a7e4
 8008094:	2000a7d8 	.word	0x2000a7d8
 8008098:	2000a7dc 	.word	0x2000a7dc
 800809c:	2000a7e0 	.word	0x2000a7e0
 80080a0:	0801321c 	.word	0x0801321c
 80080a4:	0801324c 	.word	0x0801324c
 80080a8:	0801326c 	.word	0x0801326c

080080ac <tcpip_thread_handle_msg>:
/* Handle a single tcpip_msg
 * This is in its own function for access by tests only.
 */
static void
tcpip_thread_handle_msg(struct tcpip_msg *msg)
{
 80080ac:	b580      	push	{r7, lr}
 80080ae:	b082      	sub	sp, #8
 80080b0:	af00      	add	r7, sp, #0
 80080b2:	6078      	str	r0, [r7, #4]
  switch (msg->type) {
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	781b      	ldrb	r3, [r3, #0]
 80080b8:	2b02      	cmp	r3, #2
 80080ba:	d026      	beq.n	800810a <tcpip_thread_handle_msg+0x5e>
 80080bc:	2b02      	cmp	r3, #2
 80080be:	dc2b      	bgt.n	8008118 <tcpip_thread_handle_msg+0x6c>
 80080c0:	2b00      	cmp	r3, #0
 80080c2:	d002      	beq.n	80080ca <tcpip_thread_handle_msg+0x1e>
 80080c4:	2b01      	cmp	r3, #1
 80080c6:	d015      	beq.n	80080f4 <tcpip_thread_handle_msg+0x48>
 80080c8:	e026      	b.n	8008118 <tcpip_thread_handle_msg+0x6c>
#endif /* !LWIP_TCPIP_CORE_LOCKING */

#if !LWIP_TCPIP_CORE_LOCKING_INPUT
    case TCPIP_MSG_INPKT:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: PACKET %p\n", (void *)msg));
      if (msg->msg.inp.input_fn(msg->msg.inp.p, msg->msg.inp.netif) != ERR_OK) {
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	68db      	ldr	r3, [r3, #12]
 80080ce:	687a      	ldr	r2, [r7, #4]
 80080d0:	6850      	ldr	r0, [r2, #4]
 80080d2:	687a      	ldr	r2, [r7, #4]
 80080d4:	6892      	ldr	r2, [r2, #8]
 80080d6:	4611      	mov	r1, r2
 80080d8:	4798      	blx	r3
 80080da:	4603      	mov	r3, r0
 80080dc:	2b00      	cmp	r3, #0
 80080de:	d004      	beq.n	80080ea <tcpip_thread_handle_msg+0x3e>
        pbuf_free(msg->msg.inp.p);
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	685b      	ldr	r3, [r3, #4]
 80080e4:	4618      	mov	r0, r3
 80080e6:	f001 fd0b 	bl	8009b00 <pbuf_free>
      }
      memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 80080ea:	6879      	ldr	r1, [r7, #4]
 80080ec:	2009      	movs	r0, #9
 80080ee:	f000 fe63 	bl	8008db8 <memp_free>
      break;
 80080f2:	e018      	b.n	8008126 <tcpip_thread_handle_msg+0x7a>
      break;
#endif /* LWIP_TCPIP_TIMEOUT && LWIP_TIMERS */

    case TCPIP_MSG_CALLBACK:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	685b      	ldr	r3, [r3, #4]
 80080f8:	687a      	ldr	r2, [r7, #4]
 80080fa:	6892      	ldr	r2, [r2, #8]
 80080fc:	4610      	mov	r0, r2
 80080fe:	4798      	blx	r3
      memp_free(MEMP_TCPIP_MSG_API, msg);
 8008100:	6879      	ldr	r1, [r7, #4]
 8008102:	2008      	movs	r0, #8
 8008104:	f000 fe58 	bl	8008db8 <memp_free>
      break;
 8008108:	e00d      	b.n	8008126 <tcpip_thread_handle_msg+0x7a>

    case TCPIP_MSG_CALLBACK_STATIC:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK_STATIC %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	685b      	ldr	r3, [r3, #4]
 800810e:	687a      	ldr	r2, [r7, #4]
 8008110:	6892      	ldr	r2, [r2, #8]
 8008112:	4610      	mov	r0, r2
 8008114:	4798      	blx	r3
      break;
 8008116:	e006      	b.n	8008126 <tcpip_thread_handle_msg+0x7a>

    default:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: %d\n", msg->type));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 8008118:	4b05      	ldr	r3, [pc, #20]	@ (8008130 <tcpip_thread_handle_msg+0x84>)
 800811a:	22cf      	movs	r2, #207	@ 0xcf
 800811c:	4905      	ldr	r1, [pc, #20]	@ (8008134 <tcpip_thread_handle_msg+0x88>)
 800811e:	4806      	ldr	r0, [pc, #24]	@ (8008138 <tcpip_thread_handle_msg+0x8c>)
 8008120:	f00a f8cc 	bl	80122bc <iprintf>
      break;
 8008124:	bf00      	nop
  }
}
 8008126:	bf00      	nop
 8008128:	3708      	adds	r7, #8
 800812a:	46bd      	mov	sp, r7
 800812c:	bd80      	pop	{r7, pc}
 800812e:	bf00      	nop
 8008130:	0801321c 	.word	0x0801321c
 8008134:	0801324c 	.word	0x0801324c
 8008138:	0801326c 	.word	0x0801326c

0800813c <tcpip_inpkt>:
 * @param inp the network interface on which the packet was received
 * @param input_fn input function to call
 */
err_t
tcpip_inpkt(struct pbuf *p, struct netif *inp, netif_input_fn input_fn)
{
 800813c:	b580      	push	{r7, lr}
 800813e:	b086      	sub	sp, #24
 8008140:	af00      	add	r7, sp, #0
 8008142:	60f8      	str	r0, [r7, #12]
 8008144:	60b9      	str	r1, [r7, #8]
 8008146:	607a      	str	r2, [r7, #4]
  UNLOCK_TCPIP_CORE();
  return ret;
#else /* LWIP_TCPIP_CORE_LOCKING_INPUT */
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 8008148:	481a      	ldr	r0, [pc, #104]	@ (80081b4 <tcpip_inpkt+0x78>)
 800814a:	f009 ff2a 	bl	8011fa2 <sys_mbox_valid>
 800814e:	4603      	mov	r3, r0
 8008150:	2b00      	cmp	r3, #0
 8008152:	d105      	bne.n	8008160 <tcpip_inpkt+0x24>
 8008154:	4b18      	ldr	r3, [pc, #96]	@ (80081b8 <tcpip_inpkt+0x7c>)
 8008156:	22fc      	movs	r2, #252	@ 0xfc
 8008158:	4918      	ldr	r1, [pc, #96]	@ (80081bc <tcpip_inpkt+0x80>)
 800815a:	4819      	ldr	r0, [pc, #100]	@ (80081c0 <tcpip_inpkt+0x84>)
 800815c:	f00a f8ae 	bl	80122bc <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_INPKT);
 8008160:	2009      	movs	r0, #9
 8008162:	f000 fdb3 	bl	8008ccc <memp_malloc>
 8008166:	6178      	str	r0, [r7, #20]
  if (msg == NULL) {
 8008168:	697b      	ldr	r3, [r7, #20]
 800816a:	2b00      	cmp	r3, #0
 800816c:	d102      	bne.n	8008174 <tcpip_inpkt+0x38>
    return ERR_MEM;
 800816e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8008172:	e01a      	b.n	80081aa <tcpip_inpkt+0x6e>
  }

  msg->type = TCPIP_MSG_INPKT;
 8008174:	697b      	ldr	r3, [r7, #20]
 8008176:	2200      	movs	r2, #0
 8008178:	701a      	strb	r2, [r3, #0]
  msg->msg.inp.p = p;
 800817a:	697b      	ldr	r3, [r7, #20]
 800817c:	68fa      	ldr	r2, [r7, #12]
 800817e:	605a      	str	r2, [r3, #4]
  msg->msg.inp.netif = inp;
 8008180:	697b      	ldr	r3, [r7, #20]
 8008182:	68ba      	ldr	r2, [r7, #8]
 8008184:	609a      	str	r2, [r3, #8]
  msg->msg.inp.input_fn = input_fn;
 8008186:	697b      	ldr	r3, [r7, #20]
 8008188:	687a      	ldr	r2, [r7, #4]
 800818a:	60da      	str	r2, [r3, #12]
  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 800818c:	6979      	ldr	r1, [r7, #20]
 800818e:	4809      	ldr	r0, [pc, #36]	@ (80081b4 <tcpip_inpkt+0x78>)
 8008190:	f009 febc 	bl	8011f0c <sys_mbox_trypost>
 8008194:	4603      	mov	r3, r0
 8008196:	2b00      	cmp	r3, #0
 8008198:	d006      	beq.n	80081a8 <tcpip_inpkt+0x6c>
    memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 800819a:	6979      	ldr	r1, [r7, #20]
 800819c:	2009      	movs	r0, #9
 800819e:	f000 fe0b 	bl	8008db8 <memp_free>
    return ERR_MEM;
 80081a2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80081a6:	e000      	b.n	80081aa <tcpip_inpkt+0x6e>
  }
  return ERR_OK;
 80081a8:	2300      	movs	r3, #0
#endif /* LWIP_TCPIP_CORE_LOCKING_INPUT */
}
 80081aa:	4618      	mov	r0, r3
 80081ac:	3718      	adds	r7, #24
 80081ae:	46bd      	mov	sp, r7
 80081b0:	bd80      	pop	{r7, pc}
 80081b2:	bf00      	nop
 80081b4:	2000a7e0 	.word	0x2000a7e0
 80081b8:	0801321c 	.word	0x0801321c
 80081bc:	08013294 	.word	0x08013294
 80081c0:	0801326c 	.word	0x0801326c

080081c4 <tcpip_input>:
 *          NETIF_FLAG_ETHERNET flags)
 * @param inp the network interface on which the packet was received
 */
err_t
tcpip_input(struct pbuf *p, struct netif *inp)
{
 80081c4:	b580      	push	{r7, lr}
 80081c6:	b082      	sub	sp, #8
 80081c8:	af00      	add	r7, sp, #0
 80081ca:	6078      	str	r0, [r7, #4]
 80081cc:	6039      	str	r1, [r7, #0]
#if LWIP_ETHERNET
  if (inp->flags & (NETIF_FLAG_ETHARP | NETIF_FLAG_ETHERNET)) {
 80081ce:	683b      	ldr	r3, [r7, #0]
 80081d0:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 80081d4:	f003 0318 	and.w	r3, r3, #24
 80081d8:	2b00      	cmp	r3, #0
 80081da:	d006      	beq.n	80081ea <tcpip_input+0x26>
    return tcpip_inpkt(p, inp, ethernet_input);
 80081dc:	4a08      	ldr	r2, [pc, #32]	@ (8008200 <tcpip_input+0x3c>)
 80081de:	6839      	ldr	r1, [r7, #0]
 80081e0:	6878      	ldr	r0, [r7, #4]
 80081e2:	f7ff ffab 	bl	800813c <tcpip_inpkt>
 80081e6:	4603      	mov	r3, r0
 80081e8:	e005      	b.n	80081f6 <tcpip_input+0x32>
  } else
#endif /* LWIP_ETHERNET */
    return tcpip_inpkt(p, inp, ip_input);
 80081ea:	4a06      	ldr	r2, [pc, #24]	@ (8008204 <tcpip_input+0x40>)
 80081ec:	6839      	ldr	r1, [r7, #0]
 80081ee:	6878      	ldr	r0, [r7, #4]
 80081f0:	f7ff ffa4 	bl	800813c <tcpip_inpkt>
 80081f4:	4603      	mov	r3, r0
}
 80081f6:	4618      	mov	r0, r3
 80081f8:	3708      	adds	r7, #8
 80081fa:	46bd      	mov	sp, r7
 80081fc:	bd80      	pop	{r7, pc}
 80081fe:	bf00      	nop
 8008200:	08011d2d 	.word	0x08011d2d
 8008204:	08010c35 	.word	0x08010c35

08008208 <tcpip_try_callback>:
 *
 * @see tcpip_callback
 */
err_t
tcpip_try_callback(tcpip_callback_fn function, void *ctx)
{
 8008208:	b580      	push	{r7, lr}
 800820a:	b084      	sub	sp, #16
 800820c:	af00      	add	r7, sp, #0
 800820e:	6078      	str	r0, [r7, #4]
 8008210:	6039      	str	r1, [r7, #0]
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 8008212:	4819      	ldr	r0, [pc, #100]	@ (8008278 <tcpip_try_callback+0x70>)
 8008214:	f009 fec5 	bl	8011fa2 <sys_mbox_valid>
 8008218:	4603      	mov	r3, r0
 800821a:	2b00      	cmp	r3, #0
 800821c:	d106      	bne.n	800822c <tcpip_try_callback+0x24>
 800821e:	4b17      	ldr	r3, [pc, #92]	@ (800827c <tcpip_try_callback+0x74>)
 8008220:	f240 125d 	movw	r2, #349	@ 0x15d
 8008224:	4916      	ldr	r1, [pc, #88]	@ (8008280 <tcpip_try_callback+0x78>)
 8008226:	4817      	ldr	r0, [pc, #92]	@ (8008284 <tcpip_try_callback+0x7c>)
 8008228:	f00a f848 	bl	80122bc <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_API);
 800822c:	2008      	movs	r0, #8
 800822e:	f000 fd4d 	bl	8008ccc <memp_malloc>
 8008232:	60f8      	str	r0, [r7, #12]
  if (msg == NULL) {
 8008234:	68fb      	ldr	r3, [r7, #12]
 8008236:	2b00      	cmp	r3, #0
 8008238:	d102      	bne.n	8008240 <tcpip_try_callback+0x38>
    return ERR_MEM;
 800823a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800823e:	e017      	b.n	8008270 <tcpip_try_callback+0x68>
  }

  msg->type = TCPIP_MSG_CALLBACK;
 8008240:	68fb      	ldr	r3, [r7, #12]
 8008242:	2201      	movs	r2, #1
 8008244:	701a      	strb	r2, [r3, #0]
  msg->msg.cb.function = function;
 8008246:	68fb      	ldr	r3, [r7, #12]
 8008248:	687a      	ldr	r2, [r7, #4]
 800824a:	605a      	str	r2, [r3, #4]
  msg->msg.cb.ctx = ctx;
 800824c:	68fb      	ldr	r3, [r7, #12]
 800824e:	683a      	ldr	r2, [r7, #0]
 8008250:	609a      	str	r2, [r3, #8]

  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 8008252:	68f9      	ldr	r1, [r7, #12]
 8008254:	4808      	ldr	r0, [pc, #32]	@ (8008278 <tcpip_try_callback+0x70>)
 8008256:	f009 fe59 	bl	8011f0c <sys_mbox_trypost>
 800825a:	4603      	mov	r3, r0
 800825c:	2b00      	cmp	r3, #0
 800825e:	d006      	beq.n	800826e <tcpip_try_callback+0x66>
    memp_free(MEMP_TCPIP_MSG_API, msg);
 8008260:	68f9      	ldr	r1, [r7, #12]
 8008262:	2008      	movs	r0, #8
 8008264:	f000 fda8 	bl	8008db8 <memp_free>
    return ERR_MEM;
 8008268:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800826c:	e000      	b.n	8008270 <tcpip_try_callback+0x68>
  }
  return ERR_OK;
 800826e:	2300      	movs	r3, #0
}
 8008270:	4618      	mov	r0, r3
 8008272:	3710      	adds	r7, #16
 8008274:	46bd      	mov	sp, r7
 8008276:	bd80      	pop	{r7, pc}
 8008278:	2000a7e0 	.word	0x2000a7e0
 800827c:	0801321c 	.word	0x0801321c
 8008280:	08013294 	.word	0x08013294
 8008284:	0801326c 	.word	0x0801326c

08008288 <tcpip_init>:
 * @param initfunc a function to call when tcpip_thread is running and finished initializing
 * @param arg argument to pass to initfunc
 */
void
tcpip_init(tcpip_init_done_fn initfunc, void *arg)
{
 8008288:	b580      	push	{r7, lr}
 800828a:	b084      	sub	sp, #16
 800828c:	af02      	add	r7, sp, #8
 800828e:	6078      	str	r0, [r7, #4]
 8008290:	6039      	str	r1, [r7, #0]
  lwip_init();
 8008292:	f000 f871 	bl	8008378 <lwip_init>

  tcpip_init_done = initfunc;
 8008296:	4a17      	ldr	r2, [pc, #92]	@ (80082f4 <tcpip_init+0x6c>)
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	6013      	str	r3, [r2, #0]
  tcpip_init_done_arg = arg;
 800829c:	4a16      	ldr	r2, [pc, #88]	@ (80082f8 <tcpip_init+0x70>)
 800829e:	683b      	ldr	r3, [r7, #0]
 80082a0:	6013      	str	r3, [r2, #0]
  if (sys_mbox_new(&tcpip_mbox, TCPIP_MBOX_SIZE) != ERR_OK) {
 80082a2:	2106      	movs	r1, #6
 80082a4:	4815      	ldr	r0, [pc, #84]	@ (80082fc <tcpip_init+0x74>)
 80082a6:	f009 fe17 	bl	8011ed8 <sys_mbox_new>
 80082aa:	4603      	mov	r3, r0
 80082ac:	2b00      	cmp	r3, #0
 80082ae:	d006      	beq.n	80082be <tcpip_init+0x36>
    LWIP_ASSERT("failed to create tcpip_thread mbox", 0);
 80082b0:	4b13      	ldr	r3, [pc, #76]	@ (8008300 <tcpip_init+0x78>)
 80082b2:	f240 2261 	movw	r2, #609	@ 0x261
 80082b6:	4913      	ldr	r1, [pc, #76]	@ (8008304 <tcpip_init+0x7c>)
 80082b8:	4813      	ldr	r0, [pc, #76]	@ (8008308 <tcpip_init+0x80>)
 80082ba:	f009 ffff 	bl	80122bc <iprintf>
  }
#if LWIP_TCPIP_CORE_LOCKING
  if (sys_mutex_new(&lock_tcpip_core) != ERR_OK) {
 80082be:	4813      	ldr	r0, [pc, #76]	@ (800830c <tcpip_init+0x84>)
 80082c0:	f009 fe8c 	bl	8011fdc <sys_mutex_new>
 80082c4:	4603      	mov	r3, r0
 80082c6:	2b00      	cmp	r3, #0
 80082c8:	d006      	beq.n	80082d8 <tcpip_init+0x50>
    LWIP_ASSERT("failed to create lock_tcpip_core", 0);
 80082ca:	4b0d      	ldr	r3, [pc, #52]	@ (8008300 <tcpip_init+0x78>)
 80082cc:	f240 2265 	movw	r2, #613	@ 0x265
 80082d0:	490f      	ldr	r1, [pc, #60]	@ (8008310 <tcpip_init+0x88>)
 80082d2:	480d      	ldr	r0, [pc, #52]	@ (8008308 <tcpip_init+0x80>)
 80082d4:	f009 fff2 	bl	80122bc <iprintf>
  }
#endif /* LWIP_TCPIP_CORE_LOCKING */

  sys_thread_new(TCPIP_THREAD_NAME, tcpip_thread, NULL, TCPIP_THREAD_STACKSIZE, TCPIP_THREAD_PRIO);
 80082d8:	2318      	movs	r3, #24
 80082da:	9300      	str	r3, [sp, #0]
 80082dc:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80082e0:	2200      	movs	r2, #0
 80082e2:	490c      	ldr	r1, [pc, #48]	@ (8008314 <tcpip_init+0x8c>)
 80082e4:	480c      	ldr	r0, [pc, #48]	@ (8008318 <tcpip_init+0x90>)
 80082e6:	f009 feab 	bl	8012040 <sys_thread_new>
}
 80082ea:	bf00      	nop
 80082ec:	3708      	adds	r7, #8
 80082ee:	46bd      	mov	sp, r7
 80082f0:	bd80      	pop	{r7, pc}
 80082f2:	bf00      	nop
 80082f4:	2000a7d8 	.word	0x2000a7d8
 80082f8:	2000a7dc 	.word	0x2000a7dc
 80082fc:	2000a7e0 	.word	0x2000a7e0
 8008300:	0801321c 	.word	0x0801321c
 8008304:	080132a4 	.word	0x080132a4
 8008308:	0801326c 	.word	0x0801326c
 800830c:	2000a7e4 	.word	0x2000a7e4
 8008310:	080132c8 	.word	0x080132c8
 8008314:	08008045 	.word	0x08008045
 8008318:	080132ec 	.word	0x080132ec

0800831c <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 800831c:	b480      	push	{r7}
 800831e:	b083      	sub	sp, #12
 8008320:	af00      	add	r7, sp, #0
 8008322:	4603      	mov	r3, r0
 8008324:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 8008326:	88fb      	ldrh	r3, [r7, #6]
 8008328:	021b      	lsls	r3, r3, #8
 800832a:	b21a      	sxth	r2, r3
 800832c:	88fb      	ldrh	r3, [r7, #6]
 800832e:	0a1b      	lsrs	r3, r3, #8
 8008330:	b29b      	uxth	r3, r3
 8008332:	b21b      	sxth	r3, r3
 8008334:	4313      	orrs	r3, r2
 8008336:	b21b      	sxth	r3, r3
 8008338:	b29b      	uxth	r3, r3
}
 800833a:	4618      	mov	r0, r3
 800833c:	370c      	adds	r7, #12
 800833e:	46bd      	mov	sp, r7
 8008340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008344:	4770      	bx	lr

08008346 <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 8008346:	b480      	push	{r7}
 8008348:	b083      	sub	sp, #12
 800834a:	af00      	add	r7, sp, #0
 800834c:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	061a      	lsls	r2, r3, #24
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	021b      	lsls	r3, r3, #8
 8008356:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800835a:	431a      	orrs	r2, r3
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	0a1b      	lsrs	r3, r3, #8
 8008360:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8008364:	431a      	orrs	r2, r3
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	0e1b      	lsrs	r3, r3, #24
 800836a:	4313      	orrs	r3, r2
}
 800836c:	4618      	mov	r0, r3
 800836e:	370c      	adds	r7, #12
 8008370:	46bd      	mov	sp, r7
 8008372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008376:	4770      	bx	lr

08008378 <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 8008378:	b580      	push	{r7, lr}
 800837a:	b082      	sub	sp, #8
 800837c:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 800837e:	2300      	movs	r3, #0
 8008380:	607b      	str	r3, [r7, #4]
#endif

  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
 8008382:	f009 fe1f 	bl	8011fc4 <sys_init>
#endif /* !NO_SYS */
  mem_init();
 8008386:	f000 f8d5 	bl	8008534 <mem_init>
  memp_init();
 800838a:	f000 fc31 	bl	8008bf0 <memp_init>
  pbuf_init();
  netif_init();
 800838e:	f000 fd3d 	bl	8008e0c <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 8008392:	f007 f921 	bl	800f5d8 <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 8008396:	f001 fe4d 	bl	800a034 <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 800839a:	f007 f863 	bl	800f464 <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 800839e:	bf00      	nop
 80083a0:	3708      	adds	r7, #8
 80083a2:	46bd      	mov	sp, r7
 80083a4:	bd80      	pop	{r7, pc}
	...

080083a8 <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 80083a8:	b480      	push	{r7}
 80083aa:	b083      	sub	sp, #12
 80083ac:	af00      	add	r7, sp, #0
 80083ae:	4603      	mov	r3, r0
 80083b0:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 80083b2:	4b05      	ldr	r3, [pc, #20]	@ (80083c8 <ptr_to_mem+0x20>)
 80083b4:	681a      	ldr	r2, [r3, #0]
 80083b6:	88fb      	ldrh	r3, [r7, #6]
 80083b8:	4413      	add	r3, r2
}
 80083ba:	4618      	mov	r0, r3
 80083bc:	370c      	adds	r7, #12
 80083be:	46bd      	mov	sp, r7
 80083c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083c4:	4770      	bx	lr
 80083c6:	bf00      	nop
 80083c8:	2000d014 	.word	0x2000d014

080083cc <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 80083cc:	b480      	push	{r7}
 80083ce:	b083      	sub	sp, #12
 80083d0:	af00      	add	r7, sp, #0
 80083d2:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 80083d4:	4b05      	ldr	r3, [pc, #20]	@ (80083ec <mem_to_ptr+0x20>)
 80083d6:	681b      	ldr	r3, [r3, #0]
 80083d8:	687a      	ldr	r2, [r7, #4]
 80083da:	1ad3      	subs	r3, r2, r3
 80083dc:	b29b      	uxth	r3, r3
}
 80083de:	4618      	mov	r0, r3
 80083e0:	370c      	adds	r7, #12
 80083e2:	46bd      	mov	sp, r7
 80083e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083e8:	4770      	bx	lr
 80083ea:	bf00      	nop
 80083ec:	2000d014 	.word	0x2000d014

080083f0 <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 80083f0:	b590      	push	{r4, r7, lr}
 80083f2:	b085      	sub	sp, #20
 80083f4:	af00      	add	r7, sp, #0
 80083f6:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 80083f8:	4b45      	ldr	r3, [pc, #276]	@ (8008510 <plug_holes+0x120>)
 80083fa:	681b      	ldr	r3, [r3, #0]
 80083fc:	687a      	ldr	r2, [r7, #4]
 80083fe:	429a      	cmp	r2, r3
 8008400:	d206      	bcs.n	8008410 <plug_holes+0x20>
 8008402:	4b44      	ldr	r3, [pc, #272]	@ (8008514 <plug_holes+0x124>)
 8008404:	f240 12df 	movw	r2, #479	@ 0x1df
 8008408:	4943      	ldr	r1, [pc, #268]	@ (8008518 <plug_holes+0x128>)
 800840a:	4844      	ldr	r0, [pc, #272]	@ (800851c <plug_holes+0x12c>)
 800840c:	f009 ff56 	bl	80122bc <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 8008410:	4b43      	ldr	r3, [pc, #268]	@ (8008520 <plug_holes+0x130>)
 8008412:	681b      	ldr	r3, [r3, #0]
 8008414:	687a      	ldr	r2, [r7, #4]
 8008416:	429a      	cmp	r2, r3
 8008418:	d306      	bcc.n	8008428 <plug_holes+0x38>
 800841a:	4b3e      	ldr	r3, [pc, #248]	@ (8008514 <plug_holes+0x124>)
 800841c:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 8008420:	4940      	ldr	r1, [pc, #256]	@ (8008524 <plug_holes+0x134>)
 8008422:	483e      	ldr	r0, [pc, #248]	@ (800851c <plug_holes+0x12c>)
 8008424:	f009 ff4a 	bl	80122bc <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	791b      	ldrb	r3, [r3, #4]
 800842c:	2b00      	cmp	r3, #0
 800842e:	d006      	beq.n	800843e <plug_holes+0x4e>
 8008430:	4b38      	ldr	r3, [pc, #224]	@ (8008514 <plug_holes+0x124>)
 8008432:	f240 12e1 	movw	r2, #481	@ 0x1e1
 8008436:	493c      	ldr	r1, [pc, #240]	@ (8008528 <plug_holes+0x138>)
 8008438:	4838      	ldr	r0, [pc, #224]	@ (800851c <plug_holes+0x12c>)
 800843a:	f009 ff3f 	bl	80122bc <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	881b      	ldrh	r3, [r3, #0]
 8008442:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 8008446:	d906      	bls.n	8008456 <plug_holes+0x66>
 8008448:	4b32      	ldr	r3, [pc, #200]	@ (8008514 <plug_holes+0x124>)
 800844a:	f44f 72f2 	mov.w	r2, #484	@ 0x1e4
 800844e:	4937      	ldr	r1, [pc, #220]	@ (800852c <plug_holes+0x13c>)
 8008450:	4832      	ldr	r0, [pc, #200]	@ (800851c <plug_holes+0x12c>)
 8008452:	f009 ff33 	bl	80122bc <iprintf>

  nmem = ptr_to_mem(mem->next);
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	881b      	ldrh	r3, [r3, #0]
 800845a:	4618      	mov	r0, r3
 800845c:	f7ff ffa4 	bl	80083a8 <ptr_to_mem>
 8008460:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 8008462:	687a      	ldr	r2, [r7, #4]
 8008464:	68fb      	ldr	r3, [r7, #12]
 8008466:	429a      	cmp	r2, r3
 8008468:	d024      	beq.n	80084b4 <plug_holes+0xc4>
 800846a:	68fb      	ldr	r3, [r7, #12]
 800846c:	791b      	ldrb	r3, [r3, #4]
 800846e:	2b00      	cmp	r3, #0
 8008470:	d120      	bne.n	80084b4 <plug_holes+0xc4>
 8008472:	4b2b      	ldr	r3, [pc, #172]	@ (8008520 <plug_holes+0x130>)
 8008474:	681b      	ldr	r3, [r3, #0]
 8008476:	68fa      	ldr	r2, [r7, #12]
 8008478:	429a      	cmp	r2, r3
 800847a:	d01b      	beq.n	80084b4 <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 800847c:	4b2c      	ldr	r3, [pc, #176]	@ (8008530 <plug_holes+0x140>)
 800847e:	681b      	ldr	r3, [r3, #0]
 8008480:	68fa      	ldr	r2, [r7, #12]
 8008482:	429a      	cmp	r2, r3
 8008484:	d102      	bne.n	800848c <plug_holes+0x9c>
      lfree = mem;
 8008486:	4a2a      	ldr	r2, [pc, #168]	@ (8008530 <plug_holes+0x140>)
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 800848c:	68fb      	ldr	r3, [r7, #12]
 800848e:	881a      	ldrh	r2, [r3, #0]
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 8008494:	68fb      	ldr	r3, [r7, #12]
 8008496:	881b      	ldrh	r3, [r3, #0]
 8008498:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 800849c:	d00a      	beq.n	80084b4 <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 800849e:	68fb      	ldr	r3, [r7, #12]
 80084a0:	881b      	ldrh	r3, [r3, #0]
 80084a2:	4618      	mov	r0, r3
 80084a4:	f7ff ff80 	bl	80083a8 <ptr_to_mem>
 80084a8:	4604      	mov	r4, r0
 80084aa:	6878      	ldr	r0, [r7, #4]
 80084ac:	f7ff ff8e 	bl	80083cc <mem_to_ptr>
 80084b0:	4603      	mov	r3, r0
 80084b2:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	885b      	ldrh	r3, [r3, #2]
 80084b8:	4618      	mov	r0, r3
 80084ba:	f7ff ff75 	bl	80083a8 <ptr_to_mem>
 80084be:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 80084c0:	68ba      	ldr	r2, [r7, #8]
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	429a      	cmp	r2, r3
 80084c6:	d01f      	beq.n	8008508 <plug_holes+0x118>
 80084c8:	68bb      	ldr	r3, [r7, #8]
 80084ca:	791b      	ldrb	r3, [r3, #4]
 80084cc:	2b00      	cmp	r3, #0
 80084ce:	d11b      	bne.n	8008508 <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 80084d0:	4b17      	ldr	r3, [pc, #92]	@ (8008530 <plug_holes+0x140>)
 80084d2:	681b      	ldr	r3, [r3, #0]
 80084d4:	687a      	ldr	r2, [r7, #4]
 80084d6:	429a      	cmp	r2, r3
 80084d8:	d102      	bne.n	80084e0 <plug_holes+0xf0>
      lfree = pmem;
 80084da:	4a15      	ldr	r2, [pc, #84]	@ (8008530 <plug_holes+0x140>)
 80084dc:	68bb      	ldr	r3, [r7, #8]
 80084de:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	881a      	ldrh	r2, [r3, #0]
 80084e4:	68bb      	ldr	r3, [r7, #8]
 80084e6:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	881b      	ldrh	r3, [r3, #0]
 80084ec:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 80084f0:	d00a      	beq.n	8008508 <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	881b      	ldrh	r3, [r3, #0]
 80084f6:	4618      	mov	r0, r3
 80084f8:	f7ff ff56 	bl	80083a8 <ptr_to_mem>
 80084fc:	4604      	mov	r4, r0
 80084fe:	68b8      	ldr	r0, [r7, #8]
 8008500:	f7ff ff64 	bl	80083cc <mem_to_ptr>
 8008504:	4603      	mov	r3, r0
 8008506:	8063      	strh	r3, [r4, #2]
    }
  }
}
 8008508:	bf00      	nop
 800850a:	3714      	adds	r7, #20
 800850c:	46bd      	mov	sp, r7
 800850e:	bd90      	pop	{r4, r7, pc}
 8008510:	2000d014 	.word	0x2000d014
 8008514:	080132fc 	.word	0x080132fc
 8008518:	0801332c 	.word	0x0801332c
 800851c:	08013344 	.word	0x08013344
 8008520:	2000d018 	.word	0x2000d018
 8008524:	0801336c 	.word	0x0801336c
 8008528:	08013388 	.word	0x08013388
 800852c:	080133a4 	.word	0x080133a4
 8008530:	2000d020 	.word	0x2000d020

08008534 <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 8008534:	b580      	push	{r7, lr}
 8008536:	b082      	sub	sp, #8
 8008538:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 800853a:	4b1f      	ldr	r3, [pc, #124]	@ (80085b8 <mem_init+0x84>)
 800853c:	3303      	adds	r3, #3
 800853e:	f023 0303 	bic.w	r3, r3, #3
 8008542:	461a      	mov	r2, r3
 8008544:	4b1d      	ldr	r3, [pc, #116]	@ (80085bc <mem_init+0x88>)
 8008546:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 8008548:	4b1c      	ldr	r3, [pc, #112]	@ (80085bc <mem_init+0x88>)
 800854a:	681b      	ldr	r3, [r3, #0]
 800854c:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	f44f 5220 	mov.w	r2, #10240	@ 0x2800
 8008554:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	2200      	movs	r2, #0
 800855a:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	2200      	movs	r2, #0
 8008560:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 8008562:	f44f 5020 	mov.w	r0, #10240	@ 0x2800
 8008566:	f7ff ff1f 	bl	80083a8 <ptr_to_mem>
 800856a:	4603      	mov	r3, r0
 800856c:	4a14      	ldr	r2, [pc, #80]	@ (80085c0 <mem_init+0x8c>)
 800856e:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 8008570:	4b13      	ldr	r3, [pc, #76]	@ (80085c0 <mem_init+0x8c>)
 8008572:	681b      	ldr	r3, [r3, #0]
 8008574:	2201      	movs	r2, #1
 8008576:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 8008578:	4b11      	ldr	r3, [pc, #68]	@ (80085c0 <mem_init+0x8c>)
 800857a:	681b      	ldr	r3, [r3, #0]
 800857c:	f44f 5220 	mov.w	r2, #10240	@ 0x2800
 8008580:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 8008582:	4b0f      	ldr	r3, [pc, #60]	@ (80085c0 <mem_init+0x8c>)
 8008584:	681b      	ldr	r3, [r3, #0]
 8008586:	f44f 5220 	mov.w	r2, #10240	@ 0x2800
 800858a:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 800858c:	4b0b      	ldr	r3, [pc, #44]	@ (80085bc <mem_init+0x88>)
 800858e:	681b      	ldr	r3, [r3, #0]
 8008590:	4a0c      	ldr	r2, [pc, #48]	@ (80085c4 <mem_init+0x90>)
 8008592:	6013      	str	r3, [r2, #0]

  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
 8008594:	480c      	ldr	r0, [pc, #48]	@ (80085c8 <mem_init+0x94>)
 8008596:	f009 fd21 	bl	8011fdc <sys_mutex_new>
 800859a:	4603      	mov	r3, r0
 800859c:	2b00      	cmp	r3, #0
 800859e:	d006      	beq.n	80085ae <mem_init+0x7a>
    LWIP_ASSERT("failed to create mem_mutex", 0);
 80085a0:	4b0a      	ldr	r3, [pc, #40]	@ (80085cc <mem_init+0x98>)
 80085a2:	f240 221f 	movw	r2, #543	@ 0x21f
 80085a6:	490a      	ldr	r1, [pc, #40]	@ (80085d0 <mem_init+0x9c>)
 80085a8:	480a      	ldr	r0, [pc, #40]	@ (80085d4 <mem_init+0xa0>)
 80085aa:	f009 fe87 	bl	80122bc <iprintf>
  }
}
 80085ae:	bf00      	nop
 80085b0:	3708      	adds	r7, #8
 80085b2:	46bd      	mov	sp, r7
 80085b4:	bd80      	pop	{r7, pc}
 80085b6:	bf00      	nop
 80085b8:	2000a800 	.word	0x2000a800
 80085bc:	2000d014 	.word	0x2000d014
 80085c0:	2000d018 	.word	0x2000d018
 80085c4:	2000d020 	.word	0x2000d020
 80085c8:	2000d01c 	.word	0x2000d01c
 80085cc:	080132fc 	.word	0x080132fc
 80085d0:	080133d0 	.word	0x080133d0
 80085d4:	08013344 	.word	0x08013344

080085d8 <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 80085d8:	b580      	push	{r7, lr}
 80085da:	b086      	sub	sp, #24
 80085dc:	af00      	add	r7, sp, #0
 80085de:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 80085e0:	6878      	ldr	r0, [r7, #4]
 80085e2:	f7ff fef3 	bl	80083cc <mem_to_ptr>
 80085e6:	4603      	mov	r3, r0
 80085e8:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	881b      	ldrh	r3, [r3, #0]
 80085ee:	4618      	mov	r0, r3
 80085f0:	f7ff feda 	bl	80083a8 <ptr_to_mem>
 80085f4:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	885b      	ldrh	r3, [r3, #2]
 80085fa:	4618      	mov	r0, r3
 80085fc:	f7ff fed4 	bl	80083a8 <ptr_to_mem>
 8008600:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	881b      	ldrh	r3, [r3, #0]
 8008606:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 800860a:	d818      	bhi.n	800863e <mem_link_valid+0x66>
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	885b      	ldrh	r3, [r3, #2]
 8008610:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 8008614:	d813      	bhi.n	800863e <mem_link_valid+0x66>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800861a:	8afa      	ldrh	r2, [r7, #22]
 800861c:	429a      	cmp	r2, r3
 800861e:	d004      	beq.n	800862a <mem_link_valid+0x52>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8008620:	68fb      	ldr	r3, [r7, #12]
 8008622:	881b      	ldrh	r3, [r3, #0]
 8008624:	8afa      	ldrh	r2, [r7, #22]
 8008626:	429a      	cmp	r2, r3
 8008628:	d109      	bne.n	800863e <mem_link_valid+0x66>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800862a:	4b08      	ldr	r3, [pc, #32]	@ (800864c <mem_link_valid+0x74>)
 800862c:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800862e:	693a      	ldr	r2, [r7, #16]
 8008630:	429a      	cmp	r2, r3
 8008632:	d006      	beq.n	8008642 <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 8008634:	693b      	ldr	r3, [r7, #16]
 8008636:	885b      	ldrh	r3, [r3, #2]
 8008638:	8afa      	ldrh	r2, [r7, #22]
 800863a:	429a      	cmp	r2, r3
 800863c:	d001      	beq.n	8008642 <mem_link_valid+0x6a>
    return 0;
 800863e:	2300      	movs	r3, #0
 8008640:	e000      	b.n	8008644 <mem_link_valid+0x6c>
  }
  return 1;
 8008642:	2301      	movs	r3, #1
}
 8008644:	4618      	mov	r0, r3
 8008646:	3718      	adds	r7, #24
 8008648:	46bd      	mov	sp, r7
 800864a:	bd80      	pop	{r7, pc}
 800864c:	2000d018 	.word	0x2000d018

08008650 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 8008650:	b580      	push	{r7, lr}
 8008652:	b088      	sub	sp, #32
 8008654:	af00      	add	r7, sp, #0
 8008656:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	2b00      	cmp	r3, #0
 800865c:	d070      	beq.n	8008740 <mem_free+0xf0>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	f003 0303 	and.w	r3, r3, #3
 8008664:	2b00      	cmp	r3, #0
 8008666:	d00d      	beq.n	8008684 <mem_free+0x34>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 8008668:	4b37      	ldr	r3, [pc, #220]	@ (8008748 <mem_free+0xf8>)
 800866a:	f240 2273 	movw	r2, #627	@ 0x273
 800866e:	4937      	ldr	r1, [pc, #220]	@ (800874c <mem_free+0xfc>)
 8008670:	4837      	ldr	r0, [pc, #220]	@ (8008750 <mem_free+0x100>)
 8008672:	f009 fe23 	bl	80122bc <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 8008676:	f009 fd03 	bl	8012080 <sys_arch_protect>
 800867a:	60f8      	str	r0, [r7, #12]
 800867c:	68f8      	ldr	r0, [r7, #12]
 800867e:	f009 fd0d 	bl	801209c <sys_arch_unprotect>
    return;
 8008682:	e05e      	b.n	8008742 <mem_free+0xf2>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	3b08      	subs	r3, #8
 8008688:	61fb      	str	r3, [r7, #28]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 800868a:	4b32      	ldr	r3, [pc, #200]	@ (8008754 <mem_free+0x104>)
 800868c:	681b      	ldr	r3, [r3, #0]
 800868e:	69fa      	ldr	r2, [r7, #28]
 8008690:	429a      	cmp	r2, r3
 8008692:	d306      	bcc.n	80086a2 <mem_free+0x52>
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	f103 020c 	add.w	r2, r3, #12
 800869a:	4b2f      	ldr	r3, [pc, #188]	@ (8008758 <mem_free+0x108>)
 800869c:	681b      	ldr	r3, [r3, #0]
 800869e:	429a      	cmp	r2, r3
 80086a0:	d90d      	bls.n	80086be <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 80086a2:	4b29      	ldr	r3, [pc, #164]	@ (8008748 <mem_free+0xf8>)
 80086a4:	f240 227f 	movw	r2, #639	@ 0x27f
 80086a8:	492c      	ldr	r1, [pc, #176]	@ (800875c <mem_free+0x10c>)
 80086aa:	4829      	ldr	r0, [pc, #164]	@ (8008750 <mem_free+0x100>)
 80086ac:	f009 fe06 	bl	80122bc <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 80086b0:	f009 fce6 	bl	8012080 <sys_arch_protect>
 80086b4:	6138      	str	r0, [r7, #16]
 80086b6:	6938      	ldr	r0, [r7, #16]
 80086b8:	f009 fcf0 	bl	801209c <sys_arch_unprotect>
    return;
 80086bc:	e041      	b.n	8008742 <mem_free+0xf2>
  }
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 80086be:	4828      	ldr	r0, [pc, #160]	@ (8008760 <mem_free+0x110>)
 80086c0:	f009 fca2 	bl	8012008 <sys_mutex_lock>
  /* mem has to be in a used state */
  if (!mem->used) {
 80086c4:	69fb      	ldr	r3, [r7, #28]
 80086c6:	791b      	ldrb	r3, [r3, #4]
 80086c8:	2b00      	cmp	r3, #0
 80086ca:	d110      	bne.n	80086ee <mem_free+0x9e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 80086cc:	4b1e      	ldr	r3, [pc, #120]	@ (8008748 <mem_free+0xf8>)
 80086ce:	f44f 7223 	mov.w	r2, #652	@ 0x28c
 80086d2:	4924      	ldr	r1, [pc, #144]	@ (8008764 <mem_free+0x114>)
 80086d4:	481e      	ldr	r0, [pc, #120]	@ (8008750 <mem_free+0x100>)
 80086d6:	f009 fdf1 	bl	80122bc <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 80086da:	4821      	ldr	r0, [pc, #132]	@ (8008760 <mem_free+0x110>)
 80086dc:	f009 fca3 	bl	8012026 <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 80086e0:	f009 fcce 	bl	8012080 <sys_arch_protect>
 80086e4:	6178      	str	r0, [r7, #20]
 80086e6:	6978      	ldr	r0, [r7, #20]
 80086e8:	f009 fcd8 	bl	801209c <sys_arch_unprotect>
    return;
 80086ec:	e029      	b.n	8008742 <mem_free+0xf2>
  }

  if (!mem_link_valid(mem)) {
 80086ee:	69f8      	ldr	r0, [r7, #28]
 80086f0:	f7ff ff72 	bl	80085d8 <mem_link_valid>
 80086f4:	4603      	mov	r3, r0
 80086f6:	2b00      	cmp	r3, #0
 80086f8:	d110      	bne.n	800871c <mem_free+0xcc>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 80086fa:	4b13      	ldr	r3, [pc, #76]	@ (8008748 <mem_free+0xf8>)
 80086fc:	f240 2295 	movw	r2, #661	@ 0x295
 8008700:	4919      	ldr	r1, [pc, #100]	@ (8008768 <mem_free+0x118>)
 8008702:	4813      	ldr	r0, [pc, #76]	@ (8008750 <mem_free+0x100>)
 8008704:	f009 fdda 	bl	80122bc <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 8008708:	4815      	ldr	r0, [pc, #84]	@ (8008760 <mem_free+0x110>)
 800870a:	f009 fc8c 	bl	8012026 <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800870e:	f009 fcb7 	bl	8012080 <sys_arch_protect>
 8008712:	61b8      	str	r0, [r7, #24]
 8008714:	69b8      	ldr	r0, [r7, #24]
 8008716:	f009 fcc1 	bl	801209c <sys_arch_unprotect>
    return;
 800871a:	e012      	b.n	8008742 <mem_free+0xf2>
  }

  /* mem is now unused. */
  mem->used = 0;
 800871c:	69fb      	ldr	r3, [r7, #28]
 800871e:	2200      	movs	r2, #0
 8008720:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 8008722:	4b12      	ldr	r3, [pc, #72]	@ (800876c <mem_free+0x11c>)
 8008724:	681b      	ldr	r3, [r3, #0]
 8008726:	69fa      	ldr	r2, [r7, #28]
 8008728:	429a      	cmp	r2, r3
 800872a:	d202      	bcs.n	8008732 <mem_free+0xe2>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 800872c:	4a0f      	ldr	r2, [pc, #60]	@ (800876c <mem_free+0x11c>)
 800872e:	69fb      	ldr	r3, [r7, #28]
 8008730:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 8008732:	69f8      	ldr	r0, [r7, #28]
 8008734:	f7ff fe5c 	bl	80083f0 <plug_holes>
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 8008738:	4809      	ldr	r0, [pc, #36]	@ (8008760 <mem_free+0x110>)
 800873a:	f009 fc74 	bl	8012026 <sys_mutex_unlock>
 800873e:	e000      	b.n	8008742 <mem_free+0xf2>
    return;
 8008740:	bf00      	nop
}
 8008742:	3720      	adds	r7, #32
 8008744:	46bd      	mov	sp, r7
 8008746:	bd80      	pop	{r7, pc}
 8008748:	080132fc 	.word	0x080132fc
 800874c:	080133ec 	.word	0x080133ec
 8008750:	08013344 	.word	0x08013344
 8008754:	2000d014 	.word	0x2000d014
 8008758:	2000d018 	.word	0x2000d018
 800875c:	08013410 	.word	0x08013410
 8008760:	2000d01c 	.word	0x2000d01c
 8008764:	0801342c 	.word	0x0801342c
 8008768:	08013454 	.word	0x08013454
 800876c:	2000d020 	.word	0x2000d020

08008770 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 8008770:	b580      	push	{r7, lr}
 8008772:	b088      	sub	sp, #32
 8008774:	af00      	add	r7, sp, #0
 8008776:	6078      	str	r0, [r7, #4]
 8008778:	460b      	mov	r3, r1
 800877a:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 800877c:	887b      	ldrh	r3, [r7, #2]
 800877e:	3303      	adds	r3, #3
 8008780:	b29b      	uxth	r3, r3
 8008782:	f023 0303 	bic.w	r3, r3, #3
 8008786:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 8008788:	8bfb      	ldrh	r3, [r7, #30]
 800878a:	2b0b      	cmp	r3, #11
 800878c:	d801      	bhi.n	8008792 <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 800878e:	230c      	movs	r3, #12
 8008790:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 8008792:	8bfb      	ldrh	r3, [r7, #30]
 8008794:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 8008798:	d803      	bhi.n	80087a2 <mem_trim+0x32>
 800879a:	8bfa      	ldrh	r2, [r7, #30]
 800879c:	887b      	ldrh	r3, [r7, #2]
 800879e:	429a      	cmp	r2, r3
 80087a0:	d201      	bcs.n	80087a6 <mem_trim+0x36>
    return NULL;
 80087a2:	2300      	movs	r3, #0
 80087a4:	e0d8      	b.n	8008958 <mem_trim+0x1e8>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 80087a6:	4b6e      	ldr	r3, [pc, #440]	@ (8008960 <mem_trim+0x1f0>)
 80087a8:	681b      	ldr	r3, [r3, #0]
 80087aa:	687a      	ldr	r2, [r7, #4]
 80087ac:	429a      	cmp	r2, r3
 80087ae:	d304      	bcc.n	80087ba <mem_trim+0x4a>
 80087b0:	4b6c      	ldr	r3, [pc, #432]	@ (8008964 <mem_trim+0x1f4>)
 80087b2:	681b      	ldr	r3, [r3, #0]
 80087b4:	687a      	ldr	r2, [r7, #4]
 80087b6:	429a      	cmp	r2, r3
 80087b8:	d306      	bcc.n	80087c8 <mem_trim+0x58>
 80087ba:	4b6b      	ldr	r3, [pc, #428]	@ (8008968 <mem_trim+0x1f8>)
 80087bc:	f240 22d1 	movw	r2, #721	@ 0x2d1
 80087c0:	496a      	ldr	r1, [pc, #424]	@ (800896c <mem_trim+0x1fc>)
 80087c2:	486b      	ldr	r0, [pc, #428]	@ (8008970 <mem_trim+0x200>)
 80087c4:	f009 fd7a 	bl	80122bc <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 80087c8:	4b65      	ldr	r3, [pc, #404]	@ (8008960 <mem_trim+0x1f0>)
 80087ca:	681b      	ldr	r3, [r3, #0]
 80087cc:	687a      	ldr	r2, [r7, #4]
 80087ce:	429a      	cmp	r2, r3
 80087d0:	d304      	bcc.n	80087dc <mem_trim+0x6c>
 80087d2:	4b64      	ldr	r3, [pc, #400]	@ (8008964 <mem_trim+0x1f4>)
 80087d4:	681b      	ldr	r3, [r3, #0]
 80087d6:	687a      	ldr	r2, [r7, #4]
 80087d8:	429a      	cmp	r2, r3
 80087da:	d307      	bcc.n	80087ec <mem_trim+0x7c>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 80087dc:	f009 fc50 	bl	8012080 <sys_arch_protect>
 80087e0:	60b8      	str	r0, [r7, #8]
 80087e2:	68b8      	ldr	r0, [r7, #8]
 80087e4:	f009 fc5a 	bl	801209c <sys_arch_unprotect>
    return rmem;
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	e0b5      	b.n	8008958 <mem_trim+0x1e8>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	3b08      	subs	r3, #8
 80087f0:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 80087f2:	69b8      	ldr	r0, [r7, #24]
 80087f4:	f7ff fdea 	bl	80083cc <mem_to_ptr>
 80087f8:	4603      	mov	r3, r0
 80087fa:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 80087fc:	69bb      	ldr	r3, [r7, #24]
 80087fe:	881a      	ldrh	r2, [r3, #0]
 8008800:	8afb      	ldrh	r3, [r7, #22]
 8008802:	1ad3      	subs	r3, r2, r3
 8008804:	b29b      	uxth	r3, r3
 8008806:	3b08      	subs	r3, #8
 8008808:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 800880a:	8bfa      	ldrh	r2, [r7, #30]
 800880c:	8abb      	ldrh	r3, [r7, #20]
 800880e:	429a      	cmp	r2, r3
 8008810:	d906      	bls.n	8008820 <mem_trim+0xb0>
 8008812:	4b55      	ldr	r3, [pc, #340]	@ (8008968 <mem_trim+0x1f8>)
 8008814:	f44f 7239 	mov.w	r2, #740	@ 0x2e4
 8008818:	4956      	ldr	r1, [pc, #344]	@ (8008974 <mem_trim+0x204>)
 800881a:	4855      	ldr	r0, [pc, #340]	@ (8008970 <mem_trim+0x200>)
 800881c:	f009 fd4e 	bl	80122bc <iprintf>
  if (newsize > size) {
 8008820:	8bfa      	ldrh	r2, [r7, #30]
 8008822:	8abb      	ldrh	r3, [r7, #20]
 8008824:	429a      	cmp	r2, r3
 8008826:	d901      	bls.n	800882c <mem_trim+0xbc>
    /* not supported */
    return NULL;
 8008828:	2300      	movs	r3, #0
 800882a:	e095      	b.n	8008958 <mem_trim+0x1e8>
  }
  if (newsize == size) {
 800882c:	8bfa      	ldrh	r2, [r7, #30]
 800882e:	8abb      	ldrh	r3, [r7, #20]
 8008830:	429a      	cmp	r2, r3
 8008832:	d101      	bne.n	8008838 <mem_trim+0xc8>
    /* No change in size, simply return */
    return rmem;
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	e08f      	b.n	8008958 <mem_trim+0x1e8>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 8008838:	484f      	ldr	r0, [pc, #316]	@ (8008978 <mem_trim+0x208>)
 800883a:	f009 fbe5 	bl	8012008 <sys_mutex_lock>

  mem2 = ptr_to_mem(mem->next);
 800883e:	69bb      	ldr	r3, [r7, #24]
 8008840:	881b      	ldrh	r3, [r3, #0]
 8008842:	4618      	mov	r0, r3
 8008844:	f7ff fdb0 	bl	80083a8 <ptr_to_mem>
 8008848:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 800884a:	693b      	ldr	r3, [r7, #16]
 800884c:	791b      	ldrb	r3, [r3, #4]
 800884e:	2b00      	cmp	r3, #0
 8008850:	d13f      	bne.n	80088d2 <mem_trim+0x162>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 8008852:	69bb      	ldr	r3, [r7, #24]
 8008854:	881b      	ldrh	r3, [r3, #0]
 8008856:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 800885a:	d106      	bne.n	800886a <mem_trim+0xfa>
 800885c:	4b42      	ldr	r3, [pc, #264]	@ (8008968 <mem_trim+0x1f8>)
 800885e:	f240 22f5 	movw	r2, #757	@ 0x2f5
 8008862:	4946      	ldr	r1, [pc, #280]	@ (800897c <mem_trim+0x20c>)
 8008864:	4842      	ldr	r0, [pc, #264]	@ (8008970 <mem_trim+0x200>)
 8008866:	f009 fd29 	bl	80122bc <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 800886a:	693b      	ldr	r3, [r7, #16]
 800886c:	881b      	ldrh	r3, [r3, #0]
 800886e:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 8008870:	8afa      	ldrh	r2, [r7, #22]
 8008872:	8bfb      	ldrh	r3, [r7, #30]
 8008874:	4413      	add	r3, r2
 8008876:	b29b      	uxth	r3, r3
 8008878:	3308      	adds	r3, #8
 800887a:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 800887c:	4b40      	ldr	r3, [pc, #256]	@ (8008980 <mem_trim+0x210>)
 800887e:	681b      	ldr	r3, [r3, #0]
 8008880:	693a      	ldr	r2, [r7, #16]
 8008882:	429a      	cmp	r2, r3
 8008884:	d106      	bne.n	8008894 <mem_trim+0x124>
      lfree = ptr_to_mem(ptr2);
 8008886:	89fb      	ldrh	r3, [r7, #14]
 8008888:	4618      	mov	r0, r3
 800888a:	f7ff fd8d 	bl	80083a8 <ptr_to_mem>
 800888e:	4603      	mov	r3, r0
 8008890:	4a3b      	ldr	r2, [pc, #236]	@ (8008980 <mem_trim+0x210>)
 8008892:	6013      	str	r3, [r2, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 8008894:	89fb      	ldrh	r3, [r7, #14]
 8008896:	4618      	mov	r0, r3
 8008898:	f7ff fd86 	bl	80083a8 <ptr_to_mem>
 800889c:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 800889e:	693b      	ldr	r3, [r7, #16]
 80088a0:	2200      	movs	r2, #0
 80088a2:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 80088a4:	693b      	ldr	r3, [r7, #16]
 80088a6:	89ba      	ldrh	r2, [r7, #12]
 80088a8:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 80088aa:	693b      	ldr	r3, [r7, #16]
 80088ac:	8afa      	ldrh	r2, [r7, #22]
 80088ae:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 80088b0:	69bb      	ldr	r3, [r7, #24]
 80088b2:	89fa      	ldrh	r2, [r7, #14]
 80088b4:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 80088b6:	693b      	ldr	r3, [r7, #16]
 80088b8:	881b      	ldrh	r3, [r3, #0]
 80088ba:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 80088be:	d047      	beq.n	8008950 <mem_trim+0x1e0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 80088c0:	693b      	ldr	r3, [r7, #16]
 80088c2:	881b      	ldrh	r3, [r3, #0]
 80088c4:	4618      	mov	r0, r3
 80088c6:	f7ff fd6f 	bl	80083a8 <ptr_to_mem>
 80088ca:	4602      	mov	r2, r0
 80088cc:	89fb      	ldrh	r3, [r7, #14]
 80088ce:	8053      	strh	r3, [r2, #2]
 80088d0:	e03e      	b.n	8008950 <mem_trim+0x1e0>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 80088d2:	8bfb      	ldrh	r3, [r7, #30]
 80088d4:	f103 0214 	add.w	r2, r3, #20
 80088d8:	8abb      	ldrh	r3, [r7, #20]
 80088da:	429a      	cmp	r2, r3
 80088dc:	d838      	bhi.n	8008950 <mem_trim+0x1e0>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 80088de:	8afa      	ldrh	r2, [r7, #22]
 80088e0:	8bfb      	ldrh	r3, [r7, #30]
 80088e2:	4413      	add	r3, r2
 80088e4:	b29b      	uxth	r3, r3
 80088e6:	3308      	adds	r3, #8
 80088e8:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 80088ea:	69bb      	ldr	r3, [r7, #24]
 80088ec:	881b      	ldrh	r3, [r3, #0]
 80088ee:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 80088f2:	d106      	bne.n	8008902 <mem_trim+0x192>
 80088f4:	4b1c      	ldr	r3, [pc, #112]	@ (8008968 <mem_trim+0x1f8>)
 80088f6:	f240 3216 	movw	r2, #790	@ 0x316
 80088fa:	4920      	ldr	r1, [pc, #128]	@ (800897c <mem_trim+0x20c>)
 80088fc:	481c      	ldr	r0, [pc, #112]	@ (8008970 <mem_trim+0x200>)
 80088fe:	f009 fcdd 	bl	80122bc <iprintf>
    mem2 = ptr_to_mem(ptr2);
 8008902:	89fb      	ldrh	r3, [r7, #14]
 8008904:	4618      	mov	r0, r3
 8008906:	f7ff fd4f 	bl	80083a8 <ptr_to_mem>
 800890a:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 800890c:	4b1c      	ldr	r3, [pc, #112]	@ (8008980 <mem_trim+0x210>)
 800890e:	681b      	ldr	r3, [r3, #0]
 8008910:	693a      	ldr	r2, [r7, #16]
 8008912:	429a      	cmp	r2, r3
 8008914:	d202      	bcs.n	800891c <mem_trim+0x1ac>
      lfree = mem2;
 8008916:	4a1a      	ldr	r2, [pc, #104]	@ (8008980 <mem_trim+0x210>)
 8008918:	693b      	ldr	r3, [r7, #16]
 800891a:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 800891c:	693b      	ldr	r3, [r7, #16]
 800891e:	2200      	movs	r2, #0
 8008920:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 8008922:	69bb      	ldr	r3, [r7, #24]
 8008924:	881a      	ldrh	r2, [r3, #0]
 8008926:	693b      	ldr	r3, [r7, #16]
 8008928:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 800892a:	693b      	ldr	r3, [r7, #16]
 800892c:	8afa      	ldrh	r2, [r7, #22]
 800892e:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 8008930:	69bb      	ldr	r3, [r7, #24]
 8008932:	89fa      	ldrh	r2, [r7, #14]
 8008934:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8008936:	693b      	ldr	r3, [r7, #16]
 8008938:	881b      	ldrh	r3, [r3, #0]
 800893a:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 800893e:	d007      	beq.n	8008950 <mem_trim+0x1e0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 8008940:	693b      	ldr	r3, [r7, #16]
 8008942:	881b      	ldrh	r3, [r3, #0]
 8008944:	4618      	mov	r0, r3
 8008946:	f7ff fd2f 	bl	80083a8 <ptr_to_mem>
 800894a:	4602      	mov	r2, r0
 800894c:	89fb      	ldrh	r3, [r7, #14]
 800894e:	8053      	strh	r3, [r2, #2]
#endif
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 8008950:	4809      	ldr	r0, [pc, #36]	@ (8008978 <mem_trim+0x208>)
 8008952:	f009 fb68 	bl	8012026 <sys_mutex_unlock>
  return rmem;
 8008956:	687b      	ldr	r3, [r7, #4]
}
 8008958:	4618      	mov	r0, r3
 800895a:	3720      	adds	r7, #32
 800895c:	46bd      	mov	sp, r7
 800895e:	bd80      	pop	{r7, pc}
 8008960:	2000d014 	.word	0x2000d014
 8008964:	2000d018 	.word	0x2000d018
 8008968:	080132fc 	.word	0x080132fc
 800896c:	08013488 	.word	0x08013488
 8008970:	08013344 	.word	0x08013344
 8008974:	080134a0 	.word	0x080134a0
 8008978:	2000d01c 	.word	0x2000d01c
 800897c:	080134c0 	.word	0x080134c0
 8008980:	2000d020 	.word	0x2000d020

08008984 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 8008984:	b580      	push	{r7, lr}
 8008986:	b088      	sub	sp, #32
 8008988:	af00      	add	r7, sp, #0
 800898a:	4603      	mov	r3, r0
 800898c:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 800898e:	88fb      	ldrh	r3, [r7, #6]
 8008990:	2b00      	cmp	r3, #0
 8008992:	d101      	bne.n	8008998 <mem_malloc+0x14>
    return NULL;
 8008994:	2300      	movs	r3, #0
 8008996:	e0e2      	b.n	8008b5e <mem_malloc+0x1da>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 8008998:	88fb      	ldrh	r3, [r7, #6]
 800899a:	3303      	adds	r3, #3
 800899c:	b29b      	uxth	r3, r3
 800899e:	f023 0303 	bic.w	r3, r3, #3
 80089a2:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 80089a4:	8bbb      	ldrh	r3, [r7, #28]
 80089a6:	2b0b      	cmp	r3, #11
 80089a8:	d801      	bhi.n	80089ae <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 80089aa:	230c      	movs	r3, #12
 80089ac:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 80089ae:	8bbb      	ldrh	r3, [r7, #28]
 80089b0:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 80089b4:	d803      	bhi.n	80089be <mem_malloc+0x3a>
 80089b6:	8bba      	ldrh	r2, [r7, #28]
 80089b8:	88fb      	ldrh	r3, [r7, #6]
 80089ba:	429a      	cmp	r2, r3
 80089bc:	d201      	bcs.n	80089c2 <mem_malloc+0x3e>
    return NULL;
 80089be:	2300      	movs	r3, #0
 80089c0:	e0cd      	b.n	8008b5e <mem_malloc+0x1da>
  }

  /* protect the heap from concurrent access */
  sys_mutex_lock(&mem_mutex);
 80089c2:	4869      	ldr	r0, [pc, #420]	@ (8008b68 <mem_malloc+0x1e4>)
 80089c4:	f009 fb20 	bl	8012008 <sys_mutex_lock>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 80089c8:	4b68      	ldr	r3, [pc, #416]	@ (8008b6c <mem_malloc+0x1e8>)
 80089ca:	681b      	ldr	r3, [r3, #0]
 80089cc:	4618      	mov	r0, r3
 80089ce:	f7ff fcfd 	bl	80083cc <mem_to_ptr>
 80089d2:	4603      	mov	r3, r0
 80089d4:	83fb      	strh	r3, [r7, #30]
 80089d6:	e0b7      	b.n	8008b48 <mem_malloc+0x1c4>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 80089d8:	8bfb      	ldrh	r3, [r7, #30]
 80089da:	4618      	mov	r0, r3
 80089dc:	f7ff fce4 	bl	80083a8 <ptr_to_mem>
 80089e0:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 80089e2:	697b      	ldr	r3, [r7, #20]
 80089e4:	791b      	ldrb	r3, [r3, #4]
 80089e6:	2b00      	cmp	r3, #0
 80089e8:	f040 80a7 	bne.w	8008b3a <mem_malloc+0x1b6>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 80089ec:	697b      	ldr	r3, [r7, #20]
 80089ee:	881b      	ldrh	r3, [r3, #0]
 80089f0:	461a      	mov	r2, r3
 80089f2:	8bfb      	ldrh	r3, [r7, #30]
 80089f4:	1ad3      	subs	r3, r2, r3
 80089f6:	f1a3 0208 	sub.w	r2, r3, #8
 80089fa:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 80089fc:	429a      	cmp	r2, r3
 80089fe:	f0c0 809c 	bcc.w	8008b3a <mem_malloc+0x1b6>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 8008a02:	697b      	ldr	r3, [r7, #20]
 8008a04:	881b      	ldrh	r3, [r3, #0]
 8008a06:	461a      	mov	r2, r3
 8008a08:	8bfb      	ldrh	r3, [r7, #30]
 8008a0a:	1ad3      	subs	r3, r2, r3
 8008a0c:	f1a3 0208 	sub.w	r2, r3, #8
 8008a10:	8bbb      	ldrh	r3, [r7, #28]
 8008a12:	3314      	adds	r3, #20
 8008a14:	429a      	cmp	r2, r3
 8008a16:	d333      	bcc.n	8008a80 <mem_malloc+0xfc>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 8008a18:	8bfa      	ldrh	r2, [r7, #30]
 8008a1a:	8bbb      	ldrh	r3, [r7, #28]
 8008a1c:	4413      	add	r3, r2
 8008a1e:	b29b      	uxth	r3, r3
 8008a20:	3308      	adds	r3, #8
 8008a22:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 8008a24:	8a7b      	ldrh	r3, [r7, #18]
 8008a26:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 8008a2a:	d106      	bne.n	8008a3a <mem_malloc+0xb6>
 8008a2c:	4b50      	ldr	r3, [pc, #320]	@ (8008b70 <mem_malloc+0x1ec>)
 8008a2e:	f240 3287 	movw	r2, #903	@ 0x387
 8008a32:	4950      	ldr	r1, [pc, #320]	@ (8008b74 <mem_malloc+0x1f0>)
 8008a34:	4850      	ldr	r0, [pc, #320]	@ (8008b78 <mem_malloc+0x1f4>)
 8008a36:	f009 fc41 	bl	80122bc <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 8008a3a:	8a7b      	ldrh	r3, [r7, #18]
 8008a3c:	4618      	mov	r0, r3
 8008a3e:	f7ff fcb3 	bl	80083a8 <ptr_to_mem>
 8008a42:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 8008a44:	68fb      	ldr	r3, [r7, #12]
 8008a46:	2200      	movs	r2, #0
 8008a48:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 8008a4a:	697b      	ldr	r3, [r7, #20]
 8008a4c:	881a      	ldrh	r2, [r3, #0]
 8008a4e:	68fb      	ldr	r3, [r7, #12]
 8008a50:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 8008a52:	68fb      	ldr	r3, [r7, #12]
 8008a54:	8bfa      	ldrh	r2, [r7, #30]
 8008a56:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 8008a58:	697b      	ldr	r3, [r7, #20]
 8008a5a:	8a7a      	ldrh	r2, [r7, #18]
 8008a5c:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 8008a5e:	697b      	ldr	r3, [r7, #20]
 8008a60:	2201      	movs	r2, #1
 8008a62:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 8008a64:	68fb      	ldr	r3, [r7, #12]
 8008a66:	881b      	ldrh	r3, [r3, #0]
 8008a68:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 8008a6c:	d00b      	beq.n	8008a86 <mem_malloc+0x102>
            ptr_to_mem(mem2->next)->prev = ptr2;
 8008a6e:	68fb      	ldr	r3, [r7, #12]
 8008a70:	881b      	ldrh	r3, [r3, #0]
 8008a72:	4618      	mov	r0, r3
 8008a74:	f7ff fc98 	bl	80083a8 <ptr_to_mem>
 8008a78:	4602      	mov	r2, r0
 8008a7a:	8a7b      	ldrh	r3, [r7, #18]
 8008a7c:	8053      	strh	r3, [r2, #2]
 8008a7e:	e002      	b.n	8008a86 <mem_malloc+0x102>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 8008a80:	697b      	ldr	r3, [r7, #20]
 8008a82:	2201      	movs	r2, #1
 8008a84:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 8008a86:	4b39      	ldr	r3, [pc, #228]	@ (8008b6c <mem_malloc+0x1e8>)
 8008a88:	681b      	ldr	r3, [r3, #0]
 8008a8a:	697a      	ldr	r2, [r7, #20]
 8008a8c:	429a      	cmp	r2, r3
 8008a8e:	d127      	bne.n	8008ae0 <mem_malloc+0x15c>
          struct mem *cur = lfree;
 8008a90:	4b36      	ldr	r3, [pc, #216]	@ (8008b6c <mem_malloc+0x1e8>)
 8008a92:	681b      	ldr	r3, [r3, #0]
 8008a94:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 8008a96:	e005      	b.n	8008aa4 <mem_malloc+0x120>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 8008a98:	69bb      	ldr	r3, [r7, #24]
 8008a9a:	881b      	ldrh	r3, [r3, #0]
 8008a9c:	4618      	mov	r0, r3
 8008a9e:	f7ff fc83 	bl	80083a8 <ptr_to_mem>
 8008aa2:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 8008aa4:	69bb      	ldr	r3, [r7, #24]
 8008aa6:	791b      	ldrb	r3, [r3, #4]
 8008aa8:	2b00      	cmp	r3, #0
 8008aaa:	d004      	beq.n	8008ab6 <mem_malloc+0x132>
 8008aac:	4b33      	ldr	r3, [pc, #204]	@ (8008b7c <mem_malloc+0x1f8>)
 8008aae:	681b      	ldr	r3, [r3, #0]
 8008ab0:	69ba      	ldr	r2, [r7, #24]
 8008ab2:	429a      	cmp	r2, r3
 8008ab4:	d1f0      	bne.n	8008a98 <mem_malloc+0x114>
          }
          lfree = cur;
 8008ab6:	4a2d      	ldr	r2, [pc, #180]	@ (8008b6c <mem_malloc+0x1e8>)
 8008ab8:	69bb      	ldr	r3, [r7, #24]
 8008aba:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 8008abc:	4b2b      	ldr	r3, [pc, #172]	@ (8008b6c <mem_malloc+0x1e8>)
 8008abe:	681a      	ldr	r2, [r3, #0]
 8008ac0:	4b2e      	ldr	r3, [pc, #184]	@ (8008b7c <mem_malloc+0x1f8>)
 8008ac2:	681b      	ldr	r3, [r3, #0]
 8008ac4:	429a      	cmp	r2, r3
 8008ac6:	d00b      	beq.n	8008ae0 <mem_malloc+0x15c>
 8008ac8:	4b28      	ldr	r3, [pc, #160]	@ (8008b6c <mem_malloc+0x1e8>)
 8008aca:	681b      	ldr	r3, [r3, #0]
 8008acc:	791b      	ldrb	r3, [r3, #4]
 8008ace:	2b00      	cmp	r3, #0
 8008ad0:	d006      	beq.n	8008ae0 <mem_malloc+0x15c>
 8008ad2:	4b27      	ldr	r3, [pc, #156]	@ (8008b70 <mem_malloc+0x1ec>)
 8008ad4:	f240 32b5 	movw	r2, #949	@ 0x3b5
 8008ad8:	4929      	ldr	r1, [pc, #164]	@ (8008b80 <mem_malloc+0x1fc>)
 8008ada:	4827      	ldr	r0, [pc, #156]	@ (8008b78 <mem_malloc+0x1f4>)
 8008adc:	f009 fbee 	bl	80122bc <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
 8008ae0:	4821      	ldr	r0, [pc, #132]	@ (8008b68 <mem_malloc+0x1e4>)
 8008ae2:	f009 faa0 	bl	8012026 <sys_mutex_unlock>
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 8008ae6:	8bba      	ldrh	r2, [r7, #28]
 8008ae8:	697b      	ldr	r3, [r7, #20]
 8008aea:	4413      	add	r3, r2
 8008aec:	3308      	adds	r3, #8
 8008aee:	4a23      	ldr	r2, [pc, #140]	@ (8008b7c <mem_malloc+0x1f8>)
 8008af0:	6812      	ldr	r2, [r2, #0]
 8008af2:	4293      	cmp	r3, r2
 8008af4:	d906      	bls.n	8008b04 <mem_malloc+0x180>
 8008af6:	4b1e      	ldr	r3, [pc, #120]	@ (8008b70 <mem_malloc+0x1ec>)
 8008af8:	f240 32b9 	movw	r2, #953	@ 0x3b9
 8008afc:	4921      	ldr	r1, [pc, #132]	@ (8008b84 <mem_malloc+0x200>)
 8008afe:	481e      	ldr	r0, [pc, #120]	@ (8008b78 <mem_malloc+0x1f4>)
 8008b00:	f009 fbdc 	bl	80122bc <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 8008b04:	697b      	ldr	r3, [r7, #20]
 8008b06:	f003 0303 	and.w	r3, r3, #3
 8008b0a:	2b00      	cmp	r3, #0
 8008b0c:	d006      	beq.n	8008b1c <mem_malloc+0x198>
 8008b0e:	4b18      	ldr	r3, [pc, #96]	@ (8008b70 <mem_malloc+0x1ec>)
 8008b10:	f240 32bb 	movw	r2, #955	@ 0x3bb
 8008b14:	491c      	ldr	r1, [pc, #112]	@ (8008b88 <mem_malloc+0x204>)
 8008b16:	4818      	ldr	r0, [pc, #96]	@ (8008b78 <mem_malloc+0x1f4>)
 8008b18:	f009 fbd0 	bl	80122bc <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 8008b1c:	697b      	ldr	r3, [r7, #20]
 8008b1e:	f003 0303 	and.w	r3, r3, #3
 8008b22:	2b00      	cmp	r3, #0
 8008b24:	d006      	beq.n	8008b34 <mem_malloc+0x1b0>
 8008b26:	4b12      	ldr	r3, [pc, #72]	@ (8008b70 <mem_malloc+0x1ec>)
 8008b28:	f240 32bd 	movw	r2, #957	@ 0x3bd
 8008b2c:	4917      	ldr	r1, [pc, #92]	@ (8008b8c <mem_malloc+0x208>)
 8008b2e:	4812      	ldr	r0, [pc, #72]	@ (8008b78 <mem_malloc+0x1f4>)
 8008b30:	f009 fbc4 	bl	80122bc <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 8008b34:	697b      	ldr	r3, [r7, #20]
 8008b36:	3308      	adds	r3, #8
 8008b38:	e011      	b.n	8008b5e <mem_malloc+0x1da>
         ptr = ptr_to_mem(ptr)->next) {
 8008b3a:	8bfb      	ldrh	r3, [r7, #30]
 8008b3c:	4618      	mov	r0, r3
 8008b3e:	f7ff fc33 	bl	80083a8 <ptr_to_mem>
 8008b42:	4603      	mov	r3, r0
 8008b44:	881b      	ldrh	r3, [r3, #0]
 8008b46:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 8008b48:	8bfa      	ldrh	r2, [r7, #30]
 8008b4a:	8bbb      	ldrh	r3, [r7, #28]
 8008b4c:	f5c3 5320 	rsb	r3, r3, #10240	@ 0x2800
 8008b50:	429a      	cmp	r2, r3
 8008b52:	f4ff af41 	bcc.w	80089d8 <mem_malloc+0x54>
    /* if we got interrupted by a mem_free, try again */
  } while (local_mem_free_count != 0);
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
 8008b56:	4804      	ldr	r0, [pc, #16]	@ (8008b68 <mem_malloc+0x1e4>)
 8008b58:	f009 fa65 	bl	8012026 <sys_mutex_unlock>
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 8008b5c:	2300      	movs	r3, #0
}
 8008b5e:	4618      	mov	r0, r3
 8008b60:	3720      	adds	r7, #32
 8008b62:	46bd      	mov	sp, r7
 8008b64:	bd80      	pop	{r7, pc}
 8008b66:	bf00      	nop
 8008b68:	2000d01c 	.word	0x2000d01c
 8008b6c:	2000d020 	.word	0x2000d020
 8008b70:	080132fc 	.word	0x080132fc
 8008b74:	080134c0 	.word	0x080134c0
 8008b78:	08013344 	.word	0x08013344
 8008b7c:	2000d018 	.word	0x2000d018
 8008b80:	080134d4 	.word	0x080134d4
 8008b84:	080134f0 	.word	0x080134f0
 8008b88:	08013520 	.word	0x08013520
 8008b8c:	08013550 	.word	0x08013550

08008b90 <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 8008b90:	b480      	push	{r7}
 8008b92:	b085      	sub	sp, #20
 8008b94:	af00      	add	r7, sp, #0
 8008b96:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	689b      	ldr	r3, [r3, #8]
 8008b9c:	2200      	movs	r2, #0
 8008b9e:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	685b      	ldr	r3, [r3, #4]
 8008ba4:	3303      	adds	r3, #3
 8008ba6:	f023 0303 	bic.w	r3, r3, #3
 8008baa:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 8008bac:	2300      	movs	r3, #0
 8008bae:	60fb      	str	r3, [r7, #12]
 8008bb0:	e011      	b.n	8008bd6 <memp_init_pool+0x46>
    memp->next = *desc->tab;
 8008bb2:	687b      	ldr	r3, [r7, #4]
 8008bb4:	689b      	ldr	r3, [r3, #8]
 8008bb6:	681a      	ldr	r2, [r3, #0]
 8008bb8:	68bb      	ldr	r3, [r7, #8]
 8008bba:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	689b      	ldr	r3, [r3, #8]
 8008bc0:	68ba      	ldr	r2, [r7, #8]
 8008bc2:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	881b      	ldrh	r3, [r3, #0]
 8008bc8:	461a      	mov	r2, r3
 8008bca:	68bb      	ldr	r3, [r7, #8]
 8008bcc:	4413      	add	r3, r2
 8008bce:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 8008bd0:	68fb      	ldr	r3, [r7, #12]
 8008bd2:	3301      	adds	r3, #1
 8008bd4:	60fb      	str	r3, [r7, #12]
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	885b      	ldrh	r3, [r3, #2]
 8008bda:	461a      	mov	r2, r3
 8008bdc:	68fb      	ldr	r3, [r7, #12]
 8008bde:	4293      	cmp	r3, r2
 8008be0:	dbe7      	blt.n	8008bb2 <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 8008be2:	bf00      	nop
 8008be4:	bf00      	nop
 8008be6:	3714      	adds	r7, #20
 8008be8:	46bd      	mov	sp, r7
 8008bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bee:	4770      	bx	lr

08008bf0 <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 8008bf0:	b580      	push	{r7, lr}
 8008bf2:	b082      	sub	sp, #8
 8008bf4:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 8008bf6:	2300      	movs	r3, #0
 8008bf8:	80fb      	strh	r3, [r7, #6]
 8008bfa:	e009      	b.n	8008c10 <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 8008bfc:	88fb      	ldrh	r3, [r7, #6]
 8008bfe:	4a08      	ldr	r2, [pc, #32]	@ (8008c20 <memp_init+0x30>)
 8008c00:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008c04:	4618      	mov	r0, r3
 8008c06:	f7ff ffc3 	bl	8008b90 <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 8008c0a:	88fb      	ldrh	r3, [r7, #6]
 8008c0c:	3301      	adds	r3, #1
 8008c0e:	80fb      	strh	r3, [r7, #6]
 8008c10:	88fb      	ldrh	r3, [r7, #6]
 8008c12:	2b0c      	cmp	r3, #12
 8008c14:	d9f2      	bls.n	8008bfc <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 8008c16:	bf00      	nop
 8008c18:	bf00      	nop
 8008c1a:	3708      	adds	r7, #8
 8008c1c:	46bd      	mov	sp, r7
 8008c1e:	bd80      	pop	{r7, pc}
 8008c20:	08015d88 	.word	0x08015d88

08008c24 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 8008c24:	b580      	push	{r7, lr}
 8008c26:	b084      	sub	sp, #16
 8008c28:	af00      	add	r7, sp, #0
 8008c2a:	6078      	str	r0, [r7, #4]

#if MEMP_MEM_MALLOC
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);
 8008c2c:	f009 fa28 	bl	8012080 <sys_arch_protect>
 8008c30:	60f8      	str	r0, [r7, #12]

  memp = *desc->tab;
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	689b      	ldr	r3, [r3, #8]
 8008c36:	681b      	ldr	r3, [r3, #0]
 8008c38:	60bb      	str	r3, [r7, #8]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 8008c3a:	68bb      	ldr	r3, [r7, #8]
 8008c3c:	2b00      	cmp	r3, #0
 8008c3e:	d015      	beq.n	8008c6c <do_memp_malloc_pool+0x48>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	689b      	ldr	r3, [r3, #8]
 8008c44:	68ba      	ldr	r2, [r7, #8]
 8008c46:	6812      	ldr	r2, [r2, #0]
 8008c48:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 8008c4a:	68bb      	ldr	r3, [r7, #8]
 8008c4c:	f003 0303 	and.w	r3, r3, #3
 8008c50:	2b00      	cmp	r3, #0
 8008c52:	d006      	beq.n	8008c62 <do_memp_malloc_pool+0x3e>
 8008c54:	4b09      	ldr	r3, [pc, #36]	@ (8008c7c <do_memp_malloc_pool+0x58>)
 8008c56:	f44f 728c 	mov.w	r2, #280	@ 0x118
 8008c5a:	4909      	ldr	r1, [pc, #36]	@ (8008c80 <do_memp_malloc_pool+0x5c>)
 8008c5c:	4809      	ldr	r0, [pc, #36]	@ (8008c84 <do_memp_malloc_pool+0x60>)
 8008c5e:	f009 fb2d 	bl	80122bc <iprintf>
    desc->stats->used++;
    if (desc->stats->used > desc->stats->max) {
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
 8008c62:	68f8      	ldr	r0, [r7, #12]
 8008c64:	f009 fa1a 	bl	801209c <sys_arch_unprotect>
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 8008c68:	68bb      	ldr	r3, [r7, #8]
 8008c6a:	e003      	b.n	8008c74 <do_memp_malloc_pool+0x50>
  } else {
#if MEMP_STATS
    desc->stats->err++;
#endif
    SYS_ARCH_UNPROTECT(old_level);
 8008c6c:	68f8      	ldr	r0, [r7, #12]
 8008c6e:	f009 fa15 	bl	801209c <sys_arch_unprotect>
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 8008c72:	2300      	movs	r3, #0
}
 8008c74:	4618      	mov	r0, r3
 8008c76:	3710      	adds	r7, #16
 8008c78:	46bd      	mov	sp, r7
 8008c7a:	bd80      	pop	{r7, pc}
 8008c7c:	08013574 	.word	0x08013574
 8008c80:	080135a4 	.word	0x080135a4
 8008c84:	080135c8 	.word	0x080135c8

08008c88 <memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc_pool(const struct memp_desc *desc)
#else
memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 8008c88:	b580      	push	{r7, lr}
 8008c8a:	b082      	sub	sp, #8
 8008c8c:	af00      	add	r7, sp, #0
 8008c8e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	2b00      	cmp	r3, #0
 8008c94:	d106      	bne.n	8008ca4 <memp_malloc_pool+0x1c>
 8008c96:	4b0a      	ldr	r3, [pc, #40]	@ (8008cc0 <memp_malloc_pool+0x38>)
 8008c98:	f44f 729e 	mov.w	r2, #316	@ 0x13c
 8008c9c:	4909      	ldr	r1, [pc, #36]	@ (8008cc4 <memp_malloc_pool+0x3c>)
 8008c9e:	480a      	ldr	r0, [pc, #40]	@ (8008cc8 <memp_malloc_pool+0x40>)
 8008ca0:	f009 fb0c 	bl	80122bc <iprintf>
  if (desc == NULL) {
 8008ca4:	687b      	ldr	r3, [r7, #4]
 8008ca6:	2b00      	cmp	r3, #0
 8008ca8:	d101      	bne.n	8008cae <memp_malloc_pool+0x26>
    return NULL;
 8008caa:	2300      	movs	r3, #0
 8008cac:	e003      	b.n	8008cb6 <memp_malloc_pool+0x2e>
  }

#if !MEMP_OVERFLOW_CHECK
  return do_memp_malloc_pool(desc);
 8008cae:	6878      	ldr	r0, [r7, #4]
 8008cb0:	f7ff ffb8 	bl	8008c24 <do_memp_malloc_pool>
 8008cb4:	4603      	mov	r3, r0
#else
  return do_memp_malloc_pool_fn(desc, file, line);
#endif
}
 8008cb6:	4618      	mov	r0, r3
 8008cb8:	3708      	adds	r7, #8
 8008cba:	46bd      	mov	sp, r7
 8008cbc:	bd80      	pop	{r7, pc}
 8008cbe:	bf00      	nop
 8008cc0:	08013574 	.word	0x08013574
 8008cc4:	080135f0 	.word	0x080135f0
 8008cc8:	080135c8 	.word	0x080135c8

08008ccc <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 8008ccc:	b580      	push	{r7, lr}
 8008cce:	b084      	sub	sp, #16
 8008cd0:	af00      	add	r7, sp, #0
 8008cd2:	4603      	mov	r3, r0
 8008cd4:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 8008cd6:	79fb      	ldrb	r3, [r7, #7]
 8008cd8:	2b0c      	cmp	r3, #12
 8008cda:	d908      	bls.n	8008cee <memp_malloc+0x22>
 8008cdc:	4b0a      	ldr	r3, [pc, #40]	@ (8008d08 <memp_malloc+0x3c>)
 8008cde:	f240 1257 	movw	r2, #343	@ 0x157
 8008ce2:	490a      	ldr	r1, [pc, #40]	@ (8008d0c <memp_malloc+0x40>)
 8008ce4:	480a      	ldr	r0, [pc, #40]	@ (8008d10 <memp_malloc+0x44>)
 8008ce6:	f009 fae9 	bl	80122bc <iprintf>
 8008cea:	2300      	movs	r3, #0
 8008cec:	e008      	b.n	8008d00 <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 8008cee:	79fb      	ldrb	r3, [r7, #7]
 8008cf0:	4a08      	ldr	r2, [pc, #32]	@ (8008d14 <memp_malloc+0x48>)
 8008cf2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008cf6:	4618      	mov	r0, r3
 8008cf8:	f7ff ff94 	bl	8008c24 <do_memp_malloc_pool>
 8008cfc:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 8008cfe:	68fb      	ldr	r3, [r7, #12]
}
 8008d00:	4618      	mov	r0, r3
 8008d02:	3710      	adds	r7, #16
 8008d04:	46bd      	mov	sp, r7
 8008d06:	bd80      	pop	{r7, pc}
 8008d08:	08013574 	.word	0x08013574
 8008d0c:	08013604 	.word	0x08013604
 8008d10:	080135c8 	.word	0x080135c8
 8008d14:	08015d88 	.word	0x08015d88

08008d18 <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 8008d18:	b580      	push	{r7, lr}
 8008d1a:	b084      	sub	sp, #16
 8008d1c:	af00      	add	r7, sp, #0
 8008d1e:	6078      	str	r0, [r7, #4]
 8008d20:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 8008d22:	683b      	ldr	r3, [r7, #0]
 8008d24:	f003 0303 	and.w	r3, r3, #3
 8008d28:	2b00      	cmp	r3, #0
 8008d2a:	d006      	beq.n	8008d3a <do_memp_free_pool+0x22>
 8008d2c:	4b0d      	ldr	r3, [pc, #52]	@ (8008d64 <do_memp_free_pool+0x4c>)
 8008d2e:	f44f 72b6 	mov.w	r2, #364	@ 0x16c
 8008d32:	490d      	ldr	r1, [pc, #52]	@ (8008d68 <do_memp_free_pool+0x50>)
 8008d34:	480d      	ldr	r0, [pc, #52]	@ (8008d6c <do_memp_free_pool+0x54>)
 8008d36:	f009 fac1 	bl	80122bc <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 8008d3a:	683b      	ldr	r3, [r7, #0]
 8008d3c:	60fb      	str	r3, [r7, #12]

  SYS_ARCH_PROTECT(old_level);
 8008d3e:	f009 f99f 	bl	8012080 <sys_arch_protect>
 8008d42:	60b8      	str	r0, [r7, #8]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	689b      	ldr	r3, [r3, #8]
 8008d48:	681a      	ldr	r2, [r3, #0]
 8008d4a:	68fb      	ldr	r3, [r7, #12]
 8008d4c:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 8008d4e:	687b      	ldr	r3, [r7, #4]
 8008d50:	689b      	ldr	r3, [r3, #8]
 8008d52:	68fa      	ldr	r2, [r7, #12]
 8008d54:	601a      	str	r2, [r3, #0]

#if MEMP_SANITY_CHECK
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
 8008d56:	68b8      	ldr	r0, [r7, #8]
 8008d58:	f009 f9a0 	bl	801209c <sys_arch_unprotect>
#endif /* !MEMP_MEM_MALLOC */
}
 8008d5c:	bf00      	nop
 8008d5e:	3710      	adds	r7, #16
 8008d60:	46bd      	mov	sp, r7
 8008d62:	bd80      	pop	{r7, pc}
 8008d64:	08013574 	.word	0x08013574
 8008d68:	08013624 	.word	0x08013624
 8008d6c:	080135c8 	.word	0x080135c8

08008d70 <memp_free_pool>:
 * @param desc the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free_pool(const struct memp_desc *desc, void *mem)
{
 8008d70:	b580      	push	{r7, lr}
 8008d72:	b082      	sub	sp, #8
 8008d74:	af00      	add	r7, sp, #0
 8008d76:	6078      	str	r0, [r7, #4]
 8008d78:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 8008d7a:	687b      	ldr	r3, [r7, #4]
 8008d7c:	2b00      	cmp	r3, #0
 8008d7e:	d106      	bne.n	8008d8e <memp_free_pool+0x1e>
 8008d80:	4b0a      	ldr	r3, [pc, #40]	@ (8008dac <memp_free_pool+0x3c>)
 8008d82:	f240 1295 	movw	r2, #405	@ 0x195
 8008d86:	490a      	ldr	r1, [pc, #40]	@ (8008db0 <memp_free_pool+0x40>)
 8008d88:	480a      	ldr	r0, [pc, #40]	@ (8008db4 <memp_free_pool+0x44>)
 8008d8a:	f009 fa97 	bl	80122bc <iprintf>
  if ((desc == NULL) || (mem == NULL)) {
 8008d8e:	687b      	ldr	r3, [r7, #4]
 8008d90:	2b00      	cmp	r3, #0
 8008d92:	d007      	beq.n	8008da4 <memp_free_pool+0x34>
 8008d94:	683b      	ldr	r3, [r7, #0]
 8008d96:	2b00      	cmp	r3, #0
 8008d98:	d004      	beq.n	8008da4 <memp_free_pool+0x34>
    return;
  }

  do_memp_free_pool(desc, mem);
 8008d9a:	6839      	ldr	r1, [r7, #0]
 8008d9c:	6878      	ldr	r0, [r7, #4]
 8008d9e:	f7ff ffbb 	bl	8008d18 <do_memp_free_pool>
 8008da2:	e000      	b.n	8008da6 <memp_free_pool+0x36>
    return;
 8008da4:	bf00      	nop
}
 8008da6:	3708      	adds	r7, #8
 8008da8:	46bd      	mov	sp, r7
 8008daa:	bd80      	pop	{r7, pc}
 8008dac:	08013574 	.word	0x08013574
 8008db0:	080135f0 	.word	0x080135f0
 8008db4:	080135c8 	.word	0x080135c8

08008db8 <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 8008db8:	b580      	push	{r7, lr}
 8008dba:	b082      	sub	sp, #8
 8008dbc:	af00      	add	r7, sp, #0
 8008dbe:	4603      	mov	r3, r0
 8008dc0:	6039      	str	r1, [r7, #0]
 8008dc2:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 8008dc4:	79fb      	ldrb	r3, [r7, #7]
 8008dc6:	2b0c      	cmp	r3, #12
 8008dc8:	d907      	bls.n	8008dda <memp_free+0x22>
 8008dca:	4b0c      	ldr	r3, [pc, #48]	@ (8008dfc <memp_free+0x44>)
 8008dcc:	f44f 72d5 	mov.w	r2, #426	@ 0x1aa
 8008dd0:	490b      	ldr	r1, [pc, #44]	@ (8008e00 <memp_free+0x48>)
 8008dd2:	480c      	ldr	r0, [pc, #48]	@ (8008e04 <memp_free+0x4c>)
 8008dd4:	f009 fa72 	bl	80122bc <iprintf>
 8008dd8:	e00c      	b.n	8008df4 <memp_free+0x3c>

  if (mem == NULL) {
 8008dda:	683b      	ldr	r3, [r7, #0]
 8008ddc:	2b00      	cmp	r3, #0
 8008dde:	d008      	beq.n	8008df2 <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 8008de0:	79fb      	ldrb	r3, [r7, #7]
 8008de2:	4a09      	ldr	r2, [pc, #36]	@ (8008e08 <memp_free+0x50>)
 8008de4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008de8:	6839      	ldr	r1, [r7, #0]
 8008dea:	4618      	mov	r0, r3
 8008dec:	f7ff ff94 	bl	8008d18 <do_memp_free_pool>
 8008df0:	e000      	b.n	8008df4 <memp_free+0x3c>
    return;
 8008df2:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 8008df4:	3708      	adds	r7, #8
 8008df6:	46bd      	mov	sp, r7
 8008df8:	bd80      	pop	{r7, pc}
 8008dfa:	bf00      	nop
 8008dfc:	08013574 	.word	0x08013574
 8008e00:	08013644 	.word	0x08013644
 8008e04:	080135c8 	.word	0x080135c8
 8008e08:	08015d88 	.word	0x08015d88

08008e0c <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 8008e0c:	b480      	push	{r7}
 8008e0e:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 8008e10:	bf00      	nop
 8008e12:	46bd      	mov	sp, r7
 8008e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e18:	4770      	bx	lr
	...

08008e1c <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 8008e1c:	b580      	push	{r7, lr}
 8008e1e:	b086      	sub	sp, #24
 8008e20:	af00      	add	r7, sp, #0
 8008e22:	60f8      	str	r0, [r7, #12]
 8008e24:	60b9      	str	r1, [r7, #8]
 8008e26:	607a      	str	r2, [r7, #4]
 8008e28:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 8008e2a:	68fb      	ldr	r3, [r7, #12]
 8008e2c:	2b00      	cmp	r3, #0
 8008e2e:	d108      	bne.n	8008e42 <netif_add+0x26>
 8008e30:	4b57      	ldr	r3, [pc, #348]	@ (8008f90 <netif_add+0x174>)
 8008e32:	f240 1227 	movw	r2, #295	@ 0x127
 8008e36:	4957      	ldr	r1, [pc, #348]	@ (8008f94 <netif_add+0x178>)
 8008e38:	4857      	ldr	r0, [pc, #348]	@ (8008f98 <netif_add+0x17c>)
 8008e3a:	f009 fa3f 	bl	80122bc <iprintf>
 8008e3e:	2300      	movs	r3, #0
 8008e40:	e0a2      	b.n	8008f88 <netif_add+0x16c>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 8008e42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008e44:	2b00      	cmp	r3, #0
 8008e46:	d108      	bne.n	8008e5a <netif_add+0x3e>
 8008e48:	4b51      	ldr	r3, [pc, #324]	@ (8008f90 <netif_add+0x174>)
 8008e4a:	f44f 7294 	mov.w	r2, #296	@ 0x128
 8008e4e:	4953      	ldr	r1, [pc, #332]	@ (8008f9c <netif_add+0x180>)
 8008e50:	4851      	ldr	r0, [pc, #324]	@ (8008f98 <netif_add+0x17c>)
 8008e52:	f009 fa33 	bl	80122bc <iprintf>
 8008e56:	2300      	movs	r3, #0
 8008e58:	e096      	b.n	8008f88 <netif_add+0x16c>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 8008e5a:	68bb      	ldr	r3, [r7, #8]
 8008e5c:	2b00      	cmp	r3, #0
 8008e5e:	d101      	bne.n	8008e64 <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 8008e60:	4b4f      	ldr	r3, [pc, #316]	@ (8008fa0 <netif_add+0x184>)
 8008e62:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	2b00      	cmp	r3, #0
 8008e68:	d101      	bne.n	8008e6e <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 8008e6a:	4b4d      	ldr	r3, [pc, #308]	@ (8008fa0 <netif_add+0x184>)
 8008e6c:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 8008e6e:	683b      	ldr	r3, [r7, #0]
 8008e70:	2b00      	cmp	r3, #0
 8008e72:	d101      	bne.n	8008e78 <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 8008e74:	4b4a      	ldr	r3, [pc, #296]	@ (8008fa0 <netif_add+0x184>)
 8008e76:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 8008e78:	68fb      	ldr	r3, [r7, #12]
 8008e7a:	2200      	movs	r2, #0
 8008e7c:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 8008e7e:	68fb      	ldr	r3, [r7, #12]
 8008e80:	2200      	movs	r2, #0
 8008e82:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 8008e84:	68fb      	ldr	r3, [r7, #12]
 8008e86:	2200      	movs	r2, #0
 8008e88:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 8008e8a:	68fb      	ldr	r3, [r7, #12]
 8008e8c:	4a45      	ldr	r2, [pc, #276]	@ (8008fa4 <netif_add+0x188>)
 8008e8e:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 8008e90:	68fb      	ldr	r3, [r7, #12]
 8008e92:	2200      	movs	r2, #0
 8008e94:	849a      	strh	r2, [r3, #36]	@ 0x24
  netif->flags = 0;
 8008e96:	68fb      	ldr	r3, [r7, #12]
 8008e98:	2200      	movs	r2, #0
 8008e9a:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 8008e9e:	68fb      	ldr	r3, [r7, #12]
 8008ea0:	2200      	movs	r2, #0
 8008ea2:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 8008ea4:	68fb      	ldr	r3, [r7, #12]
 8008ea6:	6a3a      	ldr	r2, [r7, #32]
 8008ea8:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 8008eaa:	4b3f      	ldr	r3, [pc, #252]	@ (8008fa8 <netif_add+0x18c>)
 8008eac:	781a      	ldrb	r2, [r3, #0]
 8008eae:	68fb      	ldr	r3, [r7, #12]
 8008eb0:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  netif->input = input;
 8008eb4:	68fb      	ldr	r3, [r7, #12]
 8008eb6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008eb8:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 8008eba:	683b      	ldr	r3, [r7, #0]
 8008ebc:	687a      	ldr	r2, [r7, #4]
 8008ebe:	68b9      	ldr	r1, [r7, #8]
 8008ec0:	68f8      	ldr	r0, [r7, #12]
 8008ec2:	f000 f913 	bl	80090ec <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 8008ec6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008ec8:	68f8      	ldr	r0, [r7, #12]
 8008eca:	4798      	blx	r3
 8008ecc:	4603      	mov	r3, r0
 8008ece:	2b00      	cmp	r3, #0
 8008ed0:	d001      	beq.n	8008ed6 <netif_add+0xba>
    return NULL;
 8008ed2:	2300      	movs	r3, #0
 8008ed4:	e058      	b.n	8008f88 <netif_add+0x16c>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 8008ed6:	68fb      	ldr	r3, [r7, #12]
 8008ed8:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8008edc:	2bff      	cmp	r3, #255	@ 0xff
 8008ede:	d103      	bne.n	8008ee8 <netif_add+0xcc>
        netif->num = 0;
 8008ee0:	68fb      	ldr	r3, [r7, #12]
 8008ee2:	2200      	movs	r2, #0
 8008ee4:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      }
      num_netifs = 0;
 8008ee8:	2300      	movs	r3, #0
 8008eea:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 8008eec:	4b2f      	ldr	r3, [pc, #188]	@ (8008fac <netif_add+0x190>)
 8008eee:	681b      	ldr	r3, [r3, #0]
 8008ef0:	617b      	str	r3, [r7, #20]
 8008ef2:	e02b      	b.n	8008f4c <netif_add+0x130>
        LWIP_ASSERT("netif already added", netif2 != netif);
 8008ef4:	697a      	ldr	r2, [r7, #20]
 8008ef6:	68fb      	ldr	r3, [r7, #12]
 8008ef8:	429a      	cmp	r2, r3
 8008efa:	d106      	bne.n	8008f0a <netif_add+0xee>
 8008efc:	4b24      	ldr	r3, [pc, #144]	@ (8008f90 <netif_add+0x174>)
 8008efe:	f240 128b 	movw	r2, #395	@ 0x18b
 8008f02:	492b      	ldr	r1, [pc, #172]	@ (8008fb0 <netif_add+0x194>)
 8008f04:	4824      	ldr	r0, [pc, #144]	@ (8008f98 <netif_add+0x17c>)
 8008f06:	f009 f9d9 	bl	80122bc <iprintf>
        num_netifs++;
 8008f0a:	693b      	ldr	r3, [r7, #16]
 8008f0c:	3301      	adds	r3, #1
 8008f0e:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 8008f10:	693b      	ldr	r3, [r7, #16]
 8008f12:	2bff      	cmp	r3, #255	@ 0xff
 8008f14:	dd06      	ble.n	8008f24 <netif_add+0x108>
 8008f16:	4b1e      	ldr	r3, [pc, #120]	@ (8008f90 <netif_add+0x174>)
 8008f18:	f240 128d 	movw	r2, #397	@ 0x18d
 8008f1c:	4925      	ldr	r1, [pc, #148]	@ (8008fb4 <netif_add+0x198>)
 8008f1e:	481e      	ldr	r0, [pc, #120]	@ (8008f98 <netif_add+0x17c>)
 8008f20:	f009 f9cc 	bl	80122bc <iprintf>
        if (netif2->num == netif->num) {
 8008f24:	697b      	ldr	r3, [r7, #20]
 8008f26:	f893 2030 	ldrb.w	r2, [r3, #48]	@ 0x30
 8008f2a:	68fb      	ldr	r3, [r7, #12]
 8008f2c:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8008f30:	429a      	cmp	r2, r3
 8008f32:	d108      	bne.n	8008f46 <netif_add+0x12a>
          netif->num++;
 8008f34:	68fb      	ldr	r3, [r7, #12]
 8008f36:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8008f3a:	3301      	adds	r3, #1
 8008f3c:	b2da      	uxtb	r2, r3
 8008f3e:	68fb      	ldr	r3, [r7, #12]
 8008f40:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
          break;
 8008f44:	e005      	b.n	8008f52 <netif_add+0x136>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 8008f46:	697b      	ldr	r3, [r7, #20]
 8008f48:	681b      	ldr	r3, [r3, #0]
 8008f4a:	617b      	str	r3, [r7, #20]
 8008f4c:	697b      	ldr	r3, [r7, #20]
 8008f4e:	2b00      	cmp	r3, #0
 8008f50:	d1d0      	bne.n	8008ef4 <netif_add+0xd8>
        }
      }
    } while (netif2 != NULL);
 8008f52:	697b      	ldr	r3, [r7, #20]
 8008f54:	2b00      	cmp	r3, #0
 8008f56:	d1be      	bne.n	8008ed6 <netif_add+0xba>
  }
  if (netif->num == 254) {
 8008f58:	68fb      	ldr	r3, [r7, #12]
 8008f5a:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8008f5e:	2bfe      	cmp	r3, #254	@ 0xfe
 8008f60:	d103      	bne.n	8008f6a <netif_add+0x14e>
    netif_num = 0;
 8008f62:	4b11      	ldr	r3, [pc, #68]	@ (8008fa8 <netif_add+0x18c>)
 8008f64:	2200      	movs	r2, #0
 8008f66:	701a      	strb	r2, [r3, #0]
 8008f68:	e006      	b.n	8008f78 <netif_add+0x15c>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 8008f6a:	68fb      	ldr	r3, [r7, #12]
 8008f6c:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8008f70:	3301      	adds	r3, #1
 8008f72:	b2da      	uxtb	r2, r3
 8008f74:	4b0c      	ldr	r3, [pc, #48]	@ (8008fa8 <netif_add+0x18c>)
 8008f76:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 8008f78:	4b0c      	ldr	r3, [pc, #48]	@ (8008fac <netif_add+0x190>)
 8008f7a:	681a      	ldr	r2, [r3, #0]
 8008f7c:	68fb      	ldr	r3, [r7, #12]
 8008f7e:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 8008f80:	4a0a      	ldr	r2, [pc, #40]	@ (8008fac <netif_add+0x190>)
 8008f82:	68fb      	ldr	r3, [r7, #12]
 8008f84:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 8008f86:	68fb      	ldr	r3, [r7, #12]
}
 8008f88:	4618      	mov	r0, r3
 8008f8a:	3718      	adds	r7, #24
 8008f8c:	46bd      	mov	sp, r7
 8008f8e:	bd80      	pop	{r7, pc}
 8008f90:	08013660 	.word	0x08013660
 8008f94:	080136f4 	.word	0x080136f4
 8008f98:	080136b0 	.word	0x080136b0
 8008f9c:	08013710 	.word	0x08013710
 8008fa0:	08015dfc 	.word	0x08015dfc
 8008fa4:	080093c7 	.word	0x080093c7
 8008fa8:	200100f8 	.word	0x200100f8
 8008fac:	200100f0 	.word	0x200100f0
 8008fb0:	08013734 	.word	0x08013734
 8008fb4:	08013748 	.word	0x08013748

08008fb8 <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8008fb8:	b580      	push	{r7, lr}
 8008fba:	b082      	sub	sp, #8
 8008fbc:	af00      	add	r7, sp, #0
 8008fbe:	6078      	str	r0, [r7, #4]
 8008fc0:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 8008fc2:	6839      	ldr	r1, [r7, #0]
 8008fc4:	6878      	ldr	r0, [r7, #4]
 8008fc6:	f002 fb7f 	bl	800b6c8 <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 8008fca:	6839      	ldr	r1, [r7, #0]
 8008fcc:	6878      	ldr	r0, [r7, #4]
 8008fce:	f006 fc8d 	bl	800f8ec <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 8008fd2:	bf00      	nop
 8008fd4:	3708      	adds	r7, #8
 8008fd6:	46bd      	mov	sp, r7
 8008fd8:	bd80      	pop	{r7, pc}
	...

08008fdc <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 8008fdc:	b580      	push	{r7, lr}
 8008fde:	b086      	sub	sp, #24
 8008fe0:	af00      	add	r7, sp, #0
 8008fe2:	60f8      	str	r0, [r7, #12]
 8008fe4:	60b9      	str	r1, [r7, #8]
 8008fe6:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 8008fe8:	68bb      	ldr	r3, [r7, #8]
 8008fea:	2b00      	cmp	r3, #0
 8008fec:	d106      	bne.n	8008ffc <netif_do_set_ipaddr+0x20>
 8008fee:	4b1d      	ldr	r3, [pc, #116]	@ (8009064 <netif_do_set_ipaddr+0x88>)
 8008ff0:	f240 12cb 	movw	r2, #459	@ 0x1cb
 8008ff4:	491c      	ldr	r1, [pc, #112]	@ (8009068 <netif_do_set_ipaddr+0x8c>)
 8008ff6:	481d      	ldr	r0, [pc, #116]	@ (800906c <netif_do_set_ipaddr+0x90>)
 8008ff8:	f009 f960 	bl	80122bc <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	2b00      	cmp	r3, #0
 8009000:	d106      	bne.n	8009010 <netif_do_set_ipaddr+0x34>
 8009002:	4b18      	ldr	r3, [pc, #96]	@ (8009064 <netif_do_set_ipaddr+0x88>)
 8009004:	f44f 72e6 	mov.w	r2, #460	@ 0x1cc
 8009008:	4917      	ldr	r1, [pc, #92]	@ (8009068 <netif_do_set_ipaddr+0x8c>)
 800900a:	4818      	ldr	r0, [pc, #96]	@ (800906c <netif_do_set_ipaddr+0x90>)
 800900c:	f009 f956 	bl	80122bc <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 8009010:	68bb      	ldr	r3, [r7, #8]
 8009012:	681a      	ldr	r2, [r3, #0]
 8009014:	68fb      	ldr	r3, [r7, #12]
 8009016:	3304      	adds	r3, #4
 8009018:	681b      	ldr	r3, [r3, #0]
 800901a:	429a      	cmp	r2, r3
 800901c:	d01c      	beq.n	8009058 <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 800901e:	68bb      	ldr	r3, [r7, #8]
 8009020:	681b      	ldr	r3, [r3, #0]
 8009022:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 8009024:	68fb      	ldr	r3, [r7, #12]
 8009026:	3304      	adds	r3, #4
 8009028:	681a      	ldr	r2, [r3, #0]
 800902a:	687b      	ldr	r3, [r7, #4]
 800902c:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 800902e:	f107 0314 	add.w	r3, r7, #20
 8009032:	4619      	mov	r1, r3
 8009034:	6878      	ldr	r0, [r7, #4]
 8009036:	f7ff ffbf 	bl	8008fb8 <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 800903a:	68bb      	ldr	r3, [r7, #8]
 800903c:	2b00      	cmp	r3, #0
 800903e:	d002      	beq.n	8009046 <netif_do_set_ipaddr+0x6a>
 8009040:	68bb      	ldr	r3, [r7, #8]
 8009042:	681b      	ldr	r3, [r3, #0]
 8009044:	e000      	b.n	8009048 <netif_do_set_ipaddr+0x6c>
 8009046:	2300      	movs	r3, #0
 8009048:	68fa      	ldr	r2, [r7, #12]
 800904a:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 800904c:	2101      	movs	r1, #1
 800904e:	68f8      	ldr	r0, [r7, #12]
 8009050:	f000 f8d2 	bl	80091f8 <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 8009054:	2301      	movs	r3, #1
 8009056:	e000      	b.n	800905a <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 8009058:	2300      	movs	r3, #0
}
 800905a:	4618      	mov	r0, r3
 800905c:	3718      	adds	r7, #24
 800905e:	46bd      	mov	sp, r7
 8009060:	bd80      	pop	{r7, pc}
 8009062:	bf00      	nop
 8009064:	08013660 	.word	0x08013660
 8009068:	08013778 	.word	0x08013778
 800906c:	080136b0 	.word	0x080136b0

08009070 <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 8009070:	b480      	push	{r7}
 8009072:	b085      	sub	sp, #20
 8009074:	af00      	add	r7, sp, #0
 8009076:	60f8      	str	r0, [r7, #12]
 8009078:	60b9      	str	r1, [r7, #8]
 800907a:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 800907c:	68bb      	ldr	r3, [r7, #8]
 800907e:	681a      	ldr	r2, [r3, #0]
 8009080:	68fb      	ldr	r3, [r7, #12]
 8009082:	3308      	adds	r3, #8
 8009084:	681b      	ldr	r3, [r3, #0]
 8009086:	429a      	cmp	r2, r3
 8009088:	d00a      	beq.n	80090a0 <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 800908a:	68bb      	ldr	r3, [r7, #8]
 800908c:	2b00      	cmp	r3, #0
 800908e:	d002      	beq.n	8009096 <netif_do_set_netmask+0x26>
 8009090:	68bb      	ldr	r3, [r7, #8]
 8009092:	681b      	ldr	r3, [r3, #0]
 8009094:	e000      	b.n	8009098 <netif_do_set_netmask+0x28>
 8009096:	2300      	movs	r3, #0
 8009098:	68fa      	ldr	r2, [r7, #12]
 800909a:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 800909c:	2301      	movs	r3, #1
 800909e:	e000      	b.n	80090a2 <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 80090a0:	2300      	movs	r3, #0
}
 80090a2:	4618      	mov	r0, r3
 80090a4:	3714      	adds	r7, #20
 80090a6:	46bd      	mov	sp, r7
 80090a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090ac:	4770      	bx	lr

080090ae <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 80090ae:	b480      	push	{r7}
 80090b0:	b085      	sub	sp, #20
 80090b2:	af00      	add	r7, sp, #0
 80090b4:	60f8      	str	r0, [r7, #12]
 80090b6:	60b9      	str	r1, [r7, #8]
 80090b8:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 80090ba:	68bb      	ldr	r3, [r7, #8]
 80090bc:	681a      	ldr	r2, [r3, #0]
 80090be:	68fb      	ldr	r3, [r7, #12]
 80090c0:	330c      	adds	r3, #12
 80090c2:	681b      	ldr	r3, [r3, #0]
 80090c4:	429a      	cmp	r2, r3
 80090c6:	d00a      	beq.n	80090de <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 80090c8:	68bb      	ldr	r3, [r7, #8]
 80090ca:	2b00      	cmp	r3, #0
 80090cc:	d002      	beq.n	80090d4 <netif_do_set_gw+0x26>
 80090ce:	68bb      	ldr	r3, [r7, #8]
 80090d0:	681b      	ldr	r3, [r3, #0]
 80090d2:	e000      	b.n	80090d6 <netif_do_set_gw+0x28>
 80090d4:	2300      	movs	r3, #0
 80090d6:	68fa      	ldr	r2, [r7, #12]
 80090d8:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 80090da:	2301      	movs	r3, #1
 80090dc:	e000      	b.n	80090e0 <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 80090de:	2300      	movs	r3, #0
}
 80090e0:	4618      	mov	r0, r3
 80090e2:	3714      	adds	r7, #20
 80090e4:	46bd      	mov	sp, r7
 80090e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090ea:	4770      	bx	lr

080090ec <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 80090ec:	b580      	push	{r7, lr}
 80090ee:	b088      	sub	sp, #32
 80090f0:	af00      	add	r7, sp, #0
 80090f2:	60f8      	str	r0, [r7, #12]
 80090f4:	60b9      	str	r1, [r7, #8]
 80090f6:	607a      	str	r2, [r7, #4]
 80090f8:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 80090fa:	2300      	movs	r3, #0
 80090fc:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 80090fe:	2300      	movs	r3, #0
 8009100:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 8009102:	68bb      	ldr	r3, [r7, #8]
 8009104:	2b00      	cmp	r3, #0
 8009106:	d101      	bne.n	800910c <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 8009108:	4b1c      	ldr	r3, [pc, #112]	@ (800917c <netif_set_addr+0x90>)
 800910a:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800910c:	687b      	ldr	r3, [r7, #4]
 800910e:	2b00      	cmp	r3, #0
 8009110:	d101      	bne.n	8009116 <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 8009112:	4b1a      	ldr	r3, [pc, #104]	@ (800917c <netif_set_addr+0x90>)
 8009114:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 8009116:	683b      	ldr	r3, [r7, #0]
 8009118:	2b00      	cmp	r3, #0
 800911a:	d101      	bne.n	8009120 <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 800911c:	4b17      	ldr	r3, [pc, #92]	@ (800917c <netif_set_addr+0x90>)
 800911e:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 8009120:	68bb      	ldr	r3, [r7, #8]
 8009122:	2b00      	cmp	r3, #0
 8009124:	d003      	beq.n	800912e <netif_set_addr+0x42>
 8009126:	68bb      	ldr	r3, [r7, #8]
 8009128:	681b      	ldr	r3, [r3, #0]
 800912a:	2b00      	cmp	r3, #0
 800912c:	d101      	bne.n	8009132 <netif_set_addr+0x46>
 800912e:	2301      	movs	r3, #1
 8009130:	e000      	b.n	8009134 <netif_set_addr+0x48>
 8009132:	2300      	movs	r3, #0
 8009134:	617b      	str	r3, [r7, #20]
  if (remove) {
 8009136:	697b      	ldr	r3, [r7, #20]
 8009138:	2b00      	cmp	r3, #0
 800913a:	d006      	beq.n	800914a <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800913c:	f107 0310 	add.w	r3, r7, #16
 8009140:	461a      	mov	r2, r3
 8009142:	68b9      	ldr	r1, [r7, #8]
 8009144:	68f8      	ldr	r0, [r7, #12]
 8009146:	f7ff ff49 	bl	8008fdc <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 800914a:	69fa      	ldr	r2, [r7, #28]
 800914c:	6879      	ldr	r1, [r7, #4]
 800914e:	68f8      	ldr	r0, [r7, #12]
 8009150:	f7ff ff8e 	bl	8009070 <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 8009154:	69ba      	ldr	r2, [r7, #24]
 8009156:	6839      	ldr	r1, [r7, #0]
 8009158:	68f8      	ldr	r0, [r7, #12]
 800915a:	f7ff ffa8 	bl	80090ae <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 800915e:	697b      	ldr	r3, [r7, #20]
 8009160:	2b00      	cmp	r3, #0
 8009162:	d106      	bne.n	8009172 <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 8009164:	f107 0310 	add.w	r3, r7, #16
 8009168:	461a      	mov	r2, r3
 800916a:	68b9      	ldr	r1, [r7, #8]
 800916c:	68f8      	ldr	r0, [r7, #12]
 800916e:	f7ff ff35 	bl	8008fdc <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 8009172:	bf00      	nop
 8009174:	3720      	adds	r7, #32
 8009176:	46bd      	mov	sp, r7
 8009178:	bd80      	pop	{r7, pc}
 800917a:	bf00      	nop
 800917c:	08015dfc 	.word	0x08015dfc

08009180 <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 8009180:	b480      	push	{r7}
 8009182:	b083      	sub	sp, #12
 8009184:	af00      	add	r7, sp, #0
 8009186:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 8009188:	4a04      	ldr	r2, [pc, #16]	@ (800919c <netif_set_default+0x1c>)
 800918a:	687b      	ldr	r3, [r7, #4]
 800918c:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 800918e:	bf00      	nop
 8009190:	370c      	adds	r7, #12
 8009192:	46bd      	mov	sp, r7
 8009194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009198:	4770      	bx	lr
 800919a:	bf00      	nop
 800919c:	200100f4 	.word	0x200100f4

080091a0 <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 80091a0:	b580      	push	{r7, lr}
 80091a2:	b082      	sub	sp, #8
 80091a4:	af00      	add	r7, sp, #0
 80091a6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 80091a8:	687b      	ldr	r3, [r7, #4]
 80091aa:	2b00      	cmp	r3, #0
 80091ac:	d107      	bne.n	80091be <netif_set_up+0x1e>
 80091ae:	4b0f      	ldr	r3, [pc, #60]	@ (80091ec <netif_set_up+0x4c>)
 80091b0:	f44f 7254 	mov.w	r2, #848	@ 0x350
 80091b4:	490e      	ldr	r1, [pc, #56]	@ (80091f0 <netif_set_up+0x50>)
 80091b6:	480f      	ldr	r0, [pc, #60]	@ (80091f4 <netif_set_up+0x54>)
 80091b8:	f009 f880 	bl	80122bc <iprintf>
 80091bc:	e013      	b.n	80091e6 <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 80091be:	687b      	ldr	r3, [r7, #4]
 80091c0:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 80091c4:	f003 0301 	and.w	r3, r3, #1
 80091c8:	2b00      	cmp	r3, #0
 80091ca:	d10c      	bne.n	80091e6 <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 80091cc:	687b      	ldr	r3, [r7, #4]
 80091ce:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 80091d2:	f043 0301 	orr.w	r3, r3, #1
 80091d6:	b2da      	uxtb	r2, r3
 80091d8:	687b      	ldr	r3, [r7, #4]
 80091da:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 80091de:	2103      	movs	r1, #3
 80091e0:	6878      	ldr	r0, [r7, #4]
 80091e2:	f000 f809 	bl	80091f8 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 80091e6:	3708      	adds	r7, #8
 80091e8:	46bd      	mov	sp, r7
 80091ea:	bd80      	pop	{r7, pc}
 80091ec:	08013660 	.word	0x08013660
 80091f0:	080137e8 	.word	0x080137e8
 80091f4:	080136b0 	.word	0x080136b0

080091f8 <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 80091f8:	b580      	push	{r7, lr}
 80091fa:	b082      	sub	sp, #8
 80091fc:	af00      	add	r7, sp, #0
 80091fe:	6078      	str	r0, [r7, #4]
 8009200:	460b      	mov	r3, r1
 8009202:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 8009204:	687b      	ldr	r3, [r7, #4]
 8009206:	2b00      	cmp	r3, #0
 8009208:	d106      	bne.n	8009218 <netif_issue_reports+0x20>
 800920a:	4b18      	ldr	r3, [pc, #96]	@ (800926c <netif_issue_reports+0x74>)
 800920c:	f240 326d 	movw	r2, #877	@ 0x36d
 8009210:	4917      	ldr	r1, [pc, #92]	@ (8009270 <netif_issue_reports+0x78>)
 8009212:	4818      	ldr	r0, [pc, #96]	@ (8009274 <netif_issue_reports+0x7c>)
 8009214:	f009 f852 	bl	80122bc <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800921e:	f003 0304 	and.w	r3, r3, #4
 8009222:	2b00      	cmp	r3, #0
 8009224:	d01e      	beq.n	8009264 <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 8009226:	687b      	ldr	r3, [r7, #4]
 8009228:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800922c:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 8009230:	2b00      	cmp	r3, #0
 8009232:	d017      	beq.n	8009264 <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 8009234:	78fb      	ldrb	r3, [r7, #3]
 8009236:	f003 0301 	and.w	r3, r3, #1
 800923a:	2b00      	cmp	r3, #0
 800923c:	d013      	beq.n	8009266 <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800923e:	687b      	ldr	r3, [r7, #4]
 8009240:	3304      	adds	r3, #4
 8009242:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 8009244:	2b00      	cmp	r3, #0
 8009246:	d00e      	beq.n	8009266 <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 8009248:	687b      	ldr	r3, [r7, #4]
 800924a:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800924e:	f003 0308 	and.w	r3, r3, #8
 8009252:	2b00      	cmp	r3, #0
 8009254:	d007      	beq.n	8009266 <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 8009256:	687b      	ldr	r3, [r7, #4]
 8009258:	3304      	adds	r3, #4
 800925a:	4619      	mov	r1, r3
 800925c:	6878      	ldr	r0, [r7, #4]
 800925e:	f007 faaf 	bl	80107c0 <etharp_request>
 8009262:	e000      	b.n	8009266 <netif_issue_reports+0x6e>
    return;
 8009264:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 8009266:	3708      	adds	r7, #8
 8009268:	46bd      	mov	sp, r7
 800926a:	bd80      	pop	{r7, pc}
 800926c:	08013660 	.word	0x08013660
 8009270:	08013804 	.word	0x08013804
 8009274:	080136b0 	.word	0x080136b0

08009278 <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 8009278:	b580      	push	{r7, lr}
 800927a:	b082      	sub	sp, #8
 800927c:	af00      	add	r7, sp, #0
 800927e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 8009280:	687b      	ldr	r3, [r7, #4]
 8009282:	2b00      	cmp	r3, #0
 8009284:	d107      	bne.n	8009296 <netif_set_down+0x1e>
 8009286:	4b12      	ldr	r3, [pc, #72]	@ (80092d0 <netif_set_down+0x58>)
 8009288:	f240 329b 	movw	r2, #923	@ 0x39b
 800928c:	4911      	ldr	r1, [pc, #68]	@ (80092d4 <netif_set_down+0x5c>)
 800928e:	4812      	ldr	r0, [pc, #72]	@ (80092d8 <netif_set_down+0x60>)
 8009290:	f009 f814 	bl	80122bc <iprintf>
 8009294:	e019      	b.n	80092ca <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 8009296:	687b      	ldr	r3, [r7, #4]
 8009298:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800929c:	f003 0301 	and.w	r3, r3, #1
 80092a0:	2b00      	cmp	r3, #0
 80092a2:	d012      	beq.n	80092ca <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 80092a4:	687b      	ldr	r3, [r7, #4]
 80092a6:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 80092aa:	f023 0301 	bic.w	r3, r3, #1
 80092ae:	b2da      	uxtb	r2, r3
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 80092b6:	687b      	ldr	r3, [r7, #4]
 80092b8:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 80092bc:	f003 0308 	and.w	r3, r3, #8
 80092c0:	2b00      	cmp	r3, #0
 80092c2:	d002      	beq.n	80092ca <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 80092c4:	6878      	ldr	r0, [r7, #4]
 80092c6:	f006 fe39 	bl	800ff3c <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 80092ca:	3708      	adds	r7, #8
 80092cc:	46bd      	mov	sp, r7
 80092ce:	bd80      	pop	{r7, pc}
 80092d0:	08013660 	.word	0x08013660
 80092d4:	08013828 	.word	0x08013828
 80092d8:	080136b0 	.word	0x080136b0

080092dc <netif_set_link_up>:
 * @ingroup netif
 * Called by a driver when its link goes up
 */
void
netif_set_link_up(struct netif *netif)
{
 80092dc:	b580      	push	{r7, lr}
 80092de:	b082      	sub	sp, #8
 80092e0:	af00      	add	r7, sp, #0
 80092e2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	2b00      	cmp	r3, #0
 80092e8:	d107      	bne.n	80092fa <netif_set_link_up+0x1e>
 80092ea:	4b13      	ldr	r3, [pc, #76]	@ (8009338 <netif_set_link_up+0x5c>)
 80092ec:	f44f 7278 	mov.w	r2, #992	@ 0x3e0
 80092f0:	4912      	ldr	r1, [pc, #72]	@ (800933c <netif_set_link_up+0x60>)
 80092f2:	4813      	ldr	r0, [pc, #76]	@ (8009340 <netif_set_link_up+0x64>)
 80092f4:	f008 ffe2 	bl	80122bc <iprintf>
 80092f8:	e01b      	b.n	8009332 <netif_set_link_up+0x56>

  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 80092fa:	687b      	ldr	r3, [r7, #4]
 80092fc:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8009300:	f003 0304 	and.w	r3, r3, #4
 8009304:	2b00      	cmp	r3, #0
 8009306:	d114      	bne.n	8009332 <netif_set_link_up+0x56>
    netif_set_flags(netif, NETIF_FLAG_LINK_UP);
 8009308:	687b      	ldr	r3, [r7, #4]
 800930a:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800930e:	f043 0304 	orr.w	r3, r3, #4
 8009312:	b2da      	uxtb	r2, r3
 8009314:	687b      	ldr	r3, [r7, #4]
 8009316:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

#if LWIP_AUTOIP
    autoip_network_changed(netif);
#endif /* LWIP_AUTOIP */

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800931a:	2103      	movs	r1, #3
 800931c:	6878      	ldr	r0, [r7, #4]
 800931e:	f7ff ff6b 	bl	80091f8 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_LINK_CALLBACK(netif);
 8009322:	687b      	ldr	r3, [r7, #4]
 8009324:	69db      	ldr	r3, [r3, #28]
 8009326:	2b00      	cmp	r3, #0
 8009328:	d003      	beq.n	8009332 <netif_set_link_up+0x56>
 800932a:	687b      	ldr	r3, [r7, #4]
 800932c:	69db      	ldr	r3, [r3, #28]
 800932e:	6878      	ldr	r0, [r7, #4]
 8009330:	4798      	blx	r3
      args.link_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 8009332:	3708      	adds	r7, #8
 8009334:	46bd      	mov	sp, r7
 8009336:	bd80      	pop	{r7, pc}
 8009338:	08013660 	.word	0x08013660
 800933c:	08013848 	.word	0x08013848
 8009340:	080136b0 	.word	0x080136b0

08009344 <netif_set_link_down>:
 * @ingroup netif
 * Called by a driver when its link goes down
 */
void
netif_set_link_down(struct netif *netif)
{
 8009344:	b580      	push	{r7, lr}
 8009346:	b082      	sub	sp, #8
 8009348:	af00      	add	r7, sp, #0
 800934a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 800934c:	687b      	ldr	r3, [r7, #4]
 800934e:	2b00      	cmp	r3, #0
 8009350:	d107      	bne.n	8009362 <netif_set_link_down+0x1e>
 8009352:	4b11      	ldr	r3, [pc, #68]	@ (8009398 <netif_set_link_down+0x54>)
 8009354:	f240 4206 	movw	r2, #1030	@ 0x406
 8009358:	4910      	ldr	r1, [pc, #64]	@ (800939c <netif_set_link_down+0x58>)
 800935a:	4811      	ldr	r0, [pc, #68]	@ (80093a0 <netif_set_link_down+0x5c>)
 800935c:	f008 ffae 	bl	80122bc <iprintf>
 8009360:	e017      	b.n	8009392 <netif_set_link_down+0x4e>

  if (netif->flags & NETIF_FLAG_LINK_UP) {
 8009362:	687b      	ldr	r3, [r7, #4]
 8009364:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8009368:	f003 0304 	and.w	r3, r3, #4
 800936c:	2b00      	cmp	r3, #0
 800936e:	d010      	beq.n	8009392 <netif_set_link_down+0x4e>
    netif_clear_flags(netif, NETIF_FLAG_LINK_UP);
 8009370:	687b      	ldr	r3, [r7, #4]
 8009372:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8009376:	f023 0304 	bic.w	r3, r3, #4
 800937a:	b2da      	uxtb	r2, r3
 800937c:	687b      	ldr	r3, [r7, #4]
 800937e:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
    NETIF_LINK_CALLBACK(netif);
 8009382:	687b      	ldr	r3, [r7, #4]
 8009384:	69db      	ldr	r3, [r3, #28]
 8009386:	2b00      	cmp	r3, #0
 8009388:	d003      	beq.n	8009392 <netif_set_link_down+0x4e>
 800938a:	687b      	ldr	r3, [r7, #4]
 800938c:	69db      	ldr	r3, [r3, #28]
 800938e:	6878      	ldr	r0, [r7, #4]
 8009390:	4798      	blx	r3
      args.link_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 8009392:	3708      	adds	r7, #8
 8009394:	46bd      	mov	sp, r7
 8009396:	bd80      	pop	{r7, pc}
 8009398:	08013660 	.word	0x08013660
 800939c:	0801386c 	.word	0x0801386c
 80093a0:	080136b0 	.word	0x080136b0

080093a4 <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 80093a4:	b480      	push	{r7}
 80093a6:	b083      	sub	sp, #12
 80093a8:	af00      	add	r7, sp, #0
 80093aa:	6078      	str	r0, [r7, #4]
 80093ac:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 80093ae:	687b      	ldr	r3, [r7, #4]
 80093b0:	2b00      	cmp	r3, #0
 80093b2:	d002      	beq.n	80093ba <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 80093b4:	687b      	ldr	r3, [r7, #4]
 80093b6:	683a      	ldr	r2, [r7, #0]
 80093b8:	61da      	str	r2, [r3, #28]
  }
}
 80093ba:	bf00      	nop
 80093bc:	370c      	adds	r7, #12
 80093be:	46bd      	mov	sp, r7
 80093c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093c4:	4770      	bx	lr

080093c6 <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 80093c6:	b480      	push	{r7}
 80093c8:	b085      	sub	sp, #20
 80093ca:	af00      	add	r7, sp, #0
 80093cc:	60f8      	str	r0, [r7, #12]
 80093ce:	60b9      	str	r1, [r7, #8]
 80093d0:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 80093d2:	f06f 030b 	mvn.w	r3, #11
}
 80093d6:	4618      	mov	r0, r3
 80093d8:	3714      	adds	r7, #20
 80093da:	46bd      	mov	sp, r7
 80093dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093e0:	4770      	bx	lr
	...

080093e4 <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 80093e4:	b480      	push	{r7}
 80093e6:	b085      	sub	sp, #20
 80093e8:	af00      	add	r7, sp, #0
 80093ea:	4603      	mov	r3, r0
 80093ec:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 80093ee:	79fb      	ldrb	r3, [r7, #7]
 80093f0:	2b00      	cmp	r3, #0
 80093f2:	d013      	beq.n	800941c <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 80093f4:	4b0d      	ldr	r3, [pc, #52]	@ (800942c <netif_get_by_index+0x48>)
 80093f6:	681b      	ldr	r3, [r3, #0]
 80093f8:	60fb      	str	r3, [r7, #12]
 80093fa:	e00c      	b.n	8009416 <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 80093fc:	68fb      	ldr	r3, [r7, #12]
 80093fe:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8009402:	3301      	adds	r3, #1
 8009404:	b2db      	uxtb	r3, r3
 8009406:	79fa      	ldrb	r2, [r7, #7]
 8009408:	429a      	cmp	r2, r3
 800940a:	d101      	bne.n	8009410 <netif_get_by_index+0x2c>
        return netif; /* found! */
 800940c:	68fb      	ldr	r3, [r7, #12]
 800940e:	e006      	b.n	800941e <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 8009410:	68fb      	ldr	r3, [r7, #12]
 8009412:	681b      	ldr	r3, [r3, #0]
 8009414:	60fb      	str	r3, [r7, #12]
 8009416:	68fb      	ldr	r3, [r7, #12]
 8009418:	2b00      	cmp	r3, #0
 800941a:	d1ef      	bne.n	80093fc <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 800941c:	2300      	movs	r3, #0
}
 800941e:	4618      	mov	r0, r3
 8009420:	3714      	adds	r7, #20
 8009422:	46bd      	mov	sp, r7
 8009424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009428:	4770      	bx	lr
 800942a:	bf00      	nop
 800942c:	200100f0 	.word	0x200100f0

08009430 <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 8009430:	b580      	push	{r7, lr}
 8009432:	b082      	sub	sp, #8
 8009434:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 8009436:	f008 fe23 	bl	8012080 <sys_arch_protect>
 800943a:	6038      	str	r0, [r7, #0]
 800943c:	4b0d      	ldr	r3, [pc, #52]	@ (8009474 <pbuf_free_ooseq+0x44>)
 800943e:	2200      	movs	r2, #0
 8009440:	701a      	strb	r2, [r3, #0]
 8009442:	6838      	ldr	r0, [r7, #0]
 8009444:	f008 fe2a 	bl	801209c <sys_arch_unprotect>

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 8009448:	4b0b      	ldr	r3, [pc, #44]	@ (8009478 <pbuf_free_ooseq+0x48>)
 800944a:	681b      	ldr	r3, [r3, #0]
 800944c:	607b      	str	r3, [r7, #4]
 800944e:	e00a      	b.n	8009466 <pbuf_free_ooseq+0x36>
    if (pcb->ooseq != NULL) {
 8009450:	687b      	ldr	r3, [r7, #4]
 8009452:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009454:	2b00      	cmp	r3, #0
 8009456:	d003      	beq.n	8009460 <pbuf_free_ooseq+0x30>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
 8009458:	6878      	ldr	r0, [r7, #4]
 800945a:	f002 f973 	bl	800b744 <tcp_free_ooseq>
      return;
 800945e:	e005      	b.n	800946c <pbuf_free_ooseq+0x3c>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 8009460:	687b      	ldr	r3, [r7, #4]
 8009462:	68db      	ldr	r3, [r3, #12]
 8009464:	607b      	str	r3, [r7, #4]
 8009466:	687b      	ldr	r3, [r7, #4]
 8009468:	2b00      	cmp	r3, #0
 800946a:	d1f1      	bne.n	8009450 <pbuf_free_ooseq+0x20>
    }
  }
}
 800946c:	3708      	adds	r7, #8
 800946e:	46bd      	mov	sp, r7
 8009470:	bd80      	pop	{r7, pc}
 8009472:	bf00      	nop
 8009474:	200100f9 	.word	0x200100f9
 8009478:	20010108 	.word	0x20010108

0800947c <pbuf_free_ooseq_callback>:
/**
 * Just a callback function for tcpip_callback() that calls pbuf_free_ooseq().
 */
static void
pbuf_free_ooseq_callback(void *arg)
{
 800947c:	b580      	push	{r7, lr}
 800947e:	b082      	sub	sp, #8
 8009480:	af00      	add	r7, sp, #0
 8009482:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);
  pbuf_free_ooseq();
 8009484:	f7ff ffd4 	bl	8009430 <pbuf_free_ooseq>
}
 8009488:	bf00      	nop
 800948a:	3708      	adds	r7, #8
 800948c:	46bd      	mov	sp, r7
 800948e:	bd80      	pop	{r7, pc}

08009490 <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 8009490:	b580      	push	{r7, lr}
 8009492:	b082      	sub	sp, #8
 8009494:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
#else /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
  u8_t queued;
  SYS_ARCH_DECL_PROTECT(old_level);
  SYS_ARCH_PROTECT(old_level);
 8009496:	f008 fdf3 	bl	8012080 <sys_arch_protect>
 800949a:	6078      	str	r0, [r7, #4]
  queued = pbuf_free_ooseq_pending;
 800949c:	4b0f      	ldr	r3, [pc, #60]	@ (80094dc <pbuf_pool_is_empty+0x4c>)
 800949e:	781b      	ldrb	r3, [r3, #0]
 80094a0:	70fb      	strb	r3, [r7, #3]
  pbuf_free_ooseq_pending = 1;
 80094a2:	4b0e      	ldr	r3, [pc, #56]	@ (80094dc <pbuf_pool_is_empty+0x4c>)
 80094a4:	2201      	movs	r2, #1
 80094a6:	701a      	strb	r2, [r3, #0]
  SYS_ARCH_UNPROTECT(old_level);
 80094a8:	6878      	ldr	r0, [r7, #4]
 80094aa:	f008 fdf7 	bl	801209c <sys_arch_unprotect>

  if (!queued) {
 80094ae:	78fb      	ldrb	r3, [r7, #3]
 80094b0:	2b00      	cmp	r3, #0
 80094b2:	d10f      	bne.n	80094d4 <pbuf_pool_is_empty+0x44>
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
 80094b4:	2100      	movs	r1, #0
 80094b6:	480a      	ldr	r0, [pc, #40]	@ (80094e0 <pbuf_pool_is_empty+0x50>)
 80094b8:	f7fe fea6 	bl	8008208 <tcpip_try_callback>
 80094bc:	4603      	mov	r3, r0
 80094be:	2b00      	cmp	r3, #0
 80094c0:	d008      	beq.n	80094d4 <pbuf_pool_is_empty+0x44>
 80094c2:	f008 fddd 	bl	8012080 <sys_arch_protect>
 80094c6:	6078      	str	r0, [r7, #4]
 80094c8:	4b04      	ldr	r3, [pc, #16]	@ (80094dc <pbuf_pool_is_empty+0x4c>)
 80094ca:	2200      	movs	r2, #0
 80094cc:	701a      	strb	r2, [r3, #0]
 80094ce:	6878      	ldr	r0, [r7, #4]
 80094d0:	f008 fde4 	bl	801209c <sys_arch_unprotect>
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 80094d4:	bf00      	nop
 80094d6:	3708      	adds	r7, #8
 80094d8:	46bd      	mov	sp, r7
 80094da:	bd80      	pop	{r7, pc}
 80094dc:	200100f9 	.word	0x200100f9
 80094e0:	0800947d 	.word	0x0800947d

080094e4 <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 80094e4:	b480      	push	{r7}
 80094e6:	b085      	sub	sp, #20
 80094e8:	af00      	add	r7, sp, #0
 80094ea:	60f8      	str	r0, [r7, #12]
 80094ec:	60b9      	str	r1, [r7, #8]
 80094ee:	4611      	mov	r1, r2
 80094f0:	461a      	mov	r2, r3
 80094f2:	460b      	mov	r3, r1
 80094f4:	80fb      	strh	r3, [r7, #6]
 80094f6:	4613      	mov	r3, r2
 80094f8:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 80094fa:	68fb      	ldr	r3, [r7, #12]
 80094fc:	2200      	movs	r2, #0
 80094fe:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 8009500:	68fb      	ldr	r3, [r7, #12]
 8009502:	68ba      	ldr	r2, [r7, #8]
 8009504:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 8009506:	68fb      	ldr	r3, [r7, #12]
 8009508:	88fa      	ldrh	r2, [r7, #6]
 800950a:	811a      	strh	r2, [r3, #8]
  p->len = len;
 800950c:	68fb      	ldr	r3, [r7, #12]
 800950e:	88ba      	ldrh	r2, [r7, #4]
 8009510:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 8009512:	8b3b      	ldrh	r3, [r7, #24]
 8009514:	b2da      	uxtb	r2, r3
 8009516:	68fb      	ldr	r3, [r7, #12]
 8009518:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 800951a:	68fb      	ldr	r3, [r7, #12]
 800951c:	7f3a      	ldrb	r2, [r7, #28]
 800951e:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 8009520:	68fb      	ldr	r3, [r7, #12]
 8009522:	2201      	movs	r2, #1
 8009524:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 8009526:	68fb      	ldr	r3, [r7, #12]
 8009528:	2200      	movs	r2, #0
 800952a:	73da      	strb	r2, [r3, #15]
}
 800952c:	bf00      	nop
 800952e:	3714      	adds	r7, #20
 8009530:	46bd      	mov	sp, r7
 8009532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009536:	4770      	bx	lr

08009538 <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 8009538:	b580      	push	{r7, lr}
 800953a:	b08c      	sub	sp, #48	@ 0x30
 800953c:	af02      	add	r7, sp, #8
 800953e:	4603      	mov	r3, r0
 8009540:	71fb      	strb	r3, [r7, #7]
 8009542:	460b      	mov	r3, r1
 8009544:	80bb      	strh	r3, [r7, #4]
 8009546:	4613      	mov	r3, r2
 8009548:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 800954a:	79fb      	ldrb	r3, [r7, #7]
 800954c:	847b      	strh	r3, [r7, #34]	@ 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 800954e:	887b      	ldrh	r3, [r7, #2]
 8009550:	f5b3 7f20 	cmp.w	r3, #640	@ 0x280
 8009554:	d07f      	beq.n	8009656 <pbuf_alloc+0x11e>
 8009556:	f5b3 7f20 	cmp.w	r3, #640	@ 0x280
 800955a:	f300 80c8 	bgt.w	80096ee <pbuf_alloc+0x1b6>
 800955e:	f5b3 7fc1 	cmp.w	r3, #386	@ 0x182
 8009562:	d010      	beq.n	8009586 <pbuf_alloc+0x4e>
 8009564:	f5b3 7fc1 	cmp.w	r3, #386	@ 0x182
 8009568:	f300 80c1 	bgt.w	80096ee <pbuf_alloc+0x1b6>
 800956c:	2b01      	cmp	r3, #1
 800956e:	d002      	beq.n	8009576 <pbuf_alloc+0x3e>
 8009570:	2b41      	cmp	r3, #65	@ 0x41
 8009572:	f040 80bc 	bne.w	80096ee <pbuf_alloc+0x1b6>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 8009576:	887a      	ldrh	r2, [r7, #2]
 8009578:	88bb      	ldrh	r3, [r7, #4]
 800957a:	4619      	mov	r1, r3
 800957c:	2000      	movs	r0, #0
 800957e:	f000 f8d1 	bl	8009724 <pbuf_alloc_reference>
 8009582:	6278      	str	r0, [r7, #36]	@ 0x24
      break;
 8009584:	e0bd      	b.n	8009702 <pbuf_alloc+0x1ca>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 8009586:	2300      	movs	r3, #0
 8009588:	627b      	str	r3, [r7, #36]	@ 0x24
      last = NULL;
 800958a:	2300      	movs	r3, #0
 800958c:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 800958e:	88bb      	ldrh	r3, [r7, #4]
 8009590:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 8009592:	200c      	movs	r0, #12
 8009594:	f7ff fb9a 	bl	8008ccc <memp_malloc>
 8009598:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 800959a:	693b      	ldr	r3, [r7, #16]
 800959c:	2b00      	cmp	r3, #0
 800959e:	d109      	bne.n	80095b4 <pbuf_alloc+0x7c>
          PBUF_POOL_IS_EMPTY();
 80095a0:	f7ff ff76 	bl	8009490 <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 80095a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80095a6:	2b00      	cmp	r3, #0
 80095a8:	d002      	beq.n	80095b0 <pbuf_alloc+0x78>
            pbuf_free(p);
 80095aa:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80095ac:	f000 faa8 	bl	8009b00 <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 80095b0:	2300      	movs	r3, #0
 80095b2:	e0a7      	b.n	8009704 <pbuf_alloc+0x1cc>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 80095b4:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80095b6:	3303      	adds	r3, #3
 80095b8:	b29b      	uxth	r3, r3
 80095ba:	f023 0303 	bic.w	r3, r3, #3
 80095be:	b29b      	uxth	r3, r3
 80095c0:	f5c3 7314 	rsb	r3, r3, #592	@ 0x250
 80095c4:	b29b      	uxth	r3, r3
 80095c6:	8b7a      	ldrh	r2, [r7, #26]
 80095c8:	4293      	cmp	r3, r2
 80095ca:	bf28      	it	cs
 80095cc:	4613      	movcs	r3, r2
 80095ce:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 80095d0:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80095d2:	3310      	adds	r3, #16
 80095d4:	693a      	ldr	r2, [r7, #16]
 80095d6:	4413      	add	r3, r2
 80095d8:	3303      	adds	r3, #3
 80095da:	f023 0303 	bic.w	r3, r3, #3
 80095de:	4618      	mov	r0, r3
 80095e0:	89f9      	ldrh	r1, [r7, #14]
 80095e2:	8b7a      	ldrh	r2, [r7, #26]
 80095e4:	2300      	movs	r3, #0
 80095e6:	9301      	str	r3, [sp, #4]
 80095e8:	887b      	ldrh	r3, [r7, #2]
 80095ea:	9300      	str	r3, [sp, #0]
 80095ec:	460b      	mov	r3, r1
 80095ee:	4601      	mov	r1, r0
 80095f0:	6938      	ldr	r0, [r7, #16]
 80095f2:	f7ff ff77 	bl	80094e4 <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 80095f6:	693b      	ldr	r3, [r7, #16]
 80095f8:	685b      	ldr	r3, [r3, #4]
 80095fa:	f003 0303 	and.w	r3, r3, #3
 80095fe:	2b00      	cmp	r3, #0
 8009600:	d006      	beq.n	8009610 <pbuf_alloc+0xd8>
 8009602:	4b42      	ldr	r3, [pc, #264]	@ (800970c <pbuf_alloc+0x1d4>)
 8009604:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8009608:	4941      	ldr	r1, [pc, #260]	@ (8009710 <pbuf_alloc+0x1d8>)
 800960a:	4842      	ldr	r0, [pc, #264]	@ (8009714 <pbuf_alloc+0x1dc>)
 800960c:	f008 fe56 	bl	80122bc <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 8009610:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8009612:	3303      	adds	r3, #3
 8009614:	f023 0303 	bic.w	r3, r3, #3
 8009618:	f5b3 7f14 	cmp.w	r3, #592	@ 0x250
 800961c:	d106      	bne.n	800962c <pbuf_alloc+0xf4>
 800961e:	4b3b      	ldr	r3, [pc, #236]	@ (800970c <pbuf_alloc+0x1d4>)
 8009620:	f44f 7281 	mov.w	r2, #258	@ 0x102
 8009624:	493c      	ldr	r1, [pc, #240]	@ (8009718 <pbuf_alloc+0x1e0>)
 8009626:	483b      	ldr	r0, [pc, #236]	@ (8009714 <pbuf_alloc+0x1dc>)
 8009628:	f008 fe48 	bl	80122bc <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 800962c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800962e:	2b00      	cmp	r3, #0
 8009630:	d102      	bne.n	8009638 <pbuf_alloc+0x100>
          /* allocated head of pbuf chain (into p) */
          p = q;
 8009632:	693b      	ldr	r3, [r7, #16]
 8009634:	627b      	str	r3, [r7, #36]	@ 0x24
 8009636:	e002      	b.n	800963e <pbuf_alloc+0x106>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 8009638:	69fb      	ldr	r3, [r7, #28]
 800963a:	693a      	ldr	r2, [r7, #16]
 800963c:	601a      	str	r2, [r3, #0]
        }
        last = q;
 800963e:	693b      	ldr	r3, [r7, #16]
 8009640:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 8009642:	8b7a      	ldrh	r2, [r7, #26]
 8009644:	89fb      	ldrh	r3, [r7, #14]
 8009646:	1ad3      	subs	r3, r2, r3
 8009648:	837b      	strh	r3, [r7, #26]
        offset = 0;
 800964a:	2300      	movs	r3, #0
 800964c:	847b      	strh	r3, [r7, #34]	@ 0x22
      } while (rem_len > 0);
 800964e:	8b7b      	ldrh	r3, [r7, #26]
 8009650:	2b00      	cmp	r3, #0
 8009652:	d19e      	bne.n	8009592 <pbuf_alloc+0x5a>
      break;
 8009654:	e055      	b.n	8009702 <pbuf_alloc+0x1ca>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 8009656:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8009658:	3303      	adds	r3, #3
 800965a:	b29b      	uxth	r3, r3
 800965c:	f023 0303 	bic.w	r3, r3, #3
 8009660:	b29a      	uxth	r2, r3
 8009662:	88bb      	ldrh	r3, [r7, #4]
 8009664:	3303      	adds	r3, #3
 8009666:	b29b      	uxth	r3, r3
 8009668:	f023 0303 	bic.w	r3, r3, #3
 800966c:	b29b      	uxth	r3, r3
 800966e:	4413      	add	r3, r2
 8009670:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 8009672:	8b3b      	ldrh	r3, [r7, #24]
 8009674:	3310      	adds	r3, #16
 8009676:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 8009678:	8b3a      	ldrh	r2, [r7, #24]
 800967a:	88bb      	ldrh	r3, [r7, #4]
 800967c:	3303      	adds	r3, #3
 800967e:	f023 0303 	bic.w	r3, r3, #3
 8009682:	429a      	cmp	r2, r3
 8009684:	d306      	bcc.n	8009694 <pbuf_alloc+0x15c>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 8009686:	8afa      	ldrh	r2, [r7, #22]
 8009688:	88bb      	ldrh	r3, [r7, #4]
 800968a:	3303      	adds	r3, #3
 800968c:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 8009690:	429a      	cmp	r2, r3
 8009692:	d201      	bcs.n	8009698 <pbuf_alloc+0x160>
        return NULL;
 8009694:	2300      	movs	r3, #0
 8009696:	e035      	b.n	8009704 <pbuf_alloc+0x1cc>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 8009698:	8afb      	ldrh	r3, [r7, #22]
 800969a:	4618      	mov	r0, r3
 800969c:	f7ff f972 	bl	8008984 <mem_malloc>
 80096a0:	6278      	str	r0, [r7, #36]	@ 0x24
      if (p == NULL) {
 80096a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80096a4:	2b00      	cmp	r3, #0
 80096a6:	d101      	bne.n	80096ac <pbuf_alloc+0x174>
        return NULL;
 80096a8:	2300      	movs	r3, #0
 80096aa:	e02b      	b.n	8009704 <pbuf_alloc+0x1cc>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 80096ac:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80096ae:	3310      	adds	r3, #16
 80096b0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80096b2:	4413      	add	r3, r2
 80096b4:	3303      	adds	r3, #3
 80096b6:	f023 0303 	bic.w	r3, r3, #3
 80096ba:	4618      	mov	r0, r3
 80096bc:	88b9      	ldrh	r1, [r7, #4]
 80096be:	88ba      	ldrh	r2, [r7, #4]
 80096c0:	2300      	movs	r3, #0
 80096c2:	9301      	str	r3, [sp, #4]
 80096c4:	887b      	ldrh	r3, [r7, #2]
 80096c6:	9300      	str	r3, [sp, #0]
 80096c8:	460b      	mov	r3, r1
 80096ca:	4601      	mov	r1, r0
 80096cc:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80096ce:	f7ff ff09 	bl	80094e4 <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 80096d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80096d4:	685b      	ldr	r3, [r3, #4]
 80096d6:	f003 0303 	and.w	r3, r3, #3
 80096da:	2b00      	cmp	r3, #0
 80096dc:	d010      	beq.n	8009700 <pbuf_alloc+0x1c8>
 80096de:	4b0b      	ldr	r3, [pc, #44]	@ (800970c <pbuf_alloc+0x1d4>)
 80096e0:	f44f 7291 	mov.w	r2, #290	@ 0x122
 80096e4:	490d      	ldr	r1, [pc, #52]	@ (800971c <pbuf_alloc+0x1e4>)
 80096e6:	480b      	ldr	r0, [pc, #44]	@ (8009714 <pbuf_alloc+0x1dc>)
 80096e8:	f008 fde8 	bl	80122bc <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 80096ec:	e008      	b.n	8009700 <pbuf_alloc+0x1c8>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 80096ee:	4b07      	ldr	r3, [pc, #28]	@ (800970c <pbuf_alloc+0x1d4>)
 80096f0:	f240 1227 	movw	r2, #295	@ 0x127
 80096f4:	490a      	ldr	r1, [pc, #40]	@ (8009720 <pbuf_alloc+0x1e8>)
 80096f6:	4807      	ldr	r0, [pc, #28]	@ (8009714 <pbuf_alloc+0x1dc>)
 80096f8:	f008 fde0 	bl	80122bc <iprintf>
      return NULL;
 80096fc:	2300      	movs	r3, #0
 80096fe:	e001      	b.n	8009704 <pbuf_alloc+0x1cc>
      break;
 8009700:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 8009702:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8009704:	4618      	mov	r0, r3
 8009706:	3728      	adds	r7, #40	@ 0x28
 8009708:	46bd      	mov	sp, r7
 800970a:	bd80      	pop	{r7, pc}
 800970c:	08013890 	.word	0x08013890
 8009710:	080138c0 	.word	0x080138c0
 8009714:	080138f0 	.word	0x080138f0
 8009718:	08013918 	.word	0x08013918
 800971c:	0801394c 	.word	0x0801394c
 8009720:	08013978 	.word	0x08013978

08009724 <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 8009724:	b580      	push	{r7, lr}
 8009726:	b086      	sub	sp, #24
 8009728:	af02      	add	r7, sp, #8
 800972a:	6078      	str	r0, [r7, #4]
 800972c:	460b      	mov	r3, r1
 800972e:	807b      	strh	r3, [r7, #2]
 8009730:	4613      	mov	r3, r2
 8009732:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 8009734:	883b      	ldrh	r3, [r7, #0]
 8009736:	2b41      	cmp	r3, #65	@ 0x41
 8009738:	d009      	beq.n	800974e <pbuf_alloc_reference+0x2a>
 800973a:	883b      	ldrh	r3, [r7, #0]
 800973c:	2b01      	cmp	r3, #1
 800973e:	d006      	beq.n	800974e <pbuf_alloc_reference+0x2a>
 8009740:	4b0f      	ldr	r3, [pc, #60]	@ (8009780 <pbuf_alloc_reference+0x5c>)
 8009742:	f44f 72a5 	mov.w	r2, #330	@ 0x14a
 8009746:	490f      	ldr	r1, [pc, #60]	@ (8009784 <pbuf_alloc_reference+0x60>)
 8009748:	480f      	ldr	r0, [pc, #60]	@ (8009788 <pbuf_alloc_reference+0x64>)
 800974a:	f008 fdb7 	bl	80122bc <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 800974e:	200b      	movs	r0, #11
 8009750:	f7ff fabc 	bl	8008ccc <memp_malloc>
 8009754:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 8009756:	68fb      	ldr	r3, [r7, #12]
 8009758:	2b00      	cmp	r3, #0
 800975a:	d101      	bne.n	8009760 <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 800975c:	2300      	movs	r3, #0
 800975e:	e00b      	b.n	8009778 <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 8009760:	8879      	ldrh	r1, [r7, #2]
 8009762:	887a      	ldrh	r2, [r7, #2]
 8009764:	2300      	movs	r3, #0
 8009766:	9301      	str	r3, [sp, #4]
 8009768:	883b      	ldrh	r3, [r7, #0]
 800976a:	9300      	str	r3, [sp, #0]
 800976c:	460b      	mov	r3, r1
 800976e:	6879      	ldr	r1, [r7, #4]
 8009770:	68f8      	ldr	r0, [r7, #12]
 8009772:	f7ff feb7 	bl	80094e4 <pbuf_init_alloced_pbuf>
  return p;
 8009776:	68fb      	ldr	r3, [r7, #12]
}
 8009778:	4618      	mov	r0, r3
 800977a:	3710      	adds	r7, #16
 800977c:	46bd      	mov	sp, r7
 800977e:	bd80      	pop	{r7, pc}
 8009780:	08013890 	.word	0x08013890
 8009784:	08013994 	.word	0x08013994
 8009788:	080138f0 	.word	0x080138f0

0800978c <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 800978c:	b580      	push	{r7, lr}
 800978e:	b088      	sub	sp, #32
 8009790:	af02      	add	r7, sp, #8
 8009792:	607b      	str	r3, [r7, #4]
 8009794:	4603      	mov	r3, r0
 8009796:	73fb      	strb	r3, [r7, #15]
 8009798:	460b      	mov	r3, r1
 800979a:	81bb      	strh	r3, [r7, #12]
 800979c:	4613      	mov	r3, r2
 800979e:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 80097a0:	7bfb      	ldrb	r3, [r7, #15]
 80097a2:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 80097a4:	8a7b      	ldrh	r3, [r7, #18]
 80097a6:	3303      	adds	r3, #3
 80097a8:	f023 0203 	bic.w	r2, r3, #3
 80097ac:	89bb      	ldrh	r3, [r7, #12]
 80097ae:	441a      	add	r2, r3
 80097b0:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80097b2:	429a      	cmp	r2, r3
 80097b4:	d901      	bls.n	80097ba <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 80097b6:	2300      	movs	r3, #0
 80097b8:	e018      	b.n	80097ec <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 80097ba:	6a3b      	ldr	r3, [r7, #32]
 80097bc:	2b00      	cmp	r3, #0
 80097be:	d007      	beq.n	80097d0 <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 80097c0:	8a7b      	ldrh	r3, [r7, #18]
 80097c2:	3303      	adds	r3, #3
 80097c4:	f023 0303 	bic.w	r3, r3, #3
 80097c8:	6a3a      	ldr	r2, [r7, #32]
 80097ca:	4413      	add	r3, r2
 80097cc:	617b      	str	r3, [r7, #20]
 80097ce:	e001      	b.n	80097d4 <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 80097d0:	2300      	movs	r3, #0
 80097d2:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 80097d4:	6878      	ldr	r0, [r7, #4]
 80097d6:	89b9      	ldrh	r1, [r7, #12]
 80097d8:	89ba      	ldrh	r2, [r7, #12]
 80097da:	2302      	movs	r3, #2
 80097dc:	9301      	str	r3, [sp, #4]
 80097de:	897b      	ldrh	r3, [r7, #10]
 80097e0:	9300      	str	r3, [sp, #0]
 80097e2:	460b      	mov	r3, r1
 80097e4:	6979      	ldr	r1, [r7, #20]
 80097e6:	f7ff fe7d 	bl	80094e4 <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 80097ea:	687b      	ldr	r3, [r7, #4]
}
 80097ec:	4618      	mov	r0, r3
 80097ee:	3718      	adds	r7, #24
 80097f0:	46bd      	mov	sp, r7
 80097f2:	bd80      	pop	{r7, pc}

080097f4 <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 80097f4:	b580      	push	{r7, lr}
 80097f6:	b084      	sub	sp, #16
 80097f8:	af00      	add	r7, sp, #0
 80097fa:	6078      	str	r0, [r7, #4]
 80097fc:	460b      	mov	r3, r1
 80097fe:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 8009800:	687b      	ldr	r3, [r7, #4]
 8009802:	2b00      	cmp	r3, #0
 8009804:	d106      	bne.n	8009814 <pbuf_realloc+0x20>
 8009806:	4b3a      	ldr	r3, [pc, #232]	@ (80098f0 <pbuf_realloc+0xfc>)
 8009808:	f44f 72cc 	mov.w	r2, #408	@ 0x198
 800980c:	4939      	ldr	r1, [pc, #228]	@ (80098f4 <pbuf_realloc+0x100>)
 800980e:	483a      	ldr	r0, [pc, #232]	@ (80098f8 <pbuf_realloc+0x104>)
 8009810:	f008 fd54 	bl	80122bc <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 8009814:	687b      	ldr	r3, [r7, #4]
 8009816:	891b      	ldrh	r3, [r3, #8]
 8009818:	887a      	ldrh	r2, [r7, #2]
 800981a:	429a      	cmp	r2, r3
 800981c:	d263      	bcs.n	80098e6 <pbuf_realloc+0xf2>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 800981e:	687b      	ldr	r3, [r7, #4]
 8009820:	891a      	ldrh	r2, [r3, #8]
 8009822:	887b      	ldrh	r3, [r7, #2]
 8009824:	1ad3      	subs	r3, r2, r3
 8009826:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 8009828:	887b      	ldrh	r3, [r7, #2]
 800982a:	817b      	strh	r3, [r7, #10]
  q = p;
 800982c:	687b      	ldr	r3, [r7, #4]
 800982e:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 8009830:	e018      	b.n	8009864 <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 8009832:	68fb      	ldr	r3, [r7, #12]
 8009834:	895b      	ldrh	r3, [r3, #10]
 8009836:	897a      	ldrh	r2, [r7, #10]
 8009838:	1ad3      	subs	r3, r2, r3
 800983a:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 800983c:	68fb      	ldr	r3, [r7, #12]
 800983e:	891a      	ldrh	r2, [r3, #8]
 8009840:	893b      	ldrh	r3, [r7, #8]
 8009842:	1ad3      	subs	r3, r2, r3
 8009844:	b29a      	uxth	r2, r3
 8009846:	68fb      	ldr	r3, [r7, #12]
 8009848:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 800984a:	68fb      	ldr	r3, [r7, #12]
 800984c:	681b      	ldr	r3, [r3, #0]
 800984e:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 8009850:	68fb      	ldr	r3, [r7, #12]
 8009852:	2b00      	cmp	r3, #0
 8009854:	d106      	bne.n	8009864 <pbuf_realloc+0x70>
 8009856:	4b26      	ldr	r3, [pc, #152]	@ (80098f0 <pbuf_realloc+0xfc>)
 8009858:	f240 12af 	movw	r2, #431	@ 0x1af
 800985c:	4927      	ldr	r1, [pc, #156]	@ (80098fc <pbuf_realloc+0x108>)
 800985e:	4826      	ldr	r0, [pc, #152]	@ (80098f8 <pbuf_realloc+0x104>)
 8009860:	f008 fd2c 	bl	80122bc <iprintf>
  while (rem_len > q->len) {
 8009864:	68fb      	ldr	r3, [r7, #12]
 8009866:	895b      	ldrh	r3, [r3, #10]
 8009868:	897a      	ldrh	r2, [r7, #10]
 800986a:	429a      	cmp	r2, r3
 800986c:	d8e1      	bhi.n	8009832 <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 800986e:	68fb      	ldr	r3, [r7, #12]
 8009870:	7b1b      	ldrb	r3, [r3, #12]
 8009872:	f003 030f 	and.w	r3, r3, #15
 8009876:	2b00      	cmp	r3, #0
 8009878:	d121      	bne.n	80098be <pbuf_realloc+0xca>
 800987a:	68fb      	ldr	r3, [r7, #12]
 800987c:	895b      	ldrh	r3, [r3, #10]
 800987e:	897a      	ldrh	r2, [r7, #10]
 8009880:	429a      	cmp	r2, r3
 8009882:	d01c      	beq.n	80098be <pbuf_realloc+0xca>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 8009884:	68fb      	ldr	r3, [r7, #12]
 8009886:	7b5b      	ldrb	r3, [r3, #13]
 8009888:	f003 0302 	and.w	r3, r3, #2
 800988c:	2b00      	cmp	r3, #0
 800988e:	d116      	bne.n	80098be <pbuf_realloc+0xca>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 8009890:	68fb      	ldr	r3, [r7, #12]
 8009892:	685a      	ldr	r2, [r3, #4]
 8009894:	68fb      	ldr	r3, [r7, #12]
 8009896:	1ad3      	subs	r3, r2, r3
 8009898:	b29a      	uxth	r2, r3
 800989a:	897b      	ldrh	r3, [r7, #10]
 800989c:	4413      	add	r3, r2
 800989e:	b29b      	uxth	r3, r3
 80098a0:	4619      	mov	r1, r3
 80098a2:	68f8      	ldr	r0, [r7, #12]
 80098a4:	f7fe ff64 	bl	8008770 <mem_trim>
 80098a8:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 80098aa:	68fb      	ldr	r3, [r7, #12]
 80098ac:	2b00      	cmp	r3, #0
 80098ae:	d106      	bne.n	80098be <pbuf_realloc+0xca>
 80098b0:	4b0f      	ldr	r3, [pc, #60]	@ (80098f0 <pbuf_realloc+0xfc>)
 80098b2:	f240 12bd 	movw	r2, #445	@ 0x1bd
 80098b6:	4912      	ldr	r1, [pc, #72]	@ (8009900 <pbuf_realloc+0x10c>)
 80098b8:	480f      	ldr	r0, [pc, #60]	@ (80098f8 <pbuf_realloc+0x104>)
 80098ba:	f008 fcff 	bl	80122bc <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 80098be:	68fb      	ldr	r3, [r7, #12]
 80098c0:	897a      	ldrh	r2, [r7, #10]
 80098c2:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 80098c4:	68fb      	ldr	r3, [r7, #12]
 80098c6:	895a      	ldrh	r2, [r3, #10]
 80098c8:	68fb      	ldr	r3, [r7, #12]
 80098ca:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 80098cc:	68fb      	ldr	r3, [r7, #12]
 80098ce:	681b      	ldr	r3, [r3, #0]
 80098d0:	2b00      	cmp	r3, #0
 80098d2:	d004      	beq.n	80098de <pbuf_realloc+0xea>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 80098d4:	68fb      	ldr	r3, [r7, #12]
 80098d6:	681b      	ldr	r3, [r3, #0]
 80098d8:	4618      	mov	r0, r3
 80098da:	f000 f911 	bl	8009b00 <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 80098de:	68fb      	ldr	r3, [r7, #12]
 80098e0:	2200      	movs	r2, #0
 80098e2:	601a      	str	r2, [r3, #0]
 80098e4:	e000      	b.n	80098e8 <pbuf_realloc+0xf4>
    return;
 80098e6:	bf00      	nop

}
 80098e8:	3710      	adds	r7, #16
 80098ea:	46bd      	mov	sp, r7
 80098ec:	bd80      	pop	{r7, pc}
 80098ee:	bf00      	nop
 80098f0:	08013890 	.word	0x08013890
 80098f4:	080139a8 	.word	0x080139a8
 80098f8:	080138f0 	.word	0x080138f0
 80098fc:	080139c0 	.word	0x080139c0
 8009900:	080139d8 	.word	0x080139d8

08009904 <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 8009904:	b580      	push	{r7, lr}
 8009906:	b086      	sub	sp, #24
 8009908:	af00      	add	r7, sp, #0
 800990a:	60f8      	str	r0, [r7, #12]
 800990c:	60b9      	str	r1, [r7, #8]
 800990e:	4613      	mov	r3, r2
 8009910:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 8009912:	68fb      	ldr	r3, [r7, #12]
 8009914:	2b00      	cmp	r3, #0
 8009916:	d106      	bne.n	8009926 <pbuf_add_header_impl+0x22>
 8009918:	4b2b      	ldr	r3, [pc, #172]	@ (80099c8 <pbuf_add_header_impl+0xc4>)
 800991a:	f240 12df 	movw	r2, #479	@ 0x1df
 800991e:	492b      	ldr	r1, [pc, #172]	@ (80099cc <pbuf_add_header_impl+0xc8>)
 8009920:	482b      	ldr	r0, [pc, #172]	@ (80099d0 <pbuf_add_header_impl+0xcc>)
 8009922:	f008 fccb 	bl	80122bc <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 8009926:	68fb      	ldr	r3, [r7, #12]
 8009928:	2b00      	cmp	r3, #0
 800992a:	d003      	beq.n	8009934 <pbuf_add_header_impl+0x30>
 800992c:	68bb      	ldr	r3, [r7, #8]
 800992e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009932:	d301      	bcc.n	8009938 <pbuf_add_header_impl+0x34>
    return 1;
 8009934:	2301      	movs	r3, #1
 8009936:	e043      	b.n	80099c0 <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 8009938:	68bb      	ldr	r3, [r7, #8]
 800993a:	2b00      	cmp	r3, #0
 800993c:	d101      	bne.n	8009942 <pbuf_add_header_impl+0x3e>
    return 0;
 800993e:	2300      	movs	r3, #0
 8009940:	e03e      	b.n	80099c0 <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 8009942:	68bb      	ldr	r3, [r7, #8]
 8009944:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 8009946:	68fb      	ldr	r3, [r7, #12]
 8009948:	891a      	ldrh	r2, [r3, #8]
 800994a:	8a7b      	ldrh	r3, [r7, #18]
 800994c:	4413      	add	r3, r2
 800994e:	b29b      	uxth	r3, r3
 8009950:	8a7a      	ldrh	r2, [r7, #18]
 8009952:	429a      	cmp	r2, r3
 8009954:	d901      	bls.n	800995a <pbuf_add_header_impl+0x56>
    return 1;
 8009956:	2301      	movs	r3, #1
 8009958:	e032      	b.n	80099c0 <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 800995a:	68fb      	ldr	r3, [r7, #12]
 800995c:	7b1b      	ldrb	r3, [r3, #12]
 800995e:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 8009960:	8a3b      	ldrh	r3, [r7, #16]
 8009962:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009966:	2b00      	cmp	r3, #0
 8009968:	d00c      	beq.n	8009984 <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 800996a:	68fb      	ldr	r3, [r7, #12]
 800996c:	685a      	ldr	r2, [r3, #4]
 800996e:	68bb      	ldr	r3, [r7, #8]
 8009970:	425b      	negs	r3, r3
 8009972:	4413      	add	r3, r2
 8009974:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 8009976:	68fb      	ldr	r3, [r7, #12]
 8009978:	3310      	adds	r3, #16
 800997a:	697a      	ldr	r2, [r7, #20]
 800997c:	429a      	cmp	r2, r3
 800997e:	d20d      	bcs.n	800999c <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 8009980:	2301      	movs	r3, #1
 8009982:	e01d      	b.n	80099c0 <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 8009984:	79fb      	ldrb	r3, [r7, #7]
 8009986:	2b00      	cmp	r3, #0
 8009988:	d006      	beq.n	8009998 <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 800998a:	68fb      	ldr	r3, [r7, #12]
 800998c:	685a      	ldr	r2, [r3, #4]
 800998e:	68bb      	ldr	r3, [r7, #8]
 8009990:	425b      	negs	r3, r3
 8009992:	4413      	add	r3, r2
 8009994:	617b      	str	r3, [r7, #20]
 8009996:	e001      	b.n	800999c <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 8009998:	2301      	movs	r3, #1
 800999a:	e011      	b.n	80099c0 <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 800999c:	68fb      	ldr	r3, [r7, #12]
 800999e:	697a      	ldr	r2, [r7, #20]
 80099a0:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 80099a2:	68fb      	ldr	r3, [r7, #12]
 80099a4:	895a      	ldrh	r2, [r3, #10]
 80099a6:	8a7b      	ldrh	r3, [r7, #18]
 80099a8:	4413      	add	r3, r2
 80099aa:	b29a      	uxth	r2, r3
 80099ac:	68fb      	ldr	r3, [r7, #12]
 80099ae:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 80099b0:	68fb      	ldr	r3, [r7, #12]
 80099b2:	891a      	ldrh	r2, [r3, #8]
 80099b4:	8a7b      	ldrh	r3, [r7, #18]
 80099b6:	4413      	add	r3, r2
 80099b8:	b29a      	uxth	r2, r3
 80099ba:	68fb      	ldr	r3, [r7, #12]
 80099bc:	811a      	strh	r2, [r3, #8]


  return 0;
 80099be:	2300      	movs	r3, #0
}
 80099c0:	4618      	mov	r0, r3
 80099c2:	3718      	adds	r7, #24
 80099c4:	46bd      	mov	sp, r7
 80099c6:	bd80      	pop	{r7, pc}
 80099c8:	08013890 	.word	0x08013890
 80099cc:	080139f4 	.word	0x080139f4
 80099d0:	080138f0 	.word	0x080138f0

080099d4 <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 80099d4:	b580      	push	{r7, lr}
 80099d6:	b082      	sub	sp, #8
 80099d8:	af00      	add	r7, sp, #0
 80099da:	6078      	str	r0, [r7, #4]
 80099dc:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 80099de:	2200      	movs	r2, #0
 80099e0:	6839      	ldr	r1, [r7, #0]
 80099e2:	6878      	ldr	r0, [r7, #4]
 80099e4:	f7ff ff8e 	bl	8009904 <pbuf_add_header_impl>
 80099e8:	4603      	mov	r3, r0
}
 80099ea:	4618      	mov	r0, r3
 80099ec:	3708      	adds	r7, #8
 80099ee:	46bd      	mov	sp, r7
 80099f0:	bd80      	pop	{r7, pc}
	...

080099f4 <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 80099f4:	b580      	push	{r7, lr}
 80099f6:	b084      	sub	sp, #16
 80099f8:	af00      	add	r7, sp, #0
 80099fa:	6078      	str	r0, [r7, #4]
 80099fc:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 80099fe:	687b      	ldr	r3, [r7, #4]
 8009a00:	2b00      	cmp	r3, #0
 8009a02:	d106      	bne.n	8009a12 <pbuf_remove_header+0x1e>
 8009a04:	4b20      	ldr	r3, [pc, #128]	@ (8009a88 <pbuf_remove_header+0x94>)
 8009a06:	f240 224b 	movw	r2, #587	@ 0x24b
 8009a0a:	4920      	ldr	r1, [pc, #128]	@ (8009a8c <pbuf_remove_header+0x98>)
 8009a0c:	4820      	ldr	r0, [pc, #128]	@ (8009a90 <pbuf_remove_header+0x9c>)
 8009a0e:	f008 fc55 	bl	80122bc <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 8009a12:	687b      	ldr	r3, [r7, #4]
 8009a14:	2b00      	cmp	r3, #0
 8009a16:	d003      	beq.n	8009a20 <pbuf_remove_header+0x2c>
 8009a18:	683b      	ldr	r3, [r7, #0]
 8009a1a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009a1e:	d301      	bcc.n	8009a24 <pbuf_remove_header+0x30>
    return 1;
 8009a20:	2301      	movs	r3, #1
 8009a22:	e02c      	b.n	8009a7e <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 8009a24:	683b      	ldr	r3, [r7, #0]
 8009a26:	2b00      	cmp	r3, #0
 8009a28:	d101      	bne.n	8009a2e <pbuf_remove_header+0x3a>
    return 0;
 8009a2a:	2300      	movs	r3, #0
 8009a2c:	e027      	b.n	8009a7e <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 8009a2e:	683b      	ldr	r3, [r7, #0]
 8009a30:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 8009a32:	687b      	ldr	r3, [r7, #4]
 8009a34:	895b      	ldrh	r3, [r3, #10]
 8009a36:	89fa      	ldrh	r2, [r7, #14]
 8009a38:	429a      	cmp	r2, r3
 8009a3a:	d908      	bls.n	8009a4e <pbuf_remove_header+0x5a>
 8009a3c:	4b12      	ldr	r3, [pc, #72]	@ (8009a88 <pbuf_remove_header+0x94>)
 8009a3e:	f240 2255 	movw	r2, #597	@ 0x255
 8009a42:	4914      	ldr	r1, [pc, #80]	@ (8009a94 <pbuf_remove_header+0xa0>)
 8009a44:	4812      	ldr	r0, [pc, #72]	@ (8009a90 <pbuf_remove_header+0x9c>)
 8009a46:	f008 fc39 	bl	80122bc <iprintf>
 8009a4a:	2301      	movs	r3, #1
 8009a4c:	e017      	b.n	8009a7e <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 8009a4e:	687b      	ldr	r3, [r7, #4]
 8009a50:	685b      	ldr	r3, [r3, #4]
 8009a52:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 8009a54:	687b      	ldr	r3, [r7, #4]
 8009a56:	685a      	ldr	r2, [r3, #4]
 8009a58:	683b      	ldr	r3, [r7, #0]
 8009a5a:	441a      	add	r2, r3
 8009a5c:	687b      	ldr	r3, [r7, #4]
 8009a5e:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 8009a60:	687b      	ldr	r3, [r7, #4]
 8009a62:	895a      	ldrh	r2, [r3, #10]
 8009a64:	89fb      	ldrh	r3, [r7, #14]
 8009a66:	1ad3      	subs	r3, r2, r3
 8009a68:	b29a      	uxth	r2, r3
 8009a6a:	687b      	ldr	r3, [r7, #4]
 8009a6c:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 8009a6e:	687b      	ldr	r3, [r7, #4]
 8009a70:	891a      	ldrh	r2, [r3, #8]
 8009a72:	89fb      	ldrh	r3, [r7, #14]
 8009a74:	1ad3      	subs	r3, r2, r3
 8009a76:	b29a      	uxth	r2, r3
 8009a78:	687b      	ldr	r3, [r7, #4]
 8009a7a:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 8009a7c:	2300      	movs	r3, #0
}
 8009a7e:	4618      	mov	r0, r3
 8009a80:	3710      	adds	r7, #16
 8009a82:	46bd      	mov	sp, r7
 8009a84:	bd80      	pop	{r7, pc}
 8009a86:	bf00      	nop
 8009a88:	08013890 	.word	0x08013890
 8009a8c:	080139f4 	.word	0x080139f4
 8009a90:	080138f0 	.word	0x080138f0
 8009a94:	08013a00 	.word	0x08013a00

08009a98 <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 8009a98:	b580      	push	{r7, lr}
 8009a9a:	b082      	sub	sp, #8
 8009a9c:	af00      	add	r7, sp, #0
 8009a9e:	6078      	str	r0, [r7, #4]
 8009aa0:	460b      	mov	r3, r1
 8009aa2:	807b      	strh	r3, [r7, #2]
 8009aa4:	4613      	mov	r3, r2
 8009aa6:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 8009aa8:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8009aac:	2b00      	cmp	r3, #0
 8009aae:	da08      	bge.n	8009ac2 <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 8009ab0:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8009ab4:	425b      	negs	r3, r3
 8009ab6:	4619      	mov	r1, r3
 8009ab8:	6878      	ldr	r0, [r7, #4]
 8009aba:	f7ff ff9b 	bl	80099f4 <pbuf_remove_header>
 8009abe:	4603      	mov	r3, r0
 8009ac0:	e007      	b.n	8009ad2 <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 8009ac2:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8009ac6:	787a      	ldrb	r2, [r7, #1]
 8009ac8:	4619      	mov	r1, r3
 8009aca:	6878      	ldr	r0, [r7, #4]
 8009acc:	f7ff ff1a 	bl	8009904 <pbuf_add_header_impl>
 8009ad0:	4603      	mov	r3, r0
  }
}
 8009ad2:	4618      	mov	r0, r3
 8009ad4:	3708      	adds	r7, #8
 8009ad6:	46bd      	mov	sp, r7
 8009ad8:	bd80      	pop	{r7, pc}

08009ada <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 8009ada:	b580      	push	{r7, lr}
 8009adc:	b082      	sub	sp, #8
 8009ade:	af00      	add	r7, sp, #0
 8009ae0:	6078      	str	r0, [r7, #4]
 8009ae2:	460b      	mov	r3, r1
 8009ae4:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 8009ae6:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8009aea:	2201      	movs	r2, #1
 8009aec:	4619      	mov	r1, r3
 8009aee:	6878      	ldr	r0, [r7, #4]
 8009af0:	f7ff ffd2 	bl	8009a98 <pbuf_header_impl>
 8009af4:	4603      	mov	r3, r0
}
 8009af6:	4618      	mov	r0, r3
 8009af8:	3708      	adds	r7, #8
 8009afa:	46bd      	mov	sp, r7
 8009afc:	bd80      	pop	{r7, pc}
	...

08009b00 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 8009b00:	b580      	push	{r7, lr}
 8009b02:	b088      	sub	sp, #32
 8009b04:	af00      	add	r7, sp, #0
 8009b06:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 8009b08:	687b      	ldr	r3, [r7, #4]
 8009b0a:	2b00      	cmp	r3, #0
 8009b0c:	d10b      	bne.n	8009b26 <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 8009b0e:	687b      	ldr	r3, [r7, #4]
 8009b10:	2b00      	cmp	r3, #0
 8009b12:	d106      	bne.n	8009b22 <pbuf_free+0x22>
 8009b14:	4b3b      	ldr	r3, [pc, #236]	@ (8009c04 <pbuf_free+0x104>)
 8009b16:	f44f 7237 	mov.w	r2, #732	@ 0x2dc
 8009b1a:	493b      	ldr	r1, [pc, #236]	@ (8009c08 <pbuf_free+0x108>)
 8009b1c:	483b      	ldr	r0, [pc, #236]	@ (8009c0c <pbuf_free+0x10c>)
 8009b1e:	f008 fbcd 	bl	80122bc <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 8009b22:	2300      	movs	r3, #0
 8009b24:	e069      	b.n	8009bfa <pbuf_free+0xfa>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 8009b26:	2300      	movs	r3, #0
 8009b28:	77fb      	strb	r3, [r7, #31]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 8009b2a:	e062      	b.n	8009bf2 <pbuf_free+0xf2>
    LWIP_PBUF_REF_T ref;
    SYS_ARCH_DECL_PROTECT(old_level);
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
 8009b2c:	f008 faa8 	bl	8012080 <sys_arch_protect>
 8009b30:	61b8      	str	r0, [r7, #24]
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 8009b32:	687b      	ldr	r3, [r7, #4]
 8009b34:	7b9b      	ldrb	r3, [r3, #14]
 8009b36:	2b00      	cmp	r3, #0
 8009b38:	d106      	bne.n	8009b48 <pbuf_free+0x48>
 8009b3a:	4b32      	ldr	r3, [pc, #200]	@ (8009c04 <pbuf_free+0x104>)
 8009b3c:	f240 22f1 	movw	r2, #753	@ 0x2f1
 8009b40:	4933      	ldr	r1, [pc, #204]	@ (8009c10 <pbuf_free+0x110>)
 8009b42:	4832      	ldr	r0, [pc, #200]	@ (8009c0c <pbuf_free+0x10c>)
 8009b44:	f008 fbba 	bl	80122bc <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 8009b48:	687b      	ldr	r3, [r7, #4]
 8009b4a:	7b9b      	ldrb	r3, [r3, #14]
 8009b4c:	3b01      	subs	r3, #1
 8009b4e:	b2da      	uxtb	r2, r3
 8009b50:	687b      	ldr	r3, [r7, #4]
 8009b52:	739a      	strb	r2, [r3, #14]
 8009b54:	687b      	ldr	r3, [r7, #4]
 8009b56:	7b9b      	ldrb	r3, [r3, #14]
 8009b58:	75fb      	strb	r3, [r7, #23]
    SYS_ARCH_UNPROTECT(old_level);
 8009b5a:	69b8      	ldr	r0, [r7, #24]
 8009b5c:	f008 fa9e 	bl	801209c <sys_arch_unprotect>
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 8009b60:	7dfb      	ldrb	r3, [r7, #23]
 8009b62:	2b00      	cmp	r3, #0
 8009b64:	d143      	bne.n	8009bee <pbuf_free+0xee>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 8009b66:	687b      	ldr	r3, [r7, #4]
 8009b68:	681b      	ldr	r3, [r3, #0]
 8009b6a:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 8009b6c:	687b      	ldr	r3, [r7, #4]
 8009b6e:	7b1b      	ldrb	r3, [r3, #12]
 8009b70:	f003 030f 	and.w	r3, r3, #15
 8009b74:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 8009b76:	687b      	ldr	r3, [r7, #4]
 8009b78:	7b5b      	ldrb	r3, [r3, #13]
 8009b7a:	f003 0302 	and.w	r3, r3, #2
 8009b7e:	2b00      	cmp	r3, #0
 8009b80:	d011      	beq.n	8009ba6 <pbuf_free+0xa6>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 8009b82:	687b      	ldr	r3, [r7, #4]
 8009b84:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 8009b86:	68bb      	ldr	r3, [r7, #8]
 8009b88:	691b      	ldr	r3, [r3, #16]
 8009b8a:	2b00      	cmp	r3, #0
 8009b8c:	d106      	bne.n	8009b9c <pbuf_free+0x9c>
 8009b8e:	4b1d      	ldr	r3, [pc, #116]	@ (8009c04 <pbuf_free+0x104>)
 8009b90:	f240 22ff 	movw	r2, #767	@ 0x2ff
 8009b94:	491f      	ldr	r1, [pc, #124]	@ (8009c14 <pbuf_free+0x114>)
 8009b96:	481d      	ldr	r0, [pc, #116]	@ (8009c0c <pbuf_free+0x10c>)
 8009b98:	f008 fb90 	bl	80122bc <iprintf>
        pc->custom_free_function(p);
 8009b9c:	68bb      	ldr	r3, [r7, #8]
 8009b9e:	691b      	ldr	r3, [r3, #16]
 8009ba0:	6878      	ldr	r0, [r7, #4]
 8009ba2:	4798      	blx	r3
 8009ba4:	e01d      	b.n	8009be2 <pbuf_free+0xe2>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 8009ba6:	7bfb      	ldrb	r3, [r7, #15]
 8009ba8:	2b02      	cmp	r3, #2
 8009baa:	d104      	bne.n	8009bb6 <pbuf_free+0xb6>
          memp_free(MEMP_PBUF_POOL, p);
 8009bac:	6879      	ldr	r1, [r7, #4]
 8009bae:	200c      	movs	r0, #12
 8009bb0:	f7ff f902 	bl	8008db8 <memp_free>
 8009bb4:	e015      	b.n	8009be2 <pbuf_free+0xe2>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 8009bb6:	7bfb      	ldrb	r3, [r7, #15]
 8009bb8:	2b01      	cmp	r3, #1
 8009bba:	d104      	bne.n	8009bc6 <pbuf_free+0xc6>
          memp_free(MEMP_PBUF, p);
 8009bbc:	6879      	ldr	r1, [r7, #4]
 8009bbe:	200b      	movs	r0, #11
 8009bc0:	f7ff f8fa 	bl	8008db8 <memp_free>
 8009bc4:	e00d      	b.n	8009be2 <pbuf_free+0xe2>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 8009bc6:	7bfb      	ldrb	r3, [r7, #15]
 8009bc8:	2b00      	cmp	r3, #0
 8009bca:	d103      	bne.n	8009bd4 <pbuf_free+0xd4>
          mem_free(p);
 8009bcc:	6878      	ldr	r0, [r7, #4]
 8009bce:	f7fe fd3f 	bl	8008650 <mem_free>
 8009bd2:	e006      	b.n	8009be2 <pbuf_free+0xe2>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 8009bd4:	4b0b      	ldr	r3, [pc, #44]	@ (8009c04 <pbuf_free+0x104>)
 8009bd6:	f240 320f 	movw	r2, #783	@ 0x30f
 8009bda:	490f      	ldr	r1, [pc, #60]	@ (8009c18 <pbuf_free+0x118>)
 8009bdc:	480b      	ldr	r0, [pc, #44]	@ (8009c0c <pbuf_free+0x10c>)
 8009bde:	f008 fb6d 	bl	80122bc <iprintf>
        }
      }
      count++;
 8009be2:	7ffb      	ldrb	r3, [r7, #31]
 8009be4:	3301      	adds	r3, #1
 8009be6:	77fb      	strb	r3, [r7, #31]
      /* proceed to next pbuf */
      p = q;
 8009be8:	693b      	ldr	r3, [r7, #16]
 8009bea:	607b      	str	r3, [r7, #4]
 8009bec:	e001      	b.n	8009bf2 <pbuf_free+0xf2>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 8009bee:	2300      	movs	r3, #0
 8009bf0:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 8009bf2:	687b      	ldr	r3, [r7, #4]
 8009bf4:	2b00      	cmp	r3, #0
 8009bf6:	d199      	bne.n	8009b2c <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 8009bf8:	7ffb      	ldrb	r3, [r7, #31]
}
 8009bfa:	4618      	mov	r0, r3
 8009bfc:	3720      	adds	r7, #32
 8009bfe:	46bd      	mov	sp, r7
 8009c00:	bd80      	pop	{r7, pc}
 8009c02:	bf00      	nop
 8009c04:	08013890 	.word	0x08013890
 8009c08:	080139f4 	.word	0x080139f4
 8009c0c:	080138f0 	.word	0x080138f0
 8009c10:	08013a20 	.word	0x08013a20
 8009c14:	08013a38 	.word	0x08013a38
 8009c18:	08013a5c 	.word	0x08013a5c

08009c1c <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 8009c1c:	b480      	push	{r7}
 8009c1e:	b085      	sub	sp, #20
 8009c20:	af00      	add	r7, sp, #0
 8009c22:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 8009c24:	2300      	movs	r3, #0
 8009c26:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 8009c28:	e005      	b.n	8009c36 <pbuf_clen+0x1a>
    ++len;
 8009c2a:	89fb      	ldrh	r3, [r7, #14]
 8009c2c:	3301      	adds	r3, #1
 8009c2e:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 8009c30:	687b      	ldr	r3, [r7, #4]
 8009c32:	681b      	ldr	r3, [r3, #0]
 8009c34:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 8009c36:	687b      	ldr	r3, [r7, #4]
 8009c38:	2b00      	cmp	r3, #0
 8009c3a:	d1f6      	bne.n	8009c2a <pbuf_clen+0xe>
  }
  return len;
 8009c3c:	89fb      	ldrh	r3, [r7, #14]
}
 8009c3e:	4618      	mov	r0, r3
 8009c40:	3714      	adds	r7, #20
 8009c42:	46bd      	mov	sp, r7
 8009c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c48:	4770      	bx	lr
	...

08009c4c <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 8009c4c:	b580      	push	{r7, lr}
 8009c4e:	b084      	sub	sp, #16
 8009c50:	af00      	add	r7, sp, #0
 8009c52:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 8009c54:	687b      	ldr	r3, [r7, #4]
 8009c56:	2b00      	cmp	r3, #0
 8009c58:	d016      	beq.n	8009c88 <pbuf_ref+0x3c>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 8009c5a:	f008 fa11 	bl	8012080 <sys_arch_protect>
 8009c5e:	60f8      	str	r0, [r7, #12]
 8009c60:	687b      	ldr	r3, [r7, #4]
 8009c62:	7b9b      	ldrb	r3, [r3, #14]
 8009c64:	3301      	adds	r3, #1
 8009c66:	b2da      	uxtb	r2, r3
 8009c68:	687b      	ldr	r3, [r7, #4]
 8009c6a:	739a      	strb	r2, [r3, #14]
 8009c6c:	68f8      	ldr	r0, [r7, #12]
 8009c6e:	f008 fa15 	bl	801209c <sys_arch_unprotect>
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 8009c72:	687b      	ldr	r3, [r7, #4]
 8009c74:	7b9b      	ldrb	r3, [r3, #14]
 8009c76:	2b00      	cmp	r3, #0
 8009c78:	d106      	bne.n	8009c88 <pbuf_ref+0x3c>
 8009c7a:	4b05      	ldr	r3, [pc, #20]	@ (8009c90 <pbuf_ref+0x44>)
 8009c7c:	f240 3242 	movw	r2, #834	@ 0x342
 8009c80:	4904      	ldr	r1, [pc, #16]	@ (8009c94 <pbuf_ref+0x48>)
 8009c82:	4805      	ldr	r0, [pc, #20]	@ (8009c98 <pbuf_ref+0x4c>)
 8009c84:	f008 fb1a 	bl	80122bc <iprintf>
  }
}
 8009c88:	bf00      	nop
 8009c8a:	3710      	adds	r7, #16
 8009c8c:	46bd      	mov	sp, r7
 8009c8e:	bd80      	pop	{r7, pc}
 8009c90:	08013890 	.word	0x08013890
 8009c94:	08013a70 	.word	0x08013a70
 8009c98:	080138f0 	.word	0x080138f0

08009c9c <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 8009c9c:	b580      	push	{r7, lr}
 8009c9e:	b084      	sub	sp, #16
 8009ca0:	af00      	add	r7, sp, #0
 8009ca2:	6078      	str	r0, [r7, #4]
 8009ca4:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 8009ca6:	687b      	ldr	r3, [r7, #4]
 8009ca8:	2b00      	cmp	r3, #0
 8009caa:	d002      	beq.n	8009cb2 <pbuf_cat+0x16>
 8009cac:	683b      	ldr	r3, [r7, #0]
 8009cae:	2b00      	cmp	r3, #0
 8009cb0:	d107      	bne.n	8009cc2 <pbuf_cat+0x26>
 8009cb2:	4b20      	ldr	r3, [pc, #128]	@ (8009d34 <pbuf_cat+0x98>)
 8009cb4:	f240 3259 	movw	r2, #857	@ 0x359
 8009cb8:	491f      	ldr	r1, [pc, #124]	@ (8009d38 <pbuf_cat+0x9c>)
 8009cba:	4820      	ldr	r0, [pc, #128]	@ (8009d3c <pbuf_cat+0xa0>)
 8009cbc:	f008 fafe 	bl	80122bc <iprintf>
 8009cc0:	e034      	b.n	8009d2c <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 8009cc2:	687b      	ldr	r3, [r7, #4]
 8009cc4:	60fb      	str	r3, [r7, #12]
 8009cc6:	e00a      	b.n	8009cde <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 8009cc8:	68fb      	ldr	r3, [r7, #12]
 8009cca:	891a      	ldrh	r2, [r3, #8]
 8009ccc:	683b      	ldr	r3, [r7, #0]
 8009cce:	891b      	ldrh	r3, [r3, #8]
 8009cd0:	4413      	add	r3, r2
 8009cd2:	b29a      	uxth	r2, r3
 8009cd4:	68fb      	ldr	r3, [r7, #12]
 8009cd6:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 8009cd8:	68fb      	ldr	r3, [r7, #12]
 8009cda:	681b      	ldr	r3, [r3, #0]
 8009cdc:	60fb      	str	r3, [r7, #12]
 8009cde:	68fb      	ldr	r3, [r7, #12]
 8009ce0:	681b      	ldr	r3, [r3, #0]
 8009ce2:	2b00      	cmp	r3, #0
 8009ce4:	d1f0      	bne.n	8009cc8 <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 8009ce6:	68fb      	ldr	r3, [r7, #12]
 8009ce8:	891a      	ldrh	r2, [r3, #8]
 8009cea:	68fb      	ldr	r3, [r7, #12]
 8009cec:	895b      	ldrh	r3, [r3, #10]
 8009cee:	429a      	cmp	r2, r3
 8009cf0:	d006      	beq.n	8009d00 <pbuf_cat+0x64>
 8009cf2:	4b10      	ldr	r3, [pc, #64]	@ (8009d34 <pbuf_cat+0x98>)
 8009cf4:	f240 3262 	movw	r2, #866	@ 0x362
 8009cf8:	4911      	ldr	r1, [pc, #68]	@ (8009d40 <pbuf_cat+0xa4>)
 8009cfa:	4810      	ldr	r0, [pc, #64]	@ (8009d3c <pbuf_cat+0xa0>)
 8009cfc:	f008 fade 	bl	80122bc <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 8009d00:	68fb      	ldr	r3, [r7, #12]
 8009d02:	681b      	ldr	r3, [r3, #0]
 8009d04:	2b00      	cmp	r3, #0
 8009d06:	d006      	beq.n	8009d16 <pbuf_cat+0x7a>
 8009d08:	4b0a      	ldr	r3, [pc, #40]	@ (8009d34 <pbuf_cat+0x98>)
 8009d0a:	f240 3263 	movw	r2, #867	@ 0x363
 8009d0e:	490d      	ldr	r1, [pc, #52]	@ (8009d44 <pbuf_cat+0xa8>)
 8009d10:	480a      	ldr	r0, [pc, #40]	@ (8009d3c <pbuf_cat+0xa0>)
 8009d12:	f008 fad3 	bl	80122bc <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 8009d16:	68fb      	ldr	r3, [r7, #12]
 8009d18:	891a      	ldrh	r2, [r3, #8]
 8009d1a:	683b      	ldr	r3, [r7, #0]
 8009d1c:	891b      	ldrh	r3, [r3, #8]
 8009d1e:	4413      	add	r3, r2
 8009d20:	b29a      	uxth	r2, r3
 8009d22:	68fb      	ldr	r3, [r7, #12]
 8009d24:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 8009d26:	68fb      	ldr	r3, [r7, #12]
 8009d28:	683a      	ldr	r2, [r7, #0]
 8009d2a:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 8009d2c:	3710      	adds	r7, #16
 8009d2e:	46bd      	mov	sp, r7
 8009d30:	bd80      	pop	{r7, pc}
 8009d32:	bf00      	nop
 8009d34:	08013890 	.word	0x08013890
 8009d38:	08013a84 	.word	0x08013a84
 8009d3c:	080138f0 	.word	0x080138f0
 8009d40:	08013abc 	.word	0x08013abc
 8009d44:	08013aec 	.word	0x08013aec

08009d48 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 8009d48:	b580      	push	{r7, lr}
 8009d4a:	b086      	sub	sp, #24
 8009d4c:	af00      	add	r7, sp, #0
 8009d4e:	6078      	str	r0, [r7, #4]
 8009d50:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 8009d52:	2300      	movs	r3, #0
 8009d54:	617b      	str	r3, [r7, #20]
 8009d56:	2300      	movs	r3, #0
 8009d58:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 8009d5a:	687b      	ldr	r3, [r7, #4]
 8009d5c:	2b00      	cmp	r3, #0
 8009d5e:	d008      	beq.n	8009d72 <pbuf_copy+0x2a>
 8009d60:	683b      	ldr	r3, [r7, #0]
 8009d62:	2b00      	cmp	r3, #0
 8009d64:	d005      	beq.n	8009d72 <pbuf_copy+0x2a>
 8009d66:	687b      	ldr	r3, [r7, #4]
 8009d68:	891a      	ldrh	r2, [r3, #8]
 8009d6a:	683b      	ldr	r3, [r7, #0]
 8009d6c:	891b      	ldrh	r3, [r3, #8]
 8009d6e:	429a      	cmp	r2, r3
 8009d70:	d209      	bcs.n	8009d86 <pbuf_copy+0x3e>
 8009d72:	4b57      	ldr	r3, [pc, #348]	@ (8009ed0 <pbuf_copy+0x188>)
 8009d74:	f240 32c9 	movw	r2, #969	@ 0x3c9
 8009d78:	4956      	ldr	r1, [pc, #344]	@ (8009ed4 <pbuf_copy+0x18c>)
 8009d7a:	4857      	ldr	r0, [pc, #348]	@ (8009ed8 <pbuf_copy+0x190>)
 8009d7c:	f008 fa9e 	bl	80122bc <iprintf>
 8009d80:	f06f 030f 	mvn.w	r3, #15
 8009d84:	e09f      	b.n	8009ec6 <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 8009d86:	687b      	ldr	r3, [r7, #4]
 8009d88:	895b      	ldrh	r3, [r3, #10]
 8009d8a:	461a      	mov	r2, r3
 8009d8c:	697b      	ldr	r3, [r7, #20]
 8009d8e:	1ad2      	subs	r2, r2, r3
 8009d90:	683b      	ldr	r3, [r7, #0]
 8009d92:	895b      	ldrh	r3, [r3, #10]
 8009d94:	4619      	mov	r1, r3
 8009d96:	693b      	ldr	r3, [r7, #16]
 8009d98:	1acb      	subs	r3, r1, r3
 8009d9a:	429a      	cmp	r2, r3
 8009d9c:	d306      	bcc.n	8009dac <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 8009d9e:	683b      	ldr	r3, [r7, #0]
 8009da0:	895b      	ldrh	r3, [r3, #10]
 8009da2:	461a      	mov	r2, r3
 8009da4:	693b      	ldr	r3, [r7, #16]
 8009da6:	1ad3      	subs	r3, r2, r3
 8009da8:	60fb      	str	r3, [r7, #12]
 8009daa:	e005      	b.n	8009db8 <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 8009dac:	687b      	ldr	r3, [r7, #4]
 8009dae:	895b      	ldrh	r3, [r3, #10]
 8009db0:	461a      	mov	r2, r3
 8009db2:	697b      	ldr	r3, [r7, #20]
 8009db4:	1ad3      	subs	r3, r2, r3
 8009db6:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 8009db8:	687b      	ldr	r3, [r7, #4]
 8009dba:	685a      	ldr	r2, [r3, #4]
 8009dbc:	697b      	ldr	r3, [r7, #20]
 8009dbe:	18d0      	adds	r0, r2, r3
 8009dc0:	683b      	ldr	r3, [r7, #0]
 8009dc2:	685a      	ldr	r2, [r3, #4]
 8009dc4:	693b      	ldr	r3, [r7, #16]
 8009dc6:	4413      	add	r3, r2
 8009dc8:	68fa      	ldr	r2, [r7, #12]
 8009dca:	4619      	mov	r1, r3
 8009dcc:	f008 fba7 	bl	801251e <memcpy>
    offset_to += len;
 8009dd0:	697a      	ldr	r2, [r7, #20]
 8009dd2:	68fb      	ldr	r3, [r7, #12]
 8009dd4:	4413      	add	r3, r2
 8009dd6:	617b      	str	r3, [r7, #20]
    offset_from += len;
 8009dd8:	693a      	ldr	r2, [r7, #16]
 8009dda:	68fb      	ldr	r3, [r7, #12]
 8009ddc:	4413      	add	r3, r2
 8009dde:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 8009de0:	687b      	ldr	r3, [r7, #4]
 8009de2:	895b      	ldrh	r3, [r3, #10]
 8009de4:	461a      	mov	r2, r3
 8009de6:	697b      	ldr	r3, [r7, #20]
 8009de8:	4293      	cmp	r3, r2
 8009dea:	d906      	bls.n	8009dfa <pbuf_copy+0xb2>
 8009dec:	4b38      	ldr	r3, [pc, #224]	@ (8009ed0 <pbuf_copy+0x188>)
 8009dee:	f240 32d9 	movw	r2, #985	@ 0x3d9
 8009df2:	493a      	ldr	r1, [pc, #232]	@ (8009edc <pbuf_copy+0x194>)
 8009df4:	4838      	ldr	r0, [pc, #224]	@ (8009ed8 <pbuf_copy+0x190>)
 8009df6:	f008 fa61 	bl	80122bc <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 8009dfa:	683b      	ldr	r3, [r7, #0]
 8009dfc:	895b      	ldrh	r3, [r3, #10]
 8009dfe:	461a      	mov	r2, r3
 8009e00:	693b      	ldr	r3, [r7, #16]
 8009e02:	4293      	cmp	r3, r2
 8009e04:	d906      	bls.n	8009e14 <pbuf_copy+0xcc>
 8009e06:	4b32      	ldr	r3, [pc, #200]	@ (8009ed0 <pbuf_copy+0x188>)
 8009e08:	f240 32da 	movw	r2, #986	@ 0x3da
 8009e0c:	4934      	ldr	r1, [pc, #208]	@ (8009ee0 <pbuf_copy+0x198>)
 8009e0e:	4832      	ldr	r0, [pc, #200]	@ (8009ed8 <pbuf_copy+0x190>)
 8009e10:	f008 fa54 	bl	80122bc <iprintf>
    if (offset_from >= p_from->len) {
 8009e14:	683b      	ldr	r3, [r7, #0]
 8009e16:	895b      	ldrh	r3, [r3, #10]
 8009e18:	461a      	mov	r2, r3
 8009e1a:	693b      	ldr	r3, [r7, #16]
 8009e1c:	4293      	cmp	r3, r2
 8009e1e:	d304      	bcc.n	8009e2a <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 8009e20:	2300      	movs	r3, #0
 8009e22:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 8009e24:	683b      	ldr	r3, [r7, #0]
 8009e26:	681b      	ldr	r3, [r3, #0]
 8009e28:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 8009e2a:	687b      	ldr	r3, [r7, #4]
 8009e2c:	895b      	ldrh	r3, [r3, #10]
 8009e2e:	461a      	mov	r2, r3
 8009e30:	697b      	ldr	r3, [r7, #20]
 8009e32:	4293      	cmp	r3, r2
 8009e34:	d114      	bne.n	8009e60 <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 8009e36:	2300      	movs	r3, #0
 8009e38:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 8009e3a:	687b      	ldr	r3, [r7, #4]
 8009e3c:	681b      	ldr	r3, [r3, #0]
 8009e3e:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 8009e40:	687b      	ldr	r3, [r7, #4]
 8009e42:	2b00      	cmp	r3, #0
 8009e44:	d10c      	bne.n	8009e60 <pbuf_copy+0x118>
 8009e46:	683b      	ldr	r3, [r7, #0]
 8009e48:	2b00      	cmp	r3, #0
 8009e4a:	d009      	beq.n	8009e60 <pbuf_copy+0x118>
 8009e4c:	4b20      	ldr	r3, [pc, #128]	@ (8009ed0 <pbuf_copy+0x188>)
 8009e4e:	f44f 7279 	mov.w	r2, #996	@ 0x3e4
 8009e52:	4924      	ldr	r1, [pc, #144]	@ (8009ee4 <pbuf_copy+0x19c>)
 8009e54:	4820      	ldr	r0, [pc, #128]	@ (8009ed8 <pbuf_copy+0x190>)
 8009e56:	f008 fa31 	bl	80122bc <iprintf>
 8009e5a:	f06f 030f 	mvn.w	r3, #15
 8009e5e:	e032      	b.n	8009ec6 <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 8009e60:	683b      	ldr	r3, [r7, #0]
 8009e62:	2b00      	cmp	r3, #0
 8009e64:	d013      	beq.n	8009e8e <pbuf_copy+0x146>
 8009e66:	683b      	ldr	r3, [r7, #0]
 8009e68:	895a      	ldrh	r2, [r3, #10]
 8009e6a:	683b      	ldr	r3, [r7, #0]
 8009e6c:	891b      	ldrh	r3, [r3, #8]
 8009e6e:	429a      	cmp	r2, r3
 8009e70:	d10d      	bne.n	8009e8e <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 8009e72:	683b      	ldr	r3, [r7, #0]
 8009e74:	681b      	ldr	r3, [r3, #0]
 8009e76:	2b00      	cmp	r3, #0
 8009e78:	d009      	beq.n	8009e8e <pbuf_copy+0x146>
 8009e7a:	4b15      	ldr	r3, [pc, #84]	@ (8009ed0 <pbuf_copy+0x188>)
 8009e7c:	f240 32e9 	movw	r2, #1001	@ 0x3e9
 8009e80:	4919      	ldr	r1, [pc, #100]	@ (8009ee8 <pbuf_copy+0x1a0>)
 8009e82:	4815      	ldr	r0, [pc, #84]	@ (8009ed8 <pbuf_copy+0x190>)
 8009e84:	f008 fa1a 	bl	80122bc <iprintf>
 8009e88:	f06f 0305 	mvn.w	r3, #5
 8009e8c:	e01b      	b.n	8009ec6 <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 8009e8e:	687b      	ldr	r3, [r7, #4]
 8009e90:	2b00      	cmp	r3, #0
 8009e92:	d013      	beq.n	8009ebc <pbuf_copy+0x174>
 8009e94:	687b      	ldr	r3, [r7, #4]
 8009e96:	895a      	ldrh	r2, [r3, #10]
 8009e98:	687b      	ldr	r3, [r7, #4]
 8009e9a:	891b      	ldrh	r3, [r3, #8]
 8009e9c:	429a      	cmp	r2, r3
 8009e9e:	d10d      	bne.n	8009ebc <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 8009ea0:	687b      	ldr	r3, [r7, #4]
 8009ea2:	681b      	ldr	r3, [r3, #0]
 8009ea4:	2b00      	cmp	r3, #0
 8009ea6:	d009      	beq.n	8009ebc <pbuf_copy+0x174>
 8009ea8:	4b09      	ldr	r3, [pc, #36]	@ (8009ed0 <pbuf_copy+0x188>)
 8009eaa:	f240 32ee 	movw	r2, #1006	@ 0x3ee
 8009eae:	490e      	ldr	r1, [pc, #56]	@ (8009ee8 <pbuf_copy+0x1a0>)
 8009eb0:	4809      	ldr	r0, [pc, #36]	@ (8009ed8 <pbuf_copy+0x190>)
 8009eb2:	f008 fa03 	bl	80122bc <iprintf>
 8009eb6:	f06f 0305 	mvn.w	r3, #5
 8009eba:	e004      	b.n	8009ec6 <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 8009ebc:	683b      	ldr	r3, [r7, #0]
 8009ebe:	2b00      	cmp	r3, #0
 8009ec0:	f47f af61 	bne.w	8009d86 <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 8009ec4:	2300      	movs	r3, #0
}
 8009ec6:	4618      	mov	r0, r3
 8009ec8:	3718      	adds	r7, #24
 8009eca:	46bd      	mov	sp, r7
 8009ecc:	bd80      	pop	{r7, pc}
 8009ece:	bf00      	nop
 8009ed0:	08013890 	.word	0x08013890
 8009ed4:	08013b38 	.word	0x08013b38
 8009ed8:	080138f0 	.word	0x080138f0
 8009edc:	08013b68 	.word	0x08013b68
 8009ee0:	08013b80 	.word	0x08013b80
 8009ee4:	08013b9c 	.word	0x08013b9c
 8009ee8:	08013bac 	.word	0x08013bac

08009eec <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 8009eec:	b580      	push	{r7, lr}
 8009eee:	b088      	sub	sp, #32
 8009ef0:	af00      	add	r7, sp, #0
 8009ef2:	60f8      	str	r0, [r7, #12]
 8009ef4:	60b9      	str	r1, [r7, #8]
 8009ef6:	4611      	mov	r1, r2
 8009ef8:	461a      	mov	r2, r3
 8009efa:	460b      	mov	r3, r1
 8009efc:	80fb      	strh	r3, [r7, #6]
 8009efe:	4613      	mov	r3, r2
 8009f00:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 8009f02:	2300      	movs	r3, #0
 8009f04:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 8009f06:	2300      	movs	r3, #0
 8009f08:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 8009f0a:	68fb      	ldr	r3, [r7, #12]
 8009f0c:	2b00      	cmp	r3, #0
 8009f0e:	d108      	bne.n	8009f22 <pbuf_copy_partial+0x36>
 8009f10:	4b2b      	ldr	r3, [pc, #172]	@ (8009fc0 <pbuf_copy_partial+0xd4>)
 8009f12:	f240 420a 	movw	r2, #1034	@ 0x40a
 8009f16:	492b      	ldr	r1, [pc, #172]	@ (8009fc4 <pbuf_copy_partial+0xd8>)
 8009f18:	482b      	ldr	r0, [pc, #172]	@ (8009fc8 <pbuf_copy_partial+0xdc>)
 8009f1a:	f008 f9cf 	bl	80122bc <iprintf>
 8009f1e:	2300      	movs	r3, #0
 8009f20:	e04a      	b.n	8009fb8 <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 8009f22:	68bb      	ldr	r3, [r7, #8]
 8009f24:	2b00      	cmp	r3, #0
 8009f26:	d108      	bne.n	8009f3a <pbuf_copy_partial+0x4e>
 8009f28:	4b25      	ldr	r3, [pc, #148]	@ (8009fc0 <pbuf_copy_partial+0xd4>)
 8009f2a:	f240 420b 	movw	r2, #1035	@ 0x40b
 8009f2e:	4927      	ldr	r1, [pc, #156]	@ (8009fcc <pbuf_copy_partial+0xe0>)
 8009f30:	4825      	ldr	r0, [pc, #148]	@ (8009fc8 <pbuf_copy_partial+0xdc>)
 8009f32:	f008 f9c3 	bl	80122bc <iprintf>
 8009f36:	2300      	movs	r3, #0
 8009f38:	e03e      	b.n	8009fb8 <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 8009f3a:	68fb      	ldr	r3, [r7, #12]
 8009f3c:	61fb      	str	r3, [r7, #28]
 8009f3e:	e034      	b.n	8009faa <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 8009f40:	88bb      	ldrh	r3, [r7, #4]
 8009f42:	2b00      	cmp	r3, #0
 8009f44:	d00a      	beq.n	8009f5c <pbuf_copy_partial+0x70>
 8009f46:	69fb      	ldr	r3, [r7, #28]
 8009f48:	895b      	ldrh	r3, [r3, #10]
 8009f4a:	88ba      	ldrh	r2, [r7, #4]
 8009f4c:	429a      	cmp	r2, r3
 8009f4e:	d305      	bcc.n	8009f5c <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 8009f50:	69fb      	ldr	r3, [r7, #28]
 8009f52:	895b      	ldrh	r3, [r3, #10]
 8009f54:	88ba      	ldrh	r2, [r7, #4]
 8009f56:	1ad3      	subs	r3, r2, r3
 8009f58:	80bb      	strh	r3, [r7, #4]
 8009f5a:	e023      	b.n	8009fa4 <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 8009f5c:	69fb      	ldr	r3, [r7, #28]
 8009f5e:	895a      	ldrh	r2, [r3, #10]
 8009f60:	88bb      	ldrh	r3, [r7, #4]
 8009f62:	1ad3      	subs	r3, r2, r3
 8009f64:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 8009f66:	8b3a      	ldrh	r2, [r7, #24]
 8009f68:	88fb      	ldrh	r3, [r7, #6]
 8009f6a:	429a      	cmp	r2, r3
 8009f6c:	d901      	bls.n	8009f72 <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 8009f6e:	88fb      	ldrh	r3, [r7, #6]
 8009f70:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 8009f72:	8b7b      	ldrh	r3, [r7, #26]
 8009f74:	68ba      	ldr	r2, [r7, #8]
 8009f76:	18d0      	adds	r0, r2, r3
 8009f78:	69fb      	ldr	r3, [r7, #28]
 8009f7a:	685a      	ldr	r2, [r3, #4]
 8009f7c:	88bb      	ldrh	r3, [r7, #4]
 8009f7e:	4413      	add	r3, r2
 8009f80:	8b3a      	ldrh	r2, [r7, #24]
 8009f82:	4619      	mov	r1, r3
 8009f84:	f008 facb 	bl	801251e <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 8009f88:	8afa      	ldrh	r2, [r7, #22]
 8009f8a:	8b3b      	ldrh	r3, [r7, #24]
 8009f8c:	4413      	add	r3, r2
 8009f8e:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 8009f90:	8b7a      	ldrh	r2, [r7, #26]
 8009f92:	8b3b      	ldrh	r3, [r7, #24]
 8009f94:	4413      	add	r3, r2
 8009f96:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 8009f98:	88fa      	ldrh	r2, [r7, #6]
 8009f9a:	8b3b      	ldrh	r3, [r7, #24]
 8009f9c:	1ad3      	subs	r3, r2, r3
 8009f9e:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 8009fa0:	2300      	movs	r3, #0
 8009fa2:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 8009fa4:	69fb      	ldr	r3, [r7, #28]
 8009fa6:	681b      	ldr	r3, [r3, #0]
 8009fa8:	61fb      	str	r3, [r7, #28]
 8009faa:	88fb      	ldrh	r3, [r7, #6]
 8009fac:	2b00      	cmp	r3, #0
 8009fae:	d002      	beq.n	8009fb6 <pbuf_copy_partial+0xca>
 8009fb0:	69fb      	ldr	r3, [r7, #28]
 8009fb2:	2b00      	cmp	r3, #0
 8009fb4:	d1c4      	bne.n	8009f40 <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 8009fb6:	8afb      	ldrh	r3, [r7, #22]
}
 8009fb8:	4618      	mov	r0, r3
 8009fba:	3720      	adds	r7, #32
 8009fbc:	46bd      	mov	sp, r7
 8009fbe:	bd80      	pop	{r7, pc}
 8009fc0:	08013890 	.word	0x08013890
 8009fc4:	08013bd8 	.word	0x08013bd8
 8009fc8:	080138f0 	.word	0x080138f0
 8009fcc:	08013bf8 	.word	0x08013bf8

08009fd0 <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 8009fd0:	b580      	push	{r7, lr}
 8009fd2:	b084      	sub	sp, #16
 8009fd4:	af00      	add	r7, sp, #0
 8009fd6:	4603      	mov	r3, r0
 8009fd8:	603a      	str	r2, [r7, #0]
 8009fda:	71fb      	strb	r3, [r7, #7]
 8009fdc:	460b      	mov	r3, r1
 8009fde:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 8009fe0:	683b      	ldr	r3, [r7, #0]
 8009fe2:	8919      	ldrh	r1, [r3, #8]
 8009fe4:	88ba      	ldrh	r2, [r7, #4]
 8009fe6:	79fb      	ldrb	r3, [r7, #7]
 8009fe8:	4618      	mov	r0, r3
 8009fea:	f7ff faa5 	bl	8009538 <pbuf_alloc>
 8009fee:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 8009ff0:	68fb      	ldr	r3, [r7, #12]
 8009ff2:	2b00      	cmp	r3, #0
 8009ff4:	d101      	bne.n	8009ffa <pbuf_clone+0x2a>
    return NULL;
 8009ff6:	2300      	movs	r3, #0
 8009ff8:	e011      	b.n	800a01e <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 8009ffa:	6839      	ldr	r1, [r7, #0]
 8009ffc:	68f8      	ldr	r0, [r7, #12]
 8009ffe:	f7ff fea3 	bl	8009d48 <pbuf_copy>
 800a002:	4603      	mov	r3, r0
 800a004:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 800a006:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800a00a:	2b00      	cmp	r3, #0
 800a00c:	d006      	beq.n	800a01c <pbuf_clone+0x4c>
 800a00e:	4b06      	ldr	r3, [pc, #24]	@ (800a028 <pbuf_clone+0x58>)
 800a010:	f240 5224 	movw	r2, #1316	@ 0x524
 800a014:	4905      	ldr	r1, [pc, #20]	@ (800a02c <pbuf_clone+0x5c>)
 800a016:	4806      	ldr	r0, [pc, #24]	@ (800a030 <pbuf_clone+0x60>)
 800a018:	f008 f950 	bl	80122bc <iprintf>
  return q;
 800a01c:	68fb      	ldr	r3, [r7, #12]
}
 800a01e:	4618      	mov	r0, r3
 800a020:	3710      	adds	r7, #16
 800a022:	46bd      	mov	sp, r7
 800a024:	bd80      	pop	{r7, pc}
 800a026:	bf00      	nop
 800a028:	08013890 	.word	0x08013890
 800a02c:	08013d04 	.word	0x08013d04
 800a030:	080138f0 	.word	0x080138f0

0800a034 <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 800a034:	b580      	push	{r7, lr}
 800a036:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 800a038:	f008 f840 	bl	80120bc <rand>
 800a03c:	4603      	mov	r3, r0
 800a03e:	b29b      	uxth	r3, r3
 800a040:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800a044:	b29b      	uxth	r3, r3
 800a046:	f5a3 4380 	sub.w	r3, r3, #16384	@ 0x4000
 800a04a:	b29a      	uxth	r2, r3
 800a04c:	4b01      	ldr	r3, [pc, #4]	@ (800a054 <tcp_init+0x20>)
 800a04e:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 800a050:	bf00      	nop
 800a052:	bd80      	pop	{r7, pc}
 800a054:	20000024 	.word	0x20000024

0800a058 <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 800a058:	b580      	push	{r7, lr}
 800a05a:	b082      	sub	sp, #8
 800a05c:	af00      	add	r7, sp, #0
 800a05e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 800a060:	687b      	ldr	r3, [r7, #4]
 800a062:	7d1b      	ldrb	r3, [r3, #20]
 800a064:	2b01      	cmp	r3, #1
 800a066:	d105      	bne.n	800a074 <tcp_free+0x1c>
 800a068:	4b06      	ldr	r3, [pc, #24]	@ (800a084 <tcp_free+0x2c>)
 800a06a:	22d4      	movs	r2, #212	@ 0xd4
 800a06c:	4906      	ldr	r1, [pc, #24]	@ (800a088 <tcp_free+0x30>)
 800a06e:	4807      	ldr	r0, [pc, #28]	@ (800a08c <tcp_free+0x34>)
 800a070:	f008 f924 	bl	80122bc <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 800a074:	6879      	ldr	r1, [r7, #4]
 800a076:	2001      	movs	r0, #1
 800a078:	f7fe fe9e 	bl	8008db8 <memp_free>
}
 800a07c:	bf00      	nop
 800a07e:	3708      	adds	r7, #8
 800a080:	46bd      	mov	sp, r7
 800a082:	bd80      	pop	{r7, pc}
 800a084:	08013d90 	.word	0x08013d90
 800a088:	08013dc0 	.word	0x08013dc0
 800a08c:	08013dd4 	.word	0x08013dd4

0800a090 <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 800a090:	b580      	push	{r7, lr}
 800a092:	b082      	sub	sp, #8
 800a094:	af00      	add	r7, sp, #0
 800a096:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 800a098:	687b      	ldr	r3, [r7, #4]
 800a09a:	7d1b      	ldrb	r3, [r3, #20]
 800a09c:	2b01      	cmp	r3, #1
 800a09e:	d105      	bne.n	800a0ac <tcp_free_listen+0x1c>
 800a0a0:	4b06      	ldr	r3, [pc, #24]	@ (800a0bc <tcp_free_listen+0x2c>)
 800a0a2:	22df      	movs	r2, #223	@ 0xdf
 800a0a4:	4906      	ldr	r1, [pc, #24]	@ (800a0c0 <tcp_free_listen+0x30>)
 800a0a6:	4807      	ldr	r0, [pc, #28]	@ (800a0c4 <tcp_free_listen+0x34>)
 800a0a8:	f008 f908 	bl	80122bc <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 800a0ac:	6879      	ldr	r1, [r7, #4]
 800a0ae:	2002      	movs	r0, #2
 800a0b0:	f7fe fe82 	bl	8008db8 <memp_free>
}
 800a0b4:	bf00      	nop
 800a0b6:	3708      	adds	r7, #8
 800a0b8:	46bd      	mov	sp, r7
 800a0ba:	bd80      	pop	{r7, pc}
 800a0bc:	08013d90 	.word	0x08013d90
 800a0c0:	08013dfc 	.word	0x08013dfc
 800a0c4:	08013dd4 	.word	0x08013dd4

0800a0c8 <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 800a0c8:	b580      	push	{r7, lr}
 800a0ca:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 800a0cc:	f000 fea4 	bl	800ae18 <tcp_fasttmr>

  if (++tcp_timer & 1) {
 800a0d0:	4b07      	ldr	r3, [pc, #28]	@ (800a0f0 <tcp_tmr+0x28>)
 800a0d2:	781b      	ldrb	r3, [r3, #0]
 800a0d4:	3301      	adds	r3, #1
 800a0d6:	b2da      	uxtb	r2, r3
 800a0d8:	4b05      	ldr	r3, [pc, #20]	@ (800a0f0 <tcp_tmr+0x28>)
 800a0da:	701a      	strb	r2, [r3, #0]
 800a0dc:	4b04      	ldr	r3, [pc, #16]	@ (800a0f0 <tcp_tmr+0x28>)
 800a0de:	781b      	ldrb	r3, [r3, #0]
 800a0e0:	f003 0301 	and.w	r3, r3, #1
 800a0e4:	2b00      	cmp	r3, #0
 800a0e6:	d001      	beq.n	800a0ec <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 800a0e8:	f000 fb54 	bl	800a794 <tcp_slowtmr>
  }
}
 800a0ec:	bf00      	nop
 800a0ee:	bd80      	pop	{r7, pc}
 800a0f0:	20010111 	.word	0x20010111

0800a0f4 <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 800a0f4:	b580      	push	{r7, lr}
 800a0f6:	b084      	sub	sp, #16
 800a0f8:	af00      	add	r7, sp, #0
 800a0fa:	6078      	str	r0, [r7, #4]
 800a0fc:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 800a0fe:	683b      	ldr	r3, [r7, #0]
 800a100:	2b00      	cmp	r3, #0
 800a102:	d105      	bne.n	800a110 <tcp_remove_listener+0x1c>
 800a104:	4b0d      	ldr	r3, [pc, #52]	@ (800a13c <tcp_remove_listener+0x48>)
 800a106:	22ff      	movs	r2, #255	@ 0xff
 800a108:	490d      	ldr	r1, [pc, #52]	@ (800a140 <tcp_remove_listener+0x4c>)
 800a10a:	480e      	ldr	r0, [pc, #56]	@ (800a144 <tcp_remove_listener+0x50>)
 800a10c:	f008 f8d6 	bl	80122bc <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800a110:	687b      	ldr	r3, [r7, #4]
 800a112:	60fb      	str	r3, [r7, #12]
 800a114:	e00a      	b.n	800a12c <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 800a116:	68fb      	ldr	r3, [r7, #12]
 800a118:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800a11a:	683a      	ldr	r2, [r7, #0]
 800a11c:	429a      	cmp	r2, r3
 800a11e:	d102      	bne.n	800a126 <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 800a120:	68fb      	ldr	r3, [r7, #12]
 800a122:	2200      	movs	r2, #0
 800a124:	67da      	str	r2, [r3, #124]	@ 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800a126:	68fb      	ldr	r3, [r7, #12]
 800a128:	68db      	ldr	r3, [r3, #12]
 800a12a:	60fb      	str	r3, [r7, #12]
 800a12c:	68fb      	ldr	r3, [r7, #12]
 800a12e:	2b00      	cmp	r3, #0
 800a130:	d1f1      	bne.n	800a116 <tcp_remove_listener+0x22>
    }
  }
}
 800a132:	bf00      	nop
 800a134:	bf00      	nop
 800a136:	3710      	adds	r7, #16
 800a138:	46bd      	mov	sp, r7
 800a13a:	bd80      	pop	{r7, pc}
 800a13c:	08013d90 	.word	0x08013d90
 800a140:	08013e18 	.word	0x08013e18
 800a144:	08013dd4 	.word	0x08013dd4

0800a148 <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 800a148:	b580      	push	{r7, lr}
 800a14a:	b084      	sub	sp, #16
 800a14c:	af00      	add	r7, sp, #0
 800a14e:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800a150:	687b      	ldr	r3, [r7, #4]
 800a152:	2b00      	cmp	r3, #0
 800a154:	d106      	bne.n	800a164 <tcp_listen_closed+0x1c>
 800a156:	4b14      	ldr	r3, [pc, #80]	@ (800a1a8 <tcp_listen_closed+0x60>)
 800a158:	f240 1211 	movw	r2, #273	@ 0x111
 800a15c:	4913      	ldr	r1, [pc, #76]	@ (800a1ac <tcp_listen_closed+0x64>)
 800a15e:	4814      	ldr	r0, [pc, #80]	@ (800a1b0 <tcp_listen_closed+0x68>)
 800a160:	f008 f8ac 	bl	80122bc <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 800a164:	687b      	ldr	r3, [r7, #4]
 800a166:	7d1b      	ldrb	r3, [r3, #20]
 800a168:	2b01      	cmp	r3, #1
 800a16a:	d006      	beq.n	800a17a <tcp_listen_closed+0x32>
 800a16c:	4b0e      	ldr	r3, [pc, #56]	@ (800a1a8 <tcp_listen_closed+0x60>)
 800a16e:	f44f 7289 	mov.w	r2, #274	@ 0x112
 800a172:	4910      	ldr	r1, [pc, #64]	@ (800a1b4 <tcp_listen_closed+0x6c>)
 800a174:	480e      	ldr	r0, [pc, #56]	@ (800a1b0 <tcp_listen_closed+0x68>)
 800a176:	f008 f8a1 	bl	80122bc <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800a17a:	2301      	movs	r3, #1
 800a17c:	60fb      	str	r3, [r7, #12]
 800a17e:	e00b      	b.n	800a198 <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 800a180:	4a0d      	ldr	r2, [pc, #52]	@ (800a1b8 <tcp_listen_closed+0x70>)
 800a182:	68fb      	ldr	r3, [r7, #12]
 800a184:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a188:	681b      	ldr	r3, [r3, #0]
 800a18a:	6879      	ldr	r1, [r7, #4]
 800a18c:	4618      	mov	r0, r3
 800a18e:	f7ff ffb1 	bl	800a0f4 <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800a192:	68fb      	ldr	r3, [r7, #12]
 800a194:	3301      	adds	r3, #1
 800a196:	60fb      	str	r3, [r7, #12]
 800a198:	68fb      	ldr	r3, [r7, #12]
 800a19a:	2b03      	cmp	r3, #3
 800a19c:	d9f0      	bls.n	800a180 <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 800a19e:	bf00      	nop
 800a1a0:	bf00      	nop
 800a1a2:	3710      	adds	r7, #16
 800a1a4:	46bd      	mov	sp, r7
 800a1a6:	bd80      	pop	{r7, pc}
 800a1a8:	08013d90 	.word	0x08013d90
 800a1ac:	08013e40 	.word	0x08013e40
 800a1b0:	08013dd4 	.word	0x08013dd4
 800a1b4:	08013e4c 	.word	0x08013e4c
 800a1b8:	08015dd4 	.word	0x08015dd4

0800a1bc <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 800a1bc:	b5b0      	push	{r4, r5, r7, lr}
 800a1be:	b088      	sub	sp, #32
 800a1c0:	af04      	add	r7, sp, #16
 800a1c2:	6078      	str	r0, [r7, #4]
 800a1c4:	460b      	mov	r3, r1
 800a1c6:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 800a1c8:	687b      	ldr	r3, [r7, #4]
 800a1ca:	2b00      	cmp	r3, #0
 800a1cc:	d106      	bne.n	800a1dc <tcp_close_shutdown+0x20>
 800a1ce:	4b63      	ldr	r3, [pc, #396]	@ (800a35c <tcp_close_shutdown+0x1a0>)
 800a1d0:	f44f 72af 	mov.w	r2, #350	@ 0x15e
 800a1d4:	4962      	ldr	r1, [pc, #392]	@ (800a360 <tcp_close_shutdown+0x1a4>)
 800a1d6:	4863      	ldr	r0, [pc, #396]	@ (800a364 <tcp_close_shutdown+0x1a8>)
 800a1d8:	f008 f870 	bl	80122bc <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 800a1dc:	78fb      	ldrb	r3, [r7, #3]
 800a1de:	2b00      	cmp	r3, #0
 800a1e0:	d066      	beq.n	800a2b0 <tcp_close_shutdown+0xf4>
 800a1e2:	687b      	ldr	r3, [r7, #4]
 800a1e4:	7d1b      	ldrb	r3, [r3, #20]
 800a1e6:	2b04      	cmp	r3, #4
 800a1e8:	d003      	beq.n	800a1f2 <tcp_close_shutdown+0x36>
 800a1ea:	687b      	ldr	r3, [r7, #4]
 800a1ec:	7d1b      	ldrb	r3, [r3, #20]
 800a1ee:	2b07      	cmp	r3, #7
 800a1f0:	d15e      	bne.n	800a2b0 <tcp_close_shutdown+0xf4>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 800a1f2:	687b      	ldr	r3, [r7, #4]
 800a1f4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800a1f6:	2b00      	cmp	r3, #0
 800a1f8:	d104      	bne.n	800a204 <tcp_close_shutdown+0x48>
 800a1fa:	687b      	ldr	r3, [r7, #4]
 800a1fc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a1fe:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 800a202:	d055      	beq.n	800a2b0 <tcp_close_shutdown+0xf4>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 800a204:	687b      	ldr	r3, [r7, #4]
 800a206:	8b5b      	ldrh	r3, [r3, #26]
 800a208:	f003 0310 	and.w	r3, r3, #16
 800a20c:	2b00      	cmp	r3, #0
 800a20e:	d106      	bne.n	800a21e <tcp_close_shutdown+0x62>
 800a210:	4b52      	ldr	r3, [pc, #328]	@ (800a35c <tcp_close_shutdown+0x1a0>)
 800a212:	f44f 72b2 	mov.w	r2, #356	@ 0x164
 800a216:	4954      	ldr	r1, [pc, #336]	@ (800a368 <tcp_close_shutdown+0x1ac>)
 800a218:	4852      	ldr	r0, [pc, #328]	@ (800a364 <tcp_close_shutdown+0x1a8>)
 800a21a:	f008 f84f 	bl	80122bc <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800a21e:	687b      	ldr	r3, [r7, #4]
 800a220:	6d18      	ldr	r0, [r3, #80]	@ 0x50
 800a222:	687b      	ldr	r3, [r7, #4]
 800a224:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 800a226:	687d      	ldr	r5, [r7, #4]
 800a228:	687b      	ldr	r3, [r7, #4]
 800a22a:	3304      	adds	r3, #4
 800a22c:	687a      	ldr	r2, [r7, #4]
 800a22e:	8ad2      	ldrh	r2, [r2, #22]
 800a230:	6879      	ldr	r1, [r7, #4]
 800a232:	8b09      	ldrh	r1, [r1, #24]
 800a234:	9102      	str	r1, [sp, #8]
 800a236:	9201      	str	r2, [sp, #4]
 800a238:	9300      	str	r3, [sp, #0]
 800a23a:	462b      	mov	r3, r5
 800a23c:	4622      	mov	r2, r4
 800a23e:	4601      	mov	r1, r0
 800a240:	6878      	ldr	r0, [r7, #4]
 800a242:	f004 fe8d 	bl	800ef60 <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 800a246:	6878      	ldr	r0, [r7, #4]
 800a248:	f001 f8c8 	bl	800b3dc <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 800a24c:	4b47      	ldr	r3, [pc, #284]	@ (800a36c <tcp_close_shutdown+0x1b0>)
 800a24e:	681b      	ldr	r3, [r3, #0]
 800a250:	687a      	ldr	r2, [r7, #4]
 800a252:	429a      	cmp	r2, r3
 800a254:	d105      	bne.n	800a262 <tcp_close_shutdown+0xa6>
 800a256:	4b45      	ldr	r3, [pc, #276]	@ (800a36c <tcp_close_shutdown+0x1b0>)
 800a258:	681b      	ldr	r3, [r3, #0]
 800a25a:	68db      	ldr	r3, [r3, #12]
 800a25c:	4a43      	ldr	r2, [pc, #268]	@ (800a36c <tcp_close_shutdown+0x1b0>)
 800a25e:	6013      	str	r3, [r2, #0]
 800a260:	e013      	b.n	800a28a <tcp_close_shutdown+0xce>
 800a262:	4b42      	ldr	r3, [pc, #264]	@ (800a36c <tcp_close_shutdown+0x1b0>)
 800a264:	681b      	ldr	r3, [r3, #0]
 800a266:	60fb      	str	r3, [r7, #12]
 800a268:	e00c      	b.n	800a284 <tcp_close_shutdown+0xc8>
 800a26a:	68fb      	ldr	r3, [r7, #12]
 800a26c:	68db      	ldr	r3, [r3, #12]
 800a26e:	687a      	ldr	r2, [r7, #4]
 800a270:	429a      	cmp	r2, r3
 800a272:	d104      	bne.n	800a27e <tcp_close_shutdown+0xc2>
 800a274:	687b      	ldr	r3, [r7, #4]
 800a276:	68da      	ldr	r2, [r3, #12]
 800a278:	68fb      	ldr	r3, [r7, #12]
 800a27a:	60da      	str	r2, [r3, #12]
 800a27c:	e005      	b.n	800a28a <tcp_close_shutdown+0xce>
 800a27e:	68fb      	ldr	r3, [r7, #12]
 800a280:	68db      	ldr	r3, [r3, #12]
 800a282:	60fb      	str	r3, [r7, #12]
 800a284:	68fb      	ldr	r3, [r7, #12]
 800a286:	2b00      	cmp	r3, #0
 800a288:	d1ef      	bne.n	800a26a <tcp_close_shutdown+0xae>
 800a28a:	687b      	ldr	r3, [r7, #4]
 800a28c:	2200      	movs	r2, #0
 800a28e:	60da      	str	r2, [r3, #12]
 800a290:	4b37      	ldr	r3, [pc, #220]	@ (800a370 <tcp_close_shutdown+0x1b4>)
 800a292:	2201      	movs	r2, #1
 800a294:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 800a296:	4b37      	ldr	r3, [pc, #220]	@ (800a374 <tcp_close_shutdown+0x1b8>)
 800a298:	681b      	ldr	r3, [r3, #0]
 800a29a:	687a      	ldr	r2, [r7, #4]
 800a29c:	429a      	cmp	r2, r3
 800a29e:	d102      	bne.n	800a2a6 <tcp_close_shutdown+0xea>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 800a2a0:	f003 fd5c 	bl	800dd5c <tcp_trigger_input_pcb_close>
 800a2a4:	e002      	b.n	800a2ac <tcp_close_shutdown+0xf0>
      } else {
        tcp_free(pcb);
 800a2a6:	6878      	ldr	r0, [r7, #4]
 800a2a8:	f7ff fed6 	bl	800a058 <tcp_free>
      }
      return ERR_OK;
 800a2ac:	2300      	movs	r3, #0
 800a2ae:	e050      	b.n	800a352 <tcp_close_shutdown+0x196>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 800a2b0:	687b      	ldr	r3, [r7, #4]
 800a2b2:	7d1b      	ldrb	r3, [r3, #20]
 800a2b4:	2b02      	cmp	r3, #2
 800a2b6:	d03b      	beq.n	800a330 <tcp_close_shutdown+0x174>
 800a2b8:	2b02      	cmp	r3, #2
 800a2ba:	dc44      	bgt.n	800a346 <tcp_close_shutdown+0x18a>
 800a2bc:	2b00      	cmp	r3, #0
 800a2be:	d002      	beq.n	800a2c6 <tcp_close_shutdown+0x10a>
 800a2c0:	2b01      	cmp	r3, #1
 800a2c2:	d02a      	beq.n	800a31a <tcp_close_shutdown+0x15e>
 800a2c4:	e03f      	b.n	800a346 <tcp_close_shutdown+0x18a>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 800a2c6:	687b      	ldr	r3, [r7, #4]
 800a2c8:	8adb      	ldrh	r3, [r3, #22]
 800a2ca:	2b00      	cmp	r3, #0
 800a2cc:	d021      	beq.n	800a312 <tcp_close_shutdown+0x156>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800a2ce:	4b2a      	ldr	r3, [pc, #168]	@ (800a378 <tcp_close_shutdown+0x1bc>)
 800a2d0:	681b      	ldr	r3, [r3, #0]
 800a2d2:	687a      	ldr	r2, [r7, #4]
 800a2d4:	429a      	cmp	r2, r3
 800a2d6:	d105      	bne.n	800a2e4 <tcp_close_shutdown+0x128>
 800a2d8:	4b27      	ldr	r3, [pc, #156]	@ (800a378 <tcp_close_shutdown+0x1bc>)
 800a2da:	681b      	ldr	r3, [r3, #0]
 800a2dc:	68db      	ldr	r3, [r3, #12]
 800a2de:	4a26      	ldr	r2, [pc, #152]	@ (800a378 <tcp_close_shutdown+0x1bc>)
 800a2e0:	6013      	str	r3, [r2, #0]
 800a2e2:	e013      	b.n	800a30c <tcp_close_shutdown+0x150>
 800a2e4:	4b24      	ldr	r3, [pc, #144]	@ (800a378 <tcp_close_shutdown+0x1bc>)
 800a2e6:	681b      	ldr	r3, [r3, #0]
 800a2e8:	60bb      	str	r3, [r7, #8]
 800a2ea:	e00c      	b.n	800a306 <tcp_close_shutdown+0x14a>
 800a2ec:	68bb      	ldr	r3, [r7, #8]
 800a2ee:	68db      	ldr	r3, [r3, #12]
 800a2f0:	687a      	ldr	r2, [r7, #4]
 800a2f2:	429a      	cmp	r2, r3
 800a2f4:	d104      	bne.n	800a300 <tcp_close_shutdown+0x144>
 800a2f6:	687b      	ldr	r3, [r7, #4]
 800a2f8:	68da      	ldr	r2, [r3, #12]
 800a2fa:	68bb      	ldr	r3, [r7, #8]
 800a2fc:	60da      	str	r2, [r3, #12]
 800a2fe:	e005      	b.n	800a30c <tcp_close_shutdown+0x150>
 800a300:	68bb      	ldr	r3, [r7, #8]
 800a302:	68db      	ldr	r3, [r3, #12]
 800a304:	60bb      	str	r3, [r7, #8]
 800a306:	68bb      	ldr	r3, [r7, #8]
 800a308:	2b00      	cmp	r3, #0
 800a30a:	d1ef      	bne.n	800a2ec <tcp_close_shutdown+0x130>
 800a30c:	687b      	ldr	r3, [r7, #4]
 800a30e:	2200      	movs	r2, #0
 800a310:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 800a312:	6878      	ldr	r0, [r7, #4]
 800a314:	f7ff fea0 	bl	800a058 <tcp_free>
      break;
 800a318:	e01a      	b.n	800a350 <tcp_close_shutdown+0x194>
    case LISTEN:
      tcp_listen_closed(pcb);
 800a31a:	6878      	ldr	r0, [r7, #4]
 800a31c:	f7ff ff14 	bl	800a148 <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 800a320:	6879      	ldr	r1, [r7, #4]
 800a322:	4816      	ldr	r0, [pc, #88]	@ (800a37c <tcp_close_shutdown+0x1c0>)
 800a324:	f001 f8aa 	bl	800b47c <tcp_pcb_remove>
      tcp_free_listen(pcb);
 800a328:	6878      	ldr	r0, [r7, #4]
 800a32a:	f7ff feb1 	bl	800a090 <tcp_free_listen>
      break;
 800a32e:	e00f      	b.n	800a350 <tcp_close_shutdown+0x194>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800a330:	6879      	ldr	r1, [r7, #4]
 800a332:	480e      	ldr	r0, [pc, #56]	@ (800a36c <tcp_close_shutdown+0x1b0>)
 800a334:	f001 f8a2 	bl	800b47c <tcp_pcb_remove>
 800a338:	4b0d      	ldr	r3, [pc, #52]	@ (800a370 <tcp_close_shutdown+0x1b4>)
 800a33a:	2201      	movs	r2, #1
 800a33c:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 800a33e:	6878      	ldr	r0, [r7, #4]
 800a340:	f7ff fe8a 	bl	800a058 <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 800a344:	e004      	b.n	800a350 <tcp_close_shutdown+0x194>
    default:
      return tcp_close_shutdown_fin(pcb);
 800a346:	6878      	ldr	r0, [r7, #4]
 800a348:	f000 f81a 	bl	800a380 <tcp_close_shutdown_fin>
 800a34c:	4603      	mov	r3, r0
 800a34e:	e000      	b.n	800a352 <tcp_close_shutdown+0x196>
  }
  return ERR_OK;
 800a350:	2300      	movs	r3, #0
}
 800a352:	4618      	mov	r0, r3
 800a354:	3710      	adds	r7, #16
 800a356:	46bd      	mov	sp, r7
 800a358:	bdb0      	pop	{r4, r5, r7, pc}
 800a35a:	bf00      	nop
 800a35c:	08013d90 	.word	0x08013d90
 800a360:	08013e64 	.word	0x08013e64
 800a364:	08013dd4 	.word	0x08013dd4
 800a368:	08013e84 	.word	0x08013e84
 800a36c:	20010108 	.word	0x20010108
 800a370:	20010110 	.word	0x20010110
 800a374:	20010148 	.word	0x20010148
 800a378:	20010100 	.word	0x20010100
 800a37c:	20010104 	.word	0x20010104

0800a380 <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 800a380:	b580      	push	{r7, lr}
 800a382:	b084      	sub	sp, #16
 800a384:	af00      	add	r7, sp, #0
 800a386:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800a388:	687b      	ldr	r3, [r7, #4]
 800a38a:	2b00      	cmp	r3, #0
 800a38c:	d106      	bne.n	800a39c <tcp_close_shutdown_fin+0x1c>
 800a38e:	4b2e      	ldr	r3, [pc, #184]	@ (800a448 <tcp_close_shutdown_fin+0xc8>)
 800a390:	f44f 72ce 	mov.w	r2, #412	@ 0x19c
 800a394:	492d      	ldr	r1, [pc, #180]	@ (800a44c <tcp_close_shutdown_fin+0xcc>)
 800a396:	482e      	ldr	r0, [pc, #184]	@ (800a450 <tcp_close_shutdown_fin+0xd0>)
 800a398:	f007 ff90 	bl	80122bc <iprintf>

  switch (pcb->state) {
 800a39c:	687b      	ldr	r3, [r7, #4]
 800a39e:	7d1b      	ldrb	r3, [r3, #20]
 800a3a0:	2b07      	cmp	r3, #7
 800a3a2:	d020      	beq.n	800a3e6 <tcp_close_shutdown_fin+0x66>
 800a3a4:	2b07      	cmp	r3, #7
 800a3a6:	dc2b      	bgt.n	800a400 <tcp_close_shutdown_fin+0x80>
 800a3a8:	2b03      	cmp	r3, #3
 800a3aa:	d002      	beq.n	800a3b2 <tcp_close_shutdown_fin+0x32>
 800a3ac:	2b04      	cmp	r3, #4
 800a3ae:	d00d      	beq.n	800a3cc <tcp_close_shutdown_fin+0x4c>
 800a3b0:	e026      	b.n	800a400 <tcp_close_shutdown_fin+0x80>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 800a3b2:	6878      	ldr	r0, [r7, #4]
 800a3b4:	f003 fee2 	bl	800e17c <tcp_send_fin>
 800a3b8:	4603      	mov	r3, r0
 800a3ba:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800a3bc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a3c0:	2b00      	cmp	r3, #0
 800a3c2:	d11f      	bne.n	800a404 <tcp_close_shutdown_fin+0x84>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 800a3c4:	687b      	ldr	r3, [r7, #4]
 800a3c6:	2205      	movs	r2, #5
 800a3c8:	751a      	strb	r2, [r3, #20]
      }
      break;
 800a3ca:	e01b      	b.n	800a404 <tcp_close_shutdown_fin+0x84>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 800a3cc:	6878      	ldr	r0, [r7, #4]
 800a3ce:	f003 fed5 	bl	800e17c <tcp_send_fin>
 800a3d2:	4603      	mov	r3, r0
 800a3d4:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800a3d6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a3da:	2b00      	cmp	r3, #0
 800a3dc:	d114      	bne.n	800a408 <tcp_close_shutdown_fin+0x88>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 800a3de:	687b      	ldr	r3, [r7, #4]
 800a3e0:	2205      	movs	r2, #5
 800a3e2:	751a      	strb	r2, [r3, #20]
      }
      break;
 800a3e4:	e010      	b.n	800a408 <tcp_close_shutdown_fin+0x88>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 800a3e6:	6878      	ldr	r0, [r7, #4]
 800a3e8:	f003 fec8 	bl	800e17c <tcp_send_fin>
 800a3ec:	4603      	mov	r3, r0
 800a3ee:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800a3f0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a3f4:	2b00      	cmp	r3, #0
 800a3f6:	d109      	bne.n	800a40c <tcp_close_shutdown_fin+0x8c>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 800a3f8:	687b      	ldr	r3, [r7, #4]
 800a3fa:	2209      	movs	r2, #9
 800a3fc:	751a      	strb	r2, [r3, #20]
      }
      break;
 800a3fe:	e005      	b.n	800a40c <tcp_close_shutdown_fin+0x8c>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 800a400:	2300      	movs	r3, #0
 800a402:	e01c      	b.n	800a43e <tcp_close_shutdown_fin+0xbe>
      break;
 800a404:	bf00      	nop
 800a406:	e002      	b.n	800a40e <tcp_close_shutdown_fin+0x8e>
      break;
 800a408:	bf00      	nop
 800a40a:	e000      	b.n	800a40e <tcp_close_shutdown_fin+0x8e>
      break;
 800a40c:	bf00      	nop
  }

  if (err == ERR_OK) {
 800a40e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a412:	2b00      	cmp	r3, #0
 800a414:	d103      	bne.n	800a41e <tcp_close_shutdown_fin+0x9e>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 800a416:	6878      	ldr	r0, [r7, #4]
 800a418:	f003 ffee 	bl	800e3f8 <tcp_output>
 800a41c:	e00d      	b.n	800a43a <tcp_close_shutdown_fin+0xba>
  } else if (err == ERR_MEM) {
 800a41e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a422:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800a426:	d108      	bne.n	800a43a <tcp_close_shutdown_fin+0xba>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 800a428:	687b      	ldr	r3, [r7, #4]
 800a42a:	8b5b      	ldrh	r3, [r3, #26]
 800a42c:	f043 0308 	orr.w	r3, r3, #8
 800a430:	b29a      	uxth	r2, r3
 800a432:	687b      	ldr	r3, [r7, #4]
 800a434:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 800a436:	2300      	movs	r3, #0
 800a438:	e001      	b.n	800a43e <tcp_close_shutdown_fin+0xbe>
  }
  return err;
 800a43a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800a43e:	4618      	mov	r0, r3
 800a440:	3710      	adds	r7, #16
 800a442:	46bd      	mov	sp, r7
 800a444:	bd80      	pop	{r7, pc}
 800a446:	bf00      	nop
 800a448:	08013d90 	.word	0x08013d90
 800a44c:	08013e40 	.word	0x08013e40
 800a450:	08013dd4 	.word	0x08013dd4

0800a454 <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 800a454:	b580      	push	{r7, lr}
 800a456:	b082      	sub	sp, #8
 800a458:	af00      	add	r7, sp, #0
 800a45a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 800a45c:	687b      	ldr	r3, [r7, #4]
 800a45e:	2b00      	cmp	r3, #0
 800a460:	d109      	bne.n	800a476 <tcp_close+0x22>
 800a462:	4b0f      	ldr	r3, [pc, #60]	@ (800a4a0 <tcp_close+0x4c>)
 800a464:	f44f 72f4 	mov.w	r2, #488	@ 0x1e8
 800a468:	490e      	ldr	r1, [pc, #56]	@ (800a4a4 <tcp_close+0x50>)
 800a46a:	480f      	ldr	r0, [pc, #60]	@ (800a4a8 <tcp_close+0x54>)
 800a46c:	f007 ff26 	bl	80122bc <iprintf>
 800a470:	f06f 030f 	mvn.w	r3, #15
 800a474:	e00f      	b.n	800a496 <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 800a476:	687b      	ldr	r3, [r7, #4]
 800a478:	7d1b      	ldrb	r3, [r3, #20]
 800a47a:	2b01      	cmp	r3, #1
 800a47c:	d006      	beq.n	800a48c <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 800a47e:	687b      	ldr	r3, [r7, #4]
 800a480:	8b5b      	ldrh	r3, [r3, #26]
 800a482:	f043 0310 	orr.w	r3, r3, #16
 800a486:	b29a      	uxth	r2, r3
 800a488:	687b      	ldr	r3, [r7, #4]
 800a48a:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 800a48c:	2101      	movs	r1, #1
 800a48e:	6878      	ldr	r0, [r7, #4]
 800a490:	f7ff fe94 	bl	800a1bc <tcp_close_shutdown>
 800a494:	4603      	mov	r3, r0
}
 800a496:	4618      	mov	r0, r3
 800a498:	3708      	adds	r7, #8
 800a49a:	46bd      	mov	sp, r7
 800a49c:	bd80      	pop	{r7, pc}
 800a49e:	bf00      	nop
 800a4a0:	08013d90 	.word	0x08013d90
 800a4a4:	08013ea0 	.word	0x08013ea0
 800a4a8:	08013dd4 	.word	0x08013dd4

0800a4ac <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 800a4ac:	b580      	push	{r7, lr}
 800a4ae:	b08e      	sub	sp, #56	@ 0x38
 800a4b0:	af04      	add	r7, sp, #16
 800a4b2:	6078      	str	r0, [r7, #4]
 800a4b4:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 800a4b6:	687b      	ldr	r3, [r7, #4]
 800a4b8:	2b00      	cmp	r3, #0
 800a4ba:	d107      	bne.n	800a4cc <tcp_abandon+0x20>
 800a4bc:	4b52      	ldr	r3, [pc, #328]	@ (800a608 <tcp_abandon+0x15c>)
 800a4be:	f240 223d 	movw	r2, #573	@ 0x23d
 800a4c2:	4952      	ldr	r1, [pc, #328]	@ (800a60c <tcp_abandon+0x160>)
 800a4c4:	4852      	ldr	r0, [pc, #328]	@ (800a610 <tcp_abandon+0x164>)
 800a4c6:	f007 fef9 	bl	80122bc <iprintf>
 800a4ca:	e099      	b.n	800a600 <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 800a4cc:	687b      	ldr	r3, [r7, #4]
 800a4ce:	7d1b      	ldrb	r3, [r3, #20]
 800a4d0:	2b01      	cmp	r3, #1
 800a4d2:	d106      	bne.n	800a4e2 <tcp_abandon+0x36>
 800a4d4:	4b4c      	ldr	r3, [pc, #304]	@ (800a608 <tcp_abandon+0x15c>)
 800a4d6:	f44f 7210 	mov.w	r2, #576	@ 0x240
 800a4da:	494e      	ldr	r1, [pc, #312]	@ (800a614 <tcp_abandon+0x168>)
 800a4dc:	484c      	ldr	r0, [pc, #304]	@ (800a610 <tcp_abandon+0x164>)
 800a4de:	f007 feed 	bl	80122bc <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 800a4e2:	687b      	ldr	r3, [r7, #4]
 800a4e4:	7d1b      	ldrb	r3, [r3, #20]
 800a4e6:	2b0a      	cmp	r3, #10
 800a4e8:	d107      	bne.n	800a4fa <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 800a4ea:	6879      	ldr	r1, [r7, #4]
 800a4ec:	484a      	ldr	r0, [pc, #296]	@ (800a618 <tcp_abandon+0x16c>)
 800a4ee:	f000 ffc5 	bl	800b47c <tcp_pcb_remove>
    tcp_free(pcb);
 800a4f2:	6878      	ldr	r0, [r7, #4]
 800a4f4:	f7ff fdb0 	bl	800a058 <tcp_free>
 800a4f8:	e082      	b.n	800a600 <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 800a4fa:	2300      	movs	r3, #0
 800a4fc:	627b      	str	r3, [r7, #36]	@ 0x24
    u16_t local_port = 0;
 800a4fe:	2300      	movs	r3, #0
 800a500:	847b      	strh	r3, [r7, #34]	@ 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 800a502:	687b      	ldr	r3, [r7, #4]
 800a504:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a506:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 800a508:	687b      	ldr	r3, [r7, #4]
 800a50a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a50c:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 800a50e:	687b      	ldr	r3, [r7, #4]
 800a510:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a514:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 800a516:	687b      	ldr	r3, [r7, #4]
 800a518:	691b      	ldr	r3, [r3, #16]
 800a51a:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 800a51c:	687b      	ldr	r3, [r7, #4]
 800a51e:	7d1b      	ldrb	r3, [r3, #20]
 800a520:	2b00      	cmp	r3, #0
 800a522:	d126      	bne.n	800a572 <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 800a524:	687b      	ldr	r3, [r7, #4]
 800a526:	8adb      	ldrh	r3, [r3, #22]
 800a528:	2b00      	cmp	r3, #0
 800a52a:	d02e      	beq.n	800a58a <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800a52c:	4b3b      	ldr	r3, [pc, #236]	@ (800a61c <tcp_abandon+0x170>)
 800a52e:	681b      	ldr	r3, [r3, #0]
 800a530:	687a      	ldr	r2, [r7, #4]
 800a532:	429a      	cmp	r2, r3
 800a534:	d105      	bne.n	800a542 <tcp_abandon+0x96>
 800a536:	4b39      	ldr	r3, [pc, #228]	@ (800a61c <tcp_abandon+0x170>)
 800a538:	681b      	ldr	r3, [r3, #0]
 800a53a:	68db      	ldr	r3, [r3, #12]
 800a53c:	4a37      	ldr	r2, [pc, #220]	@ (800a61c <tcp_abandon+0x170>)
 800a53e:	6013      	str	r3, [r2, #0]
 800a540:	e013      	b.n	800a56a <tcp_abandon+0xbe>
 800a542:	4b36      	ldr	r3, [pc, #216]	@ (800a61c <tcp_abandon+0x170>)
 800a544:	681b      	ldr	r3, [r3, #0]
 800a546:	61fb      	str	r3, [r7, #28]
 800a548:	e00c      	b.n	800a564 <tcp_abandon+0xb8>
 800a54a:	69fb      	ldr	r3, [r7, #28]
 800a54c:	68db      	ldr	r3, [r3, #12]
 800a54e:	687a      	ldr	r2, [r7, #4]
 800a550:	429a      	cmp	r2, r3
 800a552:	d104      	bne.n	800a55e <tcp_abandon+0xb2>
 800a554:	687b      	ldr	r3, [r7, #4]
 800a556:	68da      	ldr	r2, [r3, #12]
 800a558:	69fb      	ldr	r3, [r7, #28]
 800a55a:	60da      	str	r2, [r3, #12]
 800a55c:	e005      	b.n	800a56a <tcp_abandon+0xbe>
 800a55e:	69fb      	ldr	r3, [r7, #28]
 800a560:	68db      	ldr	r3, [r3, #12]
 800a562:	61fb      	str	r3, [r7, #28]
 800a564:	69fb      	ldr	r3, [r7, #28]
 800a566:	2b00      	cmp	r3, #0
 800a568:	d1ef      	bne.n	800a54a <tcp_abandon+0x9e>
 800a56a:	687b      	ldr	r3, [r7, #4]
 800a56c:	2200      	movs	r2, #0
 800a56e:	60da      	str	r2, [r3, #12]
 800a570:	e00b      	b.n	800a58a <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 800a572:	683b      	ldr	r3, [r7, #0]
 800a574:	627b      	str	r3, [r7, #36]	@ 0x24
      local_port = pcb->local_port;
 800a576:	687b      	ldr	r3, [r7, #4]
 800a578:	8adb      	ldrh	r3, [r3, #22]
 800a57a:	847b      	strh	r3, [r7, #34]	@ 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800a57c:	6879      	ldr	r1, [r7, #4]
 800a57e:	4828      	ldr	r0, [pc, #160]	@ (800a620 <tcp_abandon+0x174>)
 800a580:	f000 ff7c 	bl	800b47c <tcp_pcb_remove>
 800a584:	4b27      	ldr	r3, [pc, #156]	@ (800a624 <tcp_abandon+0x178>)
 800a586:	2201      	movs	r2, #1
 800a588:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 800a58a:	687b      	ldr	r3, [r7, #4]
 800a58c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a58e:	2b00      	cmp	r3, #0
 800a590:	d004      	beq.n	800a59c <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 800a592:	687b      	ldr	r3, [r7, #4]
 800a594:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a596:	4618      	mov	r0, r3
 800a598:	f000 fd1e 	bl	800afd8 <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 800a59c:	687b      	ldr	r3, [r7, #4]
 800a59e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a5a0:	2b00      	cmp	r3, #0
 800a5a2:	d004      	beq.n	800a5ae <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 800a5a4:	687b      	ldr	r3, [r7, #4]
 800a5a6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a5a8:	4618      	mov	r0, r3
 800a5aa:	f000 fd15 	bl	800afd8 <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 800a5ae:	687b      	ldr	r3, [r7, #4]
 800a5b0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a5b2:	2b00      	cmp	r3, #0
 800a5b4:	d004      	beq.n	800a5c0 <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 800a5b6:	687b      	ldr	r3, [r7, #4]
 800a5b8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a5ba:	4618      	mov	r0, r3
 800a5bc:	f000 fd0c 	bl	800afd8 <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 800a5c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a5c2:	2b00      	cmp	r3, #0
 800a5c4:	d00e      	beq.n	800a5e4 <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 800a5c6:	6879      	ldr	r1, [r7, #4]
 800a5c8:	687b      	ldr	r3, [r7, #4]
 800a5ca:	3304      	adds	r3, #4
 800a5cc:	687a      	ldr	r2, [r7, #4]
 800a5ce:	8b12      	ldrh	r2, [r2, #24]
 800a5d0:	9202      	str	r2, [sp, #8]
 800a5d2:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 800a5d4:	9201      	str	r2, [sp, #4]
 800a5d6:	9300      	str	r3, [sp, #0]
 800a5d8:	460b      	mov	r3, r1
 800a5da:	697a      	ldr	r2, [r7, #20]
 800a5dc:	69b9      	ldr	r1, [r7, #24]
 800a5de:	6878      	ldr	r0, [r7, #4]
 800a5e0:	f004 fcbe 	bl	800ef60 <tcp_rst>
    }
    last_state = pcb->state;
 800a5e4:	687b      	ldr	r3, [r7, #4]
 800a5e6:	7d1b      	ldrb	r3, [r3, #20]
 800a5e8:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 800a5ea:	6878      	ldr	r0, [r7, #4]
 800a5ec:	f7ff fd34 	bl	800a058 <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 800a5f0:	693b      	ldr	r3, [r7, #16]
 800a5f2:	2b00      	cmp	r3, #0
 800a5f4:	d004      	beq.n	800a600 <tcp_abandon+0x154>
 800a5f6:	693b      	ldr	r3, [r7, #16]
 800a5f8:	f06f 010c 	mvn.w	r1, #12
 800a5fc:	68f8      	ldr	r0, [r7, #12]
 800a5fe:	4798      	blx	r3
  }
}
 800a600:	3728      	adds	r7, #40	@ 0x28
 800a602:	46bd      	mov	sp, r7
 800a604:	bd80      	pop	{r7, pc}
 800a606:	bf00      	nop
 800a608:	08013d90 	.word	0x08013d90
 800a60c:	08013ed4 	.word	0x08013ed4
 800a610:	08013dd4 	.word	0x08013dd4
 800a614:	08013ef0 	.word	0x08013ef0
 800a618:	2001010c 	.word	0x2001010c
 800a61c:	20010100 	.word	0x20010100
 800a620:	20010108 	.word	0x20010108
 800a624:	20010110 	.word	0x20010110

0800a628 <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 800a628:	b580      	push	{r7, lr}
 800a62a:	b082      	sub	sp, #8
 800a62c:	af00      	add	r7, sp, #0
 800a62e:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 800a630:	2101      	movs	r1, #1
 800a632:	6878      	ldr	r0, [r7, #4]
 800a634:	f7ff ff3a 	bl	800a4ac <tcp_abandon>
}
 800a638:	bf00      	nop
 800a63a:	3708      	adds	r7, #8
 800a63c:	46bd      	mov	sp, r7
 800a63e:	bd80      	pop	{r7, pc}

0800a640 <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 800a640:	b580      	push	{r7, lr}
 800a642:	b084      	sub	sp, #16
 800a644:	af00      	add	r7, sp, #0
 800a646:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 800a648:	687b      	ldr	r3, [r7, #4]
 800a64a:	2b00      	cmp	r3, #0
 800a64c:	d106      	bne.n	800a65c <tcp_update_rcv_ann_wnd+0x1c>
 800a64e:	4b25      	ldr	r3, [pc, #148]	@ (800a6e4 <tcp_update_rcv_ann_wnd+0xa4>)
 800a650:	f240 32a6 	movw	r2, #934	@ 0x3a6
 800a654:	4924      	ldr	r1, [pc, #144]	@ (800a6e8 <tcp_update_rcv_ann_wnd+0xa8>)
 800a656:	4825      	ldr	r0, [pc, #148]	@ (800a6ec <tcp_update_rcv_ann_wnd+0xac>)
 800a658:	f007 fe30 	bl	80122bc <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 800a65c:	687b      	ldr	r3, [r7, #4]
 800a65e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a660:	687a      	ldr	r2, [r7, #4]
 800a662:	8d12      	ldrh	r2, [r2, #40]	@ 0x28
 800a664:	4413      	add	r3, r2
 800a666:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 800a668:	687b      	ldr	r3, [r7, #4]
 800a66a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a66c:	687a      	ldr	r2, [r7, #4]
 800a66e:	8e52      	ldrh	r2, [r2, #50]	@ 0x32
 800a670:	f5b2 6f86 	cmp.w	r2, #1072	@ 0x430
 800a674:	bf28      	it	cs
 800a676:	f44f 6286 	movcs.w	r2, #1072	@ 0x430
 800a67a:	b292      	uxth	r2, r2
 800a67c:	4413      	add	r3, r2
 800a67e:	68fa      	ldr	r2, [r7, #12]
 800a680:	1ad3      	subs	r3, r2, r3
 800a682:	2b00      	cmp	r3, #0
 800a684:	db08      	blt.n	800a698 <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 800a686:	687b      	ldr	r3, [r7, #4]
 800a688:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 800a68a:	687b      	ldr	r3, [r7, #4]
 800a68c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 800a68e:	687b      	ldr	r3, [r7, #4]
 800a690:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a692:	68fa      	ldr	r2, [r7, #12]
 800a694:	1ad3      	subs	r3, r2, r3
 800a696:	e020      	b.n	800a6da <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 800a698:	687b      	ldr	r3, [r7, #4]
 800a69a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800a69c:	687b      	ldr	r3, [r7, #4]
 800a69e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a6a0:	1ad3      	subs	r3, r2, r3
 800a6a2:	2b00      	cmp	r3, #0
 800a6a4:	dd03      	ble.n	800a6ae <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 800a6a6:	687b      	ldr	r3, [r7, #4]
 800a6a8:	2200      	movs	r2, #0
 800a6aa:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800a6ac:	e014      	b.n	800a6d8 <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 800a6ae:	687b      	ldr	r3, [r7, #4]
 800a6b0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a6b2:	687b      	ldr	r3, [r7, #4]
 800a6b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a6b6:	1ad3      	subs	r3, r2, r3
 800a6b8:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 800a6ba:	68bb      	ldr	r3, [r7, #8]
 800a6bc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a6c0:	d306      	bcc.n	800a6d0 <tcp_update_rcv_ann_wnd+0x90>
 800a6c2:	4b08      	ldr	r3, [pc, #32]	@ (800a6e4 <tcp_update_rcv_ann_wnd+0xa4>)
 800a6c4:	f240 32b6 	movw	r2, #950	@ 0x3b6
 800a6c8:	4909      	ldr	r1, [pc, #36]	@ (800a6f0 <tcp_update_rcv_ann_wnd+0xb0>)
 800a6ca:	4808      	ldr	r0, [pc, #32]	@ (800a6ec <tcp_update_rcv_ann_wnd+0xac>)
 800a6cc:	f007 fdf6 	bl	80122bc <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 800a6d0:	68bb      	ldr	r3, [r7, #8]
 800a6d2:	b29a      	uxth	r2, r3
 800a6d4:	687b      	ldr	r3, [r7, #4]
 800a6d6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
    return 0;
 800a6d8:	2300      	movs	r3, #0
  }
}
 800a6da:	4618      	mov	r0, r3
 800a6dc:	3710      	adds	r7, #16
 800a6de:	46bd      	mov	sp, r7
 800a6e0:	bd80      	pop	{r7, pc}
 800a6e2:	bf00      	nop
 800a6e4:	08013d90 	.word	0x08013d90
 800a6e8:	08013fec 	.word	0x08013fec
 800a6ec:	08013dd4 	.word	0x08013dd4
 800a6f0:	08014010 	.word	0x08014010

0800a6f4 <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 800a6f4:	b580      	push	{r7, lr}
 800a6f6:	b084      	sub	sp, #16
 800a6f8:	af00      	add	r7, sp, #0
 800a6fa:	6078      	str	r0, [r7, #4]
 800a6fc:	460b      	mov	r3, r1
 800a6fe:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 800a700:	687b      	ldr	r3, [r7, #4]
 800a702:	2b00      	cmp	r3, #0
 800a704:	d107      	bne.n	800a716 <tcp_recved+0x22>
 800a706:	4b1f      	ldr	r3, [pc, #124]	@ (800a784 <tcp_recved+0x90>)
 800a708:	f240 32cf 	movw	r2, #975	@ 0x3cf
 800a70c:	491e      	ldr	r1, [pc, #120]	@ (800a788 <tcp_recved+0x94>)
 800a70e:	481f      	ldr	r0, [pc, #124]	@ (800a78c <tcp_recved+0x98>)
 800a710:	f007 fdd4 	bl	80122bc <iprintf>
 800a714:	e032      	b.n	800a77c <tcp_recved+0x88>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 800a716:	687b      	ldr	r3, [r7, #4]
 800a718:	7d1b      	ldrb	r3, [r3, #20]
 800a71a:	2b01      	cmp	r3, #1
 800a71c:	d106      	bne.n	800a72c <tcp_recved+0x38>
 800a71e:	4b19      	ldr	r3, [pc, #100]	@ (800a784 <tcp_recved+0x90>)
 800a720:	f240 32d2 	movw	r2, #978	@ 0x3d2
 800a724:	491a      	ldr	r1, [pc, #104]	@ (800a790 <tcp_recved+0x9c>)
 800a726:	4819      	ldr	r0, [pc, #100]	@ (800a78c <tcp_recved+0x98>)
 800a728:	f007 fdc8 	bl	80122bc <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 800a72c:	687b      	ldr	r3, [r7, #4]
 800a72e:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 800a730:	887b      	ldrh	r3, [r7, #2]
 800a732:	4413      	add	r3, r2
 800a734:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 800a736:	89fb      	ldrh	r3, [r7, #14]
 800a738:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 800a73c:	d804      	bhi.n	800a748 <tcp_recved+0x54>
 800a73e:	687b      	ldr	r3, [r7, #4]
 800a740:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a742:	89fa      	ldrh	r2, [r7, #14]
 800a744:	429a      	cmp	r2, r3
 800a746:	d204      	bcs.n	800a752 <tcp_recved+0x5e>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 800a748:	687b      	ldr	r3, [r7, #4]
 800a74a:	f44f 6206 	mov.w	r2, #2144	@ 0x860
 800a74e:	851a      	strh	r2, [r3, #40]	@ 0x28
 800a750:	e002      	b.n	800a758 <tcp_recved+0x64>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 800a752:	687b      	ldr	r3, [r7, #4]
 800a754:	89fa      	ldrh	r2, [r7, #14]
 800a756:	851a      	strh	r2, [r3, #40]	@ 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 800a758:	6878      	ldr	r0, [r7, #4]
 800a75a:	f7ff ff71 	bl	800a640 <tcp_update_rcv_ann_wnd>
 800a75e:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 800a760:	68bb      	ldr	r3, [r7, #8]
 800a762:	f5b3 7f06 	cmp.w	r3, #536	@ 0x218
 800a766:	d309      	bcc.n	800a77c <tcp_recved+0x88>
    tcp_ack_now(pcb);
 800a768:	687b      	ldr	r3, [r7, #4]
 800a76a:	8b5b      	ldrh	r3, [r3, #26]
 800a76c:	f043 0302 	orr.w	r3, r3, #2
 800a770:	b29a      	uxth	r2, r3
 800a772:	687b      	ldr	r3, [r7, #4]
 800a774:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800a776:	6878      	ldr	r0, [r7, #4]
 800a778:	f003 fe3e 	bl	800e3f8 <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 800a77c:	3710      	adds	r7, #16
 800a77e:	46bd      	mov	sp, r7
 800a780:	bd80      	pop	{r7, pc}
 800a782:	bf00      	nop
 800a784:	08013d90 	.word	0x08013d90
 800a788:	0801402c 	.word	0x0801402c
 800a78c:	08013dd4 	.word	0x08013dd4
 800a790:	08014044 	.word	0x08014044

0800a794 <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 800a794:	b5b0      	push	{r4, r5, r7, lr}
 800a796:	b090      	sub	sp, #64	@ 0x40
 800a798:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 800a79a:	2300      	movs	r3, #0
 800a79c:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25

  ++tcp_ticks;
 800a7a0:	4b95      	ldr	r3, [pc, #596]	@ (800a9f8 <tcp_slowtmr+0x264>)
 800a7a2:	681b      	ldr	r3, [r3, #0]
 800a7a4:	3301      	adds	r3, #1
 800a7a6:	4a94      	ldr	r2, [pc, #592]	@ (800a9f8 <tcp_slowtmr+0x264>)
 800a7a8:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 800a7aa:	4b94      	ldr	r3, [pc, #592]	@ (800a9fc <tcp_slowtmr+0x268>)
 800a7ac:	781b      	ldrb	r3, [r3, #0]
 800a7ae:	3301      	adds	r3, #1
 800a7b0:	b2da      	uxtb	r2, r3
 800a7b2:	4b92      	ldr	r3, [pc, #584]	@ (800a9fc <tcp_slowtmr+0x268>)
 800a7b4:	701a      	strb	r2, [r3, #0]
 800a7b6:	e000      	b.n	800a7ba <tcp_slowtmr+0x26>
        prev->polltmr = 0;
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
        TCP_EVENT_POLL(prev, err);
        if (tcp_active_pcbs_changed) {
          goto tcp_slowtmr_start;
 800a7b8:	bf00      	nop
  prev = NULL;
 800a7ba:	2300      	movs	r3, #0
 800a7bc:	62bb      	str	r3, [r7, #40]	@ 0x28
  pcb = tcp_active_pcbs;
 800a7be:	4b90      	ldr	r3, [pc, #576]	@ (800aa00 <tcp_slowtmr+0x26c>)
 800a7c0:	681b      	ldr	r3, [r3, #0]
 800a7c2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while (pcb != NULL) {
 800a7c4:	e29f      	b.n	800ad06 <tcp_slowtmr+0x572>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 800a7c6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a7c8:	7d1b      	ldrb	r3, [r3, #20]
 800a7ca:	2b00      	cmp	r3, #0
 800a7cc:	d106      	bne.n	800a7dc <tcp_slowtmr+0x48>
 800a7ce:	4b8d      	ldr	r3, [pc, #564]	@ (800aa04 <tcp_slowtmr+0x270>)
 800a7d0:	f240 42be 	movw	r2, #1214	@ 0x4be
 800a7d4:	498c      	ldr	r1, [pc, #560]	@ (800aa08 <tcp_slowtmr+0x274>)
 800a7d6:	488d      	ldr	r0, [pc, #564]	@ (800aa0c <tcp_slowtmr+0x278>)
 800a7d8:	f007 fd70 	bl	80122bc <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 800a7dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a7de:	7d1b      	ldrb	r3, [r3, #20]
 800a7e0:	2b01      	cmp	r3, #1
 800a7e2:	d106      	bne.n	800a7f2 <tcp_slowtmr+0x5e>
 800a7e4:	4b87      	ldr	r3, [pc, #540]	@ (800aa04 <tcp_slowtmr+0x270>)
 800a7e6:	f240 42bf 	movw	r2, #1215	@ 0x4bf
 800a7ea:	4989      	ldr	r1, [pc, #548]	@ (800aa10 <tcp_slowtmr+0x27c>)
 800a7ec:	4887      	ldr	r0, [pc, #540]	@ (800aa0c <tcp_slowtmr+0x278>)
 800a7ee:	f007 fd65 	bl	80122bc <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 800a7f2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a7f4:	7d1b      	ldrb	r3, [r3, #20]
 800a7f6:	2b0a      	cmp	r3, #10
 800a7f8:	d106      	bne.n	800a808 <tcp_slowtmr+0x74>
 800a7fa:	4b82      	ldr	r3, [pc, #520]	@ (800aa04 <tcp_slowtmr+0x270>)
 800a7fc:	f44f 6298 	mov.w	r2, #1216	@ 0x4c0
 800a800:	4984      	ldr	r1, [pc, #528]	@ (800aa14 <tcp_slowtmr+0x280>)
 800a802:	4882      	ldr	r0, [pc, #520]	@ (800aa0c <tcp_slowtmr+0x278>)
 800a804:	f007 fd5a 	bl	80122bc <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 800a808:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a80a:	7f9a      	ldrb	r2, [r3, #30]
 800a80c:	4b7b      	ldr	r3, [pc, #492]	@ (800a9fc <tcp_slowtmr+0x268>)
 800a80e:	781b      	ldrb	r3, [r3, #0]
 800a810:	429a      	cmp	r2, r3
 800a812:	d105      	bne.n	800a820 <tcp_slowtmr+0x8c>
      prev = pcb;
 800a814:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a816:	62bb      	str	r3, [r7, #40]	@ 0x28
      pcb = pcb->next;
 800a818:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a81a:	68db      	ldr	r3, [r3, #12]
 800a81c:	62fb      	str	r3, [r7, #44]	@ 0x2c
      continue;
 800a81e:	e272      	b.n	800ad06 <tcp_slowtmr+0x572>
    pcb->last_timer = tcp_timer_ctr;
 800a820:	4b76      	ldr	r3, [pc, #472]	@ (800a9fc <tcp_slowtmr+0x268>)
 800a822:	781a      	ldrb	r2, [r3, #0]
 800a824:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a826:	779a      	strb	r2, [r3, #30]
    pcb_remove = 0;
 800a828:	2300      	movs	r3, #0
 800a82a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    pcb_reset = 0;
 800a82e:	2300      	movs	r3, #0
 800a830:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 800a834:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a836:	7d1b      	ldrb	r3, [r3, #20]
 800a838:	2b02      	cmp	r3, #2
 800a83a:	d10a      	bne.n	800a852 <tcp_slowtmr+0xbe>
 800a83c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a83e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800a842:	2b05      	cmp	r3, #5
 800a844:	d905      	bls.n	800a852 <tcp_slowtmr+0xbe>
      ++pcb_remove;
 800a846:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800a84a:	3301      	adds	r3, #1
 800a84c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800a850:	e11e      	b.n	800aa90 <tcp_slowtmr+0x2fc>
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 800a852:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a854:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800a858:	2b0b      	cmp	r3, #11
 800a85a:	d905      	bls.n	800a868 <tcp_slowtmr+0xd4>
      ++pcb_remove;
 800a85c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800a860:	3301      	adds	r3, #1
 800a862:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800a866:	e113      	b.n	800aa90 <tcp_slowtmr+0x2fc>
      if (pcb->persist_backoff > 0) {
 800a868:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a86a:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 800a86e:	2b00      	cmp	r3, #0
 800a870:	d075      	beq.n	800a95e <tcp_slowtmr+0x1ca>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 800a872:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a874:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a876:	2b00      	cmp	r3, #0
 800a878:	d006      	beq.n	800a888 <tcp_slowtmr+0xf4>
 800a87a:	4b62      	ldr	r3, [pc, #392]	@ (800aa04 <tcp_slowtmr+0x270>)
 800a87c:	f240 42d4 	movw	r2, #1236	@ 0x4d4
 800a880:	4965      	ldr	r1, [pc, #404]	@ (800aa18 <tcp_slowtmr+0x284>)
 800a882:	4862      	ldr	r0, [pc, #392]	@ (800aa0c <tcp_slowtmr+0x278>)
 800a884:	f007 fd1a 	bl	80122bc <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 800a888:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a88a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a88c:	2b00      	cmp	r3, #0
 800a88e:	d106      	bne.n	800a89e <tcp_slowtmr+0x10a>
 800a890:	4b5c      	ldr	r3, [pc, #368]	@ (800aa04 <tcp_slowtmr+0x270>)
 800a892:	f240 42d5 	movw	r2, #1237	@ 0x4d5
 800a896:	4961      	ldr	r1, [pc, #388]	@ (800aa1c <tcp_slowtmr+0x288>)
 800a898:	485c      	ldr	r0, [pc, #368]	@ (800aa0c <tcp_slowtmr+0x278>)
 800a89a:	f007 fd0f 	bl	80122bc <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 800a89e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a8a0:	f893 309a 	ldrb.w	r3, [r3, #154]	@ 0x9a
 800a8a4:	2b0b      	cmp	r3, #11
 800a8a6:	d905      	bls.n	800a8b4 <tcp_slowtmr+0x120>
          ++pcb_remove; /* max probes reached */
 800a8a8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800a8ac:	3301      	adds	r3, #1
 800a8ae:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800a8b2:	e0ed      	b.n	800aa90 <tcp_slowtmr+0x2fc>
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 800a8b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a8b6:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 800a8ba:	3b01      	subs	r3, #1
 800a8bc:	4a58      	ldr	r2, [pc, #352]	@ (800aa20 <tcp_slowtmr+0x28c>)
 800a8be:	5cd3      	ldrb	r3, [r2, r3]
 800a8c0:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 800a8c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a8c4:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 800a8c8:	7c7a      	ldrb	r2, [r7, #17]
 800a8ca:	429a      	cmp	r2, r3
 800a8cc:	d907      	bls.n	800a8de <tcp_slowtmr+0x14a>
            pcb->persist_cnt++;
 800a8ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a8d0:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 800a8d4:	3301      	adds	r3, #1
 800a8d6:	b2da      	uxtb	r2, r3
 800a8d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a8da:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98
          if (pcb->persist_cnt >= backoff_cnt) {
 800a8de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a8e0:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 800a8e4:	7c7a      	ldrb	r2, [r7, #17]
 800a8e6:	429a      	cmp	r2, r3
 800a8e8:	f200 80d2 	bhi.w	800aa90 <tcp_slowtmr+0x2fc>
            int next_slot = 1; /* increment timer to next slot */
 800a8ec:	2301      	movs	r3, #1
 800a8ee:	623b      	str	r3, [r7, #32]
            if (pcb->snd_wnd == 0) {
 800a8f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a8f2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800a8f6:	2b00      	cmp	r3, #0
 800a8f8:	d108      	bne.n	800a90c <tcp_slowtmr+0x178>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 800a8fa:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800a8fc:	f004 fc24 	bl	800f148 <tcp_zero_window_probe>
 800a900:	4603      	mov	r3, r0
 800a902:	2b00      	cmp	r3, #0
 800a904:	d014      	beq.n	800a930 <tcp_slowtmr+0x19c>
                next_slot = 0; /* try probe again with current slot */
 800a906:	2300      	movs	r3, #0
 800a908:	623b      	str	r3, [r7, #32]
 800a90a:	e011      	b.n	800a930 <tcp_slowtmr+0x19c>
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 800a90c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a90e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800a912:	4619      	mov	r1, r3
 800a914:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800a916:	f003 fae9 	bl	800deec <tcp_split_unsent_seg>
 800a91a:	4603      	mov	r3, r0
 800a91c:	2b00      	cmp	r3, #0
 800a91e:	d107      	bne.n	800a930 <tcp_slowtmr+0x19c>
                if (tcp_output(pcb) == ERR_OK) {
 800a920:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800a922:	f003 fd69 	bl	800e3f8 <tcp_output>
 800a926:	4603      	mov	r3, r0
 800a928:	2b00      	cmp	r3, #0
 800a92a:	d101      	bne.n	800a930 <tcp_slowtmr+0x19c>
                  next_slot = 0;
 800a92c:	2300      	movs	r3, #0
 800a92e:	623b      	str	r3, [r7, #32]
            if (next_slot) {
 800a930:	6a3b      	ldr	r3, [r7, #32]
 800a932:	2b00      	cmp	r3, #0
 800a934:	f000 80ac 	beq.w	800aa90 <tcp_slowtmr+0x2fc>
              pcb->persist_cnt = 0;
 800a938:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a93a:	2200      	movs	r2, #0
 800a93c:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 800a940:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a942:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 800a946:	2b06      	cmp	r3, #6
 800a948:	f200 80a2 	bhi.w	800aa90 <tcp_slowtmr+0x2fc>
                pcb->persist_backoff++;
 800a94c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a94e:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 800a952:	3301      	adds	r3, #1
 800a954:	b2da      	uxtb	r2, r3
 800a956:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a958:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99
 800a95c:	e098      	b.n	800aa90 <tcp_slowtmr+0x2fc>
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 800a95e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a960:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 800a964:	2b00      	cmp	r3, #0
 800a966:	db0f      	blt.n	800a988 <tcp_slowtmr+0x1f4>
 800a968:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a96a:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 800a96e:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 800a972:	4293      	cmp	r3, r2
 800a974:	d008      	beq.n	800a988 <tcp_slowtmr+0x1f4>
          ++pcb->rtime;
 800a976:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a978:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 800a97c:	b29b      	uxth	r3, r3
 800a97e:	3301      	adds	r3, #1
 800a980:	b29b      	uxth	r3, r3
 800a982:	b21a      	sxth	r2, r3
 800a984:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a986:	861a      	strh	r2, [r3, #48]	@ 0x30
        if (pcb->rtime >= pcb->rto) {
 800a988:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a98a:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	@ 0x30
 800a98e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a990:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	@ 0x40
 800a994:	429a      	cmp	r2, r3
 800a996:	db7b      	blt.n	800aa90 <tcp_slowtmr+0x2fc>
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 800a998:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800a99a:	f004 f821 	bl	800e9e0 <tcp_rexmit_rto_prepare>
 800a99e:	4603      	mov	r3, r0
 800a9a0:	2b00      	cmp	r3, #0
 800a9a2:	d007      	beq.n	800a9b4 <tcp_slowtmr+0x220>
 800a9a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a9a6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a9a8:	2b00      	cmp	r3, #0
 800a9aa:	d171      	bne.n	800aa90 <tcp_slowtmr+0x2fc>
 800a9ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a9ae:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a9b0:	2b00      	cmp	r3, #0
 800a9b2:	d06d      	beq.n	800aa90 <tcp_slowtmr+0x2fc>
            if (pcb->state != SYN_SENT) {
 800a9b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a9b6:	7d1b      	ldrb	r3, [r3, #20]
 800a9b8:	2b02      	cmp	r3, #2
 800a9ba:	d03a      	beq.n	800aa32 <tcp_slowtmr+0x29e>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 800a9bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a9be:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800a9c2:	2b0c      	cmp	r3, #12
 800a9c4:	bf28      	it	cs
 800a9c6:	230c      	movcs	r3, #12
 800a9c8:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 800a9ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a9cc:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 800a9d0:	10db      	asrs	r3, r3, #3
 800a9d2:	b21b      	sxth	r3, r3
 800a9d4:	461a      	mov	r2, r3
 800a9d6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a9d8:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 800a9dc:	4413      	add	r3, r2
 800a9de:	7efa      	ldrb	r2, [r7, #27]
 800a9e0:	4910      	ldr	r1, [pc, #64]	@ (800aa24 <tcp_slowtmr+0x290>)
 800a9e2:	5c8a      	ldrb	r2, [r1, r2]
 800a9e4:	4093      	lsls	r3, r2
 800a9e6:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 800a9e8:	697b      	ldr	r3, [r7, #20]
 800a9ea:	f647 72fe 	movw	r2, #32766	@ 0x7ffe
 800a9ee:	4293      	cmp	r3, r2
 800a9f0:	dc1a      	bgt.n	800aa28 <tcp_slowtmr+0x294>
 800a9f2:	697b      	ldr	r3, [r7, #20]
 800a9f4:	b21a      	sxth	r2, r3
 800a9f6:	e019      	b.n	800aa2c <tcp_slowtmr+0x298>
 800a9f8:	200100fc 	.word	0x200100fc
 800a9fc:	20010112 	.word	0x20010112
 800aa00:	20010108 	.word	0x20010108
 800aa04:	08013d90 	.word	0x08013d90
 800aa08:	080140d4 	.word	0x080140d4
 800aa0c:	08013dd4 	.word	0x08013dd4
 800aa10:	08014100 	.word	0x08014100
 800aa14:	0801412c 	.word	0x0801412c
 800aa18:	0801415c 	.word	0x0801415c
 800aa1c:	08014190 	.word	0x08014190
 800aa20:	08015dcc 	.word	0x08015dcc
 800aa24:	08015dbc 	.word	0x08015dbc
 800aa28:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 800aa2c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800aa2e:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
            pcb->rtime = 0;
 800aa32:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800aa34:	2200      	movs	r2, #0
 800aa36:	861a      	strh	r2, [r3, #48]	@ 0x30
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 800aa38:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800aa3a:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 800aa3e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800aa40:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 800aa44:	4293      	cmp	r3, r2
 800aa46:	bf28      	it	cs
 800aa48:	4613      	movcs	r3, r2
 800aa4a:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 800aa4c:	8a7b      	ldrh	r3, [r7, #18]
 800aa4e:	085b      	lsrs	r3, r3, #1
 800aa50:	b29a      	uxth	r2, r3
 800aa52:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800aa54:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 800aa58:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800aa5a:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 800aa5e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800aa60:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800aa62:	005b      	lsls	r3, r3, #1
 800aa64:	b29b      	uxth	r3, r3
 800aa66:	429a      	cmp	r2, r3
 800aa68:	d206      	bcs.n	800aa78 <tcp_slowtmr+0x2e4>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 800aa6a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800aa6c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800aa6e:	005b      	lsls	r3, r3, #1
 800aa70:	b29a      	uxth	r2, r3
 800aa72:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800aa74:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
            pcb->cwnd = pcb->mss;
 800aa78:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800aa7a:	8e5a      	ldrh	r2, [r3, #50]	@ 0x32
 800aa7c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800aa7e:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
            pcb->bytes_acked = 0;
 800aa82:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800aa84:	2200      	movs	r2, #0
 800aa86:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
            tcp_rexmit_rto_commit(pcb);
 800aa8a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800aa8c:	f004 f818 	bl	800eac0 <tcp_rexmit_rto_commit>
    if (pcb->state == FIN_WAIT_2) {
 800aa90:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800aa92:	7d1b      	ldrb	r3, [r3, #20]
 800aa94:	2b06      	cmp	r3, #6
 800aa96:	d111      	bne.n	800aabc <tcp_slowtmr+0x328>
      if (pcb->flags & TF_RXCLOSED) {
 800aa98:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800aa9a:	8b5b      	ldrh	r3, [r3, #26]
 800aa9c:	f003 0310 	and.w	r3, r3, #16
 800aaa0:	2b00      	cmp	r3, #0
 800aaa2:	d00b      	beq.n	800aabc <tcp_slowtmr+0x328>
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 800aaa4:	4b9d      	ldr	r3, [pc, #628]	@ (800ad1c <tcp_slowtmr+0x588>)
 800aaa6:	681a      	ldr	r2, [r3, #0]
 800aaa8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800aaaa:	6a1b      	ldr	r3, [r3, #32]
 800aaac:	1ad3      	subs	r3, r2, r3
 800aaae:	2b28      	cmp	r3, #40	@ 0x28
 800aab0:	d904      	bls.n	800aabc <tcp_slowtmr+0x328>
          ++pcb_remove;
 800aab2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800aab6:	3301      	adds	r3, #1
 800aab8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800aabc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800aabe:	7a5b      	ldrb	r3, [r3, #9]
 800aac0:	f003 0308 	and.w	r3, r3, #8
 800aac4:	2b00      	cmp	r3, #0
 800aac6:	d04c      	beq.n	800ab62 <tcp_slowtmr+0x3ce>
        ((pcb->state == ESTABLISHED) ||
 800aac8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800aaca:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800aacc:	2b04      	cmp	r3, #4
 800aace:	d003      	beq.n	800aad8 <tcp_slowtmr+0x344>
         (pcb->state == CLOSE_WAIT))) {
 800aad0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800aad2:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 800aad4:	2b07      	cmp	r3, #7
 800aad6:	d144      	bne.n	800ab62 <tcp_slowtmr+0x3ce>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800aad8:	4b90      	ldr	r3, [pc, #576]	@ (800ad1c <tcp_slowtmr+0x588>)
 800aada:	681a      	ldr	r2, [r3, #0]
 800aadc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800aade:	6a1b      	ldr	r3, [r3, #32]
 800aae0:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 800aae2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800aae4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800aae8:	f503 2324 	add.w	r3, r3, #671744	@ 0xa4000
 800aaec:	f603 43b8 	addw	r3, r3, #3256	@ 0xcb8
 800aaf0:	498b      	ldr	r1, [pc, #556]	@ (800ad20 <tcp_slowtmr+0x58c>)
 800aaf2:	fba1 1303 	umull	r1, r3, r1, r3
 800aaf6:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800aaf8:	429a      	cmp	r2, r3
 800aafa:	d90a      	bls.n	800ab12 <tcp_slowtmr+0x37e>
        ++pcb_remove;
 800aafc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800ab00:	3301      	adds	r3, #1
 800ab02:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        ++pcb_reset;
 800ab06:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800ab0a:	3301      	adds	r3, #1
 800ab0c:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 800ab10:	e027      	b.n	800ab62 <tcp_slowtmr+0x3ce>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800ab12:	4b82      	ldr	r3, [pc, #520]	@ (800ad1c <tcp_slowtmr+0x588>)
 800ab14:	681a      	ldr	r2, [r3, #0]
 800ab16:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ab18:	6a1b      	ldr	r3, [r3, #32]
 800ab1a:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 800ab1c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ab1e:	f8d3 1094 	ldr.w	r1, [r3, #148]	@ 0x94
 800ab22:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ab24:	f893 309b 	ldrb.w	r3, [r3, #155]	@ 0x9b
 800ab28:	4618      	mov	r0, r3
 800ab2a:	4b7e      	ldr	r3, [pc, #504]	@ (800ad24 <tcp_slowtmr+0x590>)
 800ab2c:	fb00 f303 	mul.w	r3, r0, r3
 800ab30:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 800ab32:	497b      	ldr	r1, [pc, #492]	@ (800ad20 <tcp_slowtmr+0x58c>)
 800ab34:	fba1 1303 	umull	r1, r3, r1, r3
 800ab38:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800ab3a:	429a      	cmp	r2, r3
 800ab3c:	d911      	bls.n	800ab62 <tcp_slowtmr+0x3ce>
        err = tcp_keepalive(pcb);
 800ab3e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800ab40:	f004 fac2 	bl	800f0c8 <tcp_keepalive>
 800ab44:	4603      	mov	r3, r0
 800ab46:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
        if (err == ERR_OK) {
 800ab4a:	f997 3025 	ldrsb.w	r3, [r7, #37]	@ 0x25
 800ab4e:	2b00      	cmp	r3, #0
 800ab50:	d107      	bne.n	800ab62 <tcp_slowtmr+0x3ce>
          pcb->keep_cnt_sent++;
 800ab52:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ab54:	f893 309b 	ldrb.w	r3, [r3, #155]	@ 0x9b
 800ab58:	3301      	adds	r3, #1
 800ab5a:	b2da      	uxtb	r2, r3
 800ab5c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ab5e:	f883 209b 	strb.w	r2, [r3, #155]	@ 0x9b
    if (pcb->ooseq != NULL &&
 800ab62:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ab64:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800ab66:	2b00      	cmp	r3, #0
 800ab68:	d011      	beq.n	800ab8e <tcp_slowtmr+0x3fa>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 800ab6a:	4b6c      	ldr	r3, [pc, #432]	@ (800ad1c <tcp_slowtmr+0x588>)
 800ab6c:	681a      	ldr	r2, [r3, #0]
 800ab6e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ab70:	6a1b      	ldr	r3, [r3, #32]
 800ab72:	1ad2      	subs	r2, r2, r3
 800ab74:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ab76:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	@ 0x40
 800ab7a:	4619      	mov	r1, r3
 800ab7c:	460b      	mov	r3, r1
 800ab7e:	005b      	lsls	r3, r3, #1
 800ab80:	440b      	add	r3, r1
 800ab82:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 800ab84:	429a      	cmp	r2, r3
 800ab86:	d302      	bcc.n	800ab8e <tcp_slowtmr+0x3fa>
      tcp_free_ooseq(pcb);
 800ab88:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800ab8a:	f000 fddb 	bl	800b744 <tcp_free_ooseq>
    if (pcb->state == SYN_RCVD) {
 800ab8e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ab90:	7d1b      	ldrb	r3, [r3, #20]
 800ab92:	2b03      	cmp	r3, #3
 800ab94:	d10b      	bne.n	800abae <tcp_slowtmr+0x41a>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800ab96:	4b61      	ldr	r3, [pc, #388]	@ (800ad1c <tcp_slowtmr+0x588>)
 800ab98:	681a      	ldr	r2, [r3, #0]
 800ab9a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ab9c:	6a1b      	ldr	r3, [r3, #32]
 800ab9e:	1ad3      	subs	r3, r2, r3
 800aba0:	2b28      	cmp	r3, #40	@ 0x28
 800aba2:	d904      	bls.n	800abae <tcp_slowtmr+0x41a>
        ++pcb_remove;
 800aba4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800aba8:	3301      	adds	r3, #1
 800abaa:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (pcb->state == LAST_ACK) {
 800abae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800abb0:	7d1b      	ldrb	r3, [r3, #20]
 800abb2:	2b09      	cmp	r3, #9
 800abb4:	d10b      	bne.n	800abce <tcp_slowtmr+0x43a>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800abb6:	4b59      	ldr	r3, [pc, #356]	@ (800ad1c <tcp_slowtmr+0x588>)
 800abb8:	681a      	ldr	r2, [r3, #0]
 800abba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800abbc:	6a1b      	ldr	r3, [r3, #32]
 800abbe:	1ad3      	subs	r3, r2, r3
 800abc0:	2bf0      	cmp	r3, #240	@ 0xf0
 800abc2:	d904      	bls.n	800abce <tcp_slowtmr+0x43a>
        ++pcb_remove;
 800abc4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800abc8:	3301      	adds	r3, #1
 800abca:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (pcb_remove) {
 800abce:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800abd2:	2b00      	cmp	r3, #0
 800abd4:	d060      	beq.n	800ac98 <tcp_slowtmr+0x504>
      tcp_err_fn err_fn = pcb->errf;
 800abd6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800abd8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800abdc:	60fb      	str	r3, [r7, #12]
      tcp_pcb_purge(pcb);
 800abde:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800abe0:	f000 fbfc 	bl	800b3dc <tcp_pcb_purge>
      if (prev != NULL) {
 800abe4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800abe6:	2b00      	cmp	r3, #0
 800abe8:	d010      	beq.n	800ac0c <tcp_slowtmr+0x478>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 800abea:	4b4f      	ldr	r3, [pc, #316]	@ (800ad28 <tcp_slowtmr+0x594>)
 800abec:	681b      	ldr	r3, [r3, #0]
 800abee:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800abf0:	429a      	cmp	r2, r3
 800abf2:	d106      	bne.n	800ac02 <tcp_slowtmr+0x46e>
 800abf4:	4b4d      	ldr	r3, [pc, #308]	@ (800ad2c <tcp_slowtmr+0x598>)
 800abf6:	f240 526d 	movw	r2, #1389	@ 0x56d
 800abfa:	494d      	ldr	r1, [pc, #308]	@ (800ad30 <tcp_slowtmr+0x59c>)
 800abfc:	484d      	ldr	r0, [pc, #308]	@ (800ad34 <tcp_slowtmr+0x5a0>)
 800abfe:	f007 fb5d 	bl	80122bc <iprintf>
        prev->next = pcb->next;
 800ac02:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ac04:	68da      	ldr	r2, [r3, #12]
 800ac06:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ac08:	60da      	str	r2, [r3, #12]
 800ac0a:	e00f      	b.n	800ac2c <tcp_slowtmr+0x498>
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 800ac0c:	4b46      	ldr	r3, [pc, #280]	@ (800ad28 <tcp_slowtmr+0x594>)
 800ac0e:	681b      	ldr	r3, [r3, #0]
 800ac10:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800ac12:	429a      	cmp	r2, r3
 800ac14:	d006      	beq.n	800ac24 <tcp_slowtmr+0x490>
 800ac16:	4b45      	ldr	r3, [pc, #276]	@ (800ad2c <tcp_slowtmr+0x598>)
 800ac18:	f240 5271 	movw	r2, #1393	@ 0x571
 800ac1c:	4946      	ldr	r1, [pc, #280]	@ (800ad38 <tcp_slowtmr+0x5a4>)
 800ac1e:	4845      	ldr	r0, [pc, #276]	@ (800ad34 <tcp_slowtmr+0x5a0>)
 800ac20:	f007 fb4c 	bl	80122bc <iprintf>
        tcp_active_pcbs = pcb->next;
 800ac24:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ac26:	68db      	ldr	r3, [r3, #12]
 800ac28:	4a3f      	ldr	r2, [pc, #252]	@ (800ad28 <tcp_slowtmr+0x594>)
 800ac2a:	6013      	str	r3, [r2, #0]
      if (pcb_reset) {
 800ac2c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800ac30:	2b00      	cmp	r3, #0
 800ac32:	d013      	beq.n	800ac5c <tcp_slowtmr+0x4c8>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800ac34:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ac36:	6d18      	ldr	r0, [r3, #80]	@ 0x50
 800ac38:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ac3a:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 800ac3c:	6afd      	ldr	r5, [r7, #44]	@ 0x2c
 800ac3e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ac40:	3304      	adds	r3, #4
 800ac42:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800ac44:	8ad2      	ldrh	r2, [r2, #22]
 800ac46:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800ac48:	8b09      	ldrh	r1, [r1, #24]
 800ac4a:	9102      	str	r1, [sp, #8]
 800ac4c:	9201      	str	r2, [sp, #4]
 800ac4e:	9300      	str	r3, [sp, #0]
 800ac50:	462b      	mov	r3, r5
 800ac52:	4622      	mov	r2, r4
 800ac54:	4601      	mov	r1, r0
 800ac56:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800ac58:	f004 f982 	bl	800ef60 <tcp_rst>
      err_arg = pcb->callback_arg;
 800ac5c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ac5e:	691b      	ldr	r3, [r3, #16]
 800ac60:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 800ac62:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ac64:	7d1b      	ldrb	r3, [r3, #20]
 800ac66:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 800ac68:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ac6a:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 800ac6c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ac6e:	68db      	ldr	r3, [r3, #12]
 800ac70:	62fb      	str	r3, [r7, #44]	@ 0x2c
      tcp_free(pcb2);
 800ac72:	6838      	ldr	r0, [r7, #0]
 800ac74:	f7ff f9f0 	bl	800a058 <tcp_free>
      tcp_active_pcbs_changed = 0;
 800ac78:	4b30      	ldr	r3, [pc, #192]	@ (800ad3c <tcp_slowtmr+0x5a8>)
 800ac7a:	2200      	movs	r2, #0
 800ac7c:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 800ac7e:	68fb      	ldr	r3, [r7, #12]
 800ac80:	2b00      	cmp	r3, #0
 800ac82:	d004      	beq.n	800ac8e <tcp_slowtmr+0x4fa>
 800ac84:	68fb      	ldr	r3, [r7, #12]
 800ac86:	f06f 010c 	mvn.w	r1, #12
 800ac8a:	68b8      	ldr	r0, [r7, #8]
 800ac8c:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 800ac8e:	4b2b      	ldr	r3, [pc, #172]	@ (800ad3c <tcp_slowtmr+0x5a8>)
 800ac90:	781b      	ldrb	r3, [r3, #0]
 800ac92:	2b00      	cmp	r3, #0
 800ac94:	d037      	beq.n	800ad06 <tcp_slowtmr+0x572>
        goto tcp_slowtmr_start;
 800ac96:	e590      	b.n	800a7ba <tcp_slowtmr+0x26>
      prev = pcb;
 800ac98:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ac9a:	62bb      	str	r3, [r7, #40]	@ 0x28
      pcb = pcb->next;
 800ac9c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ac9e:	68db      	ldr	r3, [r3, #12]
 800aca0:	62fb      	str	r3, [r7, #44]	@ 0x2c
      ++prev->polltmr;
 800aca2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aca4:	7f1b      	ldrb	r3, [r3, #28]
 800aca6:	3301      	adds	r3, #1
 800aca8:	b2da      	uxtb	r2, r3
 800acaa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800acac:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 800acae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800acb0:	7f1a      	ldrb	r2, [r3, #28]
 800acb2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800acb4:	7f5b      	ldrb	r3, [r3, #29]
 800acb6:	429a      	cmp	r2, r3
 800acb8:	d325      	bcc.n	800ad06 <tcp_slowtmr+0x572>
        prev->polltmr = 0;
 800acba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800acbc:	2200      	movs	r2, #0
 800acbe:	771a      	strb	r2, [r3, #28]
        tcp_active_pcbs_changed = 0;
 800acc0:	4b1e      	ldr	r3, [pc, #120]	@ (800ad3c <tcp_slowtmr+0x5a8>)
 800acc2:	2200      	movs	r2, #0
 800acc4:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 800acc6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800acc8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800accc:	2b00      	cmp	r3, #0
 800acce:	d00b      	beq.n	800ace8 <tcp_slowtmr+0x554>
 800acd0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800acd2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800acd6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800acd8:	6912      	ldr	r2, [r2, #16]
 800acda:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800acdc:	4610      	mov	r0, r2
 800acde:	4798      	blx	r3
 800ace0:	4603      	mov	r3, r0
 800ace2:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
 800ace6:	e002      	b.n	800acee <tcp_slowtmr+0x55a>
 800ace8:	2300      	movs	r3, #0
 800acea:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
        if (tcp_active_pcbs_changed) {
 800acee:	4b13      	ldr	r3, [pc, #76]	@ (800ad3c <tcp_slowtmr+0x5a8>)
 800acf0:	781b      	ldrb	r3, [r3, #0]
 800acf2:	2b00      	cmp	r3, #0
 800acf4:	f47f ad60 	bne.w	800a7b8 <tcp_slowtmr+0x24>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 800acf8:	f997 3025 	ldrsb.w	r3, [r7, #37]	@ 0x25
 800acfc:	2b00      	cmp	r3, #0
 800acfe:	d102      	bne.n	800ad06 <tcp_slowtmr+0x572>
          tcp_output(prev);
 800ad00:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800ad02:	f003 fb79 	bl	800e3f8 <tcp_output>
  while (pcb != NULL) {
 800ad06:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ad08:	2b00      	cmp	r3, #0
 800ad0a:	f47f ad5c 	bne.w	800a7c6 <tcp_slowtmr+0x32>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 800ad0e:	2300      	movs	r3, #0
 800ad10:	62bb      	str	r3, [r7, #40]	@ 0x28
  pcb = tcp_tw_pcbs;
 800ad12:	4b0b      	ldr	r3, [pc, #44]	@ (800ad40 <tcp_slowtmr+0x5ac>)
 800ad14:	681b      	ldr	r3, [r3, #0]
 800ad16:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while (pcb != NULL) {
 800ad18:	e067      	b.n	800adea <tcp_slowtmr+0x656>
 800ad1a:	bf00      	nop
 800ad1c:	200100fc 	.word	0x200100fc
 800ad20:	10624dd3 	.word	0x10624dd3
 800ad24:	000124f8 	.word	0x000124f8
 800ad28:	20010108 	.word	0x20010108
 800ad2c:	08013d90 	.word	0x08013d90
 800ad30:	080141c8 	.word	0x080141c8
 800ad34:	08013dd4 	.word	0x08013dd4
 800ad38:	080141f4 	.word	0x080141f4
 800ad3c:	20010110 	.word	0x20010110
 800ad40:	2001010c 	.word	0x2001010c
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800ad44:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ad46:	7d1b      	ldrb	r3, [r3, #20]
 800ad48:	2b0a      	cmp	r3, #10
 800ad4a:	d006      	beq.n	800ad5a <tcp_slowtmr+0x5c6>
 800ad4c:	4b2b      	ldr	r3, [pc, #172]	@ (800adfc <tcp_slowtmr+0x668>)
 800ad4e:	f240 52a1 	movw	r2, #1441	@ 0x5a1
 800ad52:	492b      	ldr	r1, [pc, #172]	@ (800ae00 <tcp_slowtmr+0x66c>)
 800ad54:	482b      	ldr	r0, [pc, #172]	@ (800ae04 <tcp_slowtmr+0x670>)
 800ad56:	f007 fab1 	bl	80122bc <iprintf>
    pcb_remove = 0;
 800ad5a:	2300      	movs	r3, #0
 800ad5c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800ad60:	4b29      	ldr	r3, [pc, #164]	@ (800ae08 <tcp_slowtmr+0x674>)
 800ad62:	681a      	ldr	r2, [r3, #0]
 800ad64:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ad66:	6a1b      	ldr	r3, [r3, #32]
 800ad68:	1ad3      	subs	r3, r2, r3
 800ad6a:	2bf0      	cmp	r3, #240	@ 0xf0
 800ad6c:	d904      	bls.n	800ad78 <tcp_slowtmr+0x5e4>
      ++pcb_remove;
 800ad6e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800ad72:	3301      	adds	r3, #1
 800ad74:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 800ad78:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800ad7c:	2b00      	cmp	r3, #0
 800ad7e:	d02f      	beq.n	800ade0 <tcp_slowtmr+0x64c>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 800ad80:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800ad82:	f000 fb2b 	bl	800b3dc <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 800ad86:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ad88:	2b00      	cmp	r3, #0
 800ad8a:	d010      	beq.n	800adae <tcp_slowtmr+0x61a>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 800ad8c:	4b1f      	ldr	r3, [pc, #124]	@ (800ae0c <tcp_slowtmr+0x678>)
 800ad8e:	681b      	ldr	r3, [r3, #0]
 800ad90:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800ad92:	429a      	cmp	r2, r3
 800ad94:	d106      	bne.n	800ada4 <tcp_slowtmr+0x610>
 800ad96:	4b19      	ldr	r3, [pc, #100]	@ (800adfc <tcp_slowtmr+0x668>)
 800ad98:	f240 52af 	movw	r2, #1455	@ 0x5af
 800ad9c:	491c      	ldr	r1, [pc, #112]	@ (800ae10 <tcp_slowtmr+0x67c>)
 800ad9e:	4819      	ldr	r0, [pc, #100]	@ (800ae04 <tcp_slowtmr+0x670>)
 800ada0:	f007 fa8c 	bl	80122bc <iprintf>
        prev->next = pcb->next;
 800ada4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ada6:	68da      	ldr	r2, [r3, #12]
 800ada8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800adaa:	60da      	str	r2, [r3, #12]
 800adac:	e00f      	b.n	800adce <tcp_slowtmr+0x63a>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 800adae:	4b17      	ldr	r3, [pc, #92]	@ (800ae0c <tcp_slowtmr+0x678>)
 800adb0:	681b      	ldr	r3, [r3, #0]
 800adb2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800adb4:	429a      	cmp	r2, r3
 800adb6:	d006      	beq.n	800adc6 <tcp_slowtmr+0x632>
 800adb8:	4b10      	ldr	r3, [pc, #64]	@ (800adfc <tcp_slowtmr+0x668>)
 800adba:	f240 52b3 	movw	r2, #1459	@ 0x5b3
 800adbe:	4915      	ldr	r1, [pc, #84]	@ (800ae14 <tcp_slowtmr+0x680>)
 800adc0:	4810      	ldr	r0, [pc, #64]	@ (800ae04 <tcp_slowtmr+0x670>)
 800adc2:	f007 fa7b 	bl	80122bc <iprintf>
        tcp_tw_pcbs = pcb->next;
 800adc6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800adc8:	68db      	ldr	r3, [r3, #12]
 800adca:	4a10      	ldr	r2, [pc, #64]	@ (800ae0c <tcp_slowtmr+0x678>)
 800adcc:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 800adce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800add0:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 800add2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800add4:	68db      	ldr	r3, [r3, #12]
 800add6:	62fb      	str	r3, [r7, #44]	@ 0x2c
      tcp_free(pcb2);
 800add8:	69f8      	ldr	r0, [r7, #28]
 800adda:	f7ff f93d 	bl	800a058 <tcp_free>
 800adde:	e004      	b.n	800adea <tcp_slowtmr+0x656>
    } else {
      prev = pcb;
 800ade0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ade2:	62bb      	str	r3, [r7, #40]	@ 0x28
      pcb = pcb->next;
 800ade4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ade6:	68db      	ldr	r3, [r3, #12]
 800ade8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while (pcb != NULL) {
 800adea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800adec:	2b00      	cmp	r3, #0
 800adee:	d1a9      	bne.n	800ad44 <tcp_slowtmr+0x5b0>
    }
  }
}
 800adf0:	bf00      	nop
 800adf2:	bf00      	nop
 800adf4:	3730      	adds	r7, #48	@ 0x30
 800adf6:	46bd      	mov	sp, r7
 800adf8:	bdb0      	pop	{r4, r5, r7, pc}
 800adfa:	bf00      	nop
 800adfc:	08013d90 	.word	0x08013d90
 800ae00:	08014220 	.word	0x08014220
 800ae04:	08013dd4 	.word	0x08013dd4
 800ae08:	200100fc 	.word	0x200100fc
 800ae0c:	2001010c 	.word	0x2001010c
 800ae10:	08014250 	.word	0x08014250
 800ae14:	08014278 	.word	0x08014278

0800ae18 <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 800ae18:	b580      	push	{r7, lr}
 800ae1a:	b082      	sub	sp, #8
 800ae1c:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 800ae1e:	4b2d      	ldr	r3, [pc, #180]	@ (800aed4 <tcp_fasttmr+0xbc>)
 800ae20:	781b      	ldrb	r3, [r3, #0]
 800ae22:	3301      	adds	r3, #1
 800ae24:	b2da      	uxtb	r2, r3
 800ae26:	4b2b      	ldr	r3, [pc, #172]	@ (800aed4 <tcp_fasttmr+0xbc>)
 800ae28:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 800ae2a:	4b2b      	ldr	r3, [pc, #172]	@ (800aed8 <tcp_fasttmr+0xc0>)
 800ae2c:	681b      	ldr	r3, [r3, #0]
 800ae2e:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 800ae30:	e048      	b.n	800aec4 <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 800ae32:	687b      	ldr	r3, [r7, #4]
 800ae34:	7f9a      	ldrb	r2, [r3, #30]
 800ae36:	4b27      	ldr	r3, [pc, #156]	@ (800aed4 <tcp_fasttmr+0xbc>)
 800ae38:	781b      	ldrb	r3, [r3, #0]
 800ae3a:	429a      	cmp	r2, r3
 800ae3c:	d03f      	beq.n	800aebe <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 800ae3e:	4b25      	ldr	r3, [pc, #148]	@ (800aed4 <tcp_fasttmr+0xbc>)
 800ae40:	781a      	ldrb	r2, [r3, #0]
 800ae42:	687b      	ldr	r3, [r7, #4]
 800ae44:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 800ae46:	687b      	ldr	r3, [r7, #4]
 800ae48:	8b5b      	ldrh	r3, [r3, #26]
 800ae4a:	f003 0301 	and.w	r3, r3, #1
 800ae4e:	2b00      	cmp	r3, #0
 800ae50:	d010      	beq.n	800ae74 <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 800ae52:	687b      	ldr	r3, [r7, #4]
 800ae54:	8b5b      	ldrh	r3, [r3, #26]
 800ae56:	f043 0302 	orr.w	r3, r3, #2
 800ae5a:	b29a      	uxth	r2, r3
 800ae5c:	687b      	ldr	r3, [r7, #4]
 800ae5e:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 800ae60:	6878      	ldr	r0, [r7, #4]
 800ae62:	f003 fac9 	bl	800e3f8 <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800ae66:	687b      	ldr	r3, [r7, #4]
 800ae68:	8b5b      	ldrh	r3, [r3, #26]
 800ae6a:	f023 0303 	bic.w	r3, r3, #3
 800ae6e:	b29a      	uxth	r2, r3
 800ae70:	687b      	ldr	r3, [r7, #4]
 800ae72:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 800ae74:	687b      	ldr	r3, [r7, #4]
 800ae76:	8b5b      	ldrh	r3, [r3, #26]
 800ae78:	f003 0308 	and.w	r3, r3, #8
 800ae7c:	2b00      	cmp	r3, #0
 800ae7e:	d009      	beq.n	800ae94 <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 800ae80:	687b      	ldr	r3, [r7, #4]
 800ae82:	8b5b      	ldrh	r3, [r3, #26]
 800ae84:	f023 0308 	bic.w	r3, r3, #8
 800ae88:	b29a      	uxth	r2, r3
 800ae8a:	687b      	ldr	r3, [r7, #4]
 800ae8c:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 800ae8e:	6878      	ldr	r0, [r7, #4]
 800ae90:	f7ff fa76 	bl	800a380 <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 800ae94:	687b      	ldr	r3, [r7, #4]
 800ae96:	68db      	ldr	r3, [r3, #12]
 800ae98:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 800ae9a:	687b      	ldr	r3, [r7, #4]
 800ae9c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800ae9e:	2b00      	cmp	r3, #0
 800aea0:	d00a      	beq.n	800aeb8 <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 800aea2:	4b0e      	ldr	r3, [pc, #56]	@ (800aedc <tcp_fasttmr+0xc4>)
 800aea4:	2200      	movs	r2, #0
 800aea6:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 800aea8:	6878      	ldr	r0, [r7, #4]
 800aeaa:	f000 f819 	bl	800aee0 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 800aeae:	4b0b      	ldr	r3, [pc, #44]	@ (800aedc <tcp_fasttmr+0xc4>)
 800aeb0:	781b      	ldrb	r3, [r3, #0]
 800aeb2:	2b00      	cmp	r3, #0
 800aeb4:	d000      	beq.n	800aeb8 <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 800aeb6:	e7b8      	b.n	800ae2a <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 800aeb8:	683b      	ldr	r3, [r7, #0]
 800aeba:	607b      	str	r3, [r7, #4]
 800aebc:	e002      	b.n	800aec4 <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 800aebe:	687b      	ldr	r3, [r7, #4]
 800aec0:	68db      	ldr	r3, [r3, #12]
 800aec2:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 800aec4:	687b      	ldr	r3, [r7, #4]
 800aec6:	2b00      	cmp	r3, #0
 800aec8:	d1b3      	bne.n	800ae32 <tcp_fasttmr+0x1a>
    }
  }
}
 800aeca:	bf00      	nop
 800aecc:	bf00      	nop
 800aece:	3708      	adds	r7, #8
 800aed0:	46bd      	mov	sp, r7
 800aed2:	bd80      	pop	{r7, pc}
 800aed4:	20010112 	.word	0x20010112
 800aed8:	20010108 	.word	0x20010108
 800aedc:	20010110 	.word	0x20010110

0800aee0 <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 800aee0:	b590      	push	{r4, r7, lr}
 800aee2:	b085      	sub	sp, #20
 800aee4:	af00      	add	r7, sp, #0
 800aee6:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 800aee8:	687b      	ldr	r3, [r7, #4]
 800aeea:	2b00      	cmp	r3, #0
 800aeec:	d109      	bne.n	800af02 <tcp_process_refused_data+0x22>
 800aeee:	4b37      	ldr	r3, [pc, #220]	@ (800afcc <tcp_process_refused_data+0xec>)
 800aef0:	f240 6209 	movw	r2, #1545	@ 0x609
 800aef4:	4936      	ldr	r1, [pc, #216]	@ (800afd0 <tcp_process_refused_data+0xf0>)
 800aef6:	4837      	ldr	r0, [pc, #220]	@ (800afd4 <tcp_process_refused_data+0xf4>)
 800aef8:	f007 f9e0 	bl	80122bc <iprintf>
 800aefc:	f06f 030f 	mvn.w	r3, #15
 800af00:	e060      	b.n	800afc4 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 800af02:	687b      	ldr	r3, [r7, #4]
 800af04:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800af06:	7b5b      	ldrb	r3, [r3, #13]
 800af08:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 800af0a:	687b      	ldr	r3, [r7, #4]
 800af0c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800af0e:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 800af10:	687b      	ldr	r3, [r7, #4]
 800af12:	2200      	movs	r2, #0
 800af14:	679a      	str	r2, [r3, #120]	@ 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 800af16:	687b      	ldr	r3, [r7, #4]
 800af18:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800af1c:	2b00      	cmp	r3, #0
 800af1e:	d00b      	beq.n	800af38 <tcp_process_refused_data+0x58>
 800af20:	687b      	ldr	r3, [r7, #4]
 800af22:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 800af26:	687b      	ldr	r3, [r7, #4]
 800af28:	6918      	ldr	r0, [r3, #16]
 800af2a:	2300      	movs	r3, #0
 800af2c:	68ba      	ldr	r2, [r7, #8]
 800af2e:	6879      	ldr	r1, [r7, #4]
 800af30:	47a0      	blx	r4
 800af32:	4603      	mov	r3, r0
 800af34:	73fb      	strb	r3, [r7, #15]
 800af36:	e007      	b.n	800af48 <tcp_process_refused_data+0x68>
 800af38:	2300      	movs	r3, #0
 800af3a:	68ba      	ldr	r2, [r7, #8]
 800af3c:	6879      	ldr	r1, [r7, #4]
 800af3e:	2000      	movs	r0, #0
 800af40:	f000 f8a4 	bl	800b08c <tcp_recv_null>
 800af44:	4603      	mov	r3, r0
 800af46:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 800af48:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800af4c:	2b00      	cmp	r3, #0
 800af4e:	d12a      	bne.n	800afa6 <tcp_process_refused_data+0xc6>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 800af50:	7bbb      	ldrb	r3, [r7, #14]
 800af52:	f003 0320 	and.w	r3, r3, #32
 800af56:	2b00      	cmp	r3, #0
 800af58:	d033      	beq.n	800afc2 <tcp_process_refused_data+0xe2>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800af5a:	687b      	ldr	r3, [r7, #4]
 800af5c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800af5e:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 800af62:	d005      	beq.n	800af70 <tcp_process_refused_data+0x90>
          pcb->rcv_wnd++;
 800af64:	687b      	ldr	r3, [r7, #4]
 800af66:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800af68:	3301      	adds	r3, #1
 800af6a:	b29a      	uxth	r2, r3
 800af6c:	687b      	ldr	r3, [r7, #4]
 800af6e:	851a      	strh	r2, [r3, #40]	@ 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 800af70:	687b      	ldr	r3, [r7, #4]
 800af72:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800af76:	2b00      	cmp	r3, #0
 800af78:	d00b      	beq.n	800af92 <tcp_process_refused_data+0xb2>
 800af7a:	687b      	ldr	r3, [r7, #4]
 800af7c:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 800af80:	687b      	ldr	r3, [r7, #4]
 800af82:	6918      	ldr	r0, [r3, #16]
 800af84:	2300      	movs	r3, #0
 800af86:	2200      	movs	r2, #0
 800af88:	6879      	ldr	r1, [r7, #4]
 800af8a:	47a0      	blx	r4
 800af8c:	4603      	mov	r3, r0
 800af8e:	73fb      	strb	r3, [r7, #15]
 800af90:	e001      	b.n	800af96 <tcp_process_refused_data+0xb6>
 800af92:	2300      	movs	r3, #0
 800af94:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 800af96:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800af9a:	f113 0f0d 	cmn.w	r3, #13
 800af9e:	d110      	bne.n	800afc2 <tcp_process_refused_data+0xe2>
          return ERR_ABRT;
 800afa0:	f06f 030c 	mvn.w	r3, #12
 800afa4:	e00e      	b.n	800afc4 <tcp_process_refused_data+0xe4>
        }
      }
    } else if (err == ERR_ABRT) {
 800afa6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800afaa:	f113 0f0d 	cmn.w	r3, #13
 800afae:	d102      	bne.n	800afb6 <tcp_process_refused_data+0xd6>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 800afb0:	f06f 030c 	mvn.w	r3, #12
 800afb4:	e006      	b.n	800afc4 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 800afb6:	687b      	ldr	r3, [r7, #4]
 800afb8:	68ba      	ldr	r2, [r7, #8]
 800afba:	679a      	str	r2, [r3, #120]	@ 0x78
      return ERR_INPROGRESS;
 800afbc:	f06f 0304 	mvn.w	r3, #4
 800afc0:	e000      	b.n	800afc4 <tcp_process_refused_data+0xe4>
    }
  }
  return ERR_OK;
 800afc2:	2300      	movs	r3, #0
}
 800afc4:	4618      	mov	r0, r3
 800afc6:	3714      	adds	r7, #20
 800afc8:	46bd      	mov	sp, r7
 800afca:	bd90      	pop	{r4, r7, pc}
 800afcc:	08013d90 	.word	0x08013d90
 800afd0:	080142a0 	.word	0x080142a0
 800afd4:	08013dd4 	.word	0x08013dd4

0800afd8 <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 800afd8:	b580      	push	{r7, lr}
 800afda:	b084      	sub	sp, #16
 800afdc:	af00      	add	r7, sp, #0
 800afde:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 800afe0:	e007      	b.n	800aff2 <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 800afe2:	687b      	ldr	r3, [r7, #4]
 800afe4:	681b      	ldr	r3, [r3, #0]
 800afe6:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 800afe8:	6878      	ldr	r0, [r7, #4]
 800afea:	f000 f80a 	bl	800b002 <tcp_seg_free>
    seg = next;
 800afee:	68fb      	ldr	r3, [r7, #12]
 800aff0:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 800aff2:	687b      	ldr	r3, [r7, #4]
 800aff4:	2b00      	cmp	r3, #0
 800aff6:	d1f4      	bne.n	800afe2 <tcp_segs_free+0xa>
  }
}
 800aff8:	bf00      	nop
 800affa:	bf00      	nop
 800affc:	3710      	adds	r7, #16
 800affe:	46bd      	mov	sp, r7
 800b000:	bd80      	pop	{r7, pc}

0800b002 <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 800b002:	b580      	push	{r7, lr}
 800b004:	b082      	sub	sp, #8
 800b006:	af00      	add	r7, sp, #0
 800b008:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 800b00a:	687b      	ldr	r3, [r7, #4]
 800b00c:	2b00      	cmp	r3, #0
 800b00e:	d00c      	beq.n	800b02a <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 800b010:	687b      	ldr	r3, [r7, #4]
 800b012:	685b      	ldr	r3, [r3, #4]
 800b014:	2b00      	cmp	r3, #0
 800b016:	d004      	beq.n	800b022 <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 800b018:	687b      	ldr	r3, [r7, #4]
 800b01a:	685b      	ldr	r3, [r3, #4]
 800b01c:	4618      	mov	r0, r3
 800b01e:	f7fe fd6f 	bl	8009b00 <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 800b022:	6879      	ldr	r1, [r7, #4]
 800b024:	2003      	movs	r0, #3
 800b026:	f7fd fec7 	bl	8008db8 <memp_free>
  }
}
 800b02a:	bf00      	nop
 800b02c:	3708      	adds	r7, #8
 800b02e:	46bd      	mov	sp, r7
 800b030:	bd80      	pop	{r7, pc}
	...

0800b034 <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 800b034:	b580      	push	{r7, lr}
 800b036:	b084      	sub	sp, #16
 800b038:	af00      	add	r7, sp, #0
 800b03a:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 800b03c:	687b      	ldr	r3, [r7, #4]
 800b03e:	2b00      	cmp	r3, #0
 800b040:	d106      	bne.n	800b050 <tcp_seg_copy+0x1c>
 800b042:	4b0f      	ldr	r3, [pc, #60]	@ (800b080 <tcp_seg_copy+0x4c>)
 800b044:	f240 6282 	movw	r2, #1666	@ 0x682
 800b048:	490e      	ldr	r1, [pc, #56]	@ (800b084 <tcp_seg_copy+0x50>)
 800b04a:	480f      	ldr	r0, [pc, #60]	@ (800b088 <tcp_seg_copy+0x54>)
 800b04c:	f007 f936 	bl	80122bc <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 800b050:	2003      	movs	r0, #3
 800b052:	f7fd fe3b 	bl	8008ccc <memp_malloc>
 800b056:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 800b058:	68fb      	ldr	r3, [r7, #12]
 800b05a:	2b00      	cmp	r3, #0
 800b05c:	d101      	bne.n	800b062 <tcp_seg_copy+0x2e>
    return NULL;
 800b05e:	2300      	movs	r3, #0
 800b060:	e00a      	b.n	800b078 <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 800b062:	2210      	movs	r2, #16
 800b064:	6879      	ldr	r1, [r7, #4]
 800b066:	68f8      	ldr	r0, [r7, #12]
 800b068:	f007 fa59 	bl	801251e <memcpy>
  pbuf_ref(cseg->p);
 800b06c:	68fb      	ldr	r3, [r7, #12]
 800b06e:	685b      	ldr	r3, [r3, #4]
 800b070:	4618      	mov	r0, r3
 800b072:	f7fe fdeb 	bl	8009c4c <pbuf_ref>
  return cseg;
 800b076:	68fb      	ldr	r3, [r7, #12]
}
 800b078:	4618      	mov	r0, r3
 800b07a:	3710      	adds	r7, #16
 800b07c:	46bd      	mov	sp, r7
 800b07e:	bd80      	pop	{r7, pc}
 800b080:	08013d90 	.word	0x08013d90
 800b084:	080142e4 	.word	0x080142e4
 800b088:	08013dd4 	.word	0x08013dd4

0800b08c <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 800b08c:	b580      	push	{r7, lr}
 800b08e:	b084      	sub	sp, #16
 800b090:	af00      	add	r7, sp, #0
 800b092:	60f8      	str	r0, [r7, #12]
 800b094:	60b9      	str	r1, [r7, #8]
 800b096:	607a      	str	r2, [r7, #4]
 800b098:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 800b09a:	68bb      	ldr	r3, [r7, #8]
 800b09c:	2b00      	cmp	r3, #0
 800b09e:	d109      	bne.n	800b0b4 <tcp_recv_null+0x28>
 800b0a0:	4b12      	ldr	r3, [pc, #72]	@ (800b0ec <tcp_recv_null+0x60>)
 800b0a2:	f44f 62d3 	mov.w	r2, #1688	@ 0x698
 800b0a6:	4912      	ldr	r1, [pc, #72]	@ (800b0f0 <tcp_recv_null+0x64>)
 800b0a8:	4812      	ldr	r0, [pc, #72]	@ (800b0f4 <tcp_recv_null+0x68>)
 800b0aa:	f007 f907 	bl	80122bc <iprintf>
 800b0ae:	f06f 030f 	mvn.w	r3, #15
 800b0b2:	e016      	b.n	800b0e2 <tcp_recv_null+0x56>

  if (p != NULL) {
 800b0b4:	687b      	ldr	r3, [r7, #4]
 800b0b6:	2b00      	cmp	r3, #0
 800b0b8:	d009      	beq.n	800b0ce <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 800b0ba:	687b      	ldr	r3, [r7, #4]
 800b0bc:	891b      	ldrh	r3, [r3, #8]
 800b0be:	4619      	mov	r1, r3
 800b0c0:	68b8      	ldr	r0, [r7, #8]
 800b0c2:	f7ff fb17 	bl	800a6f4 <tcp_recved>
    pbuf_free(p);
 800b0c6:	6878      	ldr	r0, [r7, #4]
 800b0c8:	f7fe fd1a 	bl	8009b00 <pbuf_free>
 800b0cc:	e008      	b.n	800b0e0 <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 800b0ce:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800b0d2:	2b00      	cmp	r3, #0
 800b0d4:	d104      	bne.n	800b0e0 <tcp_recv_null+0x54>
    return tcp_close(pcb);
 800b0d6:	68b8      	ldr	r0, [r7, #8]
 800b0d8:	f7ff f9bc 	bl	800a454 <tcp_close>
 800b0dc:	4603      	mov	r3, r0
 800b0de:	e000      	b.n	800b0e2 <tcp_recv_null+0x56>
  }
  return ERR_OK;
 800b0e0:	2300      	movs	r3, #0
}
 800b0e2:	4618      	mov	r0, r3
 800b0e4:	3710      	adds	r7, #16
 800b0e6:	46bd      	mov	sp, r7
 800b0e8:	bd80      	pop	{r7, pc}
 800b0ea:	bf00      	nop
 800b0ec:	08013d90 	.word	0x08013d90
 800b0f0:	08014300 	.word	0x08014300
 800b0f4:	08013dd4 	.word	0x08013dd4

0800b0f8 <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 800b0f8:	b580      	push	{r7, lr}
 800b0fa:	b086      	sub	sp, #24
 800b0fc:	af00      	add	r7, sp, #0
 800b0fe:	4603      	mov	r3, r0
 800b100:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 800b102:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b106:	2b00      	cmp	r3, #0
 800b108:	db01      	blt.n	800b10e <tcp_kill_prio+0x16>
 800b10a:	79fb      	ldrb	r3, [r7, #7]
 800b10c:	e000      	b.n	800b110 <tcp_kill_prio+0x18>
 800b10e:	237f      	movs	r3, #127	@ 0x7f
 800b110:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 800b112:	7afb      	ldrb	r3, [r7, #11]
 800b114:	2b00      	cmp	r3, #0
 800b116:	d034      	beq.n	800b182 <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 800b118:	7afb      	ldrb	r3, [r7, #11]
 800b11a:	3b01      	subs	r3, #1
 800b11c:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 800b11e:	2300      	movs	r3, #0
 800b120:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800b122:	2300      	movs	r3, #0
 800b124:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800b126:	4b19      	ldr	r3, [pc, #100]	@ (800b18c <tcp_kill_prio+0x94>)
 800b128:	681b      	ldr	r3, [r3, #0]
 800b12a:	617b      	str	r3, [r7, #20]
 800b12c:	e01f      	b.n	800b16e <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 800b12e:	697b      	ldr	r3, [r7, #20]
 800b130:	7d5b      	ldrb	r3, [r3, #21]
 800b132:	7afa      	ldrb	r2, [r7, #11]
 800b134:	429a      	cmp	r2, r3
 800b136:	d80c      	bhi.n	800b152 <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800b138:	697b      	ldr	r3, [r7, #20]
 800b13a:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 800b13c:	7afa      	ldrb	r2, [r7, #11]
 800b13e:	429a      	cmp	r2, r3
 800b140:	d112      	bne.n	800b168 <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800b142:	4b13      	ldr	r3, [pc, #76]	@ (800b190 <tcp_kill_prio+0x98>)
 800b144:	681a      	ldr	r2, [r3, #0]
 800b146:	697b      	ldr	r3, [r7, #20]
 800b148:	6a1b      	ldr	r3, [r3, #32]
 800b14a:	1ad3      	subs	r3, r2, r3
 800b14c:	68fa      	ldr	r2, [r7, #12]
 800b14e:	429a      	cmp	r2, r3
 800b150:	d80a      	bhi.n	800b168 <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 800b152:	4b0f      	ldr	r3, [pc, #60]	@ (800b190 <tcp_kill_prio+0x98>)
 800b154:	681a      	ldr	r2, [r3, #0]
 800b156:	697b      	ldr	r3, [r7, #20]
 800b158:	6a1b      	ldr	r3, [r3, #32]
 800b15a:	1ad3      	subs	r3, r2, r3
 800b15c:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 800b15e:	697b      	ldr	r3, [r7, #20]
 800b160:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 800b162:	697b      	ldr	r3, [r7, #20]
 800b164:	7d5b      	ldrb	r3, [r3, #21]
 800b166:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800b168:	697b      	ldr	r3, [r7, #20]
 800b16a:	68db      	ldr	r3, [r3, #12]
 800b16c:	617b      	str	r3, [r7, #20]
 800b16e:	697b      	ldr	r3, [r7, #20]
 800b170:	2b00      	cmp	r3, #0
 800b172:	d1dc      	bne.n	800b12e <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 800b174:	693b      	ldr	r3, [r7, #16]
 800b176:	2b00      	cmp	r3, #0
 800b178:	d004      	beq.n	800b184 <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 800b17a:	6938      	ldr	r0, [r7, #16]
 800b17c:	f7ff fa54 	bl	800a628 <tcp_abort>
 800b180:	e000      	b.n	800b184 <tcp_kill_prio+0x8c>
    return;
 800b182:	bf00      	nop
  }
}
 800b184:	3718      	adds	r7, #24
 800b186:	46bd      	mov	sp, r7
 800b188:	bd80      	pop	{r7, pc}
 800b18a:	bf00      	nop
 800b18c:	20010108 	.word	0x20010108
 800b190:	200100fc 	.word	0x200100fc

0800b194 <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 800b194:	b580      	push	{r7, lr}
 800b196:	b086      	sub	sp, #24
 800b198:	af00      	add	r7, sp, #0
 800b19a:	4603      	mov	r3, r0
 800b19c:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 800b19e:	79fb      	ldrb	r3, [r7, #7]
 800b1a0:	2b08      	cmp	r3, #8
 800b1a2:	d009      	beq.n	800b1b8 <tcp_kill_state+0x24>
 800b1a4:	79fb      	ldrb	r3, [r7, #7]
 800b1a6:	2b09      	cmp	r3, #9
 800b1a8:	d006      	beq.n	800b1b8 <tcp_kill_state+0x24>
 800b1aa:	4b1a      	ldr	r3, [pc, #104]	@ (800b214 <tcp_kill_state+0x80>)
 800b1ac:	f240 62dd 	movw	r2, #1757	@ 0x6dd
 800b1b0:	4919      	ldr	r1, [pc, #100]	@ (800b218 <tcp_kill_state+0x84>)
 800b1b2:	481a      	ldr	r0, [pc, #104]	@ (800b21c <tcp_kill_state+0x88>)
 800b1b4:	f007 f882 	bl	80122bc <iprintf>

  inactivity = 0;
 800b1b8:	2300      	movs	r3, #0
 800b1ba:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800b1bc:	2300      	movs	r3, #0
 800b1be:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800b1c0:	4b17      	ldr	r3, [pc, #92]	@ (800b220 <tcp_kill_state+0x8c>)
 800b1c2:	681b      	ldr	r3, [r3, #0]
 800b1c4:	617b      	str	r3, [r7, #20]
 800b1c6:	e017      	b.n	800b1f8 <tcp_kill_state+0x64>
    if (pcb->state == state) {
 800b1c8:	697b      	ldr	r3, [r7, #20]
 800b1ca:	7d1b      	ldrb	r3, [r3, #20]
 800b1cc:	79fa      	ldrb	r2, [r7, #7]
 800b1ce:	429a      	cmp	r2, r3
 800b1d0:	d10f      	bne.n	800b1f2 <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800b1d2:	4b14      	ldr	r3, [pc, #80]	@ (800b224 <tcp_kill_state+0x90>)
 800b1d4:	681a      	ldr	r2, [r3, #0]
 800b1d6:	697b      	ldr	r3, [r7, #20]
 800b1d8:	6a1b      	ldr	r3, [r3, #32]
 800b1da:	1ad3      	subs	r3, r2, r3
 800b1dc:	68fa      	ldr	r2, [r7, #12]
 800b1de:	429a      	cmp	r2, r3
 800b1e0:	d807      	bhi.n	800b1f2 <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 800b1e2:	4b10      	ldr	r3, [pc, #64]	@ (800b224 <tcp_kill_state+0x90>)
 800b1e4:	681a      	ldr	r2, [r3, #0]
 800b1e6:	697b      	ldr	r3, [r7, #20]
 800b1e8:	6a1b      	ldr	r3, [r3, #32]
 800b1ea:	1ad3      	subs	r3, r2, r3
 800b1ec:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 800b1ee:	697b      	ldr	r3, [r7, #20]
 800b1f0:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800b1f2:	697b      	ldr	r3, [r7, #20]
 800b1f4:	68db      	ldr	r3, [r3, #12]
 800b1f6:	617b      	str	r3, [r7, #20]
 800b1f8:	697b      	ldr	r3, [r7, #20]
 800b1fa:	2b00      	cmp	r3, #0
 800b1fc:	d1e4      	bne.n	800b1c8 <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 800b1fe:	693b      	ldr	r3, [r7, #16]
 800b200:	2b00      	cmp	r3, #0
 800b202:	d003      	beq.n	800b20c <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 800b204:	2100      	movs	r1, #0
 800b206:	6938      	ldr	r0, [r7, #16]
 800b208:	f7ff f950 	bl	800a4ac <tcp_abandon>
  }
}
 800b20c:	bf00      	nop
 800b20e:	3718      	adds	r7, #24
 800b210:	46bd      	mov	sp, r7
 800b212:	bd80      	pop	{r7, pc}
 800b214:	08013d90 	.word	0x08013d90
 800b218:	0801431c 	.word	0x0801431c
 800b21c:	08013dd4 	.word	0x08013dd4
 800b220:	20010108 	.word	0x20010108
 800b224:	200100fc 	.word	0x200100fc

0800b228 <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 800b228:	b580      	push	{r7, lr}
 800b22a:	b084      	sub	sp, #16
 800b22c:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 800b22e:	2300      	movs	r3, #0
 800b230:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 800b232:	2300      	movs	r3, #0
 800b234:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800b236:	4b12      	ldr	r3, [pc, #72]	@ (800b280 <tcp_kill_timewait+0x58>)
 800b238:	681b      	ldr	r3, [r3, #0]
 800b23a:	60fb      	str	r3, [r7, #12]
 800b23c:	e012      	b.n	800b264 <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800b23e:	4b11      	ldr	r3, [pc, #68]	@ (800b284 <tcp_kill_timewait+0x5c>)
 800b240:	681a      	ldr	r2, [r3, #0]
 800b242:	68fb      	ldr	r3, [r7, #12]
 800b244:	6a1b      	ldr	r3, [r3, #32]
 800b246:	1ad3      	subs	r3, r2, r3
 800b248:	687a      	ldr	r2, [r7, #4]
 800b24a:	429a      	cmp	r2, r3
 800b24c:	d807      	bhi.n	800b25e <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 800b24e:	4b0d      	ldr	r3, [pc, #52]	@ (800b284 <tcp_kill_timewait+0x5c>)
 800b250:	681a      	ldr	r2, [r3, #0]
 800b252:	68fb      	ldr	r3, [r7, #12]
 800b254:	6a1b      	ldr	r3, [r3, #32]
 800b256:	1ad3      	subs	r3, r2, r3
 800b258:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 800b25a:	68fb      	ldr	r3, [r7, #12]
 800b25c:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800b25e:	68fb      	ldr	r3, [r7, #12]
 800b260:	68db      	ldr	r3, [r3, #12]
 800b262:	60fb      	str	r3, [r7, #12]
 800b264:	68fb      	ldr	r3, [r7, #12]
 800b266:	2b00      	cmp	r3, #0
 800b268:	d1e9      	bne.n	800b23e <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 800b26a:	68bb      	ldr	r3, [r7, #8]
 800b26c:	2b00      	cmp	r3, #0
 800b26e:	d002      	beq.n	800b276 <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 800b270:	68b8      	ldr	r0, [r7, #8]
 800b272:	f7ff f9d9 	bl	800a628 <tcp_abort>
  }
}
 800b276:	bf00      	nop
 800b278:	3710      	adds	r7, #16
 800b27a:	46bd      	mov	sp, r7
 800b27c:	bd80      	pop	{r7, pc}
 800b27e:	bf00      	nop
 800b280:	2001010c 	.word	0x2001010c
 800b284:	200100fc 	.word	0x200100fc

0800b288 <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 800b288:	b580      	push	{r7, lr}
 800b28a:	b082      	sub	sp, #8
 800b28c:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 800b28e:	4b10      	ldr	r3, [pc, #64]	@ (800b2d0 <tcp_handle_closepend+0x48>)
 800b290:	681b      	ldr	r3, [r3, #0]
 800b292:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 800b294:	e014      	b.n	800b2c0 <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 800b296:	687b      	ldr	r3, [r7, #4]
 800b298:	68db      	ldr	r3, [r3, #12]
 800b29a:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 800b29c:	687b      	ldr	r3, [r7, #4]
 800b29e:	8b5b      	ldrh	r3, [r3, #26]
 800b2a0:	f003 0308 	and.w	r3, r3, #8
 800b2a4:	2b00      	cmp	r3, #0
 800b2a6:	d009      	beq.n	800b2bc <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 800b2a8:	687b      	ldr	r3, [r7, #4]
 800b2aa:	8b5b      	ldrh	r3, [r3, #26]
 800b2ac:	f023 0308 	bic.w	r3, r3, #8
 800b2b0:	b29a      	uxth	r2, r3
 800b2b2:	687b      	ldr	r3, [r7, #4]
 800b2b4:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 800b2b6:	6878      	ldr	r0, [r7, #4]
 800b2b8:	f7ff f862 	bl	800a380 <tcp_close_shutdown_fin>
    }
    pcb = next;
 800b2bc:	683b      	ldr	r3, [r7, #0]
 800b2be:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 800b2c0:	687b      	ldr	r3, [r7, #4]
 800b2c2:	2b00      	cmp	r3, #0
 800b2c4:	d1e7      	bne.n	800b296 <tcp_handle_closepend+0xe>
  }
}
 800b2c6:	bf00      	nop
 800b2c8:	bf00      	nop
 800b2ca:	3708      	adds	r7, #8
 800b2cc:	46bd      	mov	sp, r7
 800b2ce:	bd80      	pop	{r7, pc}
 800b2d0:	20010108 	.word	0x20010108

0800b2d4 <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 800b2d4:	b580      	push	{r7, lr}
 800b2d6:	b084      	sub	sp, #16
 800b2d8:	af00      	add	r7, sp, #0
 800b2da:	4603      	mov	r3, r0
 800b2dc:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800b2de:	2001      	movs	r0, #1
 800b2e0:	f7fd fcf4 	bl	8008ccc <memp_malloc>
 800b2e4:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 800b2e6:	68fb      	ldr	r3, [r7, #12]
 800b2e8:	2b00      	cmp	r3, #0
 800b2ea:	d126      	bne.n	800b33a <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 800b2ec:	f7ff ffcc 	bl	800b288 <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 800b2f0:	f7ff ff9a 	bl	800b228 <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800b2f4:	2001      	movs	r0, #1
 800b2f6:	f7fd fce9 	bl	8008ccc <memp_malloc>
 800b2fa:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 800b2fc:	68fb      	ldr	r3, [r7, #12]
 800b2fe:	2b00      	cmp	r3, #0
 800b300:	d11b      	bne.n	800b33a <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 800b302:	2009      	movs	r0, #9
 800b304:	f7ff ff46 	bl	800b194 <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800b308:	2001      	movs	r0, #1
 800b30a:	f7fd fcdf 	bl	8008ccc <memp_malloc>
 800b30e:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 800b310:	68fb      	ldr	r3, [r7, #12]
 800b312:	2b00      	cmp	r3, #0
 800b314:	d111      	bne.n	800b33a <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 800b316:	2008      	movs	r0, #8
 800b318:	f7ff ff3c 	bl	800b194 <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800b31c:	2001      	movs	r0, #1
 800b31e:	f7fd fcd5 	bl	8008ccc <memp_malloc>
 800b322:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 800b324:	68fb      	ldr	r3, [r7, #12]
 800b326:	2b00      	cmp	r3, #0
 800b328:	d107      	bne.n	800b33a <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 800b32a:	79fb      	ldrb	r3, [r7, #7]
 800b32c:	4618      	mov	r0, r3
 800b32e:	f7ff fee3 	bl	800b0f8 <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800b332:	2001      	movs	r0, #1
 800b334:	f7fd fcca 	bl	8008ccc <memp_malloc>
 800b338:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 800b33a:	68fb      	ldr	r3, [r7, #12]
 800b33c:	2b00      	cmp	r3, #0
 800b33e:	d03f      	beq.n	800b3c0 <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 800b340:	229c      	movs	r2, #156	@ 0x9c
 800b342:	2100      	movs	r1, #0
 800b344:	68f8      	ldr	r0, [r7, #12]
 800b346:	f007 f81e 	bl	8012386 <memset>
    pcb->prio = prio;
 800b34a:	68fb      	ldr	r3, [r7, #12]
 800b34c:	79fa      	ldrb	r2, [r7, #7]
 800b34e:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 800b350:	68fb      	ldr	r3, [r7, #12]
 800b352:	f44f 6286 	mov.w	r2, #1072	@ 0x430
 800b356:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 800b35a:	68fb      	ldr	r3, [r7, #12]
 800b35c:	f44f 6206 	mov.w	r2, #2144	@ 0x860
 800b360:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800b362:	68fb      	ldr	r3, [r7, #12]
 800b364:	8d5a      	ldrh	r2, [r3, #42]	@ 0x2a
 800b366:	68fb      	ldr	r3, [r7, #12]
 800b368:	851a      	strh	r2, [r3, #40]	@ 0x28
    pcb->ttl = TCP_TTL;
 800b36a:	68fb      	ldr	r3, [r7, #12]
 800b36c:	22ff      	movs	r2, #255	@ 0xff
 800b36e:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 800b370:	68fb      	ldr	r3, [r7, #12]
 800b372:	f44f 7206 	mov.w	r2, #536	@ 0x218
 800b376:	865a      	strh	r2, [r3, #50]	@ 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 800b378:	68fb      	ldr	r3, [r7, #12]
 800b37a:	2206      	movs	r2, #6
 800b37c:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 800b380:	68fb      	ldr	r3, [r7, #12]
 800b382:	2206      	movs	r2, #6
 800b384:	87da      	strh	r2, [r3, #62]	@ 0x3e
    pcb->rtime = -1;
 800b386:	68fb      	ldr	r3, [r7, #12]
 800b388:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800b38c:	861a      	strh	r2, [r3, #48]	@ 0x30
    pcb->cwnd = 1;
 800b38e:	68fb      	ldr	r3, [r7, #12]
 800b390:	2201      	movs	r2, #1
 800b392:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
    pcb->tmr = tcp_ticks;
 800b396:	4b0d      	ldr	r3, [pc, #52]	@ (800b3cc <tcp_alloc+0xf8>)
 800b398:	681a      	ldr	r2, [r3, #0]
 800b39a:	68fb      	ldr	r3, [r7, #12]
 800b39c:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 800b39e:	4b0c      	ldr	r3, [pc, #48]	@ (800b3d0 <tcp_alloc+0xfc>)
 800b3a0:	781a      	ldrb	r2, [r3, #0]
 800b3a2:	68fb      	ldr	r3, [r7, #12]
 800b3a4:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 800b3a6:	68fb      	ldr	r3, [r7, #12]
 800b3a8:	f44f 6286 	mov.w	r2, #1072	@ 0x430
 800b3ac:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 800b3b0:	68fb      	ldr	r3, [r7, #12]
 800b3b2:	4a08      	ldr	r2, [pc, #32]	@ (800b3d4 <tcp_alloc+0x100>)
 800b3b4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 800b3b8:	68fb      	ldr	r3, [r7, #12]
 800b3ba:	4a07      	ldr	r2, [pc, #28]	@ (800b3d8 <tcp_alloc+0x104>)
 800b3bc:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 800b3c0:	68fb      	ldr	r3, [r7, #12]
}
 800b3c2:	4618      	mov	r0, r3
 800b3c4:	3710      	adds	r7, #16
 800b3c6:	46bd      	mov	sp, r7
 800b3c8:	bd80      	pop	{r7, pc}
 800b3ca:	bf00      	nop
 800b3cc:	200100fc 	.word	0x200100fc
 800b3d0:	20010112 	.word	0x20010112
 800b3d4:	0800b08d 	.word	0x0800b08d
 800b3d8:	006ddd00 	.word	0x006ddd00

0800b3dc <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 800b3dc:	b580      	push	{r7, lr}
 800b3de:	b082      	sub	sp, #8
 800b3e0:	af00      	add	r7, sp, #0
 800b3e2:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 800b3e4:	687b      	ldr	r3, [r7, #4]
 800b3e6:	2b00      	cmp	r3, #0
 800b3e8:	d107      	bne.n	800b3fa <tcp_pcb_purge+0x1e>
 800b3ea:	4b21      	ldr	r3, [pc, #132]	@ (800b470 <tcp_pcb_purge+0x94>)
 800b3ec:	f640 0251 	movw	r2, #2129	@ 0x851
 800b3f0:	4920      	ldr	r1, [pc, #128]	@ (800b474 <tcp_pcb_purge+0x98>)
 800b3f2:	4821      	ldr	r0, [pc, #132]	@ (800b478 <tcp_pcb_purge+0x9c>)
 800b3f4:	f006 ff62 	bl	80122bc <iprintf>
 800b3f8:	e037      	b.n	800b46a <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 800b3fa:	687b      	ldr	r3, [r7, #4]
 800b3fc:	7d1b      	ldrb	r3, [r3, #20]
 800b3fe:	2b00      	cmp	r3, #0
 800b400:	d033      	beq.n	800b46a <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 800b402:	687b      	ldr	r3, [r7, #4]
 800b404:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 800b406:	2b0a      	cmp	r3, #10
 800b408:	d02f      	beq.n	800b46a <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 800b40a:	687b      	ldr	r3, [r7, #4]
 800b40c:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 800b40e:	2b01      	cmp	r3, #1
 800b410:	d02b      	beq.n	800b46a <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 800b412:	687b      	ldr	r3, [r7, #4]
 800b414:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800b416:	2b00      	cmp	r3, #0
 800b418:	d007      	beq.n	800b42a <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 800b41a:	687b      	ldr	r3, [r7, #4]
 800b41c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800b41e:	4618      	mov	r0, r3
 800b420:	f7fe fb6e 	bl	8009b00 <pbuf_free>
      pcb->refused_data = NULL;
 800b424:	687b      	ldr	r3, [r7, #4]
 800b426:	2200      	movs	r2, #0
 800b428:	679a      	str	r2, [r3, #120]	@ 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 800b42a:	687b      	ldr	r3, [r7, #4]
 800b42c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b42e:	2b00      	cmp	r3, #0
 800b430:	d002      	beq.n	800b438 <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 800b432:	6878      	ldr	r0, [r7, #4]
 800b434:	f000 f986 	bl	800b744 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 800b438:	687b      	ldr	r3, [r7, #4]
 800b43a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800b43e:	861a      	strh	r2, [r3, #48]	@ 0x30

    tcp_segs_free(pcb->unsent);
 800b440:	687b      	ldr	r3, [r7, #4]
 800b442:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b444:	4618      	mov	r0, r3
 800b446:	f7ff fdc7 	bl	800afd8 <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 800b44a:	687b      	ldr	r3, [r7, #4]
 800b44c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b44e:	4618      	mov	r0, r3
 800b450:	f7ff fdc2 	bl	800afd8 <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 800b454:	687b      	ldr	r3, [r7, #4]
 800b456:	2200      	movs	r2, #0
 800b458:	66da      	str	r2, [r3, #108]	@ 0x6c
 800b45a:	687b      	ldr	r3, [r7, #4]
 800b45c:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 800b45e:	687b      	ldr	r3, [r7, #4]
 800b460:	671a      	str	r2, [r3, #112]	@ 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 800b462:	687b      	ldr	r3, [r7, #4]
 800b464:	2200      	movs	r2, #0
 800b466:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
#endif /* TCP_OVERSIZE */
  }
}
 800b46a:	3708      	adds	r7, #8
 800b46c:	46bd      	mov	sp, r7
 800b46e:	bd80      	pop	{r7, pc}
 800b470:	08013d90 	.word	0x08013d90
 800b474:	080143dc 	.word	0x080143dc
 800b478:	08013dd4 	.word	0x08013dd4

0800b47c <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 800b47c:	b580      	push	{r7, lr}
 800b47e:	b084      	sub	sp, #16
 800b480:	af00      	add	r7, sp, #0
 800b482:	6078      	str	r0, [r7, #4]
 800b484:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 800b486:	683b      	ldr	r3, [r7, #0]
 800b488:	2b00      	cmp	r3, #0
 800b48a:	d106      	bne.n	800b49a <tcp_pcb_remove+0x1e>
 800b48c:	4b3e      	ldr	r3, [pc, #248]	@ (800b588 <tcp_pcb_remove+0x10c>)
 800b48e:	f640 0283 	movw	r2, #2179	@ 0x883
 800b492:	493e      	ldr	r1, [pc, #248]	@ (800b58c <tcp_pcb_remove+0x110>)
 800b494:	483e      	ldr	r0, [pc, #248]	@ (800b590 <tcp_pcb_remove+0x114>)
 800b496:	f006 ff11 	bl	80122bc <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 800b49a:	687b      	ldr	r3, [r7, #4]
 800b49c:	2b00      	cmp	r3, #0
 800b49e:	d106      	bne.n	800b4ae <tcp_pcb_remove+0x32>
 800b4a0:	4b39      	ldr	r3, [pc, #228]	@ (800b588 <tcp_pcb_remove+0x10c>)
 800b4a2:	f640 0284 	movw	r2, #2180	@ 0x884
 800b4a6:	493b      	ldr	r1, [pc, #236]	@ (800b594 <tcp_pcb_remove+0x118>)
 800b4a8:	4839      	ldr	r0, [pc, #228]	@ (800b590 <tcp_pcb_remove+0x114>)
 800b4aa:	f006 ff07 	bl	80122bc <iprintf>

  TCP_RMV(pcblist, pcb);
 800b4ae:	687b      	ldr	r3, [r7, #4]
 800b4b0:	681b      	ldr	r3, [r3, #0]
 800b4b2:	683a      	ldr	r2, [r7, #0]
 800b4b4:	429a      	cmp	r2, r3
 800b4b6:	d105      	bne.n	800b4c4 <tcp_pcb_remove+0x48>
 800b4b8:	687b      	ldr	r3, [r7, #4]
 800b4ba:	681b      	ldr	r3, [r3, #0]
 800b4bc:	68da      	ldr	r2, [r3, #12]
 800b4be:	687b      	ldr	r3, [r7, #4]
 800b4c0:	601a      	str	r2, [r3, #0]
 800b4c2:	e013      	b.n	800b4ec <tcp_pcb_remove+0x70>
 800b4c4:	687b      	ldr	r3, [r7, #4]
 800b4c6:	681b      	ldr	r3, [r3, #0]
 800b4c8:	60fb      	str	r3, [r7, #12]
 800b4ca:	e00c      	b.n	800b4e6 <tcp_pcb_remove+0x6a>
 800b4cc:	68fb      	ldr	r3, [r7, #12]
 800b4ce:	68db      	ldr	r3, [r3, #12]
 800b4d0:	683a      	ldr	r2, [r7, #0]
 800b4d2:	429a      	cmp	r2, r3
 800b4d4:	d104      	bne.n	800b4e0 <tcp_pcb_remove+0x64>
 800b4d6:	683b      	ldr	r3, [r7, #0]
 800b4d8:	68da      	ldr	r2, [r3, #12]
 800b4da:	68fb      	ldr	r3, [r7, #12]
 800b4dc:	60da      	str	r2, [r3, #12]
 800b4de:	e005      	b.n	800b4ec <tcp_pcb_remove+0x70>
 800b4e0:	68fb      	ldr	r3, [r7, #12]
 800b4e2:	68db      	ldr	r3, [r3, #12]
 800b4e4:	60fb      	str	r3, [r7, #12]
 800b4e6:	68fb      	ldr	r3, [r7, #12]
 800b4e8:	2b00      	cmp	r3, #0
 800b4ea:	d1ef      	bne.n	800b4cc <tcp_pcb_remove+0x50>
 800b4ec:	683b      	ldr	r3, [r7, #0]
 800b4ee:	2200      	movs	r2, #0
 800b4f0:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 800b4f2:	6838      	ldr	r0, [r7, #0]
 800b4f4:	f7ff ff72 	bl	800b3dc <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 800b4f8:	683b      	ldr	r3, [r7, #0]
 800b4fa:	7d1b      	ldrb	r3, [r3, #20]
 800b4fc:	2b0a      	cmp	r3, #10
 800b4fe:	d013      	beq.n	800b528 <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 800b500:	683b      	ldr	r3, [r7, #0]
 800b502:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 800b504:	2b01      	cmp	r3, #1
 800b506:	d00f      	beq.n	800b528 <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 800b508:	683b      	ldr	r3, [r7, #0]
 800b50a:	8b5b      	ldrh	r3, [r3, #26]
 800b50c:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 800b510:	2b00      	cmp	r3, #0
 800b512:	d009      	beq.n	800b528 <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 800b514:	683b      	ldr	r3, [r7, #0]
 800b516:	8b5b      	ldrh	r3, [r3, #26]
 800b518:	f043 0302 	orr.w	r3, r3, #2
 800b51c:	b29a      	uxth	r2, r3
 800b51e:	683b      	ldr	r3, [r7, #0]
 800b520:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800b522:	6838      	ldr	r0, [r7, #0]
 800b524:	f002 ff68 	bl	800e3f8 <tcp_output>
  }

  if (pcb->state != LISTEN) {
 800b528:	683b      	ldr	r3, [r7, #0]
 800b52a:	7d1b      	ldrb	r3, [r3, #20]
 800b52c:	2b01      	cmp	r3, #1
 800b52e:	d020      	beq.n	800b572 <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 800b530:	683b      	ldr	r3, [r7, #0]
 800b532:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b534:	2b00      	cmp	r3, #0
 800b536:	d006      	beq.n	800b546 <tcp_pcb_remove+0xca>
 800b538:	4b13      	ldr	r3, [pc, #76]	@ (800b588 <tcp_pcb_remove+0x10c>)
 800b53a:	f640 0293 	movw	r2, #2195	@ 0x893
 800b53e:	4916      	ldr	r1, [pc, #88]	@ (800b598 <tcp_pcb_remove+0x11c>)
 800b540:	4813      	ldr	r0, [pc, #76]	@ (800b590 <tcp_pcb_remove+0x114>)
 800b542:	f006 febb 	bl	80122bc <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 800b546:	683b      	ldr	r3, [r7, #0]
 800b548:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b54a:	2b00      	cmp	r3, #0
 800b54c:	d006      	beq.n	800b55c <tcp_pcb_remove+0xe0>
 800b54e:	4b0e      	ldr	r3, [pc, #56]	@ (800b588 <tcp_pcb_remove+0x10c>)
 800b550:	f640 0294 	movw	r2, #2196	@ 0x894
 800b554:	4911      	ldr	r1, [pc, #68]	@ (800b59c <tcp_pcb_remove+0x120>)
 800b556:	480e      	ldr	r0, [pc, #56]	@ (800b590 <tcp_pcb_remove+0x114>)
 800b558:	f006 feb0 	bl	80122bc <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 800b55c:	683b      	ldr	r3, [r7, #0]
 800b55e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b560:	2b00      	cmp	r3, #0
 800b562:	d006      	beq.n	800b572 <tcp_pcb_remove+0xf6>
 800b564:	4b08      	ldr	r3, [pc, #32]	@ (800b588 <tcp_pcb_remove+0x10c>)
 800b566:	f640 0296 	movw	r2, #2198	@ 0x896
 800b56a:	490d      	ldr	r1, [pc, #52]	@ (800b5a0 <tcp_pcb_remove+0x124>)
 800b56c:	4808      	ldr	r0, [pc, #32]	@ (800b590 <tcp_pcb_remove+0x114>)
 800b56e:	f006 fea5 	bl	80122bc <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 800b572:	683b      	ldr	r3, [r7, #0]
 800b574:	2200      	movs	r2, #0
 800b576:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 800b578:	683b      	ldr	r3, [r7, #0]
 800b57a:	2200      	movs	r2, #0
 800b57c:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 800b57e:	bf00      	nop
 800b580:	3710      	adds	r7, #16
 800b582:	46bd      	mov	sp, r7
 800b584:	bd80      	pop	{r7, pc}
 800b586:	bf00      	nop
 800b588:	08013d90 	.word	0x08013d90
 800b58c:	080143f8 	.word	0x080143f8
 800b590:	08013dd4 	.word	0x08013dd4
 800b594:	08014414 	.word	0x08014414
 800b598:	08014434 	.word	0x08014434
 800b59c:	0801444c 	.word	0x0801444c
 800b5a0:	08014468 	.word	0x08014468

0800b5a4 <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 800b5a4:	b580      	push	{r7, lr}
 800b5a6:	b082      	sub	sp, #8
 800b5a8:	af00      	add	r7, sp, #0
 800b5aa:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 800b5ac:	687b      	ldr	r3, [r7, #4]
 800b5ae:	2b00      	cmp	r3, #0
 800b5b0:	d106      	bne.n	800b5c0 <tcp_next_iss+0x1c>
 800b5b2:	4b0a      	ldr	r3, [pc, #40]	@ (800b5dc <tcp_next_iss+0x38>)
 800b5b4:	f640 02af 	movw	r2, #2223	@ 0x8af
 800b5b8:	4909      	ldr	r1, [pc, #36]	@ (800b5e0 <tcp_next_iss+0x3c>)
 800b5ba:	480a      	ldr	r0, [pc, #40]	@ (800b5e4 <tcp_next_iss+0x40>)
 800b5bc:	f006 fe7e 	bl	80122bc <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 800b5c0:	4b09      	ldr	r3, [pc, #36]	@ (800b5e8 <tcp_next_iss+0x44>)
 800b5c2:	681a      	ldr	r2, [r3, #0]
 800b5c4:	4b09      	ldr	r3, [pc, #36]	@ (800b5ec <tcp_next_iss+0x48>)
 800b5c6:	681b      	ldr	r3, [r3, #0]
 800b5c8:	4413      	add	r3, r2
 800b5ca:	4a07      	ldr	r2, [pc, #28]	@ (800b5e8 <tcp_next_iss+0x44>)
 800b5cc:	6013      	str	r3, [r2, #0]
  return iss;
 800b5ce:	4b06      	ldr	r3, [pc, #24]	@ (800b5e8 <tcp_next_iss+0x44>)
 800b5d0:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 800b5d2:	4618      	mov	r0, r3
 800b5d4:	3708      	adds	r7, #8
 800b5d6:	46bd      	mov	sp, r7
 800b5d8:	bd80      	pop	{r7, pc}
 800b5da:	bf00      	nop
 800b5dc:	08013d90 	.word	0x08013d90
 800b5e0:	08014480 	.word	0x08014480
 800b5e4:	08013dd4 	.word	0x08013dd4
 800b5e8:	20000028 	.word	0x20000028
 800b5ec:	200100fc 	.word	0x200100fc

0800b5f0 <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 800b5f0:	b580      	push	{r7, lr}
 800b5f2:	b086      	sub	sp, #24
 800b5f4:	af00      	add	r7, sp, #0
 800b5f6:	4603      	mov	r3, r0
 800b5f8:	60b9      	str	r1, [r7, #8]
 800b5fa:	607a      	str	r2, [r7, #4]
 800b5fc:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 800b5fe:	687b      	ldr	r3, [r7, #4]
 800b600:	2b00      	cmp	r3, #0
 800b602:	d106      	bne.n	800b612 <tcp_eff_send_mss_netif+0x22>
 800b604:	4b14      	ldr	r3, [pc, #80]	@ (800b658 <tcp_eff_send_mss_netif+0x68>)
 800b606:	f640 02c5 	movw	r2, #2245	@ 0x8c5
 800b60a:	4914      	ldr	r1, [pc, #80]	@ (800b65c <tcp_eff_send_mss_netif+0x6c>)
 800b60c:	4814      	ldr	r0, [pc, #80]	@ (800b660 <tcp_eff_send_mss_netif+0x70>)
 800b60e:	f006 fe55 	bl	80122bc <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 800b612:	68bb      	ldr	r3, [r7, #8]
 800b614:	2b00      	cmp	r3, #0
 800b616:	d101      	bne.n	800b61c <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 800b618:	89fb      	ldrh	r3, [r7, #14]
 800b61a:	e019      	b.n	800b650 <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 800b61c:	68bb      	ldr	r3, [r7, #8]
 800b61e:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 800b620:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 800b622:	8afb      	ldrh	r3, [r7, #22]
 800b624:	2b00      	cmp	r3, #0
 800b626:	d012      	beq.n	800b64e <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 800b628:	2328      	movs	r3, #40	@ 0x28
 800b62a:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 800b62c:	8afa      	ldrh	r2, [r7, #22]
 800b62e:	8abb      	ldrh	r3, [r7, #20]
 800b630:	429a      	cmp	r2, r3
 800b632:	d904      	bls.n	800b63e <tcp_eff_send_mss_netif+0x4e>
 800b634:	8afa      	ldrh	r2, [r7, #22]
 800b636:	8abb      	ldrh	r3, [r7, #20]
 800b638:	1ad3      	subs	r3, r2, r3
 800b63a:	b29b      	uxth	r3, r3
 800b63c:	e000      	b.n	800b640 <tcp_eff_send_mss_netif+0x50>
 800b63e:	2300      	movs	r3, #0
 800b640:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 800b642:	8a7a      	ldrh	r2, [r7, #18]
 800b644:	89fb      	ldrh	r3, [r7, #14]
 800b646:	4293      	cmp	r3, r2
 800b648:	bf28      	it	cs
 800b64a:	4613      	movcs	r3, r2
 800b64c:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 800b64e:	89fb      	ldrh	r3, [r7, #14]
}
 800b650:	4618      	mov	r0, r3
 800b652:	3718      	adds	r7, #24
 800b654:	46bd      	mov	sp, r7
 800b656:	bd80      	pop	{r7, pc}
 800b658:	08013d90 	.word	0x08013d90
 800b65c:	0801449c 	.word	0x0801449c
 800b660:	08013dd4 	.word	0x08013dd4

0800b664 <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 800b664:	b580      	push	{r7, lr}
 800b666:	b084      	sub	sp, #16
 800b668:	af00      	add	r7, sp, #0
 800b66a:	6078      	str	r0, [r7, #4]
 800b66c:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 800b66e:	683b      	ldr	r3, [r7, #0]
 800b670:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 800b672:	687b      	ldr	r3, [r7, #4]
 800b674:	2b00      	cmp	r3, #0
 800b676:	d119      	bne.n	800b6ac <tcp_netif_ip_addr_changed_pcblist+0x48>
 800b678:	4b10      	ldr	r3, [pc, #64]	@ (800b6bc <tcp_netif_ip_addr_changed_pcblist+0x58>)
 800b67a:	f44f 6210 	mov.w	r2, #2304	@ 0x900
 800b67e:	4910      	ldr	r1, [pc, #64]	@ (800b6c0 <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 800b680:	4810      	ldr	r0, [pc, #64]	@ (800b6c4 <tcp_netif_ip_addr_changed_pcblist+0x60>)
 800b682:	f006 fe1b 	bl	80122bc <iprintf>

  while (pcb != NULL) {
 800b686:	e011      	b.n	800b6ac <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 800b688:	68fb      	ldr	r3, [r7, #12]
 800b68a:	681a      	ldr	r2, [r3, #0]
 800b68c:	687b      	ldr	r3, [r7, #4]
 800b68e:	681b      	ldr	r3, [r3, #0]
 800b690:	429a      	cmp	r2, r3
 800b692:	d108      	bne.n	800b6a6 <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 800b694:	68fb      	ldr	r3, [r7, #12]
 800b696:	68db      	ldr	r3, [r3, #12]
 800b698:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 800b69a:	68f8      	ldr	r0, [r7, #12]
 800b69c:	f7fe ffc4 	bl	800a628 <tcp_abort>
      pcb = next;
 800b6a0:	68bb      	ldr	r3, [r7, #8]
 800b6a2:	60fb      	str	r3, [r7, #12]
 800b6a4:	e002      	b.n	800b6ac <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 800b6a6:	68fb      	ldr	r3, [r7, #12]
 800b6a8:	68db      	ldr	r3, [r3, #12]
 800b6aa:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 800b6ac:	68fb      	ldr	r3, [r7, #12]
 800b6ae:	2b00      	cmp	r3, #0
 800b6b0:	d1ea      	bne.n	800b688 <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 800b6b2:	bf00      	nop
 800b6b4:	bf00      	nop
 800b6b6:	3710      	adds	r7, #16
 800b6b8:	46bd      	mov	sp, r7
 800b6ba:	bd80      	pop	{r7, pc}
 800b6bc:	08013d90 	.word	0x08013d90
 800b6c0:	080144c4 	.word	0x080144c4
 800b6c4:	08013dd4 	.word	0x08013dd4

0800b6c8 <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800b6c8:	b580      	push	{r7, lr}
 800b6ca:	b084      	sub	sp, #16
 800b6cc:	af00      	add	r7, sp, #0
 800b6ce:	6078      	str	r0, [r7, #4]
 800b6d0:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 800b6d2:	687b      	ldr	r3, [r7, #4]
 800b6d4:	2b00      	cmp	r3, #0
 800b6d6:	d02a      	beq.n	800b72e <tcp_netif_ip_addr_changed+0x66>
 800b6d8:	687b      	ldr	r3, [r7, #4]
 800b6da:	681b      	ldr	r3, [r3, #0]
 800b6dc:	2b00      	cmp	r3, #0
 800b6de:	d026      	beq.n	800b72e <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 800b6e0:	4b15      	ldr	r3, [pc, #84]	@ (800b738 <tcp_netif_ip_addr_changed+0x70>)
 800b6e2:	681b      	ldr	r3, [r3, #0]
 800b6e4:	4619      	mov	r1, r3
 800b6e6:	6878      	ldr	r0, [r7, #4]
 800b6e8:	f7ff ffbc 	bl	800b664 <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 800b6ec:	4b13      	ldr	r3, [pc, #76]	@ (800b73c <tcp_netif_ip_addr_changed+0x74>)
 800b6ee:	681b      	ldr	r3, [r3, #0]
 800b6f0:	4619      	mov	r1, r3
 800b6f2:	6878      	ldr	r0, [r7, #4]
 800b6f4:	f7ff ffb6 	bl	800b664 <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 800b6f8:	683b      	ldr	r3, [r7, #0]
 800b6fa:	2b00      	cmp	r3, #0
 800b6fc:	d017      	beq.n	800b72e <tcp_netif_ip_addr_changed+0x66>
 800b6fe:	683b      	ldr	r3, [r7, #0]
 800b700:	681b      	ldr	r3, [r3, #0]
 800b702:	2b00      	cmp	r3, #0
 800b704:	d013      	beq.n	800b72e <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800b706:	4b0e      	ldr	r3, [pc, #56]	@ (800b740 <tcp_netif_ip_addr_changed+0x78>)
 800b708:	681b      	ldr	r3, [r3, #0]
 800b70a:	60fb      	str	r3, [r7, #12]
 800b70c:	e00c      	b.n	800b728 <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 800b70e:	68fb      	ldr	r3, [r7, #12]
 800b710:	681a      	ldr	r2, [r3, #0]
 800b712:	687b      	ldr	r3, [r7, #4]
 800b714:	681b      	ldr	r3, [r3, #0]
 800b716:	429a      	cmp	r2, r3
 800b718:	d103      	bne.n	800b722 <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 800b71a:	683b      	ldr	r3, [r7, #0]
 800b71c:	681a      	ldr	r2, [r3, #0]
 800b71e:	68fb      	ldr	r3, [r7, #12]
 800b720:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800b722:	68fb      	ldr	r3, [r7, #12]
 800b724:	68db      	ldr	r3, [r3, #12]
 800b726:	60fb      	str	r3, [r7, #12]
 800b728:	68fb      	ldr	r3, [r7, #12]
 800b72a:	2b00      	cmp	r3, #0
 800b72c:	d1ef      	bne.n	800b70e <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 800b72e:	bf00      	nop
 800b730:	3710      	adds	r7, #16
 800b732:	46bd      	mov	sp, r7
 800b734:	bd80      	pop	{r7, pc}
 800b736:	bf00      	nop
 800b738:	20010108 	.word	0x20010108
 800b73c:	20010100 	.word	0x20010100
 800b740:	20010104 	.word	0x20010104

0800b744 <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 800b744:	b580      	push	{r7, lr}
 800b746:	b082      	sub	sp, #8
 800b748:	af00      	add	r7, sp, #0
 800b74a:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 800b74c:	687b      	ldr	r3, [r7, #4]
 800b74e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b750:	2b00      	cmp	r3, #0
 800b752:	d007      	beq.n	800b764 <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 800b754:	687b      	ldr	r3, [r7, #4]
 800b756:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b758:	4618      	mov	r0, r3
 800b75a:	f7ff fc3d 	bl	800afd8 <tcp_segs_free>
    pcb->ooseq = NULL;
 800b75e:	687b      	ldr	r3, [r7, #4]
 800b760:	2200      	movs	r2, #0
 800b762:	675a      	str	r2, [r3, #116]	@ 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 800b764:	bf00      	nop
 800b766:	3708      	adds	r7, #8
 800b768:	46bd      	mov	sp, r7
 800b76a:	bd80      	pop	{r7, pc}

0800b76c <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 800b76c:	b590      	push	{r4, r7, lr}
 800b76e:	b08d      	sub	sp, #52	@ 0x34
 800b770:	af04      	add	r7, sp, #16
 800b772:	6078      	str	r0, [r7, #4]
 800b774:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 800b776:	687b      	ldr	r3, [r7, #4]
 800b778:	2b00      	cmp	r3, #0
 800b77a:	d105      	bne.n	800b788 <tcp_input+0x1c>
 800b77c:	4b9b      	ldr	r3, [pc, #620]	@ (800b9ec <tcp_input+0x280>)
 800b77e:	2283      	movs	r2, #131	@ 0x83
 800b780:	499b      	ldr	r1, [pc, #620]	@ (800b9f0 <tcp_input+0x284>)
 800b782:	489c      	ldr	r0, [pc, #624]	@ (800b9f4 <tcp_input+0x288>)
 800b784:	f006 fd9a 	bl	80122bc <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 800b788:	687b      	ldr	r3, [r7, #4]
 800b78a:	685b      	ldr	r3, [r3, #4]
 800b78c:	4a9a      	ldr	r2, [pc, #616]	@ (800b9f8 <tcp_input+0x28c>)
 800b78e:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 800b790:	687b      	ldr	r3, [r7, #4]
 800b792:	895b      	ldrh	r3, [r3, #10]
 800b794:	2b13      	cmp	r3, #19
 800b796:	f240 83d1 	bls.w	800bf3c <tcp_input+0x7d0>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800b79a:	4b98      	ldr	r3, [pc, #608]	@ (800b9fc <tcp_input+0x290>)
 800b79c:	695b      	ldr	r3, [r3, #20]
 800b79e:	4a97      	ldr	r2, [pc, #604]	@ (800b9fc <tcp_input+0x290>)
 800b7a0:	6812      	ldr	r2, [r2, #0]
 800b7a2:	4611      	mov	r1, r2
 800b7a4:	4618      	mov	r0, r3
 800b7a6:	f005 fc41 	bl	801102c <ip4_addr_isbroadcast_u32>
 800b7aa:	4603      	mov	r3, r0
 800b7ac:	2b00      	cmp	r3, #0
 800b7ae:	f040 83c7 	bne.w	800bf40 <tcp_input+0x7d4>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 800b7b2:	4b92      	ldr	r3, [pc, #584]	@ (800b9fc <tcp_input+0x290>)
 800b7b4:	695b      	ldr	r3, [r3, #20]
 800b7b6:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800b7ba:	2be0      	cmp	r3, #224	@ 0xe0
 800b7bc:	f000 83c0 	beq.w	800bf40 <tcp_input+0x7d4>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 800b7c0:	4b8d      	ldr	r3, [pc, #564]	@ (800b9f8 <tcp_input+0x28c>)
 800b7c2:	681b      	ldr	r3, [r3, #0]
 800b7c4:	899b      	ldrh	r3, [r3, #12]
 800b7c6:	b29b      	uxth	r3, r3
 800b7c8:	4618      	mov	r0, r3
 800b7ca:	f7fc fda7 	bl	800831c <lwip_htons>
 800b7ce:	4603      	mov	r3, r0
 800b7d0:	0b1b      	lsrs	r3, r3, #12
 800b7d2:	b29b      	uxth	r3, r3
 800b7d4:	b2db      	uxtb	r3, r3
 800b7d6:	009b      	lsls	r3, r3, #2
 800b7d8:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 800b7da:	7cbb      	ldrb	r3, [r7, #18]
 800b7dc:	2b13      	cmp	r3, #19
 800b7de:	f240 83b1 	bls.w	800bf44 <tcp_input+0x7d8>
 800b7e2:	7cbb      	ldrb	r3, [r7, #18]
 800b7e4:	b29a      	uxth	r2, r3
 800b7e6:	687b      	ldr	r3, [r7, #4]
 800b7e8:	891b      	ldrh	r3, [r3, #8]
 800b7ea:	429a      	cmp	r2, r3
 800b7ec:	f200 83aa 	bhi.w	800bf44 <tcp_input+0x7d8>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 800b7f0:	7cbb      	ldrb	r3, [r7, #18]
 800b7f2:	b29b      	uxth	r3, r3
 800b7f4:	3b14      	subs	r3, #20
 800b7f6:	b29a      	uxth	r2, r3
 800b7f8:	4b81      	ldr	r3, [pc, #516]	@ (800ba00 <tcp_input+0x294>)
 800b7fa:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 800b7fc:	4b81      	ldr	r3, [pc, #516]	@ (800ba04 <tcp_input+0x298>)
 800b7fe:	2200      	movs	r2, #0
 800b800:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 800b802:	687b      	ldr	r3, [r7, #4]
 800b804:	895a      	ldrh	r2, [r3, #10]
 800b806:	7cbb      	ldrb	r3, [r7, #18]
 800b808:	b29b      	uxth	r3, r3
 800b80a:	429a      	cmp	r2, r3
 800b80c:	d309      	bcc.n	800b822 <tcp_input+0xb6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 800b80e:	4b7c      	ldr	r3, [pc, #496]	@ (800ba00 <tcp_input+0x294>)
 800b810:	881a      	ldrh	r2, [r3, #0]
 800b812:	4b7d      	ldr	r3, [pc, #500]	@ (800ba08 <tcp_input+0x29c>)
 800b814:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 800b816:	7cbb      	ldrb	r3, [r7, #18]
 800b818:	4619      	mov	r1, r3
 800b81a:	6878      	ldr	r0, [r7, #4]
 800b81c:	f7fe f8ea 	bl	80099f4 <pbuf_remove_header>
 800b820:	e04e      	b.n	800b8c0 <tcp_input+0x154>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 800b822:	687b      	ldr	r3, [r7, #4]
 800b824:	681b      	ldr	r3, [r3, #0]
 800b826:	2b00      	cmp	r3, #0
 800b828:	d105      	bne.n	800b836 <tcp_input+0xca>
 800b82a:	4b70      	ldr	r3, [pc, #448]	@ (800b9ec <tcp_input+0x280>)
 800b82c:	22c2      	movs	r2, #194	@ 0xc2
 800b82e:	4977      	ldr	r1, [pc, #476]	@ (800ba0c <tcp_input+0x2a0>)
 800b830:	4870      	ldr	r0, [pc, #448]	@ (800b9f4 <tcp_input+0x288>)
 800b832:	f006 fd43 	bl	80122bc <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 800b836:	2114      	movs	r1, #20
 800b838:	6878      	ldr	r0, [r7, #4]
 800b83a:	f7fe f8db 	bl	80099f4 <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 800b83e:	687b      	ldr	r3, [r7, #4]
 800b840:	895a      	ldrh	r2, [r3, #10]
 800b842:	4b71      	ldr	r3, [pc, #452]	@ (800ba08 <tcp_input+0x29c>)
 800b844:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 800b846:	4b6e      	ldr	r3, [pc, #440]	@ (800ba00 <tcp_input+0x294>)
 800b848:	881a      	ldrh	r2, [r3, #0]
 800b84a:	4b6f      	ldr	r3, [pc, #444]	@ (800ba08 <tcp_input+0x29c>)
 800b84c:	881b      	ldrh	r3, [r3, #0]
 800b84e:	1ad3      	subs	r3, r2, r3
 800b850:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 800b852:	4b6d      	ldr	r3, [pc, #436]	@ (800ba08 <tcp_input+0x29c>)
 800b854:	881b      	ldrh	r3, [r3, #0]
 800b856:	4619      	mov	r1, r3
 800b858:	6878      	ldr	r0, [r7, #4]
 800b85a:	f7fe f8cb 	bl	80099f4 <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 800b85e:	687b      	ldr	r3, [r7, #4]
 800b860:	681b      	ldr	r3, [r3, #0]
 800b862:	895b      	ldrh	r3, [r3, #10]
 800b864:	8a3a      	ldrh	r2, [r7, #16]
 800b866:	429a      	cmp	r2, r3
 800b868:	f200 836e 	bhi.w	800bf48 <tcp_input+0x7dc>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 800b86c:	687b      	ldr	r3, [r7, #4]
 800b86e:	681b      	ldr	r3, [r3, #0]
 800b870:	685b      	ldr	r3, [r3, #4]
 800b872:	4a64      	ldr	r2, [pc, #400]	@ (800ba04 <tcp_input+0x298>)
 800b874:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 800b876:	687b      	ldr	r3, [r7, #4]
 800b878:	681b      	ldr	r3, [r3, #0]
 800b87a:	8a3a      	ldrh	r2, [r7, #16]
 800b87c:	4611      	mov	r1, r2
 800b87e:	4618      	mov	r0, r3
 800b880:	f7fe f8b8 	bl	80099f4 <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 800b884:	687b      	ldr	r3, [r7, #4]
 800b886:	891a      	ldrh	r2, [r3, #8]
 800b888:	8a3b      	ldrh	r3, [r7, #16]
 800b88a:	1ad3      	subs	r3, r2, r3
 800b88c:	b29a      	uxth	r2, r3
 800b88e:	687b      	ldr	r3, [r7, #4]
 800b890:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 800b892:	687b      	ldr	r3, [r7, #4]
 800b894:	895b      	ldrh	r3, [r3, #10]
 800b896:	2b00      	cmp	r3, #0
 800b898:	d005      	beq.n	800b8a6 <tcp_input+0x13a>
 800b89a:	4b54      	ldr	r3, [pc, #336]	@ (800b9ec <tcp_input+0x280>)
 800b89c:	22df      	movs	r2, #223	@ 0xdf
 800b89e:	495c      	ldr	r1, [pc, #368]	@ (800ba10 <tcp_input+0x2a4>)
 800b8a0:	4854      	ldr	r0, [pc, #336]	@ (800b9f4 <tcp_input+0x288>)
 800b8a2:	f006 fd0b 	bl	80122bc <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 800b8a6:	687b      	ldr	r3, [r7, #4]
 800b8a8:	891a      	ldrh	r2, [r3, #8]
 800b8aa:	687b      	ldr	r3, [r7, #4]
 800b8ac:	681b      	ldr	r3, [r3, #0]
 800b8ae:	891b      	ldrh	r3, [r3, #8]
 800b8b0:	429a      	cmp	r2, r3
 800b8b2:	d005      	beq.n	800b8c0 <tcp_input+0x154>
 800b8b4:	4b4d      	ldr	r3, [pc, #308]	@ (800b9ec <tcp_input+0x280>)
 800b8b6:	22e0      	movs	r2, #224	@ 0xe0
 800b8b8:	4956      	ldr	r1, [pc, #344]	@ (800ba14 <tcp_input+0x2a8>)
 800b8ba:	484e      	ldr	r0, [pc, #312]	@ (800b9f4 <tcp_input+0x288>)
 800b8bc:	f006 fcfe 	bl	80122bc <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 800b8c0:	4b4d      	ldr	r3, [pc, #308]	@ (800b9f8 <tcp_input+0x28c>)
 800b8c2:	681b      	ldr	r3, [r3, #0]
 800b8c4:	881b      	ldrh	r3, [r3, #0]
 800b8c6:	b29b      	uxth	r3, r3
 800b8c8:	4a4b      	ldr	r2, [pc, #300]	@ (800b9f8 <tcp_input+0x28c>)
 800b8ca:	6814      	ldr	r4, [r2, #0]
 800b8cc:	4618      	mov	r0, r3
 800b8ce:	f7fc fd25 	bl	800831c <lwip_htons>
 800b8d2:	4603      	mov	r3, r0
 800b8d4:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 800b8d6:	4b48      	ldr	r3, [pc, #288]	@ (800b9f8 <tcp_input+0x28c>)
 800b8d8:	681b      	ldr	r3, [r3, #0]
 800b8da:	885b      	ldrh	r3, [r3, #2]
 800b8dc:	b29b      	uxth	r3, r3
 800b8de:	4a46      	ldr	r2, [pc, #280]	@ (800b9f8 <tcp_input+0x28c>)
 800b8e0:	6814      	ldr	r4, [r2, #0]
 800b8e2:	4618      	mov	r0, r3
 800b8e4:	f7fc fd1a 	bl	800831c <lwip_htons>
 800b8e8:	4603      	mov	r3, r0
 800b8ea:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 800b8ec:	4b42      	ldr	r3, [pc, #264]	@ (800b9f8 <tcp_input+0x28c>)
 800b8ee:	681b      	ldr	r3, [r3, #0]
 800b8f0:	685b      	ldr	r3, [r3, #4]
 800b8f2:	4a41      	ldr	r2, [pc, #260]	@ (800b9f8 <tcp_input+0x28c>)
 800b8f4:	6814      	ldr	r4, [r2, #0]
 800b8f6:	4618      	mov	r0, r3
 800b8f8:	f7fc fd25 	bl	8008346 <lwip_htonl>
 800b8fc:	4603      	mov	r3, r0
 800b8fe:	6063      	str	r3, [r4, #4]
 800b900:	6863      	ldr	r3, [r4, #4]
 800b902:	4a45      	ldr	r2, [pc, #276]	@ (800ba18 <tcp_input+0x2ac>)
 800b904:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 800b906:	4b3c      	ldr	r3, [pc, #240]	@ (800b9f8 <tcp_input+0x28c>)
 800b908:	681b      	ldr	r3, [r3, #0]
 800b90a:	689b      	ldr	r3, [r3, #8]
 800b90c:	4a3a      	ldr	r2, [pc, #232]	@ (800b9f8 <tcp_input+0x28c>)
 800b90e:	6814      	ldr	r4, [r2, #0]
 800b910:	4618      	mov	r0, r3
 800b912:	f7fc fd18 	bl	8008346 <lwip_htonl>
 800b916:	4603      	mov	r3, r0
 800b918:	60a3      	str	r3, [r4, #8]
 800b91a:	68a3      	ldr	r3, [r4, #8]
 800b91c:	4a3f      	ldr	r2, [pc, #252]	@ (800ba1c <tcp_input+0x2b0>)
 800b91e:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 800b920:	4b35      	ldr	r3, [pc, #212]	@ (800b9f8 <tcp_input+0x28c>)
 800b922:	681b      	ldr	r3, [r3, #0]
 800b924:	89db      	ldrh	r3, [r3, #14]
 800b926:	b29b      	uxth	r3, r3
 800b928:	4a33      	ldr	r2, [pc, #204]	@ (800b9f8 <tcp_input+0x28c>)
 800b92a:	6814      	ldr	r4, [r2, #0]
 800b92c:	4618      	mov	r0, r3
 800b92e:	f7fc fcf5 	bl	800831c <lwip_htons>
 800b932:	4603      	mov	r3, r0
 800b934:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 800b936:	4b30      	ldr	r3, [pc, #192]	@ (800b9f8 <tcp_input+0x28c>)
 800b938:	681b      	ldr	r3, [r3, #0]
 800b93a:	899b      	ldrh	r3, [r3, #12]
 800b93c:	b29b      	uxth	r3, r3
 800b93e:	4618      	mov	r0, r3
 800b940:	f7fc fcec 	bl	800831c <lwip_htons>
 800b944:	4603      	mov	r3, r0
 800b946:	b2db      	uxtb	r3, r3
 800b948:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800b94c:	b2da      	uxtb	r2, r3
 800b94e:	4b34      	ldr	r3, [pc, #208]	@ (800ba20 <tcp_input+0x2b4>)
 800b950:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 800b952:	687b      	ldr	r3, [r7, #4]
 800b954:	891a      	ldrh	r2, [r3, #8]
 800b956:	4b33      	ldr	r3, [pc, #204]	@ (800ba24 <tcp_input+0x2b8>)
 800b958:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 800b95a:	4b31      	ldr	r3, [pc, #196]	@ (800ba20 <tcp_input+0x2b4>)
 800b95c:	781b      	ldrb	r3, [r3, #0]
 800b95e:	f003 0303 	and.w	r3, r3, #3
 800b962:	2b00      	cmp	r3, #0
 800b964:	d00c      	beq.n	800b980 <tcp_input+0x214>
    tcplen++;
 800b966:	4b2f      	ldr	r3, [pc, #188]	@ (800ba24 <tcp_input+0x2b8>)
 800b968:	881b      	ldrh	r3, [r3, #0]
 800b96a:	3301      	adds	r3, #1
 800b96c:	b29a      	uxth	r2, r3
 800b96e:	4b2d      	ldr	r3, [pc, #180]	@ (800ba24 <tcp_input+0x2b8>)
 800b970:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 800b972:	687b      	ldr	r3, [r7, #4]
 800b974:	891a      	ldrh	r2, [r3, #8]
 800b976:	4b2b      	ldr	r3, [pc, #172]	@ (800ba24 <tcp_input+0x2b8>)
 800b978:	881b      	ldrh	r3, [r3, #0]
 800b97a:	429a      	cmp	r2, r3
 800b97c:	f200 82e6 	bhi.w	800bf4c <tcp_input+0x7e0>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 800b980:	2300      	movs	r3, #0
 800b982:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800b984:	4b28      	ldr	r3, [pc, #160]	@ (800ba28 <tcp_input+0x2bc>)
 800b986:	681b      	ldr	r3, [r3, #0]
 800b988:	61fb      	str	r3, [r7, #28]
 800b98a:	e09d      	b.n	800bac8 <tcp_input+0x35c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 800b98c:	69fb      	ldr	r3, [r7, #28]
 800b98e:	7d1b      	ldrb	r3, [r3, #20]
 800b990:	2b00      	cmp	r3, #0
 800b992:	d105      	bne.n	800b9a0 <tcp_input+0x234>
 800b994:	4b15      	ldr	r3, [pc, #84]	@ (800b9ec <tcp_input+0x280>)
 800b996:	22fb      	movs	r2, #251	@ 0xfb
 800b998:	4924      	ldr	r1, [pc, #144]	@ (800ba2c <tcp_input+0x2c0>)
 800b99a:	4816      	ldr	r0, [pc, #88]	@ (800b9f4 <tcp_input+0x288>)
 800b99c:	f006 fc8e 	bl	80122bc <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 800b9a0:	69fb      	ldr	r3, [r7, #28]
 800b9a2:	7d1b      	ldrb	r3, [r3, #20]
 800b9a4:	2b0a      	cmp	r3, #10
 800b9a6:	d105      	bne.n	800b9b4 <tcp_input+0x248>
 800b9a8:	4b10      	ldr	r3, [pc, #64]	@ (800b9ec <tcp_input+0x280>)
 800b9aa:	22fc      	movs	r2, #252	@ 0xfc
 800b9ac:	4920      	ldr	r1, [pc, #128]	@ (800ba30 <tcp_input+0x2c4>)
 800b9ae:	4811      	ldr	r0, [pc, #68]	@ (800b9f4 <tcp_input+0x288>)
 800b9b0:	f006 fc84 	bl	80122bc <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 800b9b4:	69fb      	ldr	r3, [r7, #28]
 800b9b6:	7d1b      	ldrb	r3, [r3, #20]
 800b9b8:	2b01      	cmp	r3, #1
 800b9ba:	d105      	bne.n	800b9c8 <tcp_input+0x25c>
 800b9bc:	4b0b      	ldr	r3, [pc, #44]	@ (800b9ec <tcp_input+0x280>)
 800b9be:	22fd      	movs	r2, #253	@ 0xfd
 800b9c0:	491c      	ldr	r1, [pc, #112]	@ (800ba34 <tcp_input+0x2c8>)
 800b9c2:	480c      	ldr	r0, [pc, #48]	@ (800b9f4 <tcp_input+0x288>)
 800b9c4:	f006 fc7a 	bl	80122bc <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800b9c8:	69fb      	ldr	r3, [r7, #28]
 800b9ca:	7a1b      	ldrb	r3, [r3, #8]
 800b9cc:	2b00      	cmp	r3, #0
 800b9ce:	d033      	beq.n	800ba38 <tcp_input+0x2cc>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800b9d0:	69fb      	ldr	r3, [r7, #28]
 800b9d2:	7a1a      	ldrb	r2, [r3, #8]
 800b9d4:	4b09      	ldr	r3, [pc, #36]	@ (800b9fc <tcp_input+0x290>)
 800b9d6:	685b      	ldr	r3, [r3, #4]
 800b9d8:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800b9dc:	3301      	adds	r3, #1
 800b9de:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800b9e0:	429a      	cmp	r2, r3
 800b9e2:	d029      	beq.n	800ba38 <tcp_input+0x2cc>
      prev = pcb;
 800b9e4:	69fb      	ldr	r3, [r7, #28]
 800b9e6:	61bb      	str	r3, [r7, #24]
      continue;
 800b9e8:	e06b      	b.n	800bac2 <tcp_input+0x356>
 800b9ea:	bf00      	nop
 800b9ec:	080144f8 	.word	0x080144f8
 800b9f0:	0801452c 	.word	0x0801452c
 800b9f4:	08014544 	.word	0x08014544
 800b9f8:	20010124 	.word	0x20010124
 800b9fc:	2000a7e8 	.word	0x2000a7e8
 800ba00:	20010128 	.word	0x20010128
 800ba04:	2001012c 	.word	0x2001012c
 800ba08:	2001012a 	.word	0x2001012a
 800ba0c:	0801456c 	.word	0x0801456c
 800ba10:	0801457c 	.word	0x0801457c
 800ba14:	08014588 	.word	0x08014588
 800ba18:	20010134 	.word	0x20010134
 800ba1c:	20010138 	.word	0x20010138
 800ba20:	20010140 	.word	0x20010140
 800ba24:	2001013e 	.word	0x2001013e
 800ba28:	20010108 	.word	0x20010108
 800ba2c:	080145a8 	.word	0x080145a8
 800ba30:	080145d0 	.word	0x080145d0
 800ba34:	080145fc 	.word	0x080145fc
    }

    if (pcb->remote_port == tcphdr->src &&
 800ba38:	69fb      	ldr	r3, [r7, #28]
 800ba3a:	8b1a      	ldrh	r2, [r3, #24]
 800ba3c:	4b72      	ldr	r3, [pc, #456]	@ (800bc08 <tcp_input+0x49c>)
 800ba3e:	681b      	ldr	r3, [r3, #0]
 800ba40:	881b      	ldrh	r3, [r3, #0]
 800ba42:	b29b      	uxth	r3, r3
 800ba44:	429a      	cmp	r2, r3
 800ba46:	d13a      	bne.n	800babe <tcp_input+0x352>
        pcb->local_port == tcphdr->dest &&
 800ba48:	69fb      	ldr	r3, [r7, #28]
 800ba4a:	8ada      	ldrh	r2, [r3, #22]
 800ba4c:	4b6e      	ldr	r3, [pc, #440]	@ (800bc08 <tcp_input+0x49c>)
 800ba4e:	681b      	ldr	r3, [r3, #0]
 800ba50:	885b      	ldrh	r3, [r3, #2]
 800ba52:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 800ba54:	429a      	cmp	r2, r3
 800ba56:	d132      	bne.n	800babe <tcp_input+0x352>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800ba58:	69fb      	ldr	r3, [r7, #28]
 800ba5a:	685a      	ldr	r2, [r3, #4]
 800ba5c:	4b6b      	ldr	r3, [pc, #428]	@ (800bc0c <tcp_input+0x4a0>)
 800ba5e:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 800ba60:	429a      	cmp	r2, r3
 800ba62:	d12c      	bne.n	800babe <tcp_input+0x352>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800ba64:	69fb      	ldr	r3, [r7, #28]
 800ba66:	681a      	ldr	r2, [r3, #0]
 800ba68:	4b68      	ldr	r3, [pc, #416]	@ (800bc0c <tcp_input+0x4a0>)
 800ba6a:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800ba6c:	429a      	cmp	r2, r3
 800ba6e:	d126      	bne.n	800babe <tcp_input+0x352>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 800ba70:	69fb      	ldr	r3, [r7, #28]
 800ba72:	68db      	ldr	r3, [r3, #12]
 800ba74:	69fa      	ldr	r2, [r7, #28]
 800ba76:	429a      	cmp	r2, r3
 800ba78:	d106      	bne.n	800ba88 <tcp_input+0x31c>
 800ba7a:	4b65      	ldr	r3, [pc, #404]	@ (800bc10 <tcp_input+0x4a4>)
 800ba7c:	f240 120d 	movw	r2, #269	@ 0x10d
 800ba80:	4964      	ldr	r1, [pc, #400]	@ (800bc14 <tcp_input+0x4a8>)
 800ba82:	4865      	ldr	r0, [pc, #404]	@ (800bc18 <tcp_input+0x4ac>)
 800ba84:	f006 fc1a 	bl	80122bc <iprintf>
      if (prev != NULL) {
 800ba88:	69bb      	ldr	r3, [r7, #24]
 800ba8a:	2b00      	cmp	r3, #0
 800ba8c:	d00a      	beq.n	800baa4 <tcp_input+0x338>
        prev->next = pcb->next;
 800ba8e:	69fb      	ldr	r3, [r7, #28]
 800ba90:	68da      	ldr	r2, [r3, #12]
 800ba92:	69bb      	ldr	r3, [r7, #24]
 800ba94:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 800ba96:	4b61      	ldr	r3, [pc, #388]	@ (800bc1c <tcp_input+0x4b0>)
 800ba98:	681a      	ldr	r2, [r3, #0]
 800ba9a:	69fb      	ldr	r3, [r7, #28]
 800ba9c:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 800ba9e:	4a5f      	ldr	r2, [pc, #380]	@ (800bc1c <tcp_input+0x4b0>)
 800baa0:	69fb      	ldr	r3, [r7, #28]
 800baa2:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 800baa4:	69fb      	ldr	r3, [r7, #28]
 800baa6:	68db      	ldr	r3, [r3, #12]
 800baa8:	69fa      	ldr	r2, [r7, #28]
 800baaa:	429a      	cmp	r2, r3
 800baac:	d111      	bne.n	800bad2 <tcp_input+0x366>
 800baae:	4b58      	ldr	r3, [pc, #352]	@ (800bc10 <tcp_input+0x4a4>)
 800bab0:	f240 1215 	movw	r2, #277	@ 0x115
 800bab4:	495a      	ldr	r1, [pc, #360]	@ (800bc20 <tcp_input+0x4b4>)
 800bab6:	4858      	ldr	r0, [pc, #352]	@ (800bc18 <tcp_input+0x4ac>)
 800bab8:	f006 fc00 	bl	80122bc <iprintf>
      break;
 800babc:	e009      	b.n	800bad2 <tcp_input+0x366>
    }
    prev = pcb;
 800babe:	69fb      	ldr	r3, [r7, #28]
 800bac0:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800bac2:	69fb      	ldr	r3, [r7, #28]
 800bac4:	68db      	ldr	r3, [r3, #12]
 800bac6:	61fb      	str	r3, [r7, #28]
 800bac8:	69fb      	ldr	r3, [r7, #28]
 800baca:	2b00      	cmp	r3, #0
 800bacc:	f47f af5e 	bne.w	800b98c <tcp_input+0x220>
 800bad0:	e000      	b.n	800bad4 <tcp_input+0x368>
      break;
 800bad2:	bf00      	nop
  }

  if (pcb == NULL) {
 800bad4:	69fb      	ldr	r3, [r7, #28]
 800bad6:	2b00      	cmp	r3, #0
 800bad8:	f040 80aa 	bne.w	800bc30 <tcp_input+0x4c4>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800badc:	4b51      	ldr	r3, [pc, #324]	@ (800bc24 <tcp_input+0x4b8>)
 800bade:	681b      	ldr	r3, [r3, #0]
 800bae0:	61fb      	str	r3, [r7, #28]
 800bae2:	e03f      	b.n	800bb64 <tcp_input+0x3f8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800bae4:	69fb      	ldr	r3, [r7, #28]
 800bae6:	7d1b      	ldrb	r3, [r3, #20]
 800bae8:	2b0a      	cmp	r3, #10
 800baea:	d006      	beq.n	800bafa <tcp_input+0x38e>
 800baec:	4b48      	ldr	r3, [pc, #288]	@ (800bc10 <tcp_input+0x4a4>)
 800baee:	f240 121f 	movw	r2, #287	@ 0x11f
 800baf2:	494d      	ldr	r1, [pc, #308]	@ (800bc28 <tcp_input+0x4bc>)
 800baf4:	4848      	ldr	r0, [pc, #288]	@ (800bc18 <tcp_input+0x4ac>)
 800baf6:	f006 fbe1 	bl	80122bc <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800bafa:	69fb      	ldr	r3, [r7, #28]
 800bafc:	7a1b      	ldrb	r3, [r3, #8]
 800bafe:	2b00      	cmp	r3, #0
 800bb00:	d009      	beq.n	800bb16 <tcp_input+0x3aa>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800bb02:	69fb      	ldr	r3, [r7, #28]
 800bb04:	7a1a      	ldrb	r2, [r3, #8]
 800bb06:	4b41      	ldr	r3, [pc, #260]	@ (800bc0c <tcp_input+0x4a0>)
 800bb08:	685b      	ldr	r3, [r3, #4]
 800bb0a:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800bb0e:	3301      	adds	r3, #1
 800bb10:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800bb12:	429a      	cmp	r2, r3
 800bb14:	d122      	bne.n	800bb5c <tcp_input+0x3f0>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 800bb16:	69fb      	ldr	r3, [r7, #28]
 800bb18:	8b1a      	ldrh	r2, [r3, #24]
 800bb1a:	4b3b      	ldr	r3, [pc, #236]	@ (800bc08 <tcp_input+0x49c>)
 800bb1c:	681b      	ldr	r3, [r3, #0]
 800bb1e:	881b      	ldrh	r3, [r3, #0]
 800bb20:	b29b      	uxth	r3, r3
 800bb22:	429a      	cmp	r2, r3
 800bb24:	d11b      	bne.n	800bb5e <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
 800bb26:	69fb      	ldr	r3, [r7, #28]
 800bb28:	8ada      	ldrh	r2, [r3, #22]
 800bb2a:	4b37      	ldr	r3, [pc, #220]	@ (800bc08 <tcp_input+0x49c>)
 800bb2c:	681b      	ldr	r3, [r3, #0]
 800bb2e:	885b      	ldrh	r3, [r3, #2]
 800bb30:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 800bb32:	429a      	cmp	r2, r3
 800bb34:	d113      	bne.n	800bb5e <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800bb36:	69fb      	ldr	r3, [r7, #28]
 800bb38:	685a      	ldr	r2, [r3, #4]
 800bb3a:	4b34      	ldr	r3, [pc, #208]	@ (800bc0c <tcp_input+0x4a0>)
 800bb3c:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 800bb3e:	429a      	cmp	r2, r3
 800bb40:	d10d      	bne.n	800bb5e <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800bb42:	69fb      	ldr	r3, [r7, #28]
 800bb44:	681a      	ldr	r2, [r3, #0]
 800bb46:	4b31      	ldr	r3, [pc, #196]	@ (800bc0c <tcp_input+0x4a0>)
 800bb48:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800bb4a:	429a      	cmp	r2, r3
 800bb4c:	d107      	bne.n	800bb5e <tcp_input+0x3f2>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 800bb4e:	69f8      	ldr	r0, [r7, #28]
 800bb50:	f000 fb56 	bl	800c200 <tcp_timewait_input>
        }
        pbuf_free(p);
 800bb54:	6878      	ldr	r0, [r7, #4]
 800bb56:	f7fd ffd3 	bl	8009b00 <pbuf_free>
        return;
 800bb5a:	e1fd      	b.n	800bf58 <tcp_input+0x7ec>
        continue;
 800bb5c:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800bb5e:	69fb      	ldr	r3, [r7, #28]
 800bb60:	68db      	ldr	r3, [r3, #12]
 800bb62:	61fb      	str	r3, [r7, #28]
 800bb64:	69fb      	ldr	r3, [r7, #28]
 800bb66:	2b00      	cmp	r3, #0
 800bb68:	d1bc      	bne.n	800bae4 <tcp_input+0x378>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 800bb6a:	2300      	movs	r3, #0
 800bb6c:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800bb6e:	4b2f      	ldr	r3, [pc, #188]	@ (800bc2c <tcp_input+0x4c0>)
 800bb70:	681b      	ldr	r3, [r3, #0]
 800bb72:	617b      	str	r3, [r7, #20]
 800bb74:	e02a      	b.n	800bbcc <tcp_input+0x460>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800bb76:	697b      	ldr	r3, [r7, #20]
 800bb78:	7a1b      	ldrb	r3, [r3, #8]
 800bb7a:	2b00      	cmp	r3, #0
 800bb7c:	d00c      	beq.n	800bb98 <tcp_input+0x42c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800bb7e:	697b      	ldr	r3, [r7, #20]
 800bb80:	7a1a      	ldrb	r2, [r3, #8]
 800bb82:	4b22      	ldr	r3, [pc, #136]	@ (800bc0c <tcp_input+0x4a0>)
 800bb84:	685b      	ldr	r3, [r3, #4]
 800bb86:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800bb8a:	3301      	adds	r3, #1
 800bb8c:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800bb8e:	429a      	cmp	r2, r3
 800bb90:	d002      	beq.n	800bb98 <tcp_input+0x42c>
        prev = (struct tcp_pcb *)lpcb;
 800bb92:	697b      	ldr	r3, [r7, #20]
 800bb94:	61bb      	str	r3, [r7, #24]
        continue;
 800bb96:	e016      	b.n	800bbc6 <tcp_input+0x45a>
      }

      if (lpcb->local_port == tcphdr->dest) {
 800bb98:	697b      	ldr	r3, [r7, #20]
 800bb9a:	8ada      	ldrh	r2, [r3, #22]
 800bb9c:	4b1a      	ldr	r3, [pc, #104]	@ (800bc08 <tcp_input+0x49c>)
 800bb9e:	681b      	ldr	r3, [r3, #0]
 800bba0:	885b      	ldrh	r3, [r3, #2]
 800bba2:	b29b      	uxth	r3, r3
 800bba4:	429a      	cmp	r2, r3
 800bba6:	d10c      	bne.n	800bbc2 <tcp_input+0x456>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 800bba8:	697b      	ldr	r3, [r7, #20]
 800bbaa:	681a      	ldr	r2, [r3, #0]
 800bbac:	4b17      	ldr	r3, [pc, #92]	@ (800bc0c <tcp_input+0x4a0>)
 800bbae:	695b      	ldr	r3, [r3, #20]
 800bbb0:	429a      	cmp	r2, r3
 800bbb2:	d00f      	beq.n	800bbd4 <tcp_input+0x468>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 800bbb4:	697b      	ldr	r3, [r7, #20]
 800bbb6:	2b00      	cmp	r3, #0
 800bbb8:	d00d      	beq.n	800bbd6 <tcp_input+0x46a>
 800bbba:	697b      	ldr	r3, [r7, #20]
 800bbbc:	681b      	ldr	r3, [r3, #0]
 800bbbe:	2b00      	cmp	r3, #0
 800bbc0:	d009      	beq.n	800bbd6 <tcp_input+0x46a>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 800bbc2:	697b      	ldr	r3, [r7, #20]
 800bbc4:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800bbc6:	697b      	ldr	r3, [r7, #20]
 800bbc8:	68db      	ldr	r3, [r3, #12]
 800bbca:	617b      	str	r3, [r7, #20]
 800bbcc:	697b      	ldr	r3, [r7, #20]
 800bbce:	2b00      	cmp	r3, #0
 800bbd0:	d1d1      	bne.n	800bb76 <tcp_input+0x40a>
 800bbd2:	e000      	b.n	800bbd6 <tcp_input+0x46a>
            break;
 800bbd4:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 800bbd6:	697b      	ldr	r3, [r7, #20]
 800bbd8:	2b00      	cmp	r3, #0
 800bbda:	d029      	beq.n	800bc30 <tcp_input+0x4c4>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 800bbdc:	69bb      	ldr	r3, [r7, #24]
 800bbde:	2b00      	cmp	r3, #0
 800bbe0:	d00a      	beq.n	800bbf8 <tcp_input+0x48c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 800bbe2:	697b      	ldr	r3, [r7, #20]
 800bbe4:	68da      	ldr	r2, [r3, #12]
 800bbe6:	69bb      	ldr	r3, [r7, #24]
 800bbe8:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 800bbea:	4b10      	ldr	r3, [pc, #64]	@ (800bc2c <tcp_input+0x4c0>)
 800bbec:	681a      	ldr	r2, [r3, #0]
 800bbee:	697b      	ldr	r3, [r7, #20]
 800bbf0:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 800bbf2:	4a0e      	ldr	r2, [pc, #56]	@ (800bc2c <tcp_input+0x4c0>)
 800bbf4:	697b      	ldr	r3, [r7, #20]
 800bbf6:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 800bbf8:	6978      	ldr	r0, [r7, #20]
 800bbfa:	f000 fa03 	bl	800c004 <tcp_listen_input>
      }
      pbuf_free(p);
 800bbfe:	6878      	ldr	r0, [r7, #4]
 800bc00:	f7fd ff7e 	bl	8009b00 <pbuf_free>
      return;
 800bc04:	e1a8      	b.n	800bf58 <tcp_input+0x7ec>
 800bc06:	bf00      	nop
 800bc08:	20010124 	.word	0x20010124
 800bc0c:	2000a7e8 	.word	0x2000a7e8
 800bc10:	080144f8 	.word	0x080144f8
 800bc14:	08014624 	.word	0x08014624
 800bc18:	08014544 	.word	0x08014544
 800bc1c:	20010108 	.word	0x20010108
 800bc20:	08014650 	.word	0x08014650
 800bc24:	2001010c 	.word	0x2001010c
 800bc28:	0801467c 	.word	0x0801467c
 800bc2c:	20010104 	.word	0x20010104
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 800bc30:	69fb      	ldr	r3, [r7, #28]
 800bc32:	2b00      	cmp	r3, #0
 800bc34:	f000 8158 	beq.w	800bee8 <tcp_input+0x77c>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 800bc38:	4b95      	ldr	r3, [pc, #596]	@ (800be90 <tcp_input+0x724>)
 800bc3a:	2200      	movs	r2, #0
 800bc3c:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 800bc3e:	687b      	ldr	r3, [r7, #4]
 800bc40:	891a      	ldrh	r2, [r3, #8]
 800bc42:	4b93      	ldr	r3, [pc, #588]	@ (800be90 <tcp_input+0x724>)
 800bc44:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 800bc46:	4a92      	ldr	r2, [pc, #584]	@ (800be90 <tcp_input+0x724>)
 800bc48:	687b      	ldr	r3, [r7, #4]
 800bc4a:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 800bc4c:	4b91      	ldr	r3, [pc, #580]	@ (800be94 <tcp_input+0x728>)
 800bc4e:	681b      	ldr	r3, [r3, #0]
 800bc50:	4a8f      	ldr	r2, [pc, #572]	@ (800be90 <tcp_input+0x724>)
 800bc52:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 800bc54:	4b90      	ldr	r3, [pc, #576]	@ (800be98 <tcp_input+0x72c>)
 800bc56:	2200      	movs	r2, #0
 800bc58:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 800bc5a:	4b90      	ldr	r3, [pc, #576]	@ (800be9c <tcp_input+0x730>)
 800bc5c:	2200      	movs	r2, #0
 800bc5e:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 800bc60:	4b8f      	ldr	r3, [pc, #572]	@ (800bea0 <tcp_input+0x734>)
 800bc62:	2200      	movs	r2, #0
 800bc64:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 800bc66:	4b8f      	ldr	r3, [pc, #572]	@ (800bea4 <tcp_input+0x738>)
 800bc68:	781b      	ldrb	r3, [r3, #0]
 800bc6a:	f003 0308 	and.w	r3, r3, #8
 800bc6e:	2b00      	cmp	r3, #0
 800bc70:	d006      	beq.n	800bc80 <tcp_input+0x514>
      p->flags |= PBUF_FLAG_PUSH;
 800bc72:	687b      	ldr	r3, [r7, #4]
 800bc74:	7b5b      	ldrb	r3, [r3, #13]
 800bc76:	f043 0301 	orr.w	r3, r3, #1
 800bc7a:	b2da      	uxtb	r2, r3
 800bc7c:	687b      	ldr	r3, [r7, #4]
 800bc7e:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 800bc80:	69fb      	ldr	r3, [r7, #28]
 800bc82:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800bc84:	2b00      	cmp	r3, #0
 800bc86:	d017      	beq.n	800bcb8 <tcp_input+0x54c>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800bc88:	69f8      	ldr	r0, [r7, #28]
 800bc8a:	f7ff f929 	bl	800aee0 <tcp_process_refused_data>
 800bc8e:	4603      	mov	r3, r0
 800bc90:	f113 0f0d 	cmn.w	r3, #13
 800bc94:	d007      	beq.n	800bca6 <tcp_input+0x53a>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800bc96:	69fb      	ldr	r3, [r7, #28]
 800bc98:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800bc9a:	2b00      	cmp	r3, #0
 800bc9c:	d00c      	beq.n	800bcb8 <tcp_input+0x54c>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800bc9e:	4b82      	ldr	r3, [pc, #520]	@ (800bea8 <tcp_input+0x73c>)
 800bca0:	881b      	ldrh	r3, [r3, #0]
 800bca2:	2b00      	cmp	r3, #0
 800bca4:	d008      	beq.n	800bcb8 <tcp_input+0x54c>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 800bca6:	69fb      	ldr	r3, [r7, #28]
 800bca8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800bcaa:	2b00      	cmp	r3, #0
 800bcac:	f040 80e3 	bne.w	800be76 <tcp_input+0x70a>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 800bcb0:	69f8      	ldr	r0, [r7, #28]
 800bcb2:	f003 f9a7 	bl	800f004 <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 800bcb6:	e0de      	b.n	800be76 <tcp_input+0x70a>
      }
    }
    tcp_input_pcb = pcb;
 800bcb8:	4a7c      	ldr	r2, [pc, #496]	@ (800beac <tcp_input+0x740>)
 800bcba:	69fb      	ldr	r3, [r7, #28]
 800bcbc:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 800bcbe:	69f8      	ldr	r0, [r7, #28]
 800bcc0:	f000 fb18 	bl	800c2f4 <tcp_process>
 800bcc4:	4603      	mov	r3, r0
 800bcc6:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 800bcc8:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800bccc:	f113 0f0d 	cmn.w	r3, #13
 800bcd0:	f000 80d3 	beq.w	800be7a <tcp_input+0x70e>
      if (recv_flags & TF_RESET) {
 800bcd4:	4b71      	ldr	r3, [pc, #452]	@ (800be9c <tcp_input+0x730>)
 800bcd6:	781b      	ldrb	r3, [r3, #0]
 800bcd8:	f003 0308 	and.w	r3, r3, #8
 800bcdc:	2b00      	cmp	r3, #0
 800bcde:	d015      	beq.n	800bd0c <tcp_input+0x5a0>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 800bce0:	69fb      	ldr	r3, [r7, #28]
 800bce2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800bce6:	2b00      	cmp	r3, #0
 800bce8:	d008      	beq.n	800bcfc <tcp_input+0x590>
 800bcea:	69fb      	ldr	r3, [r7, #28]
 800bcec:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800bcf0:	69fa      	ldr	r2, [r7, #28]
 800bcf2:	6912      	ldr	r2, [r2, #16]
 800bcf4:	f06f 010d 	mvn.w	r1, #13
 800bcf8:	4610      	mov	r0, r2
 800bcfa:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800bcfc:	69f9      	ldr	r1, [r7, #28]
 800bcfe:	486c      	ldr	r0, [pc, #432]	@ (800beb0 <tcp_input+0x744>)
 800bd00:	f7ff fbbc 	bl	800b47c <tcp_pcb_remove>
        tcp_free(pcb);
 800bd04:	69f8      	ldr	r0, [r7, #28]
 800bd06:	f7fe f9a7 	bl	800a058 <tcp_free>
 800bd0a:	e0da      	b.n	800bec2 <tcp_input+0x756>
      } else {
        err = ERR_OK;
 800bd0c:	2300      	movs	r3, #0
 800bd0e:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 800bd10:	4b63      	ldr	r3, [pc, #396]	@ (800bea0 <tcp_input+0x734>)
 800bd12:	881b      	ldrh	r3, [r3, #0]
 800bd14:	2b00      	cmp	r3, #0
 800bd16:	d01d      	beq.n	800bd54 <tcp_input+0x5e8>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 800bd18:	4b61      	ldr	r3, [pc, #388]	@ (800bea0 <tcp_input+0x734>)
 800bd1a:	881b      	ldrh	r3, [r3, #0]
 800bd1c:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 800bd1e:	69fb      	ldr	r3, [r7, #28]
 800bd20:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800bd24:	2b00      	cmp	r3, #0
 800bd26:	d00a      	beq.n	800bd3e <tcp_input+0x5d2>
 800bd28:	69fb      	ldr	r3, [r7, #28]
 800bd2a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800bd2e:	69fa      	ldr	r2, [r7, #28]
 800bd30:	6910      	ldr	r0, [r2, #16]
 800bd32:	89fa      	ldrh	r2, [r7, #14]
 800bd34:	69f9      	ldr	r1, [r7, #28]
 800bd36:	4798      	blx	r3
 800bd38:	4603      	mov	r3, r0
 800bd3a:	74fb      	strb	r3, [r7, #19]
 800bd3c:	e001      	b.n	800bd42 <tcp_input+0x5d6>
 800bd3e:	2300      	movs	r3, #0
 800bd40:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800bd42:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800bd46:	f113 0f0d 	cmn.w	r3, #13
 800bd4a:	f000 8098 	beq.w	800be7e <tcp_input+0x712>
              goto aborted;
            }
          }
          recv_acked = 0;
 800bd4e:	4b54      	ldr	r3, [pc, #336]	@ (800bea0 <tcp_input+0x734>)
 800bd50:	2200      	movs	r2, #0
 800bd52:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 800bd54:	69f8      	ldr	r0, [r7, #28]
 800bd56:	f000 f915 	bl	800bf84 <tcp_input_delayed_close>
 800bd5a:	4603      	mov	r3, r0
 800bd5c:	2b00      	cmp	r3, #0
 800bd5e:	f040 8090 	bne.w	800be82 <tcp_input+0x716>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 800bd62:	4b4d      	ldr	r3, [pc, #308]	@ (800be98 <tcp_input+0x72c>)
 800bd64:	681b      	ldr	r3, [r3, #0]
 800bd66:	2b00      	cmp	r3, #0
 800bd68:	d041      	beq.n	800bdee <tcp_input+0x682>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 800bd6a:	69fb      	ldr	r3, [r7, #28]
 800bd6c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800bd6e:	2b00      	cmp	r3, #0
 800bd70:	d006      	beq.n	800bd80 <tcp_input+0x614>
 800bd72:	4b50      	ldr	r3, [pc, #320]	@ (800beb4 <tcp_input+0x748>)
 800bd74:	f44f 72f3 	mov.w	r2, #486	@ 0x1e6
 800bd78:	494f      	ldr	r1, [pc, #316]	@ (800beb8 <tcp_input+0x74c>)
 800bd7a:	4850      	ldr	r0, [pc, #320]	@ (800bebc <tcp_input+0x750>)
 800bd7c:	f006 fa9e 	bl	80122bc <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 800bd80:	69fb      	ldr	r3, [r7, #28]
 800bd82:	8b5b      	ldrh	r3, [r3, #26]
 800bd84:	f003 0310 	and.w	r3, r3, #16
 800bd88:	2b00      	cmp	r3, #0
 800bd8a:	d008      	beq.n	800bd9e <tcp_input+0x632>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 800bd8c:	4b42      	ldr	r3, [pc, #264]	@ (800be98 <tcp_input+0x72c>)
 800bd8e:	681b      	ldr	r3, [r3, #0]
 800bd90:	4618      	mov	r0, r3
 800bd92:	f7fd feb5 	bl	8009b00 <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 800bd96:	69f8      	ldr	r0, [r7, #28]
 800bd98:	f7fe fc46 	bl	800a628 <tcp_abort>
            goto aborted;
 800bd9c:	e091      	b.n	800bec2 <tcp_input+0x756>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 800bd9e:	69fb      	ldr	r3, [r7, #28]
 800bda0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800bda4:	2b00      	cmp	r3, #0
 800bda6:	d00c      	beq.n	800bdc2 <tcp_input+0x656>
 800bda8:	69fb      	ldr	r3, [r7, #28]
 800bdaa:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 800bdae:	69fb      	ldr	r3, [r7, #28]
 800bdb0:	6918      	ldr	r0, [r3, #16]
 800bdb2:	4b39      	ldr	r3, [pc, #228]	@ (800be98 <tcp_input+0x72c>)
 800bdb4:	681a      	ldr	r2, [r3, #0]
 800bdb6:	2300      	movs	r3, #0
 800bdb8:	69f9      	ldr	r1, [r7, #28]
 800bdba:	47a0      	blx	r4
 800bdbc:	4603      	mov	r3, r0
 800bdbe:	74fb      	strb	r3, [r7, #19]
 800bdc0:	e008      	b.n	800bdd4 <tcp_input+0x668>
 800bdc2:	4b35      	ldr	r3, [pc, #212]	@ (800be98 <tcp_input+0x72c>)
 800bdc4:	681a      	ldr	r2, [r3, #0]
 800bdc6:	2300      	movs	r3, #0
 800bdc8:	69f9      	ldr	r1, [r7, #28]
 800bdca:	2000      	movs	r0, #0
 800bdcc:	f7ff f95e 	bl	800b08c <tcp_recv_null>
 800bdd0:	4603      	mov	r3, r0
 800bdd2:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 800bdd4:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800bdd8:	f113 0f0d 	cmn.w	r3, #13
 800bddc:	d053      	beq.n	800be86 <tcp_input+0x71a>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 800bdde:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800bde2:	2b00      	cmp	r3, #0
 800bde4:	d003      	beq.n	800bdee <tcp_input+0x682>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 800bde6:	4b2c      	ldr	r3, [pc, #176]	@ (800be98 <tcp_input+0x72c>)
 800bde8:	681a      	ldr	r2, [r3, #0]
 800bdea:	69fb      	ldr	r3, [r7, #28]
 800bdec:	679a      	str	r2, [r3, #120]	@ 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 800bdee:	4b2b      	ldr	r3, [pc, #172]	@ (800be9c <tcp_input+0x730>)
 800bdf0:	781b      	ldrb	r3, [r3, #0]
 800bdf2:	f003 0320 	and.w	r3, r3, #32
 800bdf6:	2b00      	cmp	r3, #0
 800bdf8:	d030      	beq.n	800be5c <tcp_input+0x6f0>
          if (pcb->refused_data != NULL) {
 800bdfa:	69fb      	ldr	r3, [r7, #28]
 800bdfc:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800bdfe:	2b00      	cmp	r3, #0
 800be00:	d009      	beq.n	800be16 <tcp_input+0x6aa>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 800be02:	69fb      	ldr	r3, [r7, #28]
 800be04:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800be06:	7b5a      	ldrb	r2, [r3, #13]
 800be08:	69fb      	ldr	r3, [r7, #28]
 800be0a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800be0c:	f042 0220 	orr.w	r2, r2, #32
 800be10:	b2d2      	uxtb	r2, r2
 800be12:	735a      	strb	r2, [r3, #13]
 800be14:	e022      	b.n	800be5c <tcp_input+0x6f0>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800be16:	69fb      	ldr	r3, [r7, #28]
 800be18:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800be1a:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 800be1e:	d005      	beq.n	800be2c <tcp_input+0x6c0>
              pcb->rcv_wnd++;
 800be20:	69fb      	ldr	r3, [r7, #28]
 800be22:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800be24:	3301      	adds	r3, #1
 800be26:	b29a      	uxth	r2, r3
 800be28:	69fb      	ldr	r3, [r7, #28]
 800be2a:	851a      	strh	r2, [r3, #40]	@ 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 800be2c:	69fb      	ldr	r3, [r7, #28]
 800be2e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800be32:	2b00      	cmp	r3, #0
 800be34:	d00b      	beq.n	800be4e <tcp_input+0x6e2>
 800be36:	69fb      	ldr	r3, [r7, #28]
 800be38:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 800be3c:	69fb      	ldr	r3, [r7, #28]
 800be3e:	6918      	ldr	r0, [r3, #16]
 800be40:	2300      	movs	r3, #0
 800be42:	2200      	movs	r2, #0
 800be44:	69f9      	ldr	r1, [r7, #28]
 800be46:	47a0      	blx	r4
 800be48:	4603      	mov	r3, r0
 800be4a:	74fb      	strb	r3, [r7, #19]
 800be4c:	e001      	b.n	800be52 <tcp_input+0x6e6>
 800be4e:	2300      	movs	r3, #0
 800be50:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800be52:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800be56:	f113 0f0d 	cmn.w	r3, #13
 800be5a:	d016      	beq.n	800be8a <tcp_input+0x71e>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 800be5c:	4b13      	ldr	r3, [pc, #76]	@ (800beac <tcp_input+0x740>)
 800be5e:	2200      	movs	r2, #0
 800be60:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 800be62:	69f8      	ldr	r0, [r7, #28]
 800be64:	f000 f88e 	bl	800bf84 <tcp_input_delayed_close>
 800be68:	4603      	mov	r3, r0
 800be6a:	2b00      	cmp	r3, #0
 800be6c:	d128      	bne.n	800bec0 <tcp_input+0x754>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 800be6e:	69f8      	ldr	r0, [r7, #28]
 800be70:	f002 fac2 	bl	800e3f8 <tcp_output>
 800be74:	e025      	b.n	800bec2 <tcp_input+0x756>
        goto aborted;
 800be76:	bf00      	nop
 800be78:	e023      	b.n	800bec2 <tcp_input+0x756>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 800be7a:	bf00      	nop
 800be7c:	e021      	b.n	800bec2 <tcp_input+0x756>
              goto aborted;
 800be7e:	bf00      	nop
 800be80:	e01f      	b.n	800bec2 <tcp_input+0x756>
          goto aborted;
 800be82:	bf00      	nop
 800be84:	e01d      	b.n	800bec2 <tcp_input+0x756>
            goto aborted;
 800be86:	bf00      	nop
 800be88:	e01b      	b.n	800bec2 <tcp_input+0x756>
              goto aborted;
 800be8a:	bf00      	nop
 800be8c:	e019      	b.n	800bec2 <tcp_input+0x756>
 800be8e:	bf00      	nop
 800be90:	20010114 	.word	0x20010114
 800be94:	20010124 	.word	0x20010124
 800be98:	20010144 	.word	0x20010144
 800be9c:	20010141 	.word	0x20010141
 800bea0:	2001013c 	.word	0x2001013c
 800bea4:	20010140 	.word	0x20010140
 800bea8:	2001013e 	.word	0x2001013e
 800beac:	20010148 	.word	0x20010148
 800beb0:	20010108 	.word	0x20010108
 800beb4:	080144f8 	.word	0x080144f8
 800beb8:	080146ac 	.word	0x080146ac
 800bebc:	08014544 	.word	0x08014544
          goto aborted;
 800bec0:	bf00      	nop
    tcp_input_pcb = NULL;
 800bec2:	4b27      	ldr	r3, [pc, #156]	@ (800bf60 <tcp_input+0x7f4>)
 800bec4:	2200      	movs	r2, #0
 800bec6:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 800bec8:	4b26      	ldr	r3, [pc, #152]	@ (800bf64 <tcp_input+0x7f8>)
 800beca:	2200      	movs	r2, #0
 800becc:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 800bece:	4b26      	ldr	r3, [pc, #152]	@ (800bf68 <tcp_input+0x7fc>)
 800bed0:	685b      	ldr	r3, [r3, #4]
 800bed2:	2b00      	cmp	r3, #0
 800bed4:	d03f      	beq.n	800bf56 <tcp_input+0x7ea>
      pbuf_free(inseg.p);
 800bed6:	4b24      	ldr	r3, [pc, #144]	@ (800bf68 <tcp_input+0x7fc>)
 800bed8:	685b      	ldr	r3, [r3, #4]
 800beda:	4618      	mov	r0, r3
 800bedc:	f7fd fe10 	bl	8009b00 <pbuf_free>
      inseg.p = NULL;
 800bee0:	4b21      	ldr	r3, [pc, #132]	@ (800bf68 <tcp_input+0x7fc>)
 800bee2:	2200      	movs	r2, #0
 800bee4:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 800bee6:	e036      	b.n	800bf56 <tcp_input+0x7ea>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 800bee8:	4b20      	ldr	r3, [pc, #128]	@ (800bf6c <tcp_input+0x800>)
 800beea:	681b      	ldr	r3, [r3, #0]
 800beec:	899b      	ldrh	r3, [r3, #12]
 800beee:	b29b      	uxth	r3, r3
 800bef0:	4618      	mov	r0, r3
 800bef2:	f7fc fa13 	bl	800831c <lwip_htons>
 800bef6:	4603      	mov	r3, r0
 800bef8:	b2db      	uxtb	r3, r3
 800befa:	f003 0304 	and.w	r3, r3, #4
 800befe:	2b00      	cmp	r3, #0
 800bf00:	d118      	bne.n	800bf34 <tcp_input+0x7c8>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800bf02:	4b1b      	ldr	r3, [pc, #108]	@ (800bf70 <tcp_input+0x804>)
 800bf04:	6819      	ldr	r1, [r3, #0]
 800bf06:	4b1b      	ldr	r3, [pc, #108]	@ (800bf74 <tcp_input+0x808>)
 800bf08:	881b      	ldrh	r3, [r3, #0]
 800bf0a:	461a      	mov	r2, r3
 800bf0c:	4b1a      	ldr	r3, [pc, #104]	@ (800bf78 <tcp_input+0x80c>)
 800bf0e:	681b      	ldr	r3, [r3, #0]
 800bf10:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800bf12:	4b16      	ldr	r3, [pc, #88]	@ (800bf6c <tcp_input+0x800>)
 800bf14:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800bf16:	885b      	ldrh	r3, [r3, #2]
 800bf18:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800bf1a:	4a14      	ldr	r2, [pc, #80]	@ (800bf6c <tcp_input+0x800>)
 800bf1c:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800bf1e:	8812      	ldrh	r2, [r2, #0]
 800bf20:	b292      	uxth	r2, r2
 800bf22:	9202      	str	r2, [sp, #8]
 800bf24:	9301      	str	r3, [sp, #4]
 800bf26:	4b15      	ldr	r3, [pc, #84]	@ (800bf7c <tcp_input+0x810>)
 800bf28:	9300      	str	r3, [sp, #0]
 800bf2a:	4b15      	ldr	r3, [pc, #84]	@ (800bf80 <tcp_input+0x814>)
 800bf2c:	4602      	mov	r2, r0
 800bf2e:	2000      	movs	r0, #0
 800bf30:	f003 f816 	bl	800ef60 <tcp_rst>
    pbuf_free(p);
 800bf34:	6878      	ldr	r0, [r7, #4]
 800bf36:	f7fd fde3 	bl	8009b00 <pbuf_free>
  return;
 800bf3a:	e00c      	b.n	800bf56 <tcp_input+0x7ea>
    goto dropped;
 800bf3c:	bf00      	nop
 800bf3e:	e006      	b.n	800bf4e <tcp_input+0x7e2>
    goto dropped;
 800bf40:	bf00      	nop
 800bf42:	e004      	b.n	800bf4e <tcp_input+0x7e2>
    goto dropped;
 800bf44:	bf00      	nop
 800bf46:	e002      	b.n	800bf4e <tcp_input+0x7e2>
      goto dropped;
 800bf48:	bf00      	nop
 800bf4a:	e000      	b.n	800bf4e <tcp_input+0x7e2>
      goto dropped;
 800bf4c:	bf00      	nop
dropped:
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 800bf4e:	6878      	ldr	r0, [r7, #4]
 800bf50:	f7fd fdd6 	bl	8009b00 <pbuf_free>
 800bf54:	e000      	b.n	800bf58 <tcp_input+0x7ec>
  return;
 800bf56:	bf00      	nop
}
 800bf58:	3724      	adds	r7, #36	@ 0x24
 800bf5a:	46bd      	mov	sp, r7
 800bf5c:	bd90      	pop	{r4, r7, pc}
 800bf5e:	bf00      	nop
 800bf60:	20010148 	.word	0x20010148
 800bf64:	20010144 	.word	0x20010144
 800bf68:	20010114 	.word	0x20010114
 800bf6c:	20010124 	.word	0x20010124
 800bf70:	20010138 	.word	0x20010138
 800bf74:	2001013e 	.word	0x2001013e
 800bf78:	20010134 	.word	0x20010134
 800bf7c:	2000a7f8 	.word	0x2000a7f8
 800bf80:	2000a7fc 	.word	0x2000a7fc

0800bf84 <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 800bf84:	b580      	push	{r7, lr}
 800bf86:	b082      	sub	sp, #8
 800bf88:	af00      	add	r7, sp, #0
 800bf8a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 800bf8c:	687b      	ldr	r3, [r7, #4]
 800bf8e:	2b00      	cmp	r3, #0
 800bf90:	d106      	bne.n	800bfa0 <tcp_input_delayed_close+0x1c>
 800bf92:	4b17      	ldr	r3, [pc, #92]	@ (800bff0 <tcp_input_delayed_close+0x6c>)
 800bf94:	f240 225a 	movw	r2, #602	@ 0x25a
 800bf98:	4916      	ldr	r1, [pc, #88]	@ (800bff4 <tcp_input_delayed_close+0x70>)
 800bf9a:	4817      	ldr	r0, [pc, #92]	@ (800bff8 <tcp_input_delayed_close+0x74>)
 800bf9c:	f006 f98e 	bl	80122bc <iprintf>

  if (recv_flags & TF_CLOSED) {
 800bfa0:	4b16      	ldr	r3, [pc, #88]	@ (800bffc <tcp_input_delayed_close+0x78>)
 800bfa2:	781b      	ldrb	r3, [r3, #0]
 800bfa4:	f003 0310 	and.w	r3, r3, #16
 800bfa8:	2b00      	cmp	r3, #0
 800bfaa:	d01c      	beq.n	800bfe6 <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 800bfac:	687b      	ldr	r3, [r7, #4]
 800bfae:	8b5b      	ldrh	r3, [r3, #26]
 800bfb0:	f003 0310 	and.w	r3, r3, #16
 800bfb4:	2b00      	cmp	r3, #0
 800bfb6:	d10d      	bne.n	800bfd4 <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 800bfb8:	687b      	ldr	r3, [r7, #4]
 800bfba:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800bfbe:	2b00      	cmp	r3, #0
 800bfc0:	d008      	beq.n	800bfd4 <tcp_input_delayed_close+0x50>
 800bfc2:	687b      	ldr	r3, [r7, #4]
 800bfc4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800bfc8:	687a      	ldr	r2, [r7, #4]
 800bfca:	6912      	ldr	r2, [r2, #16]
 800bfcc:	f06f 010e 	mvn.w	r1, #14
 800bfd0:	4610      	mov	r0, r2
 800bfd2:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800bfd4:	6879      	ldr	r1, [r7, #4]
 800bfd6:	480a      	ldr	r0, [pc, #40]	@ (800c000 <tcp_input_delayed_close+0x7c>)
 800bfd8:	f7ff fa50 	bl	800b47c <tcp_pcb_remove>
    tcp_free(pcb);
 800bfdc:	6878      	ldr	r0, [r7, #4]
 800bfde:	f7fe f83b 	bl	800a058 <tcp_free>
    return 1;
 800bfe2:	2301      	movs	r3, #1
 800bfe4:	e000      	b.n	800bfe8 <tcp_input_delayed_close+0x64>
  }
  return 0;
 800bfe6:	2300      	movs	r3, #0
}
 800bfe8:	4618      	mov	r0, r3
 800bfea:	3708      	adds	r7, #8
 800bfec:	46bd      	mov	sp, r7
 800bfee:	bd80      	pop	{r7, pc}
 800bff0:	080144f8 	.word	0x080144f8
 800bff4:	080146c8 	.word	0x080146c8
 800bff8:	08014544 	.word	0x08014544
 800bffc:	20010141 	.word	0x20010141
 800c000:	20010108 	.word	0x20010108

0800c004 <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 800c004:	b590      	push	{r4, r7, lr}
 800c006:	b08b      	sub	sp, #44	@ 0x2c
 800c008:	af04      	add	r7, sp, #16
 800c00a:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 800c00c:	4b6f      	ldr	r3, [pc, #444]	@ (800c1cc <tcp_listen_input+0x1c8>)
 800c00e:	781b      	ldrb	r3, [r3, #0]
 800c010:	f003 0304 	and.w	r3, r3, #4
 800c014:	2b00      	cmp	r3, #0
 800c016:	f040 80d2 	bne.w	800c1be <tcp_listen_input+0x1ba>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 800c01a:	687b      	ldr	r3, [r7, #4]
 800c01c:	2b00      	cmp	r3, #0
 800c01e:	d106      	bne.n	800c02e <tcp_listen_input+0x2a>
 800c020:	4b6b      	ldr	r3, [pc, #428]	@ (800c1d0 <tcp_listen_input+0x1cc>)
 800c022:	f240 2281 	movw	r2, #641	@ 0x281
 800c026:	496b      	ldr	r1, [pc, #428]	@ (800c1d4 <tcp_listen_input+0x1d0>)
 800c028:	486b      	ldr	r0, [pc, #428]	@ (800c1d8 <tcp_listen_input+0x1d4>)
 800c02a:	f006 f947 	bl	80122bc <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 800c02e:	4b67      	ldr	r3, [pc, #412]	@ (800c1cc <tcp_listen_input+0x1c8>)
 800c030:	781b      	ldrb	r3, [r3, #0]
 800c032:	f003 0310 	and.w	r3, r3, #16
 800c036:	2b00      	cmp	r3, #0
 800c038:	d019      	beq.n	800c06e <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800c03a:	4b68      	ldr	r3, [pc, #416]	@ (800c1dc <tcp_listen_input+0x1d8>)
 800c03c:	6819      	ldr	r1, [r3, #0]
 800c03e:	4b68      	ldr	r3, [pc, #416]	@ (800c1e0 <tcp_listen_input+0x1dc>)
 800c040:	881b      	ldrh	r3, [r3, #0]
 800c042:	461a      	mov	r2, r3
 800c044:	4b67      	ldr	r3, [pc, #412]	@ (800c1e4 <tcp_listen_input+0x1e0>)
 800c046:	681b      	ldr	r3, [r3, #0]
 800c048:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800c04a:	4b67      	ldr	r3, [pc, #412]	@ (800c1e8 <tcp_listen_input+0x1e4>)
 800c04c:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800c04e:	885b      	ldrh	r3, [r3, #2]
 800c050:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800c052:	4a65      	ldr	r2, [pc, #404]	@ (800c1e8 <tcp_listen_input+0x1e4>)
 800c054:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800c056:	8812      	ldrh	r2, [r2, #0]
 800c058:	b292      	uxth	r2, r2
 800c05a:	9202      	str	r2, [sp, #8]
 800c05c:	9301      	str	r3, [sp, #4]
 800c05e:	4b63      	ldr	r3, [pc, #396]	@ (800c1ec <tcp_listen_input+0x1e8>)
 800c060:	9300      	str	r3, [sp, #0]
 800c062:	4b63      	ldr	r3, [pc, #396]	@ (800c1f0 <tcp_listen_input+0x1ec>)
 800c064:	4602      	mov	r2, r0
 800c066:	6878      	ldr	r0, [r7, #4]
 800c068:	f002 ff7a 	bl	800ef60 <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 800c06c:	e0a9      	b.n	800c1c2 <tcp_listen_input+0x1be>
  } else if (flags & TCP_SYN) {
 800c06e:	4b57      	ldr	r3, [pc, #348]	@ (800c1cc <tcp_listen_input+0x1c8>)
 800c070:	781b      	ldrb	r3, [r3, #0]
 800c072:	f003 0302 	and.w	r3, r3, #2
 800c076:	2b00      	cmp	r3, #0
 800c078:	f000 80a3 	beq.w	800c1c2 <tcp_listen_input+0x1be>
    npcb = tcp_alloc(pcb->prio);
 800c07c:	687b      	ldr	r3, [r7, #4]
 800c07e:	7d5b      	ldrb	r3, [r3, #21]
 800c080:	4618      	mov	r0, r3
 800c082:	f7ff f927 	bl	800b2d4 <tcp_alloc>
 800c086:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 800c088:	697b      	ldr	r3, [r7, #20]
 800c08a:	2b00      	cmp	r3, #0
 800c08c:	d111      	bne.n	800c0b2 <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800c08e:	687b      	ldr	r3, [r7, #4]
 800c090:	699b      	ldr	r3, [r3, #24]
 800c092:	2b00      	cmp	r3, #0
 800c094:	d00a      	beq.n	800c0ac <tcp_listen_input+0xa8>
 800c096:	687b      	ldr	r3, [r7, #4]
 800c098:	699b      	ldr	r3, [r3, #24]
 800c09a:	687a      	ldr	r2, [r7, #4]
 800c09c:	6910      	ldr	r0, [r2, #16]
 800c09e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800c0a2:	2100      	movs	r1, #0
 800c0a4:	4798      	blx	r3
 800c0a6:	4603      	mov	r3, r0
 800c0a8:	73bb      	strb	r3, [r7, #14]
      return;
 800c0aa:	e08b      	b.n	800c1c4 <tcp_listen_input+0x1c0>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800c0ac:	23f0      	movs	r3, #240	@ 0xf0
 800c0ae:	73bb      	strb	r3, [r7, #14]
      return;
 800c0b0:	e088      	b.n	800c1c4 <tcp_listen_input+0x1c0>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 800c0b2:	4b50      	ldr	r3, [pc, #320]	@ (800c1f4 <tcp_listen_input+0x1f0>)
 800c0b4:	695a      	ldr	r2, [r3, #20]
 800c0b6:	697b      	ldr	r3, [r7, #20]
 800c0b8:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 800c0ba:	4b4e      	ldr	r3, [pc, #312]	@ (800c1f4 <tcp_listen_input+0x1f0>)
 800c0bc:	691a      	ldr	r2, [r3, #16]
 800c0be:	697b      	ldr	r3, [r7, #20]
 800c0c0:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 800c0c2:	687b      	ldr	r3, [r7, #4]
 800c0c4:	8ada      	ldrh	r2, [r3, #22]
 800c0c6:	697b      	ldr	r3, [r7, #20]
 800c0c8:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 800c0ca:	4b47      	ldr	r3, [pc, #284]	@ (800c1e8 <tcp_listen_input+0x1e4>)
 800c0cc:	681b      	ldr	r3, [r3, #0]
 800c0ce:	881b      	ldrh	r3, [r3, #0]
 800c0d0:	b29a      	uxth	r2, r3
 800c0d2:	697b      	ldr	r3, [r7, #20]
 800c0d4:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 800c0d6:	697b      	ldr	r3, [r7, #20]
 800c0d8:	2203      	movs	r2, #3
 800c0da:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 800c0dc:	4b41      	ldr	r3, [pc, #260]	@ (800c1e4 <tcp_listen_input+0x1e0>)
 800c0de:	681b      	ldr	r3, [r3, #0]
 800c0e0:	1c5a      	adds	r2, r3, #1
 800c0e2:	697b      	ldr	r3, [r7, #20]
 800c0e4:	625a      	str	r2, [r3, #36]	@ 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 800c0e6:	697b      	ldr	r3, [r7, #20]
 800c0e8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800c0ea:	697b      	ldr	r3, [r7, #20]
 800c0ec:	62da      	str	r2, [r3, #44]	@ 0x2c
    iss = tcp_next_iss(npcb);
 800c0ee:	6978      	ldr	r0, [r7, #20]
 800c0f0:	f7ff fa58 	bl	800b5a4 <tcp_next_iss>
 800c0f4:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 800c0f6:	697b      	ldr	r3, [r7, #20]
 800c0f8:	693a      	ldr	r2, [r7, #16]
 800c0fa:	659a      	str	r2, [r3, #88]	@ 0x58
    npcb->snd_nxt = iss;
 800c0fc:	697b      	ldr	r3, [r7, #20]
 800c0fe:	693a      	ldr	r2, [r7, #16]
 800c100:	651a      	str	r2, [r3, #80]	@ 0x50
    npcb->lastack = iss;
 800c102:	697b      	ldr	r3, [r7, #20]
 800c104:	693a      	ldr	r2, [r7, #16]
 800c106:	645a      	str	r2, [r3, #68]	@ 0x44
    npcb->snd_lbb = iss;
 800c108:	697b      	ldr	r3, [r7, #20]
 800c10a:	693a      	ldr	r2, [r7, #16]
 800c10c:	65da      	str	r2, [r3, #92]	@ 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 800c10e:	4b35      	ldr	r3, [pc, #212]	@ (800c1e4 <tcp_listen_input+0x1e0>)
 800c110:	681b      	ldr	r3, [r3, #0]
 800c112:	1e5a      	subs	r2, r3, #1
 800c114:	697b      	ldr	r3, [r7, #20]
 800c116:	655a      	str	r2, [r3, #84]	@ 0x54
    npcb->callback_arg = pcb->callback_arg;
 800c118:	687b      	ldr	r3, [r7, #4]
 800c11a:	691a      	ldr	r2, [r3, #16]
 800c11c:	697b      	ldr	r3, [r7, #20]
 800c11e:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 800c120:	697b      	ldr	r3, [r7, #20]
 800c122:	687a      	ldr	r2, [r7, #4]
 800c124:	67da      	str	r2, [r3, #124]	@ 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 800c126:	687b      	ldr	r3, [r7, #4]
 800c128:	7a5b      	ldrb	r3, [r3, #9]
 800c12a:	f003 030c 	and.w	r3, r3, #12
 800c12e:	b2da      	uxtb	r2, r3
 800c130:	697b      	ldr	r3, [r7, #20]
 800c132:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 800c134:	687b      	ldr	r3, [r7, #4]
 800c136:	7a1a      	ldrb	r2, [r3, #8]
 800c138:	697b      	ldr	r3, [r7, #20]
 800c13a:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 800c13c:	4b2e      	ldr	r3, [pc, #184]	@ (800c1f8 <tcp_listen_input+0x1f4>)
 800c13e:	681a      	ldr	r2, [r3, #0]
 800c140:	697b      	ldr	r3, [r7, #20]
 800c142:	60da      	str	r2, [r3, #12]
 800c144:	4a2c      	ldr	r2, [pc, #176]	@ (800c1f8 <tcp_listen_input+0x1f4>)
 800c146:	697b      	ldr	r3, [r7, #20]
 800c148:	6013      	str	r3, [r2, #0]
 800c14a:	f003 f8cb 	bl	800f2e4 <tcp_timer_needed>
 800c14e:	4b2b      	ldr	r3, [pc, #172]	@ (800c1fc <tcp_listen_input+0x1f8>)
 800c150:	2201      	movs	r2, #1
 800c152:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 800c154:	6978      	ldr	r0, [r7, #20]
 800c156:	f001 fd8b 	bl	800dc70 <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 800c15a:	4b23      	ldr	r3, [pc, #140]	@ (800c1e8 <tcp_listen_input+0x1e4>)
 800c15c:	681b      	ldr	r3, [r3, #0]
 800c15e:	89db      	ldrh	r3, [r3, #14]
 800c160:	b29a      	uxth	r2, r3
 800c162:	697b      	ldr	r3, [r7, #20]
 800c164:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 800c168:	697b      	ldr	r3, [r7, #20]
 800c16a:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 800c16e:	697b      	ldr	r3, [r7, #20]
 800c170:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 800c174:	697b      	ldr	r3, [r7, #20]
 800c176:	8e5c      	ldrh	r4, [r3, #50]	@ 0x32
 800c178:	697b      	ldr	r3, [r7, #20]
 800c17a:	3304      	adds	r3, #4
 800c17c:	4618      	mov	r0, r3
 800c17e:	f004 fcbf 	bl	8010b00 <ip4_route>
 800c182:	4601      	mov	r1, r0
 800c184:	697b      	ldr	r3, [r7, #20]
 800c186:	3304      	adds	r3, #4
 800c188:	461a      	mov	r2, r3
 800c18a:	4620      	mov	r0, r4
 800c18c:	f7ff fa30 	bl	800b5f0 <tcp_eff_send_mss_netif>
 800c190:	4603      	mov	r3, r0
 800c192:	461a      	mov	r2, r3
 800c194:	697b      	ldr	r3, [r7, #20]
 800c196:	865a      	strh	r2, [r3, #50]	@ 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 800c198:	2112      	movs	r1, #18
 800c19a:	6978      	ldr	r0, [r7, #20]
 800c19c:	f002 f83e 	bl	800e21c <tcp_enqueue_flags>
 800c1a0:	4603      	mov	r3, r0
 800c1a2:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 800c1a4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c1a8:	2b00      	cmp	r3, #0
 800c1aa:	d004      	beq.n	800c1b6 <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 800c1ac:	2100      	movs	r1, #0
 800c1ae:	6978      	ldr	r0, [r7, #20]
 800c1b0:	f7fe f97c 	bl	800a4ac <tcp_abandon>
      return;
 800c1b4:	e006      	b.n	800c1c4 <tcp_listen_input+0x1c0>
    tcp_output(npcb);
 800c1b6:	6978      	ldr	r0, [r7, #20]
 800c1b8:	f002 f91e 	bl	800e3f8 <tcp_output>
  return;
 800c1bc:	e001      	b.n	800c1c2 <tcp_listen_input+0x1be>
    return;
 800c1be:	bf00      	nop
 800c1c0:	e000      	b.n	800c1c4 <tcp_listen_input+0x1c0>
  return;
 800c1c2:	bf00      	nop
}
 800c1c4:	371c      	adds	r7, #28
 800c1c6:	46bd      	mov	sp, r7
 800c1c8:	bd90      	pop	{r4, r7, pc}
 800c1ca:	bf00      	nop
 800c1cc:	20010140 	.word	0x20010140
 800c1d0:	080144f8 	.word	0x080144f8
 800c1d4:	080146f0 	.word	0x080146f0
 800c1d8:	08014544 	.word	0x08014544
 800c1dc:	20010138 	.word	0x20010138
 800c1e0:	2001013e 	.word	0x2001013e
 800c1e4:	20010134 	.word	0x20010134
 800c1e8:	20010124 	.word	0x20010124
 800c1ec:	2000a7f8 	.word	0x2000a7f8
 800c1f0:	2000a7fc 	.word	0x2000a7fc
 800c1f4:	2000a7e8 	.word	0x2000a7e8
 800c1f8:	20010108 	.word	0x20010108
 800c1fc:	20010110 	.word	0x20010110

0800c200 <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 800c200:	b580      	push	{r7, lr}
 800c202:	b086      	sub	sp, #24
 800c204:	af04      	add	r7, sp, #16
 800c206:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 800c208:	4b2f      	ldr	r3, [pc, #188]	@ (800c2c8 <tcp_timewait_input+0xc8>)
 800c20a:	781b      	ldrb	r3, [r3, #0]
 800c20c:	f003 0304 	and.w	r3, r3, #4
 800c210:	2b00      	cmp	r3, #0
 800c212:	d153      	bne.n	800c2bc <tcp_timewait_input+0xbc>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 800c214:	687b      	ldr	r3, [r7, #4]
 800c216:	2b00      	cmp	r3, #0
 800c218:	d106      	bne.n	800c228 <tcp_timewait_input+0x28>
 800c21a:	4b2c      	ldr	r3, [pc, #176]	@ (800c2cc <tcp_timewait_input+0xcc>)
 800c21c:	f240 22ee 	movw	r2, #750	@ 0x2ee
 800c220:	492b      	ldr	r1, [pc, #172]	@ (800c2d0 <tcp_timewait_input+0xd0>)
 800c222:	482c      	ldr	r0, [pc, #176]	@ (800c2d4 <tcp_timewait_input+0xd4>)
 800c224:	f006 f84a 	bl	80122bc <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 800c228:	4b27      	ldr	r3, [pc, #156]	@ (800c2c8 <tcp_timewait_input+0xc8>)
 800c22a:	781b      	ldrb	r3, [r3, #0]
 800c22c:	f003 0302 	and.w	r3, r3, #2
 800c230:	2b00      	cmp	r3, #0
 800c232:	d02a      	beq.n	800c28a <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 800c234:	4b28      	ldr	r3, [pc, #160]	@ (800c2d8 <tcp_timewait_input+0xd8>)
 800c236:	681a      	ldr	r2, [r3, #0]
 800c238:	687b      	ldr	r3, [r7, #4]
 800c23a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c23c:	1ad3      	subs	r3, r2, r3
 800c23e:	2b00      	cmp	r3, #0
 800c240:	db2d      	blt.n	800c29e <tcp_timewait_input+0x9e>
 800c242:	4b25      	ldr	r3, [pc, #148]	@ (800c2d8 <tcp_timewait_input+0xd8>)
 800c244:	681a      	ldr	r2, [r3, #0]
 800c246:	687b      	ldr	r3, [r7, #4]
 800c248:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c24a:	6879      	ldr	r1, [r7, #4]
 800c24c:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 800c24e:	440b      	add	r3, r1
 800c250:	1ad3      	subs	r3, r2, r3
 800c252:	2b00      	cmp	r3, #0
 800c254:	dc23      	bgt.n	800c29e <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800c256:	4b21      	ldr	r3, [pc, #132]	@ (800c2dc <tcp_timewait_input+0xdc>)
 800c258:	6819      	ldr	r1, [r3, #0]
 800c25a:	4b21      	ldr	r3, [pc, #132]	@ (800c2e0 <tcp_timewait_input+0xe0>)
 800c25c:	881b      	ldrh	r3, [r3, #0]
 800c25e:	461a      	mov	r2, r3
 800c260:	4b1d      	ldr	r3, [pc, #116]	@ (800c2d8 <tcp_timewait_input+0xd8>)
 800c262:	681b      	ldr	r3, [r3, #0]
 800c264:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800c266:	4b1f      	ldr	r3, [pc, #124]	@ (800c2e4 <tcp_timewait_input+0xe4>)
 800c268:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800c26a:	885b      	ldrh	r3, [r3, #2]
 800c26c:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800c26e:	4a1d      	ldr	r2, [pc, #116]	@ (800c2e4 <tcp_timewait_input+0xe4>)
 800c270:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800c272:	8812      	ldrh	r2, [r2, #0]
 800c274:	b292      	uxth	r2, r2
 800c276:	9202      	str	r2, [sp, #8]
 800c278:	9301      	str	r3, [sp, #4]
 800c27a:	4b1b      	ldr	r3, [pc, #108]	@ (800c2e8 <tcp_timewait_input+0xe8>)
 800c27c:	9300      	str	r3, [sp, #0]
 800c27e:	4b1b      	ldr	r3, [pc, #108]	@ (800c2ec <tcp_timewait_input+0xec>)
 800c280:	4602      	mov	r2, r0
 800c282:	6878      	ldr	r0, [r7, #4]
 800c284:	f002 fe6c 	bl	800ef60 <tcp_rst>
      return;
 800c288:	e01b      	b.n	800c2c2 <tcp_timewait_input+0xc2>
    }
  } else if (flags & TCP_FIN) {
 800c28a:	4b0f      	ldr	r3, [pc, #60]	@ (800c2c8 <tcp_timewait_input+0xc8>)
 800c28c:	781b      	ldrb	r3, [r3, #0]
 800c28e:	f003 0301 	and.w	r3, r3, #1
 800c292:	2b00      	cmp	r3, #0
 800c294:	d003      	beq.n	800c29e <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 800c296:	4b16      	ldr	r3, [pc, #88]	@ (800c2f0 <tcp_timewait_input+0xf0>)
 800c298:	681a      	ldr	r2, [r3, #0]
 800c29a:	687b      	ldr	r3, [r7, #4]
 800c29c:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 800c29e:	4b10      	ldr	r3, [pc, #64]	@ (800c2e0 <tcp_timewait_input+0xe0>)
 800c2a0:	881b      	ldrh	r3, [r3, #0]
 800c2a2:	2b00      	cmp	r3, #0
 800c2a4:	d00c      	beq.n	800c2c0 <tcp_timewait_input+0xc0>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 800c2a6:	687b      	ldr	r3, [r7, #4]
 800c2a8:	8b5b      	ldrh	r3, [r3, #26]
 800c2aa:	f043 0302 	orr.w	r3, r3, #2
 800c2ae:	b29a      	uxth	r2, r3
 800c2b0:	687b      	ldr	r3, [r7, #4]
 800c2b2:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800c2b4:	6878      	ldr	r0, [r7, #4]
 800c2b6:	f002 f89f 	bl	800e3f8 <tcp_output>
  }
  return;
 800c2ba:	e001      	b.n	800c2c0 <tcp_timewait_input+0xc0>
    return;
 800c2bc:	bf00      	nop
 800c2be:	e000      	b.n	800c2c2 <tcp_timewait_input+0xc2>
  return;
 800c2c0:	bf00      	nop
}
 800c2c2:	3708      	adds	r7, #8
 800c2c4:	46bd      	mov	sp, r7
 800c2c6:	bd80      	pop	{r7, pc}
 800c2c8:	20010140 	.word	0x20010140
 800c2cc:	080144f8 	.word	0x080144f8
 800c2d0:	08014710 	.word	0x08014710
 800c2d4:	08014544 	.word	0x08014544
 800c2d8:	20010134 	.word	0x20010134
 800c2dc:	20010138 	.word	0x20010138
 800c2e0:	2001013e 	.word	0x2001013e
 800c2e4:	20010124 	.word	0x20010124
 800c2e8:	2000a7f8 	.word	0x2000a7f8
 800c2ec:	2000a7fc 	.word	0x2000a7fc
 800c2f0:	200100fc 	.word	0x200100fc

0800c2f4 <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 800c2f4:	b590      	push	{r4, r7, lr}
 800c2f6:	b08d      	sub	sp, #52	@ 0x34
 800c2f8:	af04      	add	r7, sp, #16
 800c2fa:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 800c2fc:	2300      	movs	r3, #0
 800c2fe:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 800c300:	2300      	movs	r3, #0
 800c302:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 800c304:	687b      	ldr	r3, [r7, #4]
 800c306:	2b00      	cmp	r3, #0
 800c308:	d106      	bne.n	800c318 <tcp_process+0x24>
 800c30a:	4b9d      	ldr	r3, [pc, #628]	@ (800c580 <tcp_process+0x28c>)
 800c30c:	f44f 7247 	mov.w	r2, #796	@ 0x31c
 800c310:	499c      	ldr	r1, [pc, #624]	@ (800c584 <tcp_process+0x290>)
 800c312:	489d      	ldr	r0, [pc, #628]	@ (800c588 <tcp_process+0x294>)
 800c314:	f005 ffd2 	bl	80122bc <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 800c318:	4b9c      	ldr	r3, [pc, #624]	@ (800c58c <tcp_process+0x298>)
 800c31a:	781b      	ldrb	r3, [r3, #0]
 800c31c:	f003 0304 	and.w	r3, r3, #4
 800c320:	2b00      	cmp	r3, #0
 800c322:	d04e      	beq.n	800c3c2 <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 800c324:	687b      	ldr	r3, [r7, #4]
 800c326:	7d1b      	ldrb	r3, [r3, #20]
 800c328:	2b02      	cmp	r3, #2
 800c32a:	d108      	bne.n	800c33e <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 800c32c:	687b      	ldr	r3, [r7, #4]
 800c32e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800c330:	4b97      	ldr	r3, [pc, #604]	@ (800c590 <tcp_process+0x29c>)
 800c332:	681b      	ldr	r3, [r3, #0]
 800c334:	429a      	cmp	r2, r3
 800c336:	d123      	bne.n	800c380 <tcp_process+0x8c>
        acceptable = 1;
 800c338:	2301      	movs	r3, #1
 800c33a:	76fb      	strb	r3, [r7, #27]
 800c33c:	e020      	b.n	800c380 <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 800c33e:	687b      	ldr	r3, [r7, #4]
 800c340:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800c342:	4b94      	ldr	r3, [pc, #592]	@ (800c594 <tcp_process+0x2a0>)
 800c344:	681b      	ldr	r3, [r3, #0]
 800c346:	429a      	cmp	r2, r3
 800c348:	d102      	bne.n	800c350 <tcp_process+0x5c>
        acceptable = 1;
 800c34a:	2301      	movs	r3, #1
 800c34c:	76fb      	strb	r3, [r7, #27]
 800c34e:	e017      	b.n	800c380 <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800c350:	4b90      	ldr	r3, [pc, #576]	@ (800c594 <tcp_process+0x2a0>)
 800c352:	681a      	ldr	r2, [r3, #0]
 800c354:	687b      	ldr	r3, [r7, #4]
 800c356:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c358:	1ad3      	subs	r3, r2, r3
 800c35a:	2b00      	cmp	r3, #0
 800c35c:	db10      	blt.n	800c380 <tcp_process+0x8c>
 800c35e:	4b8d      	ldr	r3, [pc, #564]	@ (800c594 <tcp_process+0x2a0>)
 800c360:	681a      	ldr	r2, [r3, #0]
 800c362:	687b      	ldr	r3, [r7, #4]
 800c364:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c366:	6879      	ldr	r1, [r7, #4]
 800c368:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 800c36a:	440b      	add	r3, r1
 800c36c:	1ad3      	subs	r3, r2, r3
 800c36e:	2b00      	cmp	r3, #0
 800c370:	dc06      	bgt.n	800c380 <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 800c372:	687b      	ldr	r3, [r7, #4]
 800c374:	8b5b      	ldrh	r3, [r3, #26]
 800c376:	f043 0302 	orr.w	r3, r3, #2
 800c37a:	b29a      	uxth	r2, r3
 800c37c:	687b      	ldr	r3, [r7, #4]
 800c37e:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 800c380:	7efb      	ldrb	r3, [r7, #27]
 800c382:	2b00      	cmp	r3, #0
 800c384:	d01b      	beq.n	800c3be <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 800c386:	687b      	ldr	r3, [r7, #4]
 800c388:	7d1b      	ldrb	r3, [r3, #20]
 800c38a:	2b00      	cmp	r3, #0
 800c38c:	d106      	bne.n	800c39c <tcp_process+0xa8>
 800c38e:	4b7c      	ldr	r3, [pc, #496]	@ (800c580 <tcp_process+0x28c>)
 800c390:	f44f 724e 	mov.w	r2, #824	@ 0x338
 800c394:	4980      	ldr	r1, [pc, #512]	@ (800c598 <tcp_process+0x2a4>)
 800c396:	487c      	ldr	r0, [pc, #496]	@ (800c588 <tcp_process+0x294>)
 800c398:	f005 ff90 	bl	80122bc <iprintf>
      recv_flags |= TF_RESET;
 800c39c:	4b7f      	ldr	r3, [pc, #508]	@ (800c59c <tcp_process+0x2a8>)
 800c39e:	781b      	ldrb	r3, [r3, #0]
 800c3a0:	f043 0308 	orr.w	r3, r3, #8
 800c3a4:	b2da      	uxtb	r2, r3
 800c3a6:	4b7d      	ldr	r3, [pc, #500]	@ (800c59c <tcp_process+0x2a8>)
 800c3a8:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 800c3aa:	687b      	ldr	r3, [r7, #4]
 800c3ac:	8b5b      	ldrh	r3, [r3, #26]
 800c3ae:	f023 0301 	bic.w	r3, r3, #1
 800c3b2:	b29a      	uxth	r2, r3
 800c3b4:	687b      	ldr	r3, [r7, #4]
 800c3b6:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 800c3b8:	f06f 030d 	mvn.w	r3, #13
 800c3bc:	e37a      	b.n	800cab4 <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 800c3be:	2300      	movs	r3, #0
 800c3c0:	e378      	b.n	800cab4 <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 800c3c2:	4b72      	ldr	r3, [pc, #456]	@ (800c58c <tcp_process+0x298>)
 800c3c4:	781b      	ldrb	r3, [r3, #0]
 800c3c6:	f003 0302 	and.w	r3, r3, #2
 800c3ca:	2b00      	cmp	r3, #0
 800c3cc:	d010      	beq.n	800c3f0 <tcp_process+0xfc>
 800c3ce:	687b      	ldr	r3, [r7, #4]
 800c3d0:	7d1b      	ldrb	r3, [r3, #20]
 800c3d2:	2b02      	cmp	r3, #2
 800c3d4:	d00c      	beq.n	800c3f0 <tcp_process+0xfc>
 800c3d6:	687b      	ldr	r3, [r7, #4]
 800c3d8:	7d1b      	ldrb	r3, [r3, #20]
 800c3da:	2b03      	cmp	r3, #3
 800c3dc:	d008      	beq.n	800c3f0 <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 800c3de:	687b      	ldr	r3, [r7, #4]
 800c3e0:	8b5b      	ldrh	r3, [r3, #26]
 800c3e2:	f043 0302 	orr.w	r3, r3, #2
 800c3e6:	b29a      	uxth	r2, r3
 800c3e8:	687b      	ldr	r3, [r7, #4]
 800c3ea:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 800c3ec:	2300      	movs	r3, #0
 800c3ee:	e361      	b.n	800cab4 <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 800c3f0:	687b      	ldr	r3, [r7, #4]
 800c3f2:	8b5b      	ldrh	r3, [r3, #26]
 800c3f4:	f003 0310 	and.w	r3, r3, #16
 800c3f8:	2b00      	cmp	r3, #0
 800c3fa:	d103      	bne.n	800c404 <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 800c3fc:	4b68      	ldr	r3, [pc, #416]	@ (800c5a0 <tcp_process+0x2ac>)
 800c3fe:	681a      	ldr	r2, [r3, #0]
 800c400:	687b      	ldr	r3, [r7, #4]
 800c402:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 800c404:	687b      	ldr	r3, [r7, #4]
 800c406:	2200      	movs	r2, #0
 800c408:	f883 209b 	strb.w	r2, [r3, #155]	@ 0x9b
  pcb->persist_probe = 0;
 800c40c:	687b      	ldr	r3, [r7, #4]
 800c40e:	2200      	movs	r2, #0
 800c410:	f883 209a 	strb.w	r2, [r3, #154]	@ 0x9a

  tcp_parseopt(pcb);
 800c414:	6878      	ldr	r0, [r7, #4]
 800c416:	f001 fc2b 	bl	800dc70 <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 800c41a:	687b      	ldr	r3, [r7, #4]
 800c41c:	7d1b      	ldrb	r3, [r3, #20]
 800c41e:	3b02      	subs	r3, #2
 800c420:	2b07      	cmp	r3, #7
 800c422:	f200 8337 	bhi.w	800ca94 <tcp_process+0x7a0>
 800c426:	a201      	add	r2, pc, #4	@ (adr r2, 800c42c <tcp_process+0x138>)
 800c428:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c42c:	0800c44d 	.word	0x0800c44d
 800c430:	0800c67d 	.word	0x0800c67d
 800c434:	0800c7f5 	.word	0x0800c7f5
 800c438:	0800c81f 	.word	0x0800c81f
 800c43c:	0800c943 	.word	0x0800c943
 800c440:	0800c7f5 	.word	0x0800c7f5
 800c444:	0800c9cf 	.word	0x0800c9cf
 800c448:	0800ca5f 	.word	0x0800ca5f
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 800c44c:	4b4f      	ldr	r3, [pc, #316]	@ (800c58c <tcp_process+0x298>)
 800c44e:	781b      	ldrb	r3, [r3, #0]
 800c450:	f003 0310 	and.w	r3, r3, #16
 800c454:	2b00      	cmp	r3, #0
 800c456:	f000 80e4 	beq.w	800c622 <tcp_process+0x32e>
 800c45a:	4b4c      	ldr	r3, [pc, #304]	@ (800c58c <tcp_process+0x298>)
 800c45c:	781b      	ldrb	r3, [r3, #0]
 800c45e:	f003 0302 	and.w	r3, r3, #2
 800c462:	2b00      	cmp	r3, #0
 800c464:	f000 80dd 	beq.w	800c622 <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 800c468:	687b      	ldr	r3, [r7, #4]
 800c46a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c46c:	1c5a      	adds	r2, r3, #1
 800c46e:	4b48      	ldr	r3, [pc, #288]	@ (800c590 <tcp_process+0x29c>)
 800c470:	681b      	ldr	r3, [r3, #0]
 800c472:	429a      	cmp	r2, r3
 800c474:	f040 80d5 	bne.w	800c622 <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 800c478:	4b46      	ldr	r3, [pc, #280]	@ (800c594 <tcp_process+0x2a0>)
 800c47a:	681b      	ldr	r3, [r3, #0]
 800c47c:	1c5a      	adds	r2, r3, #1
 800c47e:	687b      	ldr	r3, [r7, #4]
 800c480:	625a      	str	r2, [r3, #36]	@ 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 800c482:	687b      	ldr	r3, [r7, #4]
 800c484:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800c486:	687b      	ldr	r3, [r7, #4]
 800c488:	62da      	str	r2, [r3, #44]	@ 0x2c
        pcb->lastack = ackno;
 800c48a:	4b41      	ldr	r3, [pc, #260]	@ (800c590 <tcp_process+0x29c>)
 800c48c:	681a      	ldr	r2, [r3, #0]
 800c48e:	687b      	ldr	r3, [r7, #4]
 800c490:	645a      	str	r2, [r3, #68]	@ 0x44
        pcb->snd_wnd = tcphdr->wnd;
 800c492:	4b44      	ldr	r3, [pc, #272]	@ (800c5a4 <tcp_process+0x2b0>)
 800c494:	681b      	ldr	r3, [r3, #0]
 800c496:	89db      	ldrh	r3, [r3, #14]
 800c498:	b29a      	uxth	r2, r3
 800c49a:	687b      	ldr	r3, [r7, #4]
 800c49c:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 800c4a0:	687b      	ldr	r3, [r7, #4]
 800c4a2:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 800c4a6:	687b      	ldr	r3, [r7, #4]
 800c4a8:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 800c4ac:	4b39      	ldr	r3, [pc, #228]	@ (800c594 <tcp_process+0x2a0>)
 800c4ae:	681b      	ldr	r3, [r3, #0]
 800c4b0:	1e5a      	subs	r2, r3, #1
 800c4b2:	687b      	ldr	r3, [r7, #4]
 800c4b4:	655a      	str	r2, [r3, #84]	@ 0x54
        pcb->state = ESTABLISHED;
 800c4b6:	687b      	ldr	r3, [r7, #4]
 800c4b8:	2204      	movs	r2, #4
 800c4ba:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 800c4bc:	687b      	ldr	r3, [r7, #4]
 800c4be:	8e5c      	ldrh	r4, [r3, #50]	@ 0x32
 800c4c0:	687b      	ldr	r3, [r7, #4]
 800c4c2:	3304      	adds	r3, #4
 800c4c4:	4618      	mov	r0, r3
 800c4c6:	f004 fb1b 	bl	8010b00 <ip4_route>
 800c4ca:	4601      	mov	r1, r0
 800c4cc:	687b      	ldr	r3, [r7, #4]
 800c4ce:	3304      	adds	r3, #4
 800c4d0:	461a      	mov	r2, r3
 800c4d2:	4620      	mov	r0, r4
 800c4d4:	f7ff f88c 	bl	800b5f0 <tcp_eff_send_mss_netif>
 800c4d8:	4603      	mov	r3, r0
 800c4da:	461a      	mov	r2, r3
 800c4dc:	687b      	ldr	r3, [r7, #4]
 800c4de:	865a      	strh	r2, [r3, #50]	@ 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800c4e0:	687b      	ldr	r3, [r7, #4]
 800c4e2:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800c4e4:	009a      	lsls	r2, r3, #2
 800c4e6:	687b      	ldr	r3, [r7, #4]
 800c4e8:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800c4ea:	005b      	lsls	r3, r3, #1
 800c4ec:	f241 111c 	movw	r1, #4380	@ 0x111c
 800c4f0:	428b      	cmp	r3, r1
 800c4f2:	bf38      	it	cc
 800c4f4:	460b      	movcc	r3, r1
 800c4f6:	429a      	cmp	r2, r3
 800c4f8:	d204      	bcs.n	800c504 <tcp_process+0x210>
 800c4fa:	687b      	ldr	r3, [r7, #4]
 800c4fc:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800c4fe:	009b      	lsls	r3, r3, #2
 800c500:	b29b      	uxth	r3, r3
 800c502:	e00d      	b.n	800c520 <tcp_process+0x22c>
 800c504:	687b      	ldr	r3, [r7, #4]
 800c506:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800c508:	005b      	lsls	r3, r3, #1
 800c50a:	f241 121c 	movw	r2, #4380	@ 0x111c
 800c50e:	4293      	cmp	r3, r2
 800c510:	d904      	bls.n	800c51c <tcp_process+0x228>
 800c512:	687b      	ldr	r3, [r7, #4]
 800c514:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800c516:	005b      	lsls	r3, r3, #1
 800c518:	b29b      	uxth	r3, r3
 800c51a:	e001      	b.n	800c520 <tcp_process+0x22c>
 800c51c:	f241 131c 	movw	r3, #4380	@ 0x111c
 800c520:	687a      	ldr	r2, [r7, #4]
 800c522:	f8a2 3048 	strh.w	r3, [r2, #72]	@ 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 800c526:	687b      	ldr	r3, [r7, #4]
 800c528:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800c52c:	2b00      	cmp	r3, #0
 800c52e:	d106      	bne.n	800c53e <tcp_process+0x24a>
 800c530:	4b13      	ldr	r3, [pc, #76]	@ (800c580 <tcp_process+0x28c>)
 800c532:	f44f 725b 	mov.w	r2, #876	@ 0x36c
 800c536:	491c      	ldr	r1, [pc, #112]	@ (800c5a8 <tcp_process+0x2b4>)
 800c538:	4813      	ldr	r0, [pc, #76]	@ (800c588 <tcp_process+0x294>)
 800c53a:	f005 febf 	bl	80122bc <iprintf>
        --pcb->snd_queuelen;
 800c53e:	687b      	ldr	r3, [r7, #4]
 800c540:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800c544:	3b01      	subs	r3, #1
 800c546:	b29a      	uxth	r2, r3
 800c548:	687b      	ldr	r3, [r7, #4]
 800c54a:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 800c54e:	687b      	ldr	r3, [r7, #4]
 800c550:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800c552:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 800c554:	69fb      	ldr	r3, [r7, #28]
 800c556:	2b00      	cmp	r3, #0
 800c558:	d12a      	bne.n	800c5b0 <tcp_process+0x2bc>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 800c55a:	687b      	ldr	r3, [r7, #4]
 800c55c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c55e:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 800c560:	69fb      	ldr	r3, [r7, #28]
 800c562:	2b00      	cmp	r3, #0
 800c564:	d106      	bne.n	800c574 <tcp_process+0x280>
 800c566:	4b06      	ldr	r3, [pc, #24]	@ (800c580 <tcp_process+0x28c>)
 800c568:	f44f 725d 	mov.w	r2, #884	@ 0x374
 800c56c:	490f      	ldr	r1, [pc, #60]	@ (800c5ac <tcp_process+0x2b8>)
 800c56e:	4806      	ldr	r0, [pc, #24]	@ (800c588 <tcp_process+0x294>)
 800c570:	f005 fea4 	bl	80122bc <iprintf>
          pcb->unsent = rseg->next;
 800c574:	69fb      	ldr	r3, [r7, #28]
 800c576:	681a      	ldr	r2, [r3, #0]
 800c578:	687b      	ldr	r3, [r7, #4]
 800c57a:	66da      	str	r2, [r3, #108]	@ 0x6c
 800c57c:	e01c      	b.n	800c5b8 <tcp_process+0x2c4>
 800c57e:	bf00      	nop
 800c580:	080144f8 	.word	0x080144f8
 800c584:	08014730 	.word	0x08014730
 800c588:	08014544 	.word	0x08014544
 800c58c:	20010140 	.word	0x20010140
 800c590:	20010138 	.word	0x20010138
 800c594:	20010134 	.word	0x20010134
 800c598:	0801474c 	.word	0x0801474c
 800c59c:	20010141 	.word	0x20010141
 800c5a0:	200100fc 	.word	0x200100fc
 800c5a4:	20010124 	.word	0x20010124
 800c5a8:	0801476c 	.word	0x0801476c
 800c5ac:	08014784 	.word	0x08014784
        } else {
          pcb->unacked = rseg->next;
 800c5b0:	69fb      	ldr	r3, [r7, #28]
 800c5b2:	681a      	ldr	r2, [r3, #0]
 800c5b4:	687b      	ldr	r3, [r7, #4]
 800c5b6:	671a      	str	r2, [r3, #112]	@ 0x70
        }
        tcp_seg_free(rseg);
 800c5b8:	69f8      	ldr	r0, [r7, #28]
 800c5ba:	f7fe fd22 	bl	800b002 <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 800c5be:	687b      	ldr	r3, [r7, #4]
 800c5c0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800c5c2:	2b00      	cmp	r3, #0
 800c5c4:	d104      	bne.n	800c5d0 <tcp_process+0x2dc>
          pcb->rtime = -1;
 800c5c6:	687b      	ldr	r3, [r7, #4]
 800c5c8:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800c5cc:	861a      	strh	r2, [r3, #48]	@ 0x30
 800c5ce:	e006      	b.n	800c5de <tcp_process+0x2ea>
        } else {
          pcb->rtime = 0;
 800c5d0:	687b      	ldr	r3, [r7, #4]
 800c5d2:	2200      	movs	r2, #0
 800c5d4:	861a      	strh	r2, [r3, #48]	@ 0x30
          pcb->nrtx = 0;
 800c5d6:	687b      	ldr	r3, [r7, #4]
 800c5d8:	2200      	movs	r2, #0
 800c5da:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 800c5de:	687b      	ldr	r3, [r7, #4]
 800c5e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800c5e4:	2b00      	cmp	r3, #0
 800c5e6:	d00a      	beq.n	800c5fe <tcp_process+0x30a>
 800c5e8:	687b      	ldr	r3, [r7, #4]
 800c5ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800c5ee:	687a      	ldr	r2, [r7, #4]
 800c5f0:	6910      	ldr	r0, [r2, #16]
 800c5f2:	2200      	movs	r2, #0
 800c5f4:	6879      	ldr	r1, [r7, #4]
 800c5f6:	4798      	blx	r3
 800c5f8:	4603      	mov	r3, r0
 800c5fa:	76bb      	strb	r3, [r7, #26]
 800c5fc:	e001      	b.n	800c602 <tcp_process+0x30e>
 800c5fe:	2300      	movs	r3, #0
 800c600:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 800c602:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800c606:	f113 0f0d 	cmn.w	r3, #13
 800c60a:	d102      	bne.n	800c612 <tcp_process+0x31e>
          return ERR_ABRT;
 800c60c:	f06f 030c 	mvn.w	r3, #12
 800c610:	e250      	b.n	800cab4 <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 800c612:	687b      	ldr	r3, [r7, #4]
 800c614:	8b5b      	ldrh	r3, [r3, #26]
 800c616:	f043 0302 	orr.w	r3, r3, #2
 800c61a:	b29a      	uxth	r2, r3
 800c61c:	687b      	ldr	r3, [r7, #4]
 800c61e:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 800c620:	e23a      	b.n	800ca98 <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 800c622:	4b98      	ldr	r3, [pc, #608]	@ (800c884 <tcp_process+0x590>)
 800c624:	781b      	ldrb	r3, [r3, #0]
 800c626:	f003 0310 	and.w	r3, r3, #16
 800c62a:	2b00      	cmp	r3, #0
 800c62c:	f000 8234 	beq.w	800ca98 <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800c630:	4b95      	ldr	r3, [pc, #596]	@ (800c888 <tcp_process+0x594>)
 800c632:	6819      	ldr	r1, [r3, #0]
 800c634:	4b95      	ldr	r3, [pc, #596]	@ (800c88c <tcp_process+0x598>)
 800c636:	881b      	ldrh	r3, [r3, #0]
 800c638:	461a      	mov	r2, r3
 800c63a:	4b95      	ldr	r3, [pc, #596]	@ (800c890 <tcp_process+0x59c>)
 800c63c:	681b      	ldr	r3, [r3, #0]
 800c63e:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800c640:	4b94      	ldr	r3, [pc, #592]	@ (800c894 <tcp_process+0x5a0>)
 800c642:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800c644:	885b      	ldrh	r3, [r3, #2]
 800c646:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800c648:	4a92      	ldr	r2, [pc, #584]	@ (800c894 <tcp_process+0x5a0>)
 800c64a:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800c64c:	8812      	ldrh	r2, [r2, #0]
 800c64e:	b292      	uxth	r2, r2
 800c650:	9202      	str	r2, [sp, #8]
 800c652:	9301      	str	r3, [sp, #4]
 800c654:	4b90      	ldr	r3, [pc, #576]	@ (800c898 <tcp_process+0x5a4>)
 800c656:	9300      	str	r3, [sp, #0]
 800c658:	4b90      	ldr	r3, [pc, #576]	@ (800c89c <tcp_process+0x5a8>)
 800c65a:	4602      	mov	r2, r0
 800c65c:	6878      	ldr	r0, [r7, #4]
 800c65e:	f002 fc7f 	bl	800ef60 <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 800c662:	687b      	ldr	r3, [r7, #4]
 800c664:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800c668:	2b05      	cmp	r3, #5
 800c66a:	f200 8215 	bhi.w	800ca98 <tcp_process+0x7a4>
          pcb->rtime = 0;
 800c66e:	687b      	ldr	r3, [r7, #4]
 800c670:	2200      	movs	r2, #0
 800c672:	861a      	strh	r2, [r3, #48]	@ 0x30
          tcp_rexmit_rto(pcb);
 800c674:	6878      	ldr	r0, [r7, #4]
 800c676:	f002 fa4b 	bl	800eb10 <tcp_rexmit_rto>
      break;
 800c67a:	e20d      	b.n	800ca98 <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 800c67c:	4b81      	ldr	r3, [pc, #516]	@ (800c884 <tcp_process+0x590>)
 800c67e:	781b      	ldrb	r3, [r3, #0]
 800c680:	f003 0310 	and.w	r3, r3, #16
 800c684:	2b00      	cmp	r3, #0
 800c686:	f000 80a1 	beq.w	800c7cc <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800c68a:	4b7f      	ldr	r3, [pc, #508]	@ (800c888 <tcp_process+0x594>)
 800c68c:	681a      	ldr	r2, [r3, #0]
 800c68e:	687b      	ldr	r3, [r7, #4]
 800c690:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c692:	1ad3      	subs	r3, r2, r3
 800c694:	3b01      	subs	r3, #1
 800c696:	2b00      	cmp	r3, #0
 800c698:	db7e      	blt.n	800c798 <tcp_process+0x4a4>
 800c69a:	4b7b      	ldr	r3, [pc, #492]	@ (800c888 <tcp_process+0x594>)
 800c69c:	681a      	ldr	r2, [r3, #0]
 800c69e:	687b      	ldr	r3, [r7, #4]
 800c6a0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c6a2:	1ad3      	subs	r3, r2, r3
 800c6a4:	2b00      	cmp	r3, #0
 800c6a6:	dc77      	bgt.n	800c798 <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 800c6a8:	687b      	ldr	r3, [r7, #4]
 800c6aa:	2204      	movs	r2, #4
 800c6ac:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 800c6ae:	687b      	ldr	r3, [r7, #4]
 800c6b0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800c6b2:	2b00      	cmp	r3, #0
 800c6b4:	d102      	bne.n	800c6bc <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 800c6b6:	23fa      	movs	r3, #250	@ 0xfa
 800c6b8:	76bb      	strb	r3, [r7, #26]
 800c6ba:	e01d      	b.n	800c6f8 <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 800c6bc:	687b      	ldr	r3, [r7, #4]
 800c6be:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800c6c0:	699b      	ldr	r3, [r3, #24]
 800c6c2:	2b00      	cmp	r3, #0
 800c6c4:	d106      	bne.n	800c6d4 <tcp_process+0x3e0>
 800c6c6:	4b76      	ldr	r3, [pc, #472]	@ (800c8a0 <tcp_process+0x5ac>)
 800c6c8:	f44f 726a 	mov.w	r2, #936	@ 0x3a8
 800c6cc:	4975      	ldr	r1, [pc, #468]	@ (800c8a4 <tcp_process+0x5b0>)
 800c6ce:	4876      	ldr	r0, [pc, #472]	@ (800c8a8 <tcp_process+0x5b4>)
 800c6d0:	f005 fdf4 	bl	80122bc <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 800c6d4:	687b      	ldr	r3, [r7, #4]
 800c6d6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800c6d8:	699b      	ldr	r3, [r3, #24]
 800c6da:	2b00      	cmp	r3, #0
 800c6dc:	d00a      	beq.n	800c6f4 <tcp_process+0x400>
 800c6de:	687b      	ldr	r3, [r7, #4]
 800c6e0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800c6e2:	699b      	ldr	r3, [r3, #24]
 800c6e4:	687a      	ldr	r2, [r7, #4]
 800c6e6:	6910      	ldr	r0, [r2, #16]
 800c6e8:	2200      	movs	r2, #0
 800c6ea:	6879      	ldr	r1, [r7, #4]
 800c6ec:	4798      	blx	r3
 800c6ee:	4603      	mov	r3, r0
 800c6f0:	76bb      	strb	r3, [r7, #26]
 800c6f2:	e001      	b.n	800c6f8 <tcp_process+0x404>
 800c6f4:	23f0      	movs	r3, #240	@ 0xf0
 800c6f6:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 800c6f8:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800c6fc:	2b00      	cmp	r3, #0
 800c6fe:	d00a      	beq.n	800c716 <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 800c700:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800c704:	f113 0f0d 	cmn.w	r3, #13
 800c708:	d002      	beq.n	800c710 <tcp_process+0x41c>
              tcp_abort(pcb);
 800c70a:	6878      	ldr	r0, [r7, #4]
 800c70c:	f7fd ff8c 	bl	800a628 <tcp_abort>
            }
            return ERR_ABRT;
 800c710:	f06f 030c 	mvn.w	r3, #12
 800c714:	e1ce      	b.n	800cab4 <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 800c716:	6878      	ldr	r0, [r7, #4]
 800c718:	f000 fae0 	bl	800ccdc <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 800c71c:	4b63      	ldr	r3, [pc, #396]	@ (800c8ac <tcp_process+0x5b8>)
 800c71e:	881b      	ldrh	r3, [r3, #0]
 800c720:	2b00      	cmp	r3, #0
 800c722:	d005      	beq.n	800c730 <tcp_process+0x43c>
            recv_acked--;
 800c724:	4b61      	ldr	r3, [pc, #388]	@ (800c8ac <tcp_process+0x5b8>)
 800c726:	881b      	ldrh	r3, [r3, #0]
 800c728:	3b01      	subs	r3, #1
 800c72a:	b29a      	uxth	r2, r3
 800c72c:	4b5f      	ldr	r3, [pc, #380]	@ (800c8ac <tcp_process+0x5b8>)
 800c72e:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800c730:	687b      	ldr	r3, [r7, #4]
 800c732:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800c734:	009a      	lsls	r2, r3, #2
 800c736:	687b      	ldr	r3, [r7, #4]
 800c738:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800c73a:	005b      	lsls	r3, r3, #1
 800c73c:	f241 111c 	movw	r1, #4380	@ 0x111c
 800c740:	428b      	cmp	r3, r1
 800c742:	bf38      	it	cc
 800c744:	460b      	movcc	r3, r1
 800c746:	429a      	cmp	r2, r3
 800c748:	d204      	bcs.n	800c754 <tcp_process+0x460>
 800c74a:	687b      	ldr	r3, [r7, #4]
 800c74c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800c74e:	009b      	lsls	r3, r3, #2
 800c750:	b29b      	uxth	r3, r3
 800c752:	e00d      	b.n	800c770 <tcp_process+0x47c>
 800c754:	687b      	ldr	r3, [r7, #4]
 800c756:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800c758:	005b      	lsls	r3, r3, #1
 800c75a:	f241 121c 	movw	r2, #4380	@ 0x111c
 800c75e:	4293      	cmp	r3, r2
 800c760:	d904      	bls.n	800c76c <tcp_process+0x478>
 800c762:	687b      	ldr	r3, [r7, #4]
 800c764:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800c766:	005b      	lsls	r3, r3, #1
 800c768:	b29b      	uxth	r3, r3
 800c76a:	e001      	b.n	800c770 <tcp_process+0x47c>
 800c76c:	f241 131c 	movw	r3, #4380	@ 0x111c
 800c770:	687a      	ldr	r2, [r7, #4]
 800c772:	f8a2 3048 	strh.w	r3, [r2, #72]	@ 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 800c776:	4b4e      	ldr	r3, [pc, #312]	@ (800c8b0 <tcp_process+0x5bc>)
 800c778:	781b      	ldrb	r3, [r3, #0]
 800c77a:	f003 0320 	and.w	r3, r3, #32
 800c77e:	2b00      	cmp	r3, #0
 800c780:	d037      	beq.n	800c7f2 <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 800c782:	687b      	ldr	r3, [r7, #4]
 800c784:	8b5b      	ldrh	r3, [r3, #26]
 800c786:	f043 0302 	orr.w	r3, r3, #2
 800c78a:	b29a      	uxth	r2, r3
 800c78c:	687b      	ldr	r3, [r7, #4]
 800c78e:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 800c790:	687b      	ldr	r3, [r7, #4]
 800c792:	2207      	movs	r2, #7
 800c794:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 800c796:	e02c      	b.n	800c7f2 <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800c798:	4b3b      	ldr	r3, [pc, #236]	@ (800c888 <tcp_process+0x594>)
 800c79a:	6819      	ldr	r1, [r3, #0]
 800c79c:	4b3b      	ldr	r3, [pc, #236]	@ (800c88c <tcp_process+0x598>)
 800c79e:	881b      	ldrh	r3, [r3, #0]
 800c7a0:	461a      	mov	r2, r3
 800c7a2:	4b3b      	ldr	r3, [pc, #236]	@ (800c890 <tcp_process+0x59c>)
 800c7a4:	681b      	ldr	r3, [r3, #0]
 800c7a6:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800c7a8:	4b3a      	ldr	r3, [pc, #232]	@ (800c894 <tcp_process+0x5a0>)
 800c7aa:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800c7ac:	885b      	ldrh	r3, [r3, #2]
 800c7ae:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800c7b0:	4a38      	ldr	r2, [pc, #224]	@ (800c894 <tcp_process+0x5a0>)
 800c7b2:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800c7b4:	8812      	ldrh	r2, [r2, #0]
 800c7b6:	b292      	uxth	r2, r2
 800c7b8:	9202      	str	r2, [sp, #8]
 800c7ba:	9301      	str	r3, [sp, #4]
 800c7bc:	4b36      	ldr	r3, [pc, #216]	@ (800c898 <tcp_process+0x5a4>)
 800c7be:	9300      	str	r3, [sp, #0]
 800c7c0:	4b36      	ldr	r3, [pc, #216]	@ (800c89c <tcp_process+0x5a8>)
 800c7c2:	4602      	mov	r2, r0
 800c7c4:	6878      	ldr	r0, [r7, #4]
 800c7c6:	f002 fbcb 	bl	800ef60 <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 800c7ca:	e167      	b.n	800ca9c <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 800c7cc:	4b2d      	ldr	r3, [pc, #180]	@ (800c884 <tcp_process+0x590>)
 800c7ce:	781b      	ldrb	r3, [r3, #0]
 800c7d0:	f003 0302 	and.w	r3, r3, #2
 800c7d4:	2b00      	cmp	r3, #0
 800c7d6:	f000 8161 	beq.w	800ca9c <tcp_process+0x7a8>
 800c7da:	687b      	ldr	r3, [r7, #4]
 800c7dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c7de:	1e5a      	subs	r2, r3, #1
 800c7e0:	4b2b      	ldr	r3, [pc, #172]	@ (800c890 <tcp_process+0x59c>)
 800c7e2:	681b      	ldr	r3, [r3, #0]
 800c7e4:	429a      	cmp	r2, r3
 800c7e6:	f040 8159 	bne.w	800ca9c <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 800c7ea:	6878      	ldr	r0, [r7, #4]
 800c7ec:	f002 f9b2 	bl	800eb54 <tcp_rexmit>
      break;
 800c7f0:	e154      	b.n	800ca9c <tcp_process+0x7a8>
 800c7f2:	e153      	b.n	800ca9c <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 800c7f4:	6878      	ldr	r0, [r7, #4]
 800c7f6:	f000 fa71 	bl	800ccdc <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 800c7fa:	4b2d      	ldr	r3, [pc, #180]	@ (800c8b0 <tcp_process+0x5bc>)
 800c7fc:	781b      	ldrb	r3, [r3, #0]
 800c7fe:	f003 0320 	and.w	r3, r3, #32
 800c802:	2b00      	cmp	r3, #0
 800c804:	f000 814c 	beq.w	800caa0 <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 800c808:	687b      	ldr	r3, [r7, #4]
 800c80a:	8b5b      	ldrh	r3, [r3, #26]
 800c80c:	f043 0302 	orr.w	r3, r3, #2
 800c810:	b29a      	uxth	r2, r3
 800c812:	687b      	ldr	r3, [r7, #4]
 800c814:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 800c816:	687b      	ldr	r3, [r7, #4]
 800c818:	2207      	movs	r2, #7
 800c81a:	751a      	strb	r2, [r3, #20]
      }
      break;
 800c81c:	e140      	b.n	800caa0 <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 800c81e:	6878      	ldr	r0, [r7, #4]
 800c820:	f000 fa5c 	bl	800ccdc <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 800c824:	4b22      	ldr	r3, [pc, #136]	@ (800c8b0 <tcp_process+0x5bc>)
 800c826:	781b      	ldrb	r3, [r3, #0]
 800c828:	f003 0320 	and.w	r3, r3, #32
 800c82c:	2b00      	cmp	r3, #0
 800c82e:	d071      	beq.n	800c914 <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800c830:	4b14      	ldr	r3, [pc, #80]	@ (800c884 <tcp_process+0x590>)
 800c832:	781b      	ldrb	r3, [r3, #0]
 800c834:	f003 0310 	and.w	r3, r3, #16
 800c838:	2b00      	cmp	r3, #0
 800c83a:	d060      	beq.n	800c8fe <tcp_process+0x60a>
 800c83c:	687b      	ldr	r3, [r7, #4]
 800c83e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800c840:	4b11      	ldr	r3, [pc, #68]	@ (800c888 <tcp_process+0x594>)
 800c842:	681b      	ldr	r3, [r3, #0]
 800c844:	429a      	cmp	r2, r3
 800c846:	d15a      	bne.n	800c8fe <tcp_process+0x60a>
            pcb->unsent == NULL) {
 800c848:	687b      	ldr	r3, [r7, #4]
 800c84a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800c84c:	2b00      	cmp	r3, #0
 800c84e:	d156      	bne.n	800c8fe <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 800c850:	687b      	ldr	r3, [r7, #4]
 800c852:	8b5b      	ldrh	r3, [r3, #26]
 800c854:	f043 0302 	orr.w	r3, r3, #2
 800c858:	b29a      	uxth	r2, r3
 800c85a:	687b      	ldr	r3, [r7, #4]
 800c85c:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 800c85e:	6878      	ldr	r0, [r7, #4]
 800c860:	f7fe fdbc 	bl	800b3dc <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 800c864:	4b13      	ldr	r3, [pc, #76]	@ (800c8b4 <tcp_process+0x5c0>)
 800c866:	681b      	ldr	r3, [r3, #0]
 800c868:	687a      	ldr	r2, [r7, #4]
 800c86a:	429a      	cmp	r2, r3
 800c86c:	d105      	bne.n	800c87a <tcp_process+0x586>
 800c86e:	4b11      	ldr	r3, [pc, #68]	@ (800c8b4 <tcp_process+0x5c0>)
 800c870:	681b      	ldr	r3, [r3, #0]
 800c872:	68db      	ldr	r3, [r3, #12]
 800c874:	4a0f      	ldr	r2, [pc, #60]	@ (800c8b4 <tcp_process+0x5c0>)
 800c876:	6013      	str	r3, [r2, #0]
 800c878:	e02e      	b.n	800c8d8 <tcp_process+0x5e4>
 800c87a:	4b0e      	ldr	r3, [pc, #56]	@ (800c8b4 <tcp_process+0x5c0>)
 800c87c:	681b      	ldr	r3, [r3, #0]
 800c87e:	617b      	str	r3, [r7, #20]
 800c880:	e027      	b.n	800c8d2 <tcp_process+0x5de>
 800c882:	bf00      	nop
 800c884:	20010140 	.word	0x20010140
 800c888:	20010138 	.word	0x20010138
 800c88c:	2001013e 	.word	0x2001013e
 800c890:	20010134 	.word	0x20010134
 800c894:	20010124 	.word	0x20010124
 800c898:	2000a7f8 	.word	0x2000a7f8
 800c89c:	2000a7fc 	.word	0x2000a7fc
 800c8a0:	080144f8 	.word	0x080144f8
 800c8a4:	08014798 	.word	0x08014798
 800c8a8:	08014544 	.word	0x08014544
 800c8ac:	2001013c 	.word	0x2001013c
 800c8b0:	20010141 	.word	0x20010141
 800c8b4:	20010108 	.word	0x20010108
 800c8b8:	697b      	ldr	r3, [r7, #20]
 800c8ba:	68db      	ldr	r3, [r3, #12]
 800c8bc:	687a      	ldr	r2, [r7, #4]
 800c8be:	429a      	cmp	r2, r3
 800c8c0:	d104      	bne.n	800c8cc <tcp_process+0x5d8>
 800c8c2:	687b      	ldr	r3, [r7, #4]
 800c8c4:	68da      	ldr	r2, [r3, #12]
 800c8c6:	697b      	ldr	r3, [r7, #20]
 800c8c8:	60da      	str	r2, [r3, #12]
 800c8ca:	e005      	b.n	800c8d8 <tcp_process+0x5e4>
 800c8cc:	697b      	ldr	r3, [r7, #20]
 800c8ce:	68db      	ldr	r3, [r3, #12]
 800c8d0:	617b      	str	r3, [r7, #20]
 800c8d2:	697b      	ldr	r3, [r7, #20]
 800c8d4:	2b00      	cmp	r3, #0
 800c8d6:	d1ef      	bne.n	800c8b8 <tcp_process+0x5c4>
 800c8d8:	687b      	ldr	r3, [r7, #4]
 800c8da:	2200      	movs	r2, #0
 800c8dc:	60da      	str	r2, [r3, #12]
 800c8de:	4b77      	ldr	r3, [pc, #476]	@ (800cabc <tcp_process+0x7c8>)
 800c8e0:	2201      	movs	r2, #1
 800c8e2:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 800c8e4:	687b      	ldr	r3, [r7, #4]
 800c8e6:	220a      	movs	r2, #10
 800c8e8:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 800c8ea:	4b75      	ldr	r3, [pc, #468]	@ (800cac0 <tcp_process+0x7cc>)
 800c8ec:	681a      	ldr	r2, [r3, #0]
 800c8ee:	687b      	ldr	r3, [r7, #4]
 800c8f0:	60da      	str	r2, [r3, #12]
 800c8f2:	4a73      	ldr	r2, [pc, #460]	@ (800cac0 <tcp_process+0x7cc>)
 800c8f4:	687b      	ldr	r3, [r7, #4]
 800c8f6:	6013      	str	r3, [r2, #0]
 800c8f8:	f002 fcf4 	bl	800f2e4 <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 800c8fc:	e0d2      	b.n	800caa4 <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 800c8fe:	687b      	ldr	r3, [r7, #4]
 800c900:	8b5b      	ldrh	r3, [r3, #26]
 800c902:	f043 0302 	orr.w	r3, r3, #2
 800c906:	b29a      	uxth	r2, r3
 800c908:	687b      	ldr	r3, [r7, #4]
 800c90a:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 800c90c:	687b      	ldr	r3, [r7, #4]
 800c90e:	2208      	movs	r2, #8
 800c910:	751a      	strb	r2, [r3, #20]
      break;
 800c912:	e0c7      	b.n	800caa4 <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800c914:	4b6b      	ldr	r3, [pc, #428]	@ (800cac4 <tcp_process+0x7d0>)
 800c916:	781b      	ldrb	r3, [r3, #0]
 800c918:	f003 0310 	and.w	r3, r3, #16
 800c91c:	2b00      	cmp	r3, #0
 800c91e:	f000 80c1 	beq.w	800caa4 <tcp_process+0x7b0>
 800c922:	687b      	ldr	r3, [r7, #4]
 800c924:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800c926:	4b68      	ldr	r3, [pc, #416]	@ (800cac8 <tcp_process+0x7d4>)
 800c928:	681b      	ldr	r3, [r3, #0]
 800c92a:	429a      	cmp	r2, r3
 800c92c:	f040 80ba 	bne.w	800caa4 <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 800c930:	687b      	ldr	r3, [r7, #4]
 800c932:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800c934:	2b00      	cmp	r3, #0
 800c936:	f040 80b5 	bne.w	800caa4 <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 800c93a:	687b      	ldr	r3, [r7, #4]
 800c93c:	2206      	movs	r2, #6
 800c93e:	751a      	strb	r2, [r3, #20]
      break;
 800c940:	e0b0      	b.n	800caa4 <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 800c942:	6878      	ldr	r0, [r7, #4]
 800c944:	f000 f9ca 	bl	800ccdc <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 800c948:	4b60      	ldr	r3, [pc, #384]	@ (800cacc <tcp_process+0x7d8>)
 800c94a:	781b      	ldrb	r3, [r3, #0]
 800c94c:	f003 0320 	and.w	r3, r3, #32
 800c950:	2b00      	cmp	r3, #0
 800c952:	f000 80a9 	beq.w	800caa8 <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 800c956:	687b      	ldr	r3, [r7, #4]
 800c958:	8b5b      	ldrh	r3, [r3, #26]
 800c95a:	f043 0302 	orr.w	r3, r3, #2
 800c95e:	b29a      	uxth	r2, r3
 800c960:	687b      	ldr	r3, [r7, #4]
 800c962:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 800c964:	6878      	ldr	r0, [r7, #4]
 800c966:	f7fe fd39 	bl	800b3dc <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 800c96a:	4b59      	ldr	r3, [pc, #356]	@ (800cad0 <tcp_process+0x7dc>)
 800c96c:	681b      	ldr	r3, [r3, #0]
 800c96e:	687a      	ldr	r2, [r7, #4]
 800c970:	429a      	cmp	r2, r3
 800c972:	d105      	bne.n	800c980 <tcp_process+0x68c>
 800c974:	4b56      	ldr	r3, [pc, #344]	@ (800cad0 <tcp_process+0x7dc>)
 800c976:	681b      	ldr	r3, [r3, #0]
 800c978:	68db      	ldr	r3, [r3, #12]
 800c97a:	4a55      	ldr	r2, [pc, #340]	@ (800cad0 <tcp_process+0x7dc>)
 800c97c:	6013      	str	r3, [r2, #0]
 800c97e:	e013      	b.n	800c9a8 <tcp_process+0x6b4>
 800c980:	4b53      	ldr	r3, [pc, #332]	@ (800cad0 <tcp_process+0x7dc>)
 800c982:	681b      	ldr	r3, [r3, #0]
 800c984:	613b      	str	r3, [r7, #16]
 800c986:	e00c      	b.n	800c9a2 <tcp_process+0x6ae>
 800c988:	693b      	ldr	r3, [r7, #16]
 800c98a:	68db      	ldr	r3, [r3, #12]
 800c98c:	687a      	ldr	r2, [r7, #4]
 800c98e:	429a      	cmp	r2, r3
 800c990:	d104      	bne.n	800c99c <tcp_process+0x6a8>
 800c992:	687b      	ldr	r3, [r7, #4]
 800c994:	68da      	ldr	r2, [r3, #12]
 800c996:	693b      	ldr	r3, [r7, #16]
 800c998:	60da      	str	r2, [r3, #12]
 800c99a:	e005      	b.n	800c9a8 <tcp_process+0x6b4>
 800c99c:	693b      	ldr	r3, [r7, #16]
 800c99e:	68db      	ldr	r3, [r3, #12]
 800c9a0:	613b      	str	r3, [r7, #16]
 800c9a2:	693b      	ldr	r3, [r7, #16]
 800c9a4:	2b00      	cmp	r3, #0
 800c9a6:	d1ef      	bne.n	800c988 <tcp_process+0x694>
 800c9a8:	687b      	ldr	r3, [r7, #4]
 800c9aa:	2200      	movs	r2, #0
 800c9ac:	60da      	str	r2, [r3, #12]
 800c9ae:	4b43      	ldr	r3, [pc, #268]	@ (800cabc <tcp_process+0x7c8>)
 800c9b0:	2201      	movs	r2, #1
 800c9b2:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 800c9b4:	687b      	ldr	r3, [r7, #4]
 800c9b6:	220a      	movs	r2, #10
 800c9b8:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800c9ba:	4b41      	ldr	r3, [pc, #260]	@ (800cac0 <tcp_process+0x7cc>)
 800c9bc:	681a      	ldr	r2, [r3, #0]
 800c9be:	687b      	ldr	r3, [r7, #4]
 800c9c0:	60da      	str	r2, [r3, #12]
 800c9c2:	4a3f      	ldr	r2, [pc, #252]	@ (800cac0 <tcp_process+0x7cc>)
 800c9c4:	687b      	ldr	r3, [r7, #4]
 800c9c6:	6013      	str	r3, [r2, #0]
 800c9c8:	f002 fc8c 	bl	800f2e4 <tcp_timer_needed>
      }
      break;
 800c9cc:	e06c      	b.n	800caa8 <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 800c9ce:	6878      	ldr	r0, [r7, #4]
 800c9d0:	f000 f984 	bl	800ccdc <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800c9d4:	4b3b      	ldr	r3, [pc, #236]	@ (800cac4 <tcp_process+0x7d0>)
 800c9d6:	781b      	ldrb	r3, [r3, #0]
 800c9d8:	f003 0310 	and.w	r3, r3, #16
 800c9dc:	2b00      	cmp	r3, #0
 800c9de:	d065      	beq.n	800caac <tcp_process+0x7b8>
 800c9e0:	687b      	ldr	r3, [r7, #4]
 800c9e2:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800c9e4:	4b38      	ldr	r3, [pc, #224]	@ (800cac8 <tcp_process+0x7d4>)
 800c9e6:	681b      	ldr	r3, [r3, #0]
 800c9e8:	429a      	cmp	r2, r3
 800c9ea:	d15f      	bne.n	800caac <tcp_process+0x7b8>
 800c9ec:	687b      	ldr	r3, [r7, #4]
 800c9ee:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c9f0:	2b00      	cmp	r3, #0
 800c9f2:	d15b      	bne.n	800caac <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 800c9f4:	6878      	ldr	r0, [r7, #4]
 800c9f6:	f7fe fcf1 	bl	800b3dc <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 800c9fa:	4b35      	ldr	r3, [pc, #212]	@ (800cad0 <tcp_process+0x7dc>)
 800c9fc:	681b      	ldr	r3, [r3, #0]
 800c9fe:	687a      	ldr	r2, [r7, #4]
 800ca00:	429a      	cmp	r2, r3
 800ca02:	d105      	bne.n	800ca10 <tcp_process+0x71c>
 800ca04:	4b32      	ldr	r3, [pc, #200]	@ (800cad0 <tcp_process+0x7dc>)
 800ca06:	681b      	ldr	r3, [r3, #0]
 800ca08:	68db      	ldr	r3, [r3, #12]
 800ca0a:	4a31      	ldr	r2, [pc, #196]	@ (800cad0 <tcp_process+0x7dc>)
 800ca0c:	6013      	str	r3, [r2, #0]
 800ca0e:	e013      	b.n	800ca38 <tcp_process+0x744>
 800ca10:	4b2f      	ldr	r3, [pc, #188]	@ (800cad0 <tcp_process+0x7dc>)
 800ca12:	681b      	ldr	r3, [r3, #0]
 800ca14:	60fb      	str	r3, [r7, #12]
 800ca16:	e00c      	b.n	800ca32 <tcp_process+0x73e>
 800ca18:	68fb      	ldr	r3, [r7, #12]
 800ca1a:	68db      	ldr	r3, [r3, #12]
 800ca1c:	687a      	ldr	r2, [r7, #4]
 800ca1e:	429a      	cmp	r2, r3
 800ca20:	d104      	bne.n	800ca2c <tcp_process+0x738>
 800ca22:	687b      	ldr	r3, [r7, #4]
 800ca24:	68da      	ldr	r2, [r3, #12]
 800ca26:	68fb      	ldr	r3, [r7, #12]
 800ca28:	60da      	str	r2, [r3, #12]
 800ca2a:	e005      	b.n	800ca38 <tcp_process+0x744>
 800ca2c:	68fb      	ldr	r3, [r7, #12]
 800ca2e:	68db      	ldr	r3, [r3, #12]
 800ca30:	60fb      	str	r3, [r7, #12]
 800ca32:	68fb      	ldr	r3, [r7, #12]
 800ca34:	2b00      	cmp	r3, #0
 800ca36:	d1ef      	bne.n	800ca18 <tcp_process+0x724>
 800ca38:	687b      	ldr	r3, [r7, #4]
 800ca3a:	2200      	movs	r2, #0
 800ca3c:	60da      	str	r2, [r3, #12]
 800ca3e:	4b1f      	ldr	r3, [pc, #124]	@ (800cabc <tcp_process+0x7c8>)
 800ca40:	2201      	movs	r2, #1
 800ca42:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 800ca44:	687b      	ldr	r3, [r7, #4]
 800ca46:	220a      	movs	r2, #10
 800ca48:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800ca4a:	4b1d      	ldr	r3, [pc, #116]	@ (800cac0 <tcp_process+0x7cc>)
 800ca4c:	681a      	ldr	r2, [r3, #0]
 800ca4e:	687b      	ldr	r3, [r7, #4]
 800ca50:	60da      	str	r2, [r3, #12]
 800ca52:	4a1b      	ldr	r2, [pc, #108]	@ (800cac0 <tcp_process+0x7cc>)
 800ca54:	687b      	ldr	r3, [r7, #4]
 800ca56:	6013      	str	r3, [r2, #0]
 800ca58:	f002 fc44 	bl	800f2e4 <tcp_timer_needed>
      }
      break;
 800ca5c:	e026      	b.n	800caac <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 800ca5e:	6878      	ldr	r0, [r7, #4]
 800ca60:	f000 f93c 	bl	800ccdc <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800ca64:	4b17      	ldr	r3, [pc, #92]	@ (800cac4 <tcp_process+0x7d0>)
 800ca66:	781b      	ldrb	r3, [r3, #0]
 800ca68:	f003 0310 	and.w	r3, r3, #16
 800ca6c:	2b00      	cmp	r3, #0
 800ca6e:	d01f      	beq.n	800cab0 <tcp_process+0x7bc>
 800ca70:	687b      	ldr	r3, [r7, #4]
 800ca72:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800ca74:	4b14      	ldr	r3, [pc, #80]	@ (800cac8 <tcp_process+0x7d4>)
 800ca76:	681b      	ldr	r3, [r3, #0]
 800ca78:	429a      	cmp	r2, r3
 800ca7a:	d119      	bne.n	800cab0 <tcp_process+0x7bc>
 800ca7c:	687b      	ldr	r3, [r7, #4]
 800ca7e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800ca80:	2b00      	cmp	r3, #0
 800ca82:	d115      	bne.n	800cab0 <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 800ca84:	4b11      	ldr	r3, [pc, #68]	@ (800cacc <tcp_process+0x7d8>)
 800ca86:	781b      	ldrb	r3, [r3, #0]
 800ca88:	f043 0310 	orr.w	r3, r3, #16
 800ca8c:	b2da      	uxtb	r2, r3
 800ca8e:	4b0f      	ldr	r3, [pc, #60]	@ (800cacc <tcp_process+0x7d8>)
 800ca90:	701a      	strb	r2, [r3, #0]
      }
      break;
 800ca92:	e00d      	b.n	800cab0 <tcp_process+0x7bc>
    default:
      break;
 800ca94:	bf00      	nop
 800ca96:	e00c      	b.n	800cab2 <tcp_process+0x7be>
      break;
 800ca98:	bf00      	nop
 800ca9a:	e00a      	b.n	800cab2 <tcp_process+0x7be>
      break;
 800ca9c:	bf00      	nop
 800ca9e:	e008      	b.n	800cab2 <tcp_process+0x7be>
      break;
 800caa0:	bf00      	nop
 800caa2:	e006      	b.n	800cab2 <tcp_process+0x7be>
      break;
 800caa4:	bf00      	nop
 800caa6:	e004      	b.n	800cab2 <tcp_process+0x7be>
      break;
 800caa8:	bf00      	nop
 800caaa:	e002      	b.n	800cab2 <tcp_process+0x7be>
      break;
 800caac:	bf00      	nop
 800caae:	e000      	b.n	800cab2 <tcp_process+0x7be>
      break;
 800cab0:	bf00      	nop
  }
  return ERR_OK;
 800cab2:	2300      	movs	r3, #0
}
 800cab4:	4618      	mov	r0, r3
 800cab6:	3724      	adds	r7, #36	@ 0x24
 800cab8:	46bd      	mov	sp, r7
 800caba:	bd90      	pop	{r4, r7, pc}
 800cabc:	20010110 	.word	0x20010110
 800cac0:	2001010c 	.word	0x2001010c
 800cac4:	20010140 	.word	0x20010140
 800cac8:	20010138 	.word	0x20010138
 800cacc:	20010141 	.word	0x20010141
 800cad0:	20010108 	.word	0x20010108

0800cad4 <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 800cad4:	b590      	push	{r4, r7, lr}
 800cad6:	b085      	sub	sp, #20
 800cad8:	af00      	add	r7, sp, #0
 800cada:	6078      	str	r0, [r7, #4]
 800cadc:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 800cade:	687b      	ldr	r3, [r7, #4]
 800cae0:	2b00      	cmp	r3, #0
 800cae2:	d106      	bne.n	800caf2 <tcp_oos_insert_segment+0x1e>
 800cae4:	4b3b      	ldr	r3, [pc, #236]	@ (800cbd4 <tcp_oos_insert_segment+0x100>)
 800cae6:	f240 421f 	movw	r2, #1055	@ 0x41f
 800caea:	493b      	ldr	r1, [pc, #236]	@ (800cbd8 <tcp_oos_insert_segment+0x104>)
 800caec:	483b      	ldr	r0, [pc, #236]	@ (800cbdc <tcp_oos_insert_segment+0x108>)
 800caee:	f005 fbe5 	bl	80122bc <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 800caf2:	687b      	ldr	r3, [r7, #4]
 800caf4:	68db      	ldr	r3, [r3, #12]
 800caf6:	899b      	ldrh	r3, [r3, #12]
 800caf8:	b29b      	uxth	r3, r3
 800cafa:	4618      	mov	r0, r3
 800cafc:	f7fb fc0e 	bl	800831c <lwip_htons>
 800cb00:	4603      	mov	r3, r0
 800cb02:	b2db      	uxtb	r3, r3
 800cb04:	f003 0301 	and.w	r3, r3, #1
 800cb08:	2b00      	cmp	r3, #0
 800cb0a:	d028      	beq.n	800cb5e <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 800cb0c:	6838      	ldr	r0, [r7, #0]
 800cb0e:	f7fe fa63 	bl	800afd8 <tcp_segs_free>
    next = NULL;
 800cb12:	2300      	movs	r3, #0
 800cb14:	603b      	str	r3, [r7, #0]
 800cb16:	e056      	b.n	800cbc6 <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 800cb18:	683b      	ldr	r3, [r7, #0]
 800cb1a:	68db      	ldr	r3, [r3, #12]
 800cb1c:	899b      	ldrh	r3, [r3, #12]
 800cb1e:	b29b      	uxth	r3, r3
 800cb20:	4618      	mov	r0, r3
 800cb22:	f7fb fbfb 	bl	800831c <lwip_htons>
 800cb26:	4603      	mov	r3, r0
 800cb28:	b2db      	uxtb	r3, r3
 800cb2a:	f003 0301 	and.w	r3, r3, #1
 800cb2e:	2b00      	cmp	r3, #0
 800cb30:	d00d      	beq.n	800cb4e <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 800cb32:	687b      	ldr	r3, [r7, #4]
 800cb34:	68db      	ldr	r3, [r3, #12]
 800cb36:	899b      	ldrh	r3, [r3, #12]
 800cb38:	b29c      	uxth	r4, r3
 800cb3a:	2001      	movs	r0, #1
 800cb3c:	f7fb fbee 	bl	800831c <lwip_htons>
 800cb40:	4603      	mov	r3, r0
 800cb42:	461a      	mov	r2, r3
 800cb44:	687b      	ldr	r3, [r7, #4]
 800cb46:	68db      	ldr	r3, [r3, #12]
 800cb48:	4322      	orrs	r2, r4
 800cb4a:	b292      	uxth	r2, r2
 800cb4c:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 800cb4e:	683b      	ldr	r3, [r7, #0]
 800cb50:	60fb      	str	r3, [r7, #12]
      next = next->next;
 800cb52:	683b      	ldr	r3, [r7, #0]
 800cb54:	681b      	ldr	r3, [r3, #0]
 800cb56:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 800cb58:	68f8      	ldr	r0, [r7, #12]
 800cb5a:	f7fe fa52 	bl	800b002 <tcp_seg_free>
    while (next &&
 800cb5e:	683b      	ldr	r3, [r7, #0]
 800cb60:	2b00      	cmp	r3, #0
 800cb62:	d00e      	beq.n	800cb82 <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 800cb64:	687b      	ldr	r3, [r7, #4]
 800cb66:	891b      	ldrh	r3, [r3, #8]
 800cb68:	461a      	mov	r2, r3
 800cb6a:	4b1d      	ldr	r3, [pc, #116]	@ (800cbe0 <tcp_oos_insert_segment+0x10c>)
 800cb6c:	681b      	ldr	r3, [r3, #0]
 800cb6e:	441a      	add	r2, r3
 800cb70:	683b      	ldr	r3, [r7, #0]
 800cb72:	68db      	ldr	r3, [r3, #12]
 800cb74:	685b      	ldr	r3, [r3, #4]
 800cb76:	6839      	ldr	r1, [r7, #0]
 800cb78:	8909      	ldrh	r1, [r1, #8]
 800cb7a:	440b      	add	r3, r1
 800cb7c:	1ad3      	subs	r3, r2, r3
    while (next &&
 800cb7e:	2b00      	cmp	r3, #0
 800cb80:	daca      	bge.n	800cb18 <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 800cb82:	683b      	ldr	r3, [r7, #0]
 800cb84:	2b00      	cmp	r3, #0
 800cb86:	d01e      	beq.n	800cbc6 <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 800cb88:	687b      	ldr	r3, [r7, #4]
 800cb8a:	891b      	ldrh	r3, [r3, #8]
 800cb8c:	461a      	mov	r2, r3
 800cb8e:	4b14      	ldr	r3, [pc, #80]	@ (800cbe0 <tcp_oos_insert_segment+0x10c>)
 800cb90:	681b      	ldr	r3, [r3, #0]
 800cb92:	441a      	add	r2, r3
 800cb94:	683b      	ldr	r3, [r7, #0]
 800cb96:	68db      	ldr	r3, [r3, #12]
 800cb98:	685b      	ldr	r3, [r3, #4]
 800cb9a:	1ad3      	subs	r3, r2, r3
    if (next &&
 800cb9c:	2b00      	cmp	r3, #0
 800cb9e:	dd12      	ble.n	800cbc6 <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 800cba0:	683b      	ldr	r3, [r7, #0]
 800cba2:	68db      	ldr	r3, [r3, #12]
 800cba4:	685b      	ldr	r3, [r3, #4]
 800cba6:	b29a      	uxth	r2, r3
 800cba8:	4b0d      	ldr	r3, [pc, #52]	@ (800cbe0 <tcp_oos_insert_segment+0x10c>)
 800cbaa:	681b      	ldr	r3, [r3, #0]
 800cbac:	b29b      	uxth	r3, r3
 800cbae:	1ad3      	subs	r3, r2, r3
 800cbb0:	b29a      	uxth	r2, r3
 800cbb2:	687b      	ldr	r3, [r7, #4]
 800cbb4:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 800cbb6:	687b      	ldr	r3, [r7, #4]
 800cbb8:	685a      	ldr	r2, [r3, #4]
 800cbba:	687b      	ldr	r3, [r7, #4]
 800cbbc:	891b      	ldrh	r3, [r3, #8]
 800cbbe:	4619      	mov	r1, r3
 800cbc0:	4610      	mov	r0, r2
 800cbc2:	f7fc fe17 	bl	80097f4 <pbuf_realloc>
    }
  }
  cseg->next = next;
 800cbc6:	687b      	ldr	r3, [r7, #4]
 800cbc8:	683a      	ldr	r2, [r7, #0]
 800cbca:	601a      	str	r2, [r3, #0]
}
 800cbcc:	bf00      	nop
 800cbce:	3714      	adds	r7, #20
 800cbd0:	46bd      	mov	sp, r7
 800cbd2:	bd90      	pop	{r4, r7, pc}
 800cbd4:	080144f8 	.word	0x080144f8
 800cbd8:	080147b8 	.word	0x080147b8
 800cbdc:	08014544 	.word	0x08014544
 800cbe0:	20010134 	.word	0x20010134

0800cbe4 <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 800cbe4:	b5b0      	push	{r4, r5, r7, lr}
 800cbe6:	b086      	sub	sp, #24
 800cbe8:	af00      	add	r7, sp, #0
 800cbea:	60f8      	str	r0, [r7, #12]
 800cbec:	60b9      	str	r1, [r7, #8]
 800cbee:	607a      	str	r2, [r7, #4]
 800cbf0:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 800cbf2:	e03e      	b.n	800cc72 <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 800cbf4:	68bb      	ldr	r3, [r7, #8]
 800cbf6:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 800cbf8:	68bb      	ldr	r3, [r7, #8]
 800cbfa:	681b      	ldr	r3, [r3, #0]
 800cbfc:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 800cbfe:	697b      	ldr	r3, [r7, #20]
 800cc00:	685b      	ldr	r3, [r3, #4]
 800cc02:	4618      	mov	r0, r3
 800cc04:	f7fd f80a 	bl	8009c1c <pbuf_clen>
 800cc08:	4603      	mov	r3, r0
 800cc0a:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 800cc0c:	68fb      	ldr	r3, [r7, #12]
 800cc0e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800cc12:	8a7a      	ldrh	r2, [r7, #18]
 800cc14:	429a      	cmp	r2, r3
 800cc16:	d906      	bls.n	800cc26 <tcp_free_acked_segments+0x42>
 800cc18:	4b2a      	ldr	r3, [pc, #168]	@ (800ccc4 <tcp_free_acked_segments+0xe0>)
 800cc1a:	f240 4257 	movw	r2, #1111	@ 0x457
 800cc1e:	492a      	ldr	r1, [pc, #168]	@ (800ccc8 <tcp_free_acked_segments+0xe4>)
 800cc20:	482a      	ldr	r0, [pc, #168]	@ (800cccc <tcp_free_acked_segments+0xe8>)
 800cc22:	f005 fb4b 	bl	80122bc <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 800cc26:	68fb      	ldr	r3, [r7, #12]
 800cc28:	f8b3 2066 	ldrh.w	r2, [r3, #102]	@ 0x66
 800cc2c:	8a7b      	ldrh	r3, [r7, #18]
 800cc2e:	1ad3      	subs	r3, r2, r3
 800cc30:	b29a      	uxth	r2, r3
 800cc32:	68fb      	ldr	r3, [r7, #12]
 800cc34:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 800cc38:	697b      	ldr	r3, [r7, #20]
 800cc3a:	891a      	ldrh	r2, [r3, #8]
 800cc3c:	4b24      	ldr	r3, [pc, #144]	@ (800ccd0 <tcp_free_acked_segments+0xec>)
 800cc3e:	881b      	ldrh	r3, [r3, #0]
 800cc40:	4413      	add	r3, r2
 800cc42:	b29a      	uxth	r2, r3
 800cc44:	4b22      	ldr	r3, [pc, #136]	@ (800ccd0 <tcp_free_acked_segments+0xec>)
 800cc46:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 800cc48:	6978      	ldr	r0, [r7, #20]
 800cc4a:	f7fe f9da 	bl	800b002 <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 800cc4e:	68fb      	ldr	r3, [r7, #12]
 800cc50:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800cc54:	2b00      	cmp	r3, #0
 800cc56:	d00c      	beq.n	800cc72 <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 800cc58:	68bb      	ldr	r3, [r7, #8]
 800cc5a:	2b00      	cmp	r3, #0
 800cc5c:	d109      	bne.n	800cc72 <tcp_free_acked_segments+0x8e>
 800cc5e:	683b      	ldr	r3, [r7, #0]
 800cc60:	2b00      	cmp	r3, #0
 800cc62:	d106      	bne.n	800cc72 <tcp_free_acked_segments+0x8e>
 800cc64:	4b17      	ldr	r3, [pc, #92]	@ (800ccc4 <tcp_free_acked_segments+0xe0>)
 800cc66:	f240 4261 	movw	r2, #1121	@ 0x461
 800cc6a:	491a      	ldr	r1, [pc, #104]	@ (800ccd4 <tcp_free_acked_segments+0xf0>)
 800cc6c:	4817      	ldr	r0, [pc, #92]	@ (800cccc <tcp_free_acked_segments+0xe8>)
 800cc6e:	f005 fb25 	bl	80122bc <iprintf>
  while (seg_list != NULL &&
 800cc72:	68bb      	ldr	r3, [r7, #8]
 800cc74:	2b00      	cmp	r3, #0
 800cc76:	d020      	beq.n	800ccba <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 800cc78:	68bb      	ldr	r3, [r7, #8]
 800cc7a:	68db      	ldr	r3, [r3, #12]
 800cc7c:	685b      	ldr	r3, [r3, #4]
 800cc7e:	4618      	mov	r0, r3
 800cc80:	f7fb fb61 	bl	8008346 <lwip_htonl>
 800cc84:	4604      	mov	r4, r0
 800cc86:	68bb      	ldr	r3, [r7, #8]
 800cc88:	891b      	ldrh	r3, [r3, #8]
 800cc8a:	461d      	mov	r5, r3
 800cc8c:	68bb      	ldr	r3, [r7, #8]
 800cc8e:	68db      	ldr	r3, [r3, #12]
 800cc90:	899b      	ldrh	r3, [r3, #12]
 800cc92:	b29b      	uxth	r3, r3
 800cc94:	4618      	mov	r0, r3
 800cc96:	f7fb fb41 	bl	800831c <lwip_htons>
 800cc9a:	4603      	mov	r3, r0
 800cc9c:	b2db      	uxtb	r3, r3
 800cc9e:	f003 0303 	and.w	r3, r3, #3
 800cca2:	2b00      	cmp	r3, #0
 800cca4:	d001      	beq.n	800ccaa <tcp_free_acked_segments+0xc6>
 800cca6:	2301      	movs	r3, #1
 800cca8:	e000      	b.n	800ccac <tcp_free_acked_segments+0xc8>
 800ccaa:	2300      	movs	r3, #0
 800ccac:	442b      	add	r3, r5
 800ccae:	18e2      	adds	r2, r4, r3
 800ccb0:	4b09      	ldr	r3, [pc, #36]	@ (800ccd8 <tcp_free_acked_segments+0xf4>)
 800ccb2:	681b      	ldr	r3, [r3, #0]
 800ccb4:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 800ccb6:	2b00      	cmp	r3, #0
 800ccb8:	dd9c      	ble.n	800cbf4 <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 800ccba:	68bb      	ldr	r3, [r7, #8]
}
 800ccbc:	4618      	mov	r0, r3
 800ccbe:	3718      	adds	r7, #24
 800ccc0:	46bd      	mov	sp, r7
 800ccc2:	bdb0      	pop	{r4, r5, r7, pc}
 800ccc4:	080144f8 	.word	0x080144f8
 800ccc8:	080147e0 	.word	0x080147e0
 800cccc:	08014544 	.word	0x08014544
 800ccd0:	2001013c 	.word	0x2001013c
 800ccd4:	08014808 	.word	0x08014808
 800ccd8:	20010138 	.word	0x20010138

0800ccdc <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 800ccdc:	b5b0      	push	{r4, r5, r7, lr}
 800ccde:	b094      	sub	sp, #80	@ 0x50
 800cce0:	af00      	add	r7, sp, #0
 800cce2:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 800cce4:	2300      	movs	r3, #0
 800cce6:	64bb      	str	r3, [r7, #72]	@ 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 800cce8:	687b      	ldr	r3, [r7, #4]
 800ccea:	2b00      	cmp	r3, #0
 800ccec:	d106      	bne.n	800ccfc <tcp_receive+0x20>
 800ccee:	4b91      	ldr	r3, [pc, #580]	@ (800cf34 <tcp_receive+0x258>)
 800ccf0:	f240 427b 	movw	r2, #1147	@ 0x47b
 800ccf4:	4990      	ldr	r1, [pc, #576]	@ (800cf38 <tcp_receive+0x25c>)
 800ccf6:	4891      	ldr	r0, [pc, #580]	@ (800cf3c <tcp_receive+0x260>)
 800ccf8:	f005 fae0 	bl	80122bc <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 800ccfc:	687b      	ldr	r3, [r7, #4]
 800ccfe:	7d1b      	ldrb	r3, [r3, #20]
 800cd00:	2b03      	cmp	r3, #3
 800cd02:	d806      	bhi.n	800cd12 <tcp_receive+0x36>
 800cd04:	4b8b      	ldr	r3, [pc, #556]	@ (800cf34 <tcp_receive+0x258>)
 800cd06:	f240 427c 	movw	r2, #1148	@ 0x47c
 800cd0a:	498d      	ldr	r1, [pc, #564]	@ (800cf40 <tcp_receive+0x264>)
 800cd0c:	488b      	ldr	r0, [pc, #556]	@ (800cf3c <tcp_receive+0x260>)
 800cd0e:	f005 fad5 	bl	80122bc <iprintf>

  if (flags & TCP_ACK) {
 800cd12:	4b8c      	ldr	r3, [pc, #560]	@ (800cf44 <tcp_receive+0x268>)
 800cd14:	781b      	ldrb	r3, [r3, #0]
 800cd16:	f003 0310 	and.w	r3, r3, #16
 800cd1a:	2b00      	cmp	r3, #0
 800cd1c:	f000 8264 	beq.w	800d1e8 <tcp_receive+0x50c>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 800cd20:	687b      	ldr	r3, [r7, #4]
 800cd22:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800cd26:	461a      	mov	r2, r3
 800cd28:	687b      	ldr	r3, [r7, #4]
 800cd2a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800cd2c:	4413      	add	r3, r2
 800cd2e:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800cd30:	687b      	ldr	r3, [r7, #4]
 800cd32:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800cd34:	4b84      	ldr	r3, [pc, #528]	@ (800cf48 <tcp_receive+0x26c>)
 800cd36:	681b      	ldr	r3, [r3, #0]
 800cd38:	1ad3      	subs	r3, r2, r3
 800cd3a:	2b00      	cmp	r3, #0
 800cd3c:	db1b      	blt.n	800cd76 <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800cd3e:	687b      	ldr	r3, [r7, #4]
 800cd40:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800cd42:	4b81      	ldr	r3, [pc, #516]	@ (800cf48 <tcp_receive+0x26c>)
 800cd44:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800cd46:	429a      	cmp	r2, r3
 800cd48:	d106      	bne.n	800cd58 <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800cd4a:	687b      	ldr	r3, [r7, #4]
 800cd4c:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800cd4e:	4b7f      	ldr	r3, [pc, #508]	@ (800cf4c <tcp_receive+0x270>)
 800cd50:	681b      	ldr	r3, [r3, #0]
 800cd52:	1ad3      	subs	r3, r2, r3
 800cd54:	2b00      	cmp	r3, #0
 800cd56:	db0e      	blt.n	800cd76 <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 800cd58:	687b      	ldr	r3, [r7, #4]
 800cd5a:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800cd5c:	4b7b      	ldr	r3, [pc, #492]	@ (800cf4c <tcp_receive+0x270>)
 800cd5e:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800cd60:	429a      	cmp	r2, r3
 800cd62:	d125      	bne.n	800cdb0 <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 800cd64:	4b7a      	ldr	r3, [pc, #488]	@ (800cf50 <tcp_receive+0x274>)
 800cd66:	681b      	ldr	r3, [r3, #0]
 800cd68:	89db      	ldrh	r3, [r3, #14]
 800cd6a:	b29a      	uxth	r2, r3
 800cd6c:	687b      	ldr	r3, [r7, #4]
 800cd6e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800cd72:	429a      	cmp	r2, r3
 800cd74:	d91c      	bls.n	800cdb0 <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 800cd76:	4b76      	ldr	r3, [pc, #472]	@ (800cf50 <tcp_receive+0x274>)
 800cd78:	681b      	ldr	r3, [r3, #0]
 800cd7a:	89db      	ldrh	r3, [r3, #14]
 800cd7c:	b29a      	uxth	r2, r3
 800cd7e:	687b      	ldr	r3, [r7, #4]
 800cd80:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 800cd84:	687b      	ldr	r3, [r7, #4]
 800cd86:	f8b3 2062 	ldrh.w	r2, [r3, #98]	@ 0x62
 800cd8a:	687b      	ldr	r3, [r7, #4]
 800cd8c:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800cd90:	429a      	cmp	r2, r3
 800cd92:	d205      	bcs.n	800cda0 <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 800cd94:	687b      	ldr	r3, [r7, #4]
 800cd96:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 800cd9a:	687b      	ldr	r3, [r7, #4]
 800cd9c:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
      }
      pcb->snd_wl1 = seqno;
 800cda0:	4b69      	ldr	r3, [pc, #420]	@ (800cf48 <tcp_receive+0x26c>)
 800cda2:	681a      	ldr	r2, [r3, #0]
 800cda4:	687b      	ldr	r3, [r7, #4]
 800cda6:	655a      	str	r2, [r3, #84]	@ 0x54
      pcb->snd_wl2 = ackno;
 800cda8:	4b68      	ldr	r3, [pc, #416]	@ (800cf4c <tcp_receive+0x270>)
 800cdaa:	681a      	ldr	r2, [r3, #0]
 800cdac:	687b      	ldr	r3, [r7, #4]
 800cdae:	659a      	str	r2, [r3, #88]	@ 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 800cdb0:	4b66      	ldr	r3, [pc, #408]	@ (800cf4c <tcp_receive+0x270>)
 800cdb2:	681a      	ldr	r2, [r3, #0]
 800cdb4:	687b      	ldr	r3, [r7, #4]
 800cdb6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800cdb8:	1ad3      	subs	r3, r2, r3
 800cdba:	2b00      	cmp	r3, #0
 800cdbc:	dc58      	bgt.n	800ce70 <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 800cdbe:	4b65      	ldr	r3, [pc, #404]	@ (800cf54 <tcp_receive+0x278>)
 800cdc0:	881b      	ldrh	r3, [r3, #0]
 800cdc2:	2b00      	cmp	r3, #0
 800cdc4:	d14b      	bne.n	800ce5e <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 800cdc6:	687b      	ldr	r3, [r7, #4]
 800cdc8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800cdca:	687a      	ldr	r2, [r7, #4]
 800cdcc:	f8b2 2060 	ldrh.w	r2, [r2, #96]	@ 0x60
 800cdd0:	4413      	add	r3, r2
 800cdd2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800cdd4:	429a      	cmp	r2, r3
 800cdd6:	d142      	bne.n	800ce5e <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 800cdd8:	687b      	ldr	r3, [r7, #4]
 800cdda:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 800cdde:	2b00      	cmp	r3, #0
 800cde0:	db3d      	blt.n	800ce5e <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 800cde2:	687b      	ldr	r3, [r7, #4]
 800cde4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800cde6:	4b59      	ldr	r3, [pc, #356]	@ (800cf4c <tcp_receive+0x270>)
 800cde8:	681b      	ldr	r3, [r3, #0]
 800cdea:	429a      	cmp	r2, r3
 800cdec:	d137      	bne.n	800ce5e <tcp_receive+0x182>
              found_dupack = 1;
 800cdee:	2301      	movs	r3, #1
 800cdf0:	64bb      	str	r3, [r7, #72]	@ 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 800cdf2:	687b      	ldr	r3, [r7, #4]
 800cdf4:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800cdf8:	2bff      	cmp	r3, #255	@ 0xff
 800cdfa:	d007      	beq.n	800ce0c <tcp_receive+0x130>
                ++pcb->dupacks;
 800cdfc:	687b      	ldr	r3, [r7, #4]
 800cdfe:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800ce02:	3301      	adds	r3, #1
 800ce04:	b2da      	uxtb	r2, r3
 800ce06:	687b      	ldr	r3, [r7, #4]
 800ce08:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
              }
              if (pcb->dupacks > 3) {
 800ce0c:	687b      	ldr	r3, [r7, #4]
 800ce0e:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800ce12:	2b03      	cmp	r3, #3
 800ce14:	d91b      	bls.n	800ce4e <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 800ce16:	687b      	ldr	r3, [r7, #4]
 800ce18:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 800ce1c:	687b      	ldr	r3, [r7, #4]
 800ce1e:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800ce20:	4413      	add	r3, r2
 800ce22:	b29a      	uxth	r2, r3
 800ce24:	687b      	ldr	r3, [r7, #4]
 800ce26:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 800ce2a:	429a      	cmp	r2, r3
 800ce2c:	d30a      	bcc.n	800ce44 <tcp_receive+0x168>
 800ce2e:	687b      	ldr	r3, [r7, #4]
 800ce30:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 800ce34:	687b      	ldr	r3, [r7, #4]
 800ce36:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800ce38:	4413      	add	r3, r2
 800ce3a:	b29a      	uxth	r2, r3
 800ce3c:	687b      	ldr	r3, [r7, #4]
 800ce3e:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 800ce42:	e004      	b.n	800ce4e <tcp_receive+0x172>
 800ce44:	687b      	ldr	r3, [r7, #4]
 800ce46:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800ce4a:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
              }
              if (pcb->dupacks >= 3) {
 800ce4e:	687b      	ldr	r3, [r7, #4]
 800ce50:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800ce54:	2b02      	cmp	r3, #2
 800ce56:	d902      	bls.n	800ce5e <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 800ce58:	6878      	ldr	r0, [r7, #4]
 800ce5a:	f001 fee7 	bl	800ec2c <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 800ce5e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800ce60:	2b00      	cmp	r3, #0
 800ce62:	f040 8161 	bne.w	800d128 <tcp_receive+0x44c>
        pcb->dupacks = 0;
 800ce66:	687b      	ldr	r3, [r7, #4]
 800ce68:	2200      	movs	r2, #0
 800ce6a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800ce6e:	e15b      	b.n	800d128 <tcp_receive+0x44c>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800ce70:	4b36      	ldr	r3, [pc, #216]	@ (800cf4c <tcp_receive+0x270>)
 800ce72:	681a      	ldr	r2, [r3, #0]
 800ce74:	687b      	ldr	r3, [r7, #4]
 800ce76:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ce78:	1ad3      	subs	r3, r2, r3
 800ce7a:	3b01      	subs	r3, #1
 800ce7c:	2b00      	cmp	r3, #0
 800ce7e:	f2c0 814e 	blt.w	800d11e <tcp_receive+0x442>
 800ce82:	4b32      	ldr	r3, [pc, #200]	@ (800cf4c <tcp_receive+0x270>)
 800ce84:	681a      	ldr	r2, [r3, #0]
 800ce86:	687b      	ldr	r3, [r7, #4]
 800ce88:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ce8a:	1ad3      	subs	r3, r2, r3
 800ce8c:	2b00      	cmp	r3, #0
 800ce8e:	f300 8146 	bgt.w	800d11e <tcp_receive+0x442>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 800ce92:	687b      	ldr	r3, [r7, #4]
 800ce94:	8b5b      	ldrh	r3, [r3, #26]
 800ce96:	f003 0304 	and.w	r3, r3, #4
 800ce9a:	2b00      	cmp	r3, #0
 800ce9c:	d010      	beq.n	800cec0 <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 800ce9e:	687b      	ldr	r3, [r7, #4]
 800cea0:	8b5b      	ldrh	r3, [r3, #26]
 800cea2:	f023 0304 	bic.w	r3, r3, #4
 800cea6:	b29a      	uxth	r2, r3
 800cea8:	687b      	ldr	r3, [r7, #4]
 800ceaa:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 800ceac:	687b      	ldr	r3, [r7, #4]
 800ceae:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 800ceb2:	687b      	ldr	r3, [r7, #4]
 800ceb4:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
        pcb->bytes_acked = 0;
 800ceb8:	687b      	ldr	r3, [r7, #4]
 800ceba:	2200      	movs	r2, #0
 800cebc:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 800cec0:	687b      	ldr	r3, [r7, #4]
 800cec2:	2200      	movs	r2, #0
 800cec4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 800cec8:	687b      	ldr	r3, [r7, #4]
 800ceca:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 800cece:	10db      	asrs	r3, r3, #3
 800ced0:	b21b      	sxth	r3, r3
 800ced2:	b29a      	uxth	r2, r3
 800ced4:	687b      	ldr	r3, [r7, #4]
 800ced6:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 800ceda:	b29b      	uxth	r3, r3
 800cedc:	4413      	add	r3, r2
 800cede:	b29b      	uxth	r3, r3
 800cee0:	b21a      	sxth	r2, r3
 800cee2:	687b      	ldr	r3, [r7, #4]
 800cee4:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 800cee8:	4b18      	ldr	r3, [pc, #96]	@ (800cf4c <tcp_receive+0x270>)
 800ceea:	681b      	ldr	r3, [r3, #0]
 800ceec:	b29a      	uxth	r2, r3
 800ceee:	687b      	ldr	r3, [r7, #4]
 800cef0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800cef2:	b29b      	uxth	r3, r3
 800cef4:	1ad3      	subs	r3, r2, r3
 800cef6:	85fb      	strh	r3, [r7, #46]	@ 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 800cef8:	687b      	ldr	r3, [r7, #4]
 800cefa:	2200      	movs	r2, #0
 800cefc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
      pcb->lastack = ackno;
 800cf00:	4b12      	ldr	r3, [pc, #72]	@ (800cf4c <tcp_receive+0x270>)
 800cf02:	681a      	ldr	r2, [r3, #0]
 800cf04:	687b      	ldr	r3, [r7, #4]
 800cf06:	645a      	str	r2, [r3, #68]	@ 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 800cf08:	687b      	ldr	r3, [r7, #4]
 800cf0a:	7d1b      	ldrb	r3, [r3, #20]
 800cf0c:	2b03      	cmp	r3, #3
 800cf0e:	f240 8097 	bls.w	800d040 <tcp_receive+0x364>
        if (pcb->cwnd < pcb->ssthresh) {
 800cf12:	687b      	ldr	r3, [r7, #4]
 800cf14:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 800cf18:	687b      	ldr	r3, [r7, #4]
 800cf1a:	f8b3 304a 	ldrh.w	r3, [r3, #74]	@ 0x4a
 800cf1e:	429a      	cmp	r2, r3
 800cf20:	d245      	bcs.n	800cfae <tcp_receive+0x2d2>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 800cf22:	687b      	ldr	r3, [r7, #4]
 800cf24:	8b5b      	ldrh	r3, [r3, #26]
 800cf26:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800cf2a:	2b00      	cmp	r3, #0
 800cf2c:	d014      	beq.n	800cf58 <tcp_receive+0x27c>
 800cf2e:	2301      	movs	r3, #1
 800cf30:	e013      	b.n	800cf5a <tcp_receive+0x27e>
 800cf32:	bf00      	nop
 800cf34:	080144f8 	.word	0x080144f8
 800cf38:	08014828 	.word	0x08014828
 800cf3c:	08014544 	.word	0x08014544
 800cf40:	08014844 	.word	0x08014844
 800cf44:	20010140 	.word	0x20010140
 800cf48:	20010134 	.word	0x20010134
 800cf4c:	20010138 	.word	0x20010138
 800cf50:	20010124 	.word	0x20010124
 800cf54:	2001013e 	.word	0x2001013e
 800cf58:	2302      	movs	r3, #2
 800cf5a:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 800cf5e:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 800cf62:	b29a      	uxth	r2, r3
 800cf64:	687b      	ldr	r3, [r7, #4]
 800cf66:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800cf68:	fb12 f303 	smulbb	r3, r2, r3
 800cf6c:	b29b      	uxth	r3, r3
 800cf6e:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 800cf70:	4293      	cmp	r3, r2
 800cf72:	bf28      	it	cs
 800cf74:	4613      	movcs	r3, r2
 800cf76:	857b      	strh	r3, [r7, #42]	@ 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 800cf78:	687b      	ldr	r3, [r7, #4]
 800cf7a:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 800cf7e:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800cf80:	4413      	add	r3, r2
 800cf82:	b29a      	uxth	r2, r3
 800cf84:	687b      	ldr	r3, [r7, #4]
 800cf86:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 800cf8a:	429a      	cmp	r2, r3
 800cf8c:	d309      	bcc.n	800cfa2 <tcp_receive+0x2c6>
 800cf8e:	687b      	ldr	r3, [r7, #4]
 800cf90:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 800cf94:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800cf96:	4413      	add	r3, r2
 800cf98:	b29a      	uxth	r2, r3
 800cf9a:	687b      	ldr	r3, [r7, #4]
 800cf9c:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 800cfa0:	e04e      	b.n	800d040 <tcp_receive+0x364>
 800cfa2:	687b      	ldr	r3, [r7, #4]
 800cfa4:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800cfa8:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 800cfac:	e048      	b.n	800d040 <tcp_receive+0x364>
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 800cfae:	687b      	ldr	r3, [r7, #4]
 800cfb0:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 800cfb4:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800cfb6:	4413      	add	r3, r2
 800cfb8:	b29a      	uxth	r2, r3
 800cfba:	687b      	ldr	r3, [r7, #4]
 800cfbc:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800cfc0:	429a      	cmp	r2, r3
 800cfc2:	d309      	bcc.n	800cfd8 <tcp_receive+0x2fc>
 800cfc4:	687b      	ldr	r3, [r7, #4]
 800cfc6:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 800cfca:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800cfcc:	4413      	add	r3, r2
 800cfce:	b29a      	uxth	r2, r3
 800cfd0:	687b      	ldr	r3, [r7, #4]
 800cfd2:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800cfd6:	e004      	b.n	800cfe2 <tcp_receive+0x306>
 800cfd8:	687b      	ldr	r3, [r7, #4]
 800cfda:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800cfde:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 800cfe2:	687b      	ldr	r3, [r7, #4]
 800cfe4:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 800cfe8:	687b      	ldr	r3, [r7, #4]
 800cfea:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 800cfee:	429a      	cmp	r2, r3
 800cff0:	d326      	bcc.n	800d040 <tcp_receive+0x364>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 800cff2:	687b      	ldr	r3, [r7, #4]
 800cff4:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 800cff8:	687b      	ldr	r3, [r7, #4]
 800cffa:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 800cffe:	1ad3      	subs	r3, r2, r3
 800d000:	b29a      	uxth	r2, r3
 800d002:	687b      	ldr	r3, [r7, #4]
 800d004:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 800d008:	687b      	ldr	r3, [r7, #4]
 800d00a:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 800d00e:	687b      	ldr	r3, [r7, #4]
 800d010:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800d012:	4413      	add	r3, r2
 800d014:	b29a      	uxth	r2, r3
 800d016:	687b      	ldr	r3, [r7, #4]
 800d018:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 800d01c:	429a      	cmp	r2, r3
 800d01e:	d30a      	bcc.n	800d036 <tcp_receive+0x35a>
 800d020:	687b      	ldr	r3, [r7, #4]
 800d022:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 800d026:	687b      	ldr	r3, [r7, #4]
 800d028:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800d02a:	4413      	add	r3, r2
 800d02c:	b29a      	uxth	r2, r3
 800d02e:	687b      	ldr	r3, [r7, #4]
 800d030:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 800d034:	e004      	b.n	800d040 <tcp_receive+0x364>
 800d036:	687b      	ldr	r3, [r7, #4]
 800d038:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800d03c:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 800d040:	687b      	ldr	r3, [r7, #4]
 800d042:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 800d044:	687b      	ldr	r3, [r7, #4]
 800d046:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800d048:	4a98      	ldr	r2, [pc, #608]	@ (800d2ac <tcp_receive+0x5d0>)
 800d04a:	6878      	ldr	r0, [r7, #4]
 800d04c:	f7ff fdca 	bl	800cbe4 <tcp_free_acked_segments>
 800d050:	4602      	mov	r2, r0
 800d052:	687b      	ldr	r3, [r7, #4]
 800d054:	671a      	str	r2, [r3, #112]	@ 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 800d056:	687b      	ldr	r3, [r7, #4]
 800d058:	6ed9      	ldr	r1, [r3, #108]	@ 0x6c
 800d05a:	687b      	ldr	r3, [r7, #4]
 800d05c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800d05e:	4a94      	ldr	r2, [pc, #592]	@ (800d2b0 <tcp_receive+0x5d4>)
 800d060:	6878      	ldr	r0, [r7, #4]
 800d062:	f7ff fdbf 	bl	800cbe4 <tcp_free_acked_segments>
 800d066:	4602      	mov	r2, r0
 800d068:	687b      	ldr	r3, [r7, #4]
 800d06a:	66da      	str	r2, [r3, #108]	@ 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 800d06c:	687b      	ldr	r3, [r7, #4]
 800d06e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800d070:	2b00      	cmp	r3, #0
 800d072:	d104      	bne.n	800d07e <tcp_receive+0x3a2>
        pcb->rtime = -1;
 800d074:	687b      	ldr	r3, [r7, #4]
 800d076:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800d07a:	861a      	strh	r2, [r3, #48]	@ 0x30
 800d07c:	e002      	b.n	800d084 <tcp_receive+0x3a8>
      } else {
        pcb->rtime = 0;
 800d07e:	687b      	ldr	r3, [r7, #4]
 800d080:	2200      	movs	r2, #0
 800d082:	861a      	strh	r2, [r3, #48]	@ 0x30
      }

      pcb->polltmr = 0;
 800d084:	687b      	ldr	r3, [r7, #4]
 800d086:	2200      	movs	r2, #0
 800d088:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 800d08a:	687b      	ldr	r3, [r7, #4]
 800d08c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800d08e:	2b00      	cmp	r3, #0
 800d090:	d103      	bne.n	800d09a <tcp_receive+0x3be>
        pcb->unsent_oversize = 0;
 800d092:	687b      	ldr	r3, [r7, #4]
 800d094:	2200      	movs	r2, #0
 800d096:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 800d09a:	687b      	ldr	r3, [r7, #4]
 800d09c:	f8b3 2064 	ldrh.w	r2, [r3, #100]	@ 0x64
 800d0a0:	4b84      	ldr	r3, [pc, #528]	@ (800d2b4 <tcp_receive+0x5d8>)
 800d0a2:	881b      	ldrh	r3, [r3, #0]
 800d0a4:	4413      	add	r3, r2
 800d0a6:	b29a      	uxth	r2, r3
 800d0a8:	687b      	ldr	r3, [r7, #4]
 800d0aa:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 800d0ae:	687b      	ldr	r3, [r7, #4]
 800d0b0:	8b5b      	ldrh	r3, [r3, #26]
 800d0b2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800d0b6:	2b00      	cmp	r3, #0
 800d0b8:	d035      	beq.n	800d126 <tcp_receive+0x44a>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 800d0ba:	687b      	ldr	r3, [r7, #4]
 800d0bc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800d0be:	2b00      	cmp	r3, #0
 800d0c0:	d118      	bne.n	800d0f4 <tcp_receive+0x418>
          if ((pcb->unsent == NULL) ||
 800d0c2:	687b      	ldr	r3, [r7, #4]
 800d0c4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800d0c6:	2b00      	cmp	r3, #0
 800d0c8:	d00c      	beq.n	800d0e4 <tcp_receive+0x408>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 800d0ca:	687b      	ldr	r3, [r7, #4]
 800d0cc:	6cdc      	ldr	r4, [r3, #76]	@ 0x4c
 800d0ce:	687b      	ldr	r3, [r7, #4]
 800d0d0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800d0d2:	68db      	ldr	r3, [r3, #12]
 800d0d4:	685b      	ldr	r3, [r3, #4]
 800d0d6:	4618      	mov	r0, r3
 800d0d8:	f7fb f935 	bl	8008346 <lwip_htonl>
 800d0dc:	4603      	mov	r3, r0
 800d0de:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 800d0e0:	2b00      	cmp	r3, #0
 800d0e2:	dc20      	bgt.n	800d126 <tcp_receive+0x44a>
            tcp_clear_flags(pcb, TF_RTO);
 800d0e4:	687b      	ldr	r3, [r7, #4]
 800d0e6:	8b5b      	ldrh	r3, [r3, #26]
 800d0e8:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800d0ec:	b29a      	uxth	r2, r3
 800d0ee:	687b      	ldr	r3, [r7, #4]
 800d0f0:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800d0f2:	e018      	b.n	800d126 <tcp_receive+0x44a>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 800d0f4:	687b      	ldr	r3, [r7, #4]
 800d0f6:	6cdc      	ldr	r4, [r3, #76]	@ 0x4c
 800d0f8:	687b      	ldr	r3, [r7, #4]
 800d0fa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800d0fc:	68db      	ldr	r3, [r3, #12]
 800d0fe:	685b      	ldr	r3, [r3, #4]
 800d100:	4618      	mov	r0, r3
 800d102:	f7fb f920 	bl	8008346 <lwip_htonl>
 800d106:	4603      	mov	r3, r0
 800d108:	1ae3      	subs	r3, r4, r3
 800d10a:	2b00      	cmp	r3, #0
 800d10c:	dc0b      	bgt.n	800d126 <tcp_receive+0x44a>
          tcp_clear_flags(pcb, TF_RTO);
 800d10e:	687b      	ldr	r3, [r7, #4]
 800d110:	8b5b      	ldrh	r3, [r3, #26]
 800d112:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800d116:	b29a      	uxth	r2, r3
 800d118:	687b      	ldr	r3, [r7, #4]
 800d11a:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800d11c:	e003      	b.n	800d126 <tcp_receive+0x44a>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 800d11e:	6878      	ldr	r0, [r7, #4]
 800d120:	f001 ff70 	bl	800f004 <tcp_send_empty_ack>
 800d124:	e000      	b.n	800d128 <tcp_receive+0x44c>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800d126:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 800d128:	687b      	ldr	r3, [r7, #4]
 800d12a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d12c:	2b00      	cmp	r3, #0
 800d12e:	d05b      	beq.n	800d1e8 <tcp_receive+0x50c>
 800d130:	687b      	ldr	r3, [r7, #4]
 800d132:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800d134:	4b60      	ldr	r3, [pc, #384]	@ (800d2b8 <tcp_receive+0x5dc>)
 800d136:	681b      	ldr	r3, [r3, #0]
 800d138:	1ad3      	subs	r3, r2, r3
 800d13a:	2b00      	cmp	r3, #0
 800d13c:	da54      	bge.n	800d1e8 <tcp_receive+0x50c>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 800d13e:	4b5f      	ldr	r3, [pc, #380]	@ (800d2bc <tcp_receive+0x5e0>)
 800d140:	681b      	ldr	r3, [r3, #0]
 800d142:	b29a      	uxth	r2, r3
 800d144:	687b      	ldr	r3, [r7, #4]
 800d146:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d148:	b29b      	uxth	r3, r3
 800d14a:	1ad3      	subs	r3, r2, r3
 800d14c:	b29b      	uxth	r3, r3
 800d14e:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 800d152:	f8b7 204e 	ldrh.w	r2, [r7, #78]	@ 0x4e
 800d156:	687b      	ldr	r3, [r7, #4]
 800d158:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 800d15c:	10db      	asrs	r3, r3, #3
 800d15e:	b21b      	sxth	r3, r3
 800d160:	b29b      	uxth	r3, r3
 800d162:	1ad3      	subs	r3, r2, r3
 800d164:	b29b      	uxth	r3, r3
 800d166:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 800d16a:	687b      	ldr	r3, [r7, #4]
 800d16c:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 800d170:	b29a      	uxth	r2, r3
 800d172:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 800d176:	4413      	add	r3, r2
 800d178:	b29b      	uxth	r3, r3
 800d17a:	b21a      	sxth	r2, r3
 800d17c:	687b      	ldr	r3, [r7, #4]
 800d17e:	879a      	strh	r2, [r3, #60]	@ 0x3c
      if (m < 0) {
 800d180:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	@ 0x4e
 800d184:	2b00      	cmp	r3, #0
 800d186:	da05      	bge.n	800d194 <tcp_receive+0x4b8>
        m = (s16_t) - m;
 800d188:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 800d18c:	425b      	negs	r3, r3
 800d18e:	b29b      	uxth	r3, r3
 800d190:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 800d194:	f8b7 204e 	ldrh.w	r2, [r7, #78]	@ 0x4e
 800d198:	687b      	ldr	r3, [r7, #4]
 800d19a:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 800d19e:	109b      	asrs	r3, r3, #2
 800d1a0:	b21b      	sxth	r3, r3
 800d1a2:	b29b      	uxth	r3, r3
 800d1a4:	1ad3      	subs	r3, r2, r3
 800d1a6:	b29b      	uxth	r3, r3
 800d1a8:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 800d1ac:	687b      	ldr	r3, [r7, #4]
 800d1ae:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 800d1b2:	b29a      	uxth	r2, r3
 800d1b4:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 800d1b8:	4413      	add	r3, r2
 800d1ba:	b29b      	uxth	r3, r3
 800d1bc:	b21a      	sxth	r2, r3
 800d1be:	687b      	ldr	r3, [r7, #4]
 800d1c0:	87da      	strh	r2, [r3, #62]	@ 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 800d1c2:	687b      	ldr	r3, [r7, #4]
 800d1c4:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 800d1c8:	10db      	asrs	r3, r3, #3
 800d1ca:	b21b      	sxth	r3, r3
 800d1cc:	b29a      	uxth	r2, r3
 800d1ce:	687b      	ldr	r3, [r7, #4]
 800d1d0:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 800d1d4:	b29b      	uxth	r3, r3
 800d1d6:	4413      	add	r3, r2
 800d1d8:	b29b      	uxth	r3, r3
 800d1da:	b21a      	sxth	r2, r3
 800d1dc:	687b      	ldr	r3, [r7, #4]
 800d1de:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 800d1e2:	687b      	ldr	r3, [r7, #4]
 800d1e4:	2200      	movs	r2, #0
 800d1e6:	635a      	str	r2, [r3, #52]	@ 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 800d1e8:	4b35      	ldr	r3, [pc, #212]	@ (800d2c0 <tcp_receive+0x5e4>)
 800d1ea:	881b      	ldrh	r3, [r3, #0]
 800d1ec:	2b00      	cmp	r3, #0
 800d1ee:	f000 84df 	beq.w	800dbb0 <tcp_receive+0xed4>
 800d1f2:	687b      	ldr	r3, [r7, #4]
 800d1f4:	7d1b      	ldrb	r3, [r3, #20]
 800d1f6:	2b06      	cmp	r3, #6
 800d1f8:	f200 84da 	bhi.w	800dbb0 <tcp_receive+0xed4>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 800d1fc:	687b      	ldr	r3, [r7, #4]
 800d1fe:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800d200:	4b30      	ldr	r3, [pc, #192]	@ (800d2c4 <tcp_receive+0x5e8>)
 800d202:	681b      	ldr	r3, [r3, #0]
 800d204:	1ad3      	subs	r3, r2, r3
 800d206:	3b01      	subs	r3, #1
 800d208:	2b00      	cmp	r3, #0
 800d20a:	f2c0 808f 	blt.w	800d32c <tcp_receive+0x650>
 800d20e:	687b      	ldr	r3, [r7, #4]
 800d210:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800d212:	4b2b      	ldr	r3, [pc, #172]	@ (800d2c0 <tcp_receive+0x5e4>)
 800d214:	881b      	ldrh	r3, [r3, #0]
 800d216:	4619      	mov	r1, r3
 800d218:	4b2a      	ldr	r3, [pc, #168]	@ (800d2c4 <tcp_receive+0x5e8>)
 800d21a:	681b      	ldr	r3, [r3, #0]
 800d21c:	440b      	add	r3, r1
 800d21e:	1ad3      	subs	r3, r2, r3
 800d220:	3301      	adds	r3, #1
 800d222:	2b00      	cmp	r3, #0
 800d224:	f300 8082 	bgt.w	800d32c <tcp_receive+0x650>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 800d228:	4b27      	ldr	r3, [pc, #156]	@ (800d2c8 <tcp_receive+0x5ec>)
 800d22a:	685b      	ldr	r3, [r3, #4]
 800d22c:	647b      	str	r3, [r7, #68]	@ 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 800d22e:	687b      	ldr	r3, [r7, #4]
 800d230:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800d232:	4b24      	ldr	r3, [pc, #144]	@ (800d2c4 <tcp_receive+0x5e8>)
 800d234:	681b      	ldr	r3, [r3, #0]
 800d236:	1ad3      	subs	r3, r2, r3
 800d238:	627b      	str	r3, [r7, #36]	@ 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 800d23a:	4b23      	ldr	r3, [pc, #140]	@ (800d2c8 <tcp_receive+0x5ec>)
 800d23c:	685b      	ldr	r3, [r3, #4]
 800d23e:	2b00      	cmp	r3, #0
 800d240:	d106      	bne.n	800d250 <tcp_receive+0x574>
 800d242:	4b22      	ldr	r3, [pc, #136]	@ (800d2cc <tcp_receive+0x5f0>)
 800d244:	f240 5294 	movw	r2, #1428	@ 0x594
 800d248:	4921      	ldr	r1, [pc, #132]	@ (800d2d0 <tcp_receive+0x5f4>)
 800d24a:	4822      	ldr	r0, [pc, #136]	@ (800d2d4 <tcp_receive+0x5f8>)
 800d24c:	f005 f836 	bl	80122bc <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 800d250:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d252:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 800d256:	4293      	cmp	r3, r2
 800d258:	d906      	bls.n	800d268 <tcp_receive+0x58c>
 800d25a:	4b1c      	ldr	r3, [pc, #112]	@ (800d2cc <tcp_receive+0x5f0>)
 800d25c:	f240 5295 	movw	r2, #1429	@ 0x595
 800d260:	491d      	ldr	r1, [pc, #116]	@ (800d2d8 <tcp_receive+0x5fc>)
 800d262:	481c      	ldr	r0, [pc, #112]	@ (800d2d4 <tcp_receive+0x5f8>)
 800d264:	f005 f82a 	bl	80122bc <iprintf>
      off = (u16_t)off32;
 800d268:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d26a:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 800d26e:	4b16      	ldr	r3, [pc, #88]	@ (800d2c8 <tcp_receive+0x5ec>)
 800d270:	685b      	ldr	r3, [r3, #4]
 800d272:	891b      	ldrh	r3, [r3, #8]
 800d274:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 800d278:	429a      	cmp	r2, r3
 800d27a:	d906      	bls.n	800d28a <tcp_receive+0x5ae>
 800d27c:	4b13      	ldr	r3, [pc, #76]	@ (800d2cc <tcp_receive+0x5f0>)
 800d27e:	f240 5297 	movw	r2, #1431	@ 0x597
 800d282:	4916      	ldr	r1, [pc, #88]	@ (800d2dc <tcp_receive+0x600>)
 800d284:	4813      	ldr	r0, [pc, #76]	@ (800d2d4 <tcp_receive+0x5f8>)
 800d286:	f005 f819 	bl	80122bc <iprintf>
      inseg.len -= off;
 800d28a:	4b0f      	ldr	r3, [pc, #60]	@ (800d2c8 <tcp_receive+0x5ec>)
 800d28c:	891a      	ldrh	r2, [r3, #8]
 800d28e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800d292:	1ad3      	subs	r3, r2, r3
 800d294:	b29a      	uxth	r2, r3
 800d296:	4b0c      	ldr	r3, [pc, #48]	@ (800d2c8 <tcp_receive+0x5ec>)
 800d298:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 800d29a:	4b0b      	ldr	r3, [pc, #44]	@ (800d2c8 <tcp_receive+0x5ec>)
 800d29c:	685b      	ldr	r3, [r3, #4]
 800d29e:	891a      	ldrh	r2, [r3, #8]
 800d2a0:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800d2a4:	1ad3      	subs	r3, r2, r3
 800d2a6:	847b      	strh	r3, [r7, #34]	@ 0x22
      while (p->len < off) {
 800d2a8:	e02a      	b.n	800d300 <tcp_receive+0x624>
 800d2aa:	bf00      	nop
 800d2ac:	08014860 	.word	0x08014860
 800d2b0:	08014868 	.word	0x08014868
 800d2b4:	2001013c 	.word	0x2001013c
 800d2b8:	20010138 	.word	0x20010138
 800d2bc:	200100fc 	.word	0x200100fc
 800d2c0:	2001013e 	.word	0x2001013e
 800d2c4:	20010134 	.word	0x20010134
 800d2c8:	20010114 	.word	0x20010114
 800d2cc:	080144f8 	.word	0x080144f8
 800d2d0:	08014870 	.word	0x08014870
 800d2d4:	08014544 	.word	0x08014544
 800d2d8:	08014880 	.word	0x08014880
 800d2dc:	08014890 	.word	0x08014890
        off -= p->len;
 800d2e0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d2e2:	895b      	ldrh	r3, [r3, #10]
 800d2e4:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 800d2e8:	1ad3      	subs	r3, r2, r3
 800d2ea:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 800d2ee:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d2f0:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 800d2f2:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 800d2f4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d2f6:	2200      	movs	r2, #0
 800d2f8:	815a      	strh	r2, [r3, #10]
        p = p->next;
 800d2fa:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d2fc:	681b      	ldr	r3, [r3, #0]
 800d2fe:	647b      	str	r3, [r7, #68]	@ 0x44
      while (p->len < off) {
 800d300:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d302:	895b      	ldrh	r3, [r3, #10]
 800d304:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 800d308:	429a      	cmp	r2, r3
 800d30a:	d8e9      	bhi.n	800d2e0 <tcp_receive+0x604>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 800d30c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800d310:	4619      	mov	r1, r3
 800d312:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 800d314:	f7fc fb6e 	bl	80099f4 <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 800d318:	687b      	ldr	r3, [r7, #4]
 800d31a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d31c:	4a90      	ldr	r2, [pc, #576]	@ (800d560 <tcp_receive+0x884>)
 800d31e:	6013      	str	r3, [r2, #0]
 800d320:	4b90      	ldr	r3, [pc, #576]	@ (800d564 <tcp_receive+0x888>)
 800d322:	68db      	ldr	r3, [r3, #12]
 800d324:	4a8e      	ldr	r2, [pc, #568]	@ (800d560 <tcp_receive+0x884>)
 800d326:	6812      	ldr	r2, [r2, #0]
 800d328:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 800d32a:	e00d      	b.n	800d348 <tcp_receive+0x66c>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 800d32c:	4b8c      	ldr	r3, [pc, #560]	@ (800d560 <tcp_receive+0x884>)
 800d32e:	681a      	ldr	r2, [r3, #0]
 800d330:	687b      	ldr	r3, [r7, #4]
 800d332:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d334:	1ad3      	subs	r3, r2, r3
 800d336:	2b00      	cmp	r3, #0
 800d338:	da06      	bge.n	800d348 <tcp_receive+0x66c>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 800d33a:	687b      	ldr	r3, [r7, #4]
 800d33c:	8b5b      	ldrh	r3, [r3, #26]
 800d33e:	f043 0302 	orr.w	r3, r3, #2
 800d342:	b29a      	uxth	r2, r3
 800d344:	687b      	ldr	r3, [r7, #4]
 800d346:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800d348:	4b85      	ldr	r3, [pc, #532]	@ (800d560 <tcp_receive+0x884>)
 800d34a:	681a      	ldr	r2, [r3, #0]
 800d34c:	687b      	ldr	r3, [r7, #4]
 800d34e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d350:	1ad3      	subs	r3, r2, r3
 800d352:	2b00      	cmp	r3, #0
 800d354:	f2c0 8427 	blt.w	800dba6 <tcp_receive+0xeca>
 800d358:	4b81      	ldr	r3, [pc, #516]	@ (800d560 <tcp_receive+0x884>)
 800d35a:	681a      	ldr	r2, [r3, #0]
 800d35c:	687b      	ldr	r3, [r7, #4]
 800d35e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d360:	6879      	ldr	r1, [r7, #4]
 800d362:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 800d364:	440b      	add	r3, r1
 800d366:	1ad3      	subs	r3, r2, r3
 800d368:	3301      	adds	r3, #1
 800d36a:	2b00      	cmp	r3, #0
 800d36c:	f300 841b 	bgt.w	800dba6 <tcp_receive+0xeca>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 800d370:	687b      	ldr	r3, [r7, #4]
 800d372:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800d374:	4b7a      	ldr	r3, [pc, #488]	@ (800d560 <tcp_receive+0x884>)
 800d376:	681b      	ldr	r3, [r3, #0]
 800d378:	429a      	cmp	r2, r3
 800d37a:	f040 8298 	bne.w	800d8ae <tcp_receive+0xbd2>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 800d37e:	4b79      	ldr	r3, [pc, #484]	@ (800d564 <tcp_receive+0x888>)
 800d380:	891c      	ldrh	r4, [r3, #8]
 800d382:	4b78      	ldr	r3, [pc, #480]	@ (800d564 <tcp_receive+0x888>)
 800d384:	68db      	ldr	r3, [r3, #12]
 800d386:	899b      	ldrh	r3, [r3, #12]
 800d388:	b29b      	uxth	r3, r3
 800d38a:	4618      	mov	r0, r3
 800d38c:	f7fa ffc6 	bl	800831c <lwip_htons>
 800d390:	4603      	mov	r3, r0
 800d392:	b2db      	uxtb	r3, r3
 800d394:	f003 0303 	and.w	r3, r3, #3
 800d398:	2b00      	cmp	r3, #0
 800d39a:	d001      	beq.n	800d3a0 <tcp_receive+0x6c4>
 800d39c:	2301      	movs	r3, #1
 800d39e:	e000      	b.n	800d3a2 <tcp_receive+0x6c6>
 800d3a0:	2300      	movs	r3, #0
 800d3a2:	4423      	add	r3, r4
 800d3a4:	b29a      	uxth	r2, r3
 800d3a6:	4b70      	ldr	r3, [pc, #448]	@ (800d568 <tcp_receive+0x88c>)
 800d3a8:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 800d3aa:	687b      	ldr	r3, [r7, #4]
 800d3ac:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 800d3ae:	4b6e      	ldr	r3, [pc, #440]	@ (800d568 <tcp_receive+0x88c>)
 800d3b0:	881b      	ldrh	r3, [r3, #0]
 800d3b2:	429a      	cmp	r2, r3
 800d3b4:	d274      	bcs.n	800d4a0 <tcp_receive+0x7c4>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800d3b6:	4b6b      	ldr	r3, [pc, #428]	@ (800d564 <tcp_receive+0x888>)
 800d3b8:	68db      	ldr	r3, [r3, #12]
 800d3ba:	899b      	ldrh	r3, [r3, #12]
 800d3bc:	b29b      	uxth	r3, r3
 800d3be:	4618      	mov	r0, r3
 800d3c0:	f7fa ffac 	bl	800831c <lwip_htons>
 800d3c4:	4603      	mov	r3, r0
 800d3c6:	b2db      	uxtb	r3, r3
 800d3c8:	f003 0301 	and.w	r3, r3, #1
 800d3cc:	2b00      	cmp	r3, #0
 800d3ce:	d01e      	beq.n	800d40e <tcp_receive+0x732>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 800d3d0:	4b64      	ldr	r3, [pc, #400]	@ (800d564 <tcp_receive+0x888>)
 800d3d2:	68db      	ldr	r3, [r3, #12]
 800d3d4:	899b      	ldrh	r3, [r3, #12]
 800d3d6:	b29b      	uxth	r3, r3
 800d3d8:	b21b      	sxth	r3, r3
 800d3da:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800d3de:	b21c      	sxth	r4, r3
 800d3e0:	4b60      	ldr	r3, [pc, #384]	@ (800d564 <tcp_receive+0x888>)
 800d3e2:	68db      	ldr	r3, [r3, #12]
 800d3e4:	899b      	ldrh	r3, [r3, #12]
 800d3e6:	b29b      	uxth	r3, r3
 800d3e8:	4618      	mov	r0, r3
 800d3ea:	f7fa ff97 	bl	800831c <lwip_htons>
 800d3ee:	4603      	mov	r3, r0
 800d3f0:	b2db      	uxtb	r3, r3
 800d3f2:	f003 033e 	and.w	r3, r3, #62	@ 0x3e
 800d3f6:	b29b      	uxth	r3, r3
 800d3f8:	4618      	mov	r0, r3
 800d3fa:	f7fa ff8f 	bl	800831c <lwip_htons>
 800d3fe:	4603      	mov	r3, r0
 800d400:	b21b      	sxth	r3, r3
 800d402:	4323      	orrs	r3, r4
 800d404:	b21a      	sxth	r2, r3
 800d406:	4b57      	ldr	r3, [pc, #348]	@ (800d564 <tcp_receive+0x888>)
 800d408:	68db      	ldr	r3, [r3, #12]
 800d40a:	b292      	uxth	r2, r2
 800d40c:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 800d40e:	687b      	ldr	r3, [r7, #4]
 800d410:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 800d412:	4b54      	ldr	r3, [pc, #336]	@ (800d564 <tcp_receive+0x888>)
 800d414:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800d416:	4b53      	ldr	r3, [pc, #332]	@ (800d564 <tcp_receive+0x888>)
 800d418:	68db      	ldr	r3, [r3, #12]
 800d41a:	899b      	ldrh	r3, [r3, #12]
 800d41c:	b29b      	uxth	r3, r3
 800d41e:	4618      	mov	r0, r3
 800d420:	f7fa ff7c 	bl	800831c <lwip_htons>
 800d424:	4603      	mov	r3, r0
 800d426:	b2db      	uxtb	r3, r3
 800d428:	f003 0302 	and.w	r3, r3, #2
 800d42c:	2b00      	cmp	r3, #0
 800d42e:	d005      	beq.n	800d43c <tcp_receive+0x760>
            inseg.len -= 1;
 800d430:	4b4c      	ldr	r3, [pc, #304]	@ (800d564 <tcp_receive+0x888>)
 800d432:	891b      	ldrh	r3, [r3, #8]
 800d434:	3b01      	subs	r3, #1
 800d436:	b29a      	uxth	r2, r3
 800d438:	4b4a      	ldr	r3, [pc, #296]	@ (800d564 <tcp_receive+0x888>)
 800d43a:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 800d43c:	4b49      	ldr	r3, [pc, #292]	@ (800d564 <tcp_receive+0x888>)
 800d43e:	685b      	ldr	r3, [r3, #4]
 800d440:	4a48      	ldr	r2, [pc, #288]	@ (800d564 <tcp_receive+0x888>)
 800d442:	8912      	ldrh	r2, [r2, #8]
 800d444:	4611      	mov	r1, r2
 800d446:	4618      	mov	r0, r3
 800d448:	f7fc f9d4 	bl	80097f4 <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 800d44c:	4b45      	ldr	r3, [pc, #276]	@ (800d564 <tcp_receive+0x888>)
 800d44e:	891c      	ldrh	r4, [r3, #8]
 800d450:	4b44      	ldr	r3, [pc, #272]	@ (800d564 <tcp_receive+0x888>)
 800d452:	68db      	ldr	r3, [r3, #12]
 800d454:	899b      	ldrh	r3, [r3, #12]
 800d456:	b29b      	uxth	r3, r3
 800d458:	4618      	mov	r0, r3
 800d45a:	f7fa ff5f 	bl	800831c <lwip_htons>
 800d45e:	4603      	mov	r3, r0
 800d460:	b2db      	uxtb	r3, r3
 800d462:	f003 0303 	and.w	r3, r3, #3
 800d466:	2b00      	cmp	r3, #0
 800d468:	d001      	beq.n	800d46e <tcp_receive+0x792>
 800d46a:	2301      	movs	r3, #1
 800d46c:	e000      	b.n	800d470 <tcp_receive+0x794>
 800d46e:	2300      	movs	r3, #0
 800d470:	4423      	add	r3, r4
 800d472:	b29a      	uxth	r2, r3
 800d474:	4b3c      	ldr	r3, [pc, #240]	@ (800d568 <tcp_receive+0x88c>)
 800d476:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800d478:	4b3b      	ldr	r3, [pc, #236]	@ (800d568 <tcp_receive+0x88c>)
 800d47a:	881b      	ldrh	r3, [r3, #0]
 800d47c:	461a      	mov	r2, r3
 800d47e:	4b38      	ldr	r3, [pc, #224]	@ (800d560 <tcp_receive+0x884>)
 800d480:	681b      	ldr	r3, [r3, #0]
 800d482:	441a      	add	r2, r3
 800d484:	687b      	ldr	r3, [r7, #4]
 800d486:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d488:	6879      	ldr	r1, [r7, #4]
 800d48a:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 800d48c:	440b      	add	r3, r1
 800d48e:	429a      	cmp	r2, r3
 800d490:	d006      	beq.n	800d4a0 <tcp_receive+0x7c4>
 800d492:	4b36      	ldr	r3, [pc, #216]	@ (800d56c <tcp_receive+0x890>)
 800d494:	f240 52cb 	movw	r2, #1483	@ 0x5cb
 800d498:	4935      	ldr	r1, [pc, #212]	@ (800d570 <tcp_receive+0x894>)
 800d49a:	4836      	ldr	r0, [pc, #216]	@ (800d574 <tcp_receive+0x898>)
 800d49c:	f004 ff0e 	bl	80122bc <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 800d4a0:	687b      	ldr	r3, [r7, #4]
 800d4a2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800d4a4:	2b00      	cmp	r3, #0
 800d4a6:	f000 80e6 	beq.w	800d676 <tcp_receive+0x99a>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800d4aa:	4b2e      	ldr	r3, [pc, #184]	@ (800d564 <tcp_receive+0x888>)
 800d4ac:	68db      	ldr	r3, [r3, #12]
 800d4ae:	899b      	ldrh	r3, [r3, #12]
 800d4b0:	b29b      	uxth	r3, r3
 800d4b2:	4618      	mov	r0, r3
 800d4b4:	f7fa ff32 	bl	800831c <lwip_htons>
 800d4b8:	4603      	mov	r3, r0
 800d4ba:	b2db      	uxtb	r3, r3
 800d4bc:	f003 0301 	and.w	r3, r3, #1
 800d4c0:	2b00      	cmp	r3, #0
 800d4c2:	d010      	beq.n	800d4e6 <tcp_receive+0x80a>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 800d4c4:	e00a      	b.n	800d4dc <tcp_receive+0x800>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 800d4c6:	687b      	ldr	r3, [r7, #4]
 800d4c8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800d4ca:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 800d4cc:	687b      	ldr	r3, [r7, #4]
 800d4ce:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800d4d0:	681a      	ldr	r2, [r3, #0]
 800d4d2:	687b      	ldr	r3, [r7, #4]
 800d4d4:	675a      	str	r2, [r3, #116]	@ 0x74
              tcp_seg_free(old_ooseq);
 800d4d6:	68f8      	ldr	r0, [r7, #12]
 800d4d8:	f7fd fd93 	bl	800b002 <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 800d4dc:	687b      	ldr	r3, [r7, #4]
 800d4de:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800d4e0:	2b00      	cmp	r3, #0
 800d4e2:	d1f0      	bne.n	800d4c6 <tcp_receive+0x7ea>
 800d4e4:	e0c7      	b.n	800d676 <tcp_receive+0x99a>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 800d4e6:	687b      	ldr	r3, [r7, #4]
 800d4e8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800d4ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 800d4ec:	e051      	b.n	800d592 <tcp_receive+0x8b6>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 800d4ee:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d4f0:	68db      	ldr	r3, [r3, #12]
 800d4f2:	899b      	ldrh	r3, [r3, #12]
 800d4f4:	b29b      	uxth	r3, r3
 800d4f6:	4618      	mov	r0, r3
 800d4f8:	f7fa ff10 	bl	800831c <lwip_htons>
 800d4fc:	4603      	mov	r3, r0
 800d4fe:	b2db      	uxtb	r3, r3
 800d500:	f003 0301 	and.w	r3, r3, #1
 800d504:	2b00      	cmp	r3, #0
 800d506:	d03c      	beq.n	800d582 <tcp_receive+0x8a6>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 800d508:	4b16      	ldr	r3, [pc, #88]	@ (800d564 <tcp_receive+0x888>)
 800d50a:	68db      	ldr	r3, [r3, #12]
 800d50c:	899b      	ldrh	r3, [r3, #12]
 800d50e:	b29b      	uxth	r3, r3
 800d510:	4618      	mov	r0, r3
 800d512:	f7fa ff03 	bl	800831c <lwip_htons>
 800d516:	4603      	mov	r3, r0
 800d518:	b2db      	uxtb	r3, r3
 800d51a:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 800d51e:	2b00      	cmp	r3, #0
 800d520:	d12f      	bne.n	800d582 <tcp_receive+0x8a6>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 800d522:	4b10      	ldr	r3, [pc, #64]	@ (800d564 <tcp_receive+0x888>)
 800d524:	68db      	ldr	r3, [r3, #12]
 800d526:	899b      	ldrh	r3, [r3, #12]
 800d528:	b29c      	uxth	r4, r3
 800d52a:	2001      	movs	r0, #1
 800d52c:	f7fa fef6 	bl	800831c <lwip_htons>
 800d530:	4603      	mov	r3, r0
 800d532:	461a      	mov	r2, r3
 800d534:	4b0b      	ldr	r3, [pc, #44]	@ (800d564 <tcp_receive+0x888>)
 800d536:	68db      	ldr	r3, [r3, #12]
 800d538:	4322      	orrs	r2, r4
 800d53a:	b292      	uxth	r2, r2
 800d53c:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 800d53e:	4b09      	ldr	r3, [pc, #36]	@ (800d564 <tcp_receive+0x888>)
 800d540:	891c      	ldrh	r4, [r3, #8]
 800d542:	4b08      	ldr	r3, [pc, #32]	@ (800d564 <tcp_receive+0x888>)
 800d544:	68db      	ldr	r3, [r3, #12]
 800d546:	899b      	ldrh	r3, [r3, #12]
 800d548:	b29b      	uxth	r3, r3
 800d54a:	4618      	mov	r0, r3
 800d54c:	f7fa fee6 	bl	800831c <lwip_htons>
 800d550:	4603      	mov	r3, r0
 800d552:	b2db      	uxtb	r3, r3
 800d554:	f003 0303 	and.w	r3, r3, #3
 800d558:	2b00      	cmp	r3, #0
 800d55a:	d00d      	beq.n	800d578 <tcp_receive+0x89c>
 800d55c:	2301      	movs	r3, #1
 800d55e:	e00c      	b.n	800d57a <tcp_receive+0x89e>
 800d560:	20010134 	.word	0x20010134
 800d564:	20010114 	.word	0x20010114
 800d568:	2001013e 	.word	0x2001013e
 800d56c:	080144f8 	.word	0x080144f8
 800d570:	080148a0 	.word	0x080148a0
 800d574:	08014544 	.word	0x08014544
 800d578:	2300      	movs	r3, #0
 800d57a:	4423      	add	r3, r4
 800d57c:	b29a      	uxth	r2, r3
 800d57e:	4b98      	ldr	r3, [pc, #608]	@ (800d7e0 <tcp_receive+0xb04>)
 800d580:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 800d582:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d584:	613b      	str	r3, [r7, #16]
              next = next->next;
 800d586:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d588:	681b      	ldr	r3, [r3, #0]
 800d58a:	63fb      	str	r3, [r7, #60]	@ 0x3c
              tcp_seg_free(tmp);
 800d58c:	6938      	ldr	r0, [r7, #16]
 800d58e:	f7fd fd38 	bl	800b002 <tcp_seg_free>
            while (next &&
 800d592:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d594:	2b00      	cmp	r3, #0
 800d596:	d00e      	beq.n	800d5b6 <tcp_receive+0x8da>
                   TCP_SEQ_GEQ(seqno + tcplen,
 800d598:	4b91      	ldr	r3, [pc, #580]	@ (800d7e0 <tcp_receive+0xb04>)
 800d59a:	881b      	ldrh	r3, [r3, #0]
 800d59c:	461a      	mov	r2, r3
 800d59e:	4b91      	ldr	r3, [pc, #580]	@ (800d7e4 <tcp_receive+0xb08>)
 800d5a0:	681b      	ldr	r3, [r3, #0]
 800d5a2:	441a      	add	r2, r3
 800d5a4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d5a6:	68db      	ldr	r3, [r3, #12]
 800d5a8:	685b      	ldr	r3, [r3, #4]
 800d5aa:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800d5ac:	8909      	ldrh	r1, [r1, #8]
 800d5ae:	440b      	add	r3, r1
 800d5b0:	1ad3      	subs	r3, r2, r3
            while (next &&
 800d5b2:	2b00      	cmp	r3, #0
 800d5b4:	da9b      	bge.n	800d4ee <tcp_receive+0x812>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 800d5b6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d5b8:	2b00      	cmp	r3, #0
 800d5ba:	d059      	beq.n	800d670 <tcp_receive+0x994>
                TCP_SEQ_GT(seqno + tcplen,
 800d5bc:	4b88      	ldr	r3, [pc, #544]	@ (800d7e0 <tcp_receive+0xb04>)
 800d5be:	881b      	ldrh	r3, [r3, #0]
 800d5c0:	461a      	mov	r2, r3
 800d5c2:	4b88      	ldr	r3, [pc, #544]	@ (800d7e4 <tcp_receive+0xb08>)
 800d5c4:	681b      	ldr	r3, [r3, #0]
 800d5c6:	441a      	add	r2, r3
 800d5c8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d5ca:	68db      	ldr	r3, [r3, #12]
 800d5cc:	685b      	ldr	r3, [r3, #4]
 800d5ce:	1ad3      	subs	r3, r2, r3
            if (next &&
 800d5d0:	2b00      	cmp	r3, #0
 800d5d2:	dd4d      	ble.n	800d670 <tcp_receive+0x994>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 800d5d4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d5d6:	68db      	ldr	r3, [r3, #12]
 800d5d8:	685b      	ldr	r3, [r3, #4]
 800d5da:	b29a      	uxth	r2, r3
 800d5dc:	4b81      	ldr	r3, [pc, #516]	@ (800d7e4 <tcp_receive+0xb08>)
 800d5de:	681b      	ldr	r3, [r3, #0]
 800d5e0:	b29b      	uxth	r3, r3
 800d5e2:	1ad3      	subs	r3, r2, r3
 800d5e4:	b29a      	uxth	r2, r3
 800d5e6:	4b80      	ldr	r3, [pc, #512]	@ (800d7e8 <tcp_receive+0xb0c>)
 800d5e8:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800d5ea:	4b7f      	ldr	r3, [pc, #508]	@ (800d7e8 <tcp_receive+0xb0c>)
 800d5ec:	68db      	ldr	r3, [r3, #12]
 800d5ee:	899b      	ldrh	r3, [r3, #12]
 800d5f0:	b29b      	uxth	r3, r3
 800d5f2:	4618      	mov	r0, r3
 800d5f4:	f7fa fe92 	bl	800831c <lwip_htons>
 800d5f8:	4603      	mov	r3, r0
 800d5fa:	b2db      	uxtb	r3, r3
 800d5fc:	f003 0302 	and.w	r3, r3, #2
 800d600:	2b00      	cmp	r3, #0
 800d602:	d005      	beq.n	800d610 <tcp_receive+0x934>
                inseg.len -= 1;
 800d604:	4b78      	ldr	r3, [pc, #480]	@ (800d7e8 <tcp_receive+0xb0c>)
 800d606:	891b      	ldrh	r3, [r3, #8]
 800d608:	3b01      	subs	r3, #1
 800d60a:	b29a      	uxth	r2, r3
 800d60c:	4b76      	ldr	r3, [pc, #472]	@ (800d7e8 <tcp_receive+0xb0c>)
 800d60e:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 800d610:	4b75      	ldr	r3, [pc, #468]	@ (800d7e8 <tcp_receive+0xb0c>)
 800d612:	685b      	ldr	r3, [r3, #4]
 800d614:	4a74      	ldr	r2, [pc, #464]	@ (800d7e8 <tcp_receive+0xb0c>)
 800d616:	8912      	ldrh	r2, [r2, #8]
 800d618:	4611      	mov	r1, r2
 800d61a:	4618      	mov	r0, r3
 800d61c:	f7fc f8ea 	bl	80097f4 <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 800d620:	4b71      	ldr	r3, [pc, #452]	@ (800d7e8 <tcp_receive+0xb0c>)
 800d622:	891c      	ldrh	r4, [r3, #8]
 800d624:	4b70      	ldr	r3, [pc, #448]	@ (800d7e8 <tcp_receive+0xb0c>)
 800d626:	68db      	ldr	r3, [r3, #12]
 800d628:	899b      	ldrh	r3, [r3, #12]
 800d62a:	b29b      	uxth	r3, r3
 800d62c:	4618      	mov	r0, r3
 800d62e:	f7fa fe75 	bl	800831c <lwip_htons>
 800d632:	4603      	mov	r3, r0
 800d634:	b2db      	uxtb	r3, r3
 800d636:	f003 0303 	and.w	r3, r3, #3
 800d63a:	2b00      	cmp	r3, #0
 800d63c:	d001      	beq.n	800d642 <tcp_receive+0x966>
 800d63e:	2301      	movs	r3, #1
 800d640:	e000      	b.n	800d644 <tcp_receive+0x968>
 800d642:	2300      	movs	r3, #0
 800d644:	4423      	add	r3, r4
 800d646:	b29a      	uxth	r2, r3
 800d648:	4b65      	ldr	r3, [pc, #404]	@ (800d7e0 <tcp_receive+0xb04>)
 800d64a:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 800d64c:	4b64      	ldr	r3, [pc, #400]	@ (800d7e0 <tcp_receive+0xb04>)
 800d64e:	881b      	ldrh	r3, [r3, #0]
 800d650:	461a      	mov	r2, r3
 800d652:	4b64      	ldr	r3, [pc, #400]	@ (800d7e4 <tcp_receive+0xb08>)
 800d654:	681b      	ldr	r3, [r3, #0]
 800d656:	441a      	add	r2, r3
 800d658:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d65a:	68db      	ldr	r3, [r3, #12]
 800d65c:	685b      	ldr	r3, [r3, #4]
 800d65e:	429a      	cmp	r2, r3
 800d660:	d006      	beq.n	800d670 <tcp_receive+0x994>
 800d662:	4b62      	ldr	r3, [pc, #392]	@ (800d7ec <tcp_receive+0xb10>)
 800d664:	f240 52fc 	movw	r2, #1532	@ 0x5fc
 800d668:	4961      	ldr	r1, [pc, #388]	@ (800d7f0 <tcp_receive+0xb14>)
 800d66a:	4862      	ldr	r0, [pc, #392]	@ (800d7f4 <tcp_receive+0xb18>)
 800d66c:	f004 fe26 	bl	80122bc <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 800d670:	687b      	ldr	r3, [r7, #4]
 800d672:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800d674:	675a      	str	r2, [r3, #116]	@ 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 800d676:	4b5a      	ldr	r3, [pc, #360]	@ (800d7e0 <tcp_receive+0xb04>)
 800d678:	881b      	ldrh	r3, [r3, #0]
 800d67a:	461a      	mov	r2, r3
 800d67c:	4b59      	ldr	r3, [pc, #356]	@ (800d7e4 <tcp_receive+0xb08>)
 800d67e:	681b      	ldr	r3, [r3, #0]
 800d680:	441a      	add	r2, r3
 800d682:	687b      	ldr	r3, [r7, #4]
 800d684:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 800d686:	687b      	ldr	r3, [r7, #4]
 800d688:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 800d68a:	4b55      	ldr	r3, [pc, #340]	@ (800d7e0 <tcp_receive+0xb04>)
 800d68c:	881b      	ldrh	r3, [r3, #0]
 800d68e:	429a      	cmp	r2, r3
 800d690:	d206      	bcs.n	800d6a0 <tcp_receive+0x9c4>
 800d692:	4b56      	ldr	r3, [pc, #344]	@ (800d7ec <tcp_receive+0xb10>)
 800d694:	f240 6207 	movw	r2, #1543	@ 0x607
 800d698:	4957      	ldr	r1, [pc, #348]	@ (800d7f8 <tcp_receive+0xb1c>)
 800d69a:	4856      	ldr	r0, [pc, #344]	@ (800d7f4 <tcp_receive+0xb18>)
 800d69c:	f004 fe0e 	bl	80122bc <iprintf>
        pcb->rcv_wnd -= tcplen;
 800d6a0:	687b      	ldr	r3, [r7, #4]
 800d6a2:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 800d6a4:	4b4e      	ldr	r3, [pc, #312]	@ (800d7e0 <tcp_receive+0xb04>)
 800d6a6:	881b      	ldrh	r3, [r3, #0]
 800d6a8:	1ad3      	subs	r3, r2, r3
 800d6aa:	b29a      	uxth	r2, r3
 800d6ac:	687b      	ldr	r3, [r7, #4]
 800d6ae:	851a      	strh	r2, [r3, #40]	@ 0x28

        tcp_update_rcv_ann_wnd(pcb);
 800d6b0:	6878      	ldr	r0, [r7, #4]
 800d6b2:	f7fc ffc5 	bl	800a640 <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 800d6b6:	4b4c      	ldr	r3, [pc, #304]	@ (800d7e8 <tcp_receive+0xb0c>)
 800d6b8:	685b      	ldr	r3, [r3, #4]
 800d6ba:	891b      	ldrh	r3, [r3, #8]
 800d6bc:	2b00      	cmp	r3, #0
 800d6be:	d006      	beq.n	800d6ce <tcp_receive+0x9f2>
          recv_data = inseg.p;
 800d6c0:	4b49      	ldr	r3, [pc, #292]	@ (800d7e8 <tcp_receive+0xb0c>)
 800d6c2:	685b      	ldr	r3, [r3, #4]
 800d6c4:	4a4d      	ldr	r2, [pc, #308]	@ (800d7fc <tcp_receive+0xb20>)
 800d6c6:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 800d6c8:	4b47      	ldr	r3, [pc, #284]	@ (800d7e8 <tcp_receive+0xb0c>)
 800d6ca:	2200      	movs	r2, #0
 800d6cc:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800d6ce:	4b46      	ldr	r3, [pc, #280]	@ (800d7e8 <tcp_receive+0xb0c>)
 800d6d0:	68db      	ldr	r3, [r3, #12]
 800d6d2:	899b      	ldrh	r3, [r3, #12]
 800d6d4:	b29b      	uxth	r3, r3
 800d6d6:	4618      	mov	r0, r3
 800d6d8:	f7fa fe20 	bl	800831c <lwip_htons>
 800d6dc:	4603      	mov	r3, r0
 800d6de:	b2db      	uxtb	r3, r3
 800d6e0:	f003 0301 	and.w	r3, r3, #1
 800d6e4:	2b00      	cmp	r3, #0
 800d6e6:	f000 80b8 	beq.w	800d85a <tcp_receive+0xb7e>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 800d6ea:	4b45      	ldr	r3, [pc, #276]	@ (800d800 <tcp_receive+0xb24>)
 800d6ec:	781b      	ldrb	r3, [r3, #0]
 800d6ee:	f043 0320 	orr.w	r3, r3, #32
 800d6f2:	b2da      	uxtb	r2, r3
 800d6f4:	4b42      	ldr	r3, [pc, #264]	@ (800d800 <tcp_receive+0xb24>)
 800d6f6:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 800d6f8:	e0af      	b.n	800d85a <tcp_receive+0xb7e>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 800d6fa:	687b      	ldr	r3, [r7, #4]
 800d6fc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800d6fe:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 800d700:	687b      	ldr	r3, [r7, #4]
 800d702:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800d704:	68db      	ldr	r3, [r3, #12]
 800d706:	685b      	ldr	r3, [r3, #4]
 800d708:	4a36      	ldr	r2, [pc, #216]	@ (800d7e4 <tcp_receive+0xb08>)
 800d70a:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 800d70c:	68bb      	ldr	r3, [r7, #8]
 800d70e:	891b      	ldrh	r3, [r3, #8]
 800d710:	461c      	mov	r4, r3
 800d712:	68bb      	ldr	r3, [r7, #8]
 800d714:	68db      	ldr	r3, [r3, #12]
 800d716:	899b      	ldrh	r3, [r3, #12]
 800d718:	b29b      	uxth	r3, r3
 800d71a:	4618      	mov	r0, r3
 800d71c:	f7fa fdfe 	bl	800831c <lwip_htons>
 800d720:	4603      	mov	r3, r0
 800d722:	b2db      	uxtb	r3, r3
 800d724:	f003 0303 	and.w	r3, r3, #3
 800d728:	2b00      	cmp	r3, #0
 800d72a:	d001      	beq.n	800d730 <tcp_receive+0xa54>
 800d72c:	2301      	movs	r3, #1
 800d72e:	e000      	b.n	800d732 <tcp_receive+0xa56>
 800d730:	2300      	movs	r3, #0
 800d732:	191a      	adds	r2, r3, r4
 800d734:	687b      	ldr	r3, [r7, #4]
 800d736:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d738:	441a      	add	r2, r3
 800d73a:	687b      	ldr	r3, [r7, #4]
 800d73c:	625a      	str	r2, [r3, #36]	@ 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 800d73e:	687b      	ldr	r3, [r7, #4]
 800d740:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800d742:	461c      	mov	r4, r3
 800d744:	68bb      	ldr	r3, [r7, #8]
 800d746:	891b      	ldrh	r3, [r3, #8]
 800d748:	461d      	mov	r5, r3
 800d74a:	68bb      	ldr	r3, [r7, #8]
 800d74c:	68db      	ldr	r3, [r3, #12]
 800d74e:	899b      	ldrh	r3, [r3, #12]
 800d750:	b29b      	uxth	r3, r3
 800d752:	4618      	mov	r0, r3
 800d754:	f7fa fde2 	bl	800831c <lwip_htons>
 800d758:	4603      	mov	r3, r0
 800d75a:	b2db      	uxtb	r3, r3
 800d75c:	f003 0303 	and.w	r3, r3, #3
 800d760:	2b00      	cmp	r3, #0
 800d762:	d001      	beq.n	800d768 <tcp_receive+0xa8c>
 800d764:	2301      	movs	r3, #1
 800d766:	e000      	b.n	800d76a <tcp_receive+0xa8e>
 800d768:	2300      	movs	r3, #0
 800d76a:	442b      	add	r3, r5
 800d76c:	429c      	cmp	r4, r3
 800d76e:	d206      	bcs.n	800d77e <tcp_receive+0xaa2>
 800d770:	4b1e      	ldr	r3, [pc, #120]	@ (800d7ec <tcp_receive+0xb10>)
 800d772:	f240 622b 	movw	r2, #1579	@ 0x62b
 800d776:	4923      	ldr	r1, [pc, #140]	@ (800d804 <tcp_receive+0xb28>)
 800d778:	481e      	ldr	r0, [pc, #120]	@ (800d7f4 <tcp_receive+0xb18>)
 800d77a:	f004 fd9f 	bl	80122bc <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 800d77e:	68bb      	ldr	r3, [r7, #8]
 800d780:	891b      	ldrh	r3, [r3, #8]
 800d782:	461c      	mov	r4, r3
 800d784:	68bb      	ldr	r3, [r7, #8]
 800d786:	68db      	ldr	r3, [r3, #12]
 800d788:	899b      	ldrh	r3, [r3, #12]
 800d78a:	b29b      	uxth	r3, r3
 800d78c:	4618      	mov	r0, r3
 800d78e:	f7fa fdc5 	bl	800831c <lwip_htons>
 800d792:	4603      	mov	r3, r0
 800d794:	b2db      	uxtb	r3, r3
 800d796:	f003 0303 	and.w	r3, r3, #3
 800d79a:	2b00      	cmp	r3, #0
 800d79c:	d001      	beq.n	800d7a2 <tcp_receive+0xac6>
 800d79e:	2301      	movs	r3, #1
 800d7a0:	e000      	b.n	800d7a4 <tcp_receive+0xac8>
 800d7a2:	2300      	movs	r3, #0
 800d7a4:	1919      	adds	r1, r3, r4
 800d7a6:	687b      	ldr	r3, [r7, #4]
 800d7a8:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 800d7aa:	b28b      	uxth	r3, r1
 800d7ac:	1ad3      	subs	r3, r2, r3
 800d7ae:	b29a      	uxth	r2, r3
 800d7b0:	687b      	ldr	r3, [r7, #4]
 800d7b2:	851a      	strh	r2, [r3, #40]	@ 0x28

          tcp_update_rcv_ann_wnd(pcb);
 800d7b4:	6878      	ldr	r0, [r7, #4]
 800d7b6:	f7fc ff43 	bl	800a640 <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 800d7ba:	68bb      	ldr	r3, [r7, #8]
 800d7bc:	685b      	ldr	r3, [r3, #4]
 800d7be:	891b      	ldrh	r3, [r3, #8]
 800d7c0:	2b00      	cmp	r3, #0
 800d7c2:	d028      	beq.n	800d816 <tcp_receive+0xb3a>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 800d7c4:	4b0d      	ldr	r3, [pc, #52]	@ (800d7fc <tcp_receive+0xb20>)
 800d7c6:	681b      	ldr	r3, [r3, #0]
 800d7c8:	2b00      	cmp	r3, #0
 800d7ca:	d01d      	beq.n	800d808 <tcp_receive+0xb2c>
              pbuf_cat(recv_data, cseg->p);
 800d7cc:	4b0b      	ldr	r3, [pc, #44]	@ (800d7fc <tcp_receive+0xb20>)
 800d7ce:	681a      	ldr	r2, [r3, #0]
 800d7d0:	68bb      	ldr	r3, [r7, #8]
 800d7d2:	685b      	ldr	r3, [r3, #4]
 800d7d4:	4619      	mov	r1, r3
 800d7d6:	4610      	mov	r0, r2
 800d7d8:	f7fc fa60 	bl	8009c9c <pbuf_cat>
 800d7dc:	e018      	b.n	800d810 <tcp_receive+0xb34>
 800d7de:	bf00      	nop
 800d7e0:	2001013e 	.word	0x2001013e
 800d7e4:	20010134 	.word	0x20010134
 800d7e8:	20010114 	.word	0x20010114
 800d7ec:	080144f8 	.word	0x080144f8
 800d7f0:	080148d8 	.word	0x080148d8
 800d7f4:	08014544 	.word	0x08014544
 800d7f8:	08014914 	.word	0x08014914
 800d7fc:	20010144 	.word	0x20010144
 800d800:	20010141 	.word	0x20010141
 800d804:	08014934 	.word	0x08014934
            } else {
              recv_data = cseg->p;
 800d808:	68bb      	ldr	r3, [r7, #8]
 800d80a:	685b      	ldr	r3, [r3, #4]
 800d80c:	4a70      	ldr	r2, [pc, #448]	@ (800d9d0 <tcp_receive+0xcf4>)
 800d80e:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 800d810:	68bb      	ldr	r3, [r7, #8]
 800d812:	2200      	movs	r2, #0
 800d814:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 800d816:	68bb      	ldr	r3, [r7, #8]
 800d818:	68db      	ldr	r3, [r3, #12]
 800d81a:	899b      	ldrh	r3, [r3, #12]
 800d81c:	b29b      	uxth	r3, r3
 800d81e:	4618      	mov	r0, r3
 800d820:	f7fa fd7c 	bl	800831c <lwip_htons>
 800d824:	4603      	mov	r3, r0
 800d826:	b2db      	uxtb	r3, r3
 800d828:	f003 0301 	and.w	r3, r3, #1
 800d82c:	2b00      	cmp	r3, #0
 800d82e:	d00d      	beq.n	800d84c <tcp_receive+0xb70>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 800d830:	4b68      	ldr	r3, [pc, #416]	@ (800d9d4 <tcp_receive+0xcf8>)
 800d832:	781b      	ldrb	r3, [r3, #0]
 800d834:	f043 0320 	orr.w	r3, r3, #32
 800d838:	b2da      	uxtb	r2, r3
 800d83a:	4b66      	ldr	r3, [pc, #408]	@ (800d9d4 <tcp_receive+0xcf8>)
 800d83c:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 800d83e:	687b      	ldr	r3, [r7, #4]
 800d840:	7d1b      	ldrb	r3, [r3, #20]
 800d842:	2b04      	cmp	r3, #4
 800d844:	d102      	bne.n	800d84c <tcp_receive+0xb70>
              pcb->state = CLOSE_WAIT;
 800d846:	687b      	ldr	r3, [r7, #4]
 800d848:	2207      	movs	r2, #7
 800d84a:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 800d84c:	68bb      	ldr	r3, [r7, #8]
 800d84e:	681a      	ldr	r2, [r3, #0]
 800d850:	687b      	ldr	r3, [r7, #4]
 800d852:	675a      	str	r2, [r3, #116]	@ 0x74
          tcp_seg_free(cseg);
 800d854:	68b8      	ldr	r0, [r7, #8]
 800d856:	f7fd fbd4 	bl	800b002 <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 800d85a:	687b      	ldr	r3, [r7, #4]
 800d85c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800d85e:	2b00      	cmp	r3, #0
 800d860:	d008      	beq.n	800d874 <tcp_receive+0xb98>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 800d862:	687b      	ldr	r3, [r7, #4]
 800d864:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800d866:	68db      	ldr	r3, [r3, #12]
 800d868:	685a      	ldr	r2, [r3, #4]
 800d86a:	687b      	ldr	r3, [r7, #4]
 800d86c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        while (pcb->ooseq != NULL &&
 800d86e:	429a      	cmp	r2, r3
 800d870:	f43f af43 	beq.w	800d6fa <tcp_receive+0xa1e>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 800d874:	687b      	ldr	r3, [r7, #4]
 800d876:	8b5b      	ldrh	r3, [r3, #26]
 800d878:	f003 0301 	and.w	r3, r3, #1
 800d87c:	2b00      	cmp	r3, #0
 800d87e:	d00e      	beq.n	800d89e <tcp_receive+0xbc2>
 800d880:	687b      	ldr	r3, [r7, #4]
 800d882:	8b5b      	ldrh	r3, [r3, #26]
 800d884:	f023 0301 	bic.w	r3, r3, #1
 800d888:	b29a      	uxth	r2, r3
 800d88a:	687b      	ldr	r3, [r7, #4]
 800d88c:	835a      	strh	r2, [r3, #26]
 800d88e:	687b      	ldr	r3, [r7, #4]
 800d890:	8b5b      	ldrh	r3, [r3, #26]
 800d892:	f043 0302 	orr.w	r3, r3, #2
 800d896:	b29a      	uxth	r2, r3
 800d898:	687b      	ldr	r3, [r7, #4]
 800d89a:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 800d89c:	e187      	b.n	800dbae <tcp_receive+0xed2>
        tcp_ack(pcb);
 800d89e:	687b      	ldr	r3, [r7, #4]
 800d8a0:	8b5b      	ldrh	r3, [r3, #26]
 800d8a2:	f043 0301 	orr.w	r3, r3, #1
 800d8a6:	b29a      	uxth	r2, r3
 800d8a8:	687b      	ldr	r3, [r7, #4]
 800d8aa:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 800d8ac:	e17f      	b.n	800dbae <tcp_receive+0xed2>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 800d8ae:	687b      	ldr	r3, [r7, #4]
 800d8b0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800d8b2:	2b00      	cmp	r3, #0
 800d8b4:	d106      	bne.n	800d8c4 <tcp_receive+0xbe8>
          pcb->ooseq = tcp_seg_copy(&inseg);
 800d8b6:	4848      	ldr	r0, [pc, #288]	@ (800d9d8 <tcp_receive+0xcfc>)
 800d8b8:	f7fd fbbc 	bl	800b034 <tcp_seg_copy>
 800d8bc:	4602      	mov	r2, r0
 800d8be:	687b      	ldr	r3, [r7, #4]
 800d8c0:	675a      	str	r2, [r3, #116]	@ 0x74
 800d8c2:	e16c      	b.n	800db9e <tcp_receive+0xec2>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 800d8c4:	2300      	movs	r3, #0
 800d8c6:	637b      	str	r3, [r7, #52]	@ 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 800d8c8:	687b      	ldr	r3, [r7, #4]
 800d8ca:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800d8cc:	63bb      	str	r3, [r7, #56]	@ 0x38
 800d8ce:	e156      	b.n	800db7e <tcp_receive+0xea2>
            if (seqno == next->tcphdr->seqno) {
 800d8d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d8d2:	68db      	ldr	r3, [r3, #12]
 800d8d4:	685a      	ldr	r2, [r3, #4]
 800d8d6:	4b41      	ldr	r3, [pc, #260]	@ (800d9dc <tcp_receive+0xd00>)
 800d8d8:	681b      	ldr	r3, [r3, #0]
 800d8da:	429a      	cmp	r2, r3
 800d8dc:	d11d      	bne.n	800d91a <tcp_receive+0xc3e>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 800d8de:	4b3e      	ldr	r3, [pc, #248]	@ (800d9d8 <tcp_receive+0xcfc>)
 800d8e0:	891a      	ldrh	r2, [r3, #8]
 800d8e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d8e4:	891b      	ldrh	r3, [r3, #8]
 800d8e6:	429a      	cmp	r2, r3
 800d8e8:	f240 814e 	bls.w	800db88 <tcp_receive+0xeac>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800d8ec:	483a      	ldr	r0, [pc, #232]	@ (800d9d8 <tcp_receive+0xcfc>)
 800d8ee:	f7fd fba1 	bl	800b034 <tcp_seg_copy>
 800d8f2:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 800d8f4:	697b      	ldr	r3, [r7, #20]
 800d8f6:	2b00      	cmp	r3, #0
 800d8f8:	f000 8148 	beq.w	800db8c <tcp_receive+0xeb0>
                  if (prev != NULL) {
 800d8fc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d8fe:	2b00      	cmp	r3, #0
 800d900:	d003      	beq.n	800d90a <tcp_receive+0xc2e>
                    prev->next = cseg;
 800d902:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d904:	697a      	ldr	r2, [r7, #20]
 800d906:	601a      	str	r2, [r3, #0]
 800d908:	e002      	b.n	800d910 <tcp_receive+0xc34>
                  } else {
                    pcb->ooseq = cseg;
 800d90a:	687b      	ldr	r3, [r7, #4]
 800d90c:	697a      	ldr	r2, [r7, #20]
 800d90e:	675a      	str	r2, [r3, #116]	@ 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 800d910:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800d912:	6978      	ldr	r0, [r7, #20]
 800d914:	f7ff f8de 	bl	800cad4 <tcp_oos_insert_segment>
                }
                break;
 800d918:	e138      	b.n	800db8c <tcp_receive+0xeb0>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 800d91a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d91c:	2b00      	cmp	r3, #0
 800d91e:	d117      	bne.n	800d950 <tcp_receive+0xc74>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 800d920:	4b2e      	ldr	r3, [pc, #184]	@ (800d9dc <tcp_receive+0xd00>)
 800d922:	681a      	ldr	r2, [r3, #0]
 800d924:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d926:	68db      	ldr	r3, [r3, #12]
 800d928:	685b      	ldr	r3, [r3, #4]
 800d92a:	1ad3      	subs	r3, r2, r3
 800d92c:	2b00      	cmp	r3, #0
 800d92e:	da57      	bge.n	800d9e0 <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800d930:	4829      	ldr	r0, [pc, #164]	@ (800d9d8 <tcp_receive+0xcfc>)
 800d932:	f7fd fb7f 	bl	800b034 <tcp_seg_copy>
 800d936:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 800d938:	69bb      	ldr	r3, [r7, #24]
 800d93a:	2b00      	cmp	r3, #0
 800d93c:	f000 8128 	beq.w	800db90 <tcp_receive+0xeb4>
                    pcb->ooseq = cseg;
 800d940:	687b      	ldr	r3, [r7, #4]
 800d942:	69ba      	ldr	r2, [r7, #24]
 800d944:	675a      	str	r2, [r3, #116]	@ 0x74
                    tcp_oos_insert_segment(cseg, next);
 800d946:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800d948:	69b8      	ldr	r0, [r7, #24]
 800d94a:	f7ff f8c3 	bl	800cad4 <tcp_oos_insert_segment>
                  }
                  break;
 800d94e:	e11f      	b.n	800db90 <tcp_receive+0xeb4>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 800d950:	4b22      	ldr	r3, [pc, #136]	@ (800d9dc <tcp_receive+0xd00>)
 800d952:	681a      	ldr	r2, [r3, #0]
 800d954:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d956:	68db      	ldr	r3, [r3, #12]
 800d958:	685b      	ldr	r3, [r3, #4]
 800d95a:	1ad3      	subs	r3, r2, r3
 800d95c:	3b01      	subs	r3, #1
 800d95e:	2b00      	cmp	r3, #0
 800d960:	db3e      	blt.n	800d9e0 <tcp_receive+0xd04>
 800d962:	4b1e      	ldr	r3, [pc, #120]	@ (800d9dc <tcp_receive+0xd00>)
 800d964:	681a      	ldr	r2, [r3, #0]
 800d966:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d968:	68db      	ldr	r3, [r3, #12]
 800d96a:	685b      	ldr	r3, [r3, #4]
 800d96c:	1ad3      	subs	r3, r2, r3
 800d96e:	3301      	adds	r3, #1
 800d970:	2b00      	cmp	r3, #0
 800d972:	dc35      	bgt.n	800d9e0 <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800d974:	4818      	ldr	r0, [pc, #96]	@ (800d9d8 <tcp_receive+0xcfc>)
 800d976:	f7fd fb5d 	bl	800b034 <tcp_seg_copy>
 800d97a:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 800d97c:	69fb      	ldr	r3, [r7, #28]
 800d97e:	2b00      	cmp	r3, #0
 800d980:	f000 8108 	beq.w	800db94 <tcp_receive+0xeb8>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 800d984:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d986:	68db      	ldr	r3, [r3, #12]
 800d988:	685b      	ldr	r3, [r3, #4]
 800d98a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800d98c:	8912      	ldrh	r2, [r2, #8]
 800d98e:	441a      	add	r2, r3
 800d990:	4b12      	ldr	r3, [pc, #72]	@ (800d9dc <tcp_receive+0xd00>)
 800d992:	681b      	ldr	r3, [r3, #0]
 800d994:	1ad3      	subs	r3, r2, r3
 800d996:	2b00      	cmp	r3, #0
 800d998:	dd12      	ble.n	800d9c0 <tcp_receive+0xce4>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 800d99a:	4b10      	ldr	r3, [pc, #64]	@ (800d9dc <tcp_receive+0xd00>)
 800d99c:	681b      	ldr	r3, [r3, #0]
 800d99e:	b29a      	uxth	r2, r3
 800d9a0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d9a2:	68db      	ldr	r3, [r3, #12]
 800d9a4:	685b      	ldr	r3, [r3, #4]
 800d9a6:	b29b      	uxth	r3, r3
 800d9a8:	1ad3      	subs	r3, r2, r3
 800d9aa:	b29a      	uxth	r2, r3
 800d9ac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d9ae:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 800d9b0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d9b2:	685a      	ldr	r2, [r3, #4]
 800d9b4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d9b6:	891b      	ldrh	r3, [r3, #8]
 800d9b8:	4619      	mov	r1, r3
 800d9ba:	4610      	mov	r0, r2
 800d9bc:	f7fb ff1a 	bl	80097f4 <pbuf_realloc>
                    }
                    prev->next = cseg;
 800d9c0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d9c2:	69fa      	ldr	r2, [r7, #28]
 800d9c4:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 800d9c6:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800d9c8:	69f8      	ldr	r0, [r7, #28]
 800d9ca:	f7ff f883 	bl	800cad4 <tcp_oos_insert_segment>
                  }
                  break;
 800d9ce:	e0e1      	b.n	800db94 <tcp_receive+0xeb8>
 800d9d0:	20010144 	.word	0x20010144
 800d9d4:	20010141 	.word	0x20010141
 800d9d8:	20010114 	.word	0x20010114
 800d9dc:	20010134 	.word	0x20010134
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 800d9e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d9e2:	637b      	str	r3, [r7, #52]	@ 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 800d9e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d9e6:	681b      	ldr	r3, [r3, #0]
 800d9e8:	2b00      	cmp	r3, #0
 800d9ea:	f040 80c5 	bne.w	800db78 <tcp_receive+0xe9c>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 800d9ee:	4b7f      	ldr	r3, [pc, #508]	@ (800dbec <tcp_receive+0xf10>)
 800d9f0:	681a      	ldr	r2, [r3, #0]
 800d9f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d9f4:	68db      	ldr	r3, [r3, #12]
 800d9f6:	685b      	ldr	r3, [r3, #4]
 800d9f8:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 800d9fa:	2b00      	cmp	r3, #0
 800d9fc:	f340 80bc 	ble.w	800db78 <tcp_receive+0xe9c>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 800da00:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800da02:	68db      	ldr	r3, [r3, #12]
 800da04:	899b      	ldrh	r3, [r3, #12]
 800da06:	b29b      	uxth	r3, r3
 800da08:	4618      	mov	r0, r3
 800da0a:	f7fa fc87 	bl	800831c <lwip_htons>
 800da0e:	4603      	mov	r3, r0
 800da10:	b2db      	uxtb	r3, r3
 800da12:	f003 0301 	and.w	r3, r3, #1
 800da16:	2b00      	cmp	r3, #0
 800da18:	f040 80be 	bne.w	800db98 <tcp_receive+0xebc>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 800da1c:	4874      	ldr	r0, [pc, #464]	@ (800dbf0 <tcp_receive+0xf14>)
 800da1e:	f7fd fb09 	bl	800b034 <tcp_seg_copy>
 800da22:	4602      	mov	r2, r0
 800da24:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800da26:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 800da28:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800da2a:	681b      	ldr	r3, [r3, #0]
 800da2c:	2b00      	cmp	r3, #0
 800da2e:	f000 80b5 	beq.w	800db9c <tcp_receive+0xec0>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 800da32:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800da34:	68db      	ldr	r3, [r3, #12]
 800da36:	685b      	ldr	r3, [r3, #4]
 800da38:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800da3a:	8912      	ldrh	r2, [r2, #8]
 800da3c:	441a      	add	r2, r3
 800da3e:	4b6b      	ldr	r3, [pc, #428]	@ (800dbec <tcp_receive+0xf10>)
 800da40:	681b      	ldr	r3, [r3, #0]
 800da42:	1ad3      	subs	r3, r2, r3
 800da44:	2b00      	cmp	r3, #0
 800da46:	dd12      	ble.n	800da6e <tcp_receive+0xd92>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 800da48:	4b68      	ldr	r3, [pc, #416]	@ (800dbec <tcp_receive+0xf10>)
 800da4a:	681b      	ldr	r3, [r3, #0]
 800da4c:	b29a      	uxth	r2, r3
 800da4e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800da50:	68db      	ldr	r3, [r3, #12]
 800da52:	685b      	ldr	r3, [r3, #4]
 800da54:	b29b      	uxth	r3, r3
 800da56:	1ad3      	subs	r3, r2, r3
 800da58:	b29a      	uxth	r2, r3
 800da5a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800da5c:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 800da5e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800da60:	685a      	ldr	r2, [r3, #4]
 800da62:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800da64:	891b      	ldrh	r3, [r3, #8]
 800da66:	4619      	mov	r1, r3
 800da68:	4610      	mov	r0, r2
 800da6a:	f7fb fec3 	bl	80097f4 <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 800da6e:	4b61      	ldr	r3, [pc, #388]	@ (800dbf4 <tcp_receive+0xf18>)
 800da70:	881b      	ldrh	r3, [r3, #0]
 800da72:	461a      	mov	r2, r3
 800da74:	4b5d      	ldr	r3, [pc, #372]	@ (800dbec <tcp_receive+0xf10>)
 800da76:	681b      	ldr	r3, [r3, #0]
 800da78:	441a      	add	r2, r3
 800da7a:	687b      	ldr	r3, [r7, #4]
 800da7c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800da7e:	6879      	ldr	r1, [r7, #4]
 800da80:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 800da82:	440b      	add	r3, r1
 800da84:	1ad3      	subs	r3, r2, r3
 800da86:	2b00      	cmp	r3, #0
 800da88:	f340 8088 	ble.w	800db9c <tcp_receive+0xec0>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 800da8c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800da8e:	681b      	ldr	r3, [r3, #0]
 800da90:	68db      	ldr	r3, [r3, #12]
 800da92:	899b      	ldrh	r3, [r3, #12]
 800da94:	b29b      	uxth	r3, r3
 800da96:	4618      	mov	r0, r3
 800da98:	f7fa fc40 	bl	800831c <lwip_htons>
 800da9c:	4603      	mov	r3, r0
 800da9e:	b2db      	uxtb	r3, r3
 800daa0:	f003 0301 	and.w	r3, r3, #1
 800daa4:	2b00      	cmp	r3, #0
 800daa6:	d021      	beq.n	800daec <tcp_receive+0xe10>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 800daa8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800daaa:	681b      	ldr	r3, [r3, #0]
 800daac:	68db      	ldr	r3, [r3, #12]
 800daae:	899b      	ldrh	r3, [r3, #12]
 800dab0:	b29b      	uxth	r3, r3
 800dab2:	b21b      	sxth	r3, r3
 800dab4:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800dab8:	b21c      	sxth	r4, r3
 800daba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dabc:	681b      	ldr	r3, [r3, #0]
 800dabe:	68db      	ldr	r3, [r3, #12]
 800dac0:	899b      	ldrh	r3, [r3, #12]
 800dac2:	b29b      	uxth	r3, r3
 800dac4:	4618      	mov	r0, r3
 800dac6:	f7fa fc29 	bl	800831c <lwip_htons>
 800daca:	4603      	mov	r3, r0
 800dacc:	b2db      	uxtb	r3, r3
 800dace:	f003 033e 	and.w	r3, r3, #62	@ 0x3e
 800dad2:	b29b      	uxth	r3, r3
 800dad4:	4618      	mov	r0, r3
 800dad6:	f7fa fc21 	bl	800831c <lwip_htons>
 800dada:	4603      	mov	r3, r0
 800dadc:	b21b      	sxth	r3, r3
 800dade:	4323      	orrs	r3, r4
 800dae0:	b21a      	sxth	r2, r3
 800dae2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dae4:	681b      	ldr	r3, [r3, #0]
 800dae6:	68db      	ldr	r3, [r3, #12]
 800dae8:	b292      	uxth	r2, r2
 800daea:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 800daec:	687b      	ldr	r3, [r7, #4]
 800daee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800daf0:	b29a      	uxth	r2, r3
 800daf2:	687b      	ldr	r3, [r7, #4]
 800daf4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800daf6:	4413      	add	r3, r2
 800daf8:	b299      	uxth	r1, r3
 800dafa:	4b3c      	ldr	r3, [pc, #240]	@ (800dbec <tcp_receive+0xf10>)
 800dafc:	681b      	ldr	r3, [r3, #0]
 800dafe:	b29a      	uxth	r2, r3
 800db00:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800db02:	681b      	ldr	r3, [r3, #0]
 800db04:	1a8a      	subs	r2, r1, r2
 800db06:	b292      	uxth	r2, r2
 800db08:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 800db0a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800db0c:	681b      	ldr	r3, [r3, #0]
 800db0e:	685a      	ldr	r2, [r3, #4]
 800db10:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800db12:	681b      	ldr	r3, [r3, #0]
 800db14:	891b      	ldrh	r3, [r3, #8]
 800db16:	4619      	mov	r1, r3
 800db18:	4610      	mov	r0, r2
 800db1a:	f7fb fe6b 	bl	80097f4 <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 800db1e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800db20:	681b      	ldr	r3, [r3, #0]
 800db22:	891c      	ldrh	r4, [r3, #8]
 800db24:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800db26:	681b      	ldr	r3, [r3, #0]
 800db28:	68db      	ldr	r3, [r3, #12]
 800db2a:	899b      	ldrh	r3, [r3, #12]
 800db2c:	b29b      	uxth	r3, r3
 800db2e:	4618      	mov	r0, r3
 800db30:	f7fa fbf4 	bl	800831c <lwip_htons>
 800db34:	4603      	mov	r3, r0
 800db36:	b2db      	uxtb	r3, r3
 800db38:	f003 0303 	and.w	r3, r3, #3
 800db3c:	2b00      	cmp	r3, #0
 800db3e:	d001      	beq.n	800db44 <tcp_receive+0xe68>
 800db40:	2301      	movs	r3, #1
 800db42:	e000      	b.n	800db46 <tcp_receive+0xe6a>
 800db44:	2300      	movs	r3, #0
 800db46:	4423      	add	r3, r4
 800db48:	b29a      	uxth	r2, r3
 800db4a:	4b2a      	ldr	r3, [pc, #168]	@ (800dbf4 <tcp_receive+0xf18>)
 800db4c:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800db4e:	4b29      	ldr	r3, [pc, #164]	@ (800dbf4 <tcp_receive+0xf18>)
 800db50:	881b      	ldrh	r3, [r3, #0]
 800db52:	461a      	mov	r2, r3
 800db54:	4b25      	ldr	r3, [pc, #148]	@ (800dbec <tcp_receive+0xf10>)
 800db56:	681b      	ldr	r3, [r3, #0]
 800db58:	441a      	add	r2, r3
 800db5a:	687b      	ldr	r3, [r7, #4]
 800db5c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800db5e:	6879      	ldr	r1, [r7, #4]
 800db60:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 800db62:	440b      	add	r3, r1
 800db64:	429a      	cmp	r2, r3
 800db66:	d019      	beq.n	800db9c <tcp_receive+0xec0>
 800db68:	4b23      	ldr	r3, [pc, #140]	@ (800dbf8 <tcp_receive+0xf1c>)
 800db6a:	f44f 62df 	mov.w	r2, #1784	@ 0x6f8
 800db6e:	4923      	ldr	r1, [pc, #140]	@ (800dbfc <tcp_receive+0xf20>)
 800db70:	4823      	ldr	r0, [pc, #140]	@ (800dc00 <tcp_receive+0xf24>)
 800db72:	f004 fba3 	bl	80122bc <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 800db76:	e011      	b.n	800db9c <tcp_receive+0xec0>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 800db78:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800db7a:	681b      	ldr	r3, [r3, #0]
 800db7c:	63bb      	str	r3, [r7, #56]	@ 0x38
 800db7e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800db80:	2b00      	cmp	r3, #0
 800db82:	f47f aea5 	bne.w	800d8d0 <tcp_receive+0xbf4>
 800db86:	e00a      	b.n	800db9e <tcp_receive+0xec2>
                break;
 800db88:	bf00      	nop
 800db8a:	e008      	b.n	800db9e <tcp_receive+0xec2>
                break;
 800db8c:	bf00      	nop
 800db8e:	e006      	b.n	800db9e <tcp_receive+0xec2>
                  break;
 800db90:	bf00      	nop
 800db92:	e004      	b.n	800db9e <tcp_receive+0xec2>
                  break;
 800db94:	bf00      	nop
 800db96:	e002      	b.n	800db9e <tcp_receive+0xec2>
                  break;
 800db98:	bf00      	nop
 800db9a:	e000      	b.n	800db9e <tcp_receive+0xec2>
                break;
 800db9c:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 800db9e:	6878      	ldr	r0, [r7, #4]
 800dba0:	f001 fa30 	bl	800f004 <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 800dba4:	e003      	b.n	800dbae <tcp_receive+0xed2>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 800dba6:	6878      	ldr	r0, [r7, #4]
 800dba8:	f001 fa2c 	bl	800f004 <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800dbac:	e01a      	b.n	800dbe4 <tcp_receive+0xf08>
 800dbae:	e019      	b.n	800dbe4 <tcp_receive+0xf08>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 800dbb0:	4b0e      	ldr	r3, [pc, #56]	@ (800dbec <tcp_receive+0xf10>)
 800dbb2:	681a      	ldr	r2, [r3, #0]
 800dbb4:	687b      	ldr	r3, [r7, #4]
 800dbb6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800dbb8:	1ad3      	subs	r3, r2, r3
 800dbba:	2b00      	cmp	r3, #0
 800dbbc:	db0a      	blt.n	800dbd4 <tcp_receive+0xef8>
 800dbbe:	4b0b      	ldr	r3, [pc, #44]	@ (800dbec <tcp_receive+0xf10>)
 800dbc0:	681a      	ldr	r2, [r3, #0]
 800dbc2:	687b      	ldr	r3, [r7, #4]
 800dbc4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800dbc6:	6879      	ldr	r1, [r7, #4]
 800dbc8:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 800dbca:	440b      	add	r3, r1
 800dbcc:	1ad3      	subs	r3, r2, r3
 800dbce:	3301      	adds	r3, #1
 800dbd0:	2b00      	cmp	r3, #0
 800dbd2:	dd07      	ble.n	800dbe4 <tcp_receive+0xf08>
      tcp_ack_now(pcb);
 800dbd4:	687b      	ldr	r3, [r7, #4]
 800dbd6:	8b5b      	ldrh	r3, [r3, #26]
 800dbd8:	f043 0302 	orr.w	r3, r3, #2
 800dbdc:	b29a      	uxth	r2, r3
 800dbde:	687b      	ldr	r3, [r7, #4]
 800dbe0:	835a      	strh	r2, [r3, #26]
    }
  }
}
 800dbe2:	e7ff      	b.n	800dbe4 <tcp_receive+0xf08>
 800dbe4:	bf00      	nop
 800dbe6:	3750      	adds	r7, #80	@ 0x50
 800dbe8:	46bd      	mov	sp, r7
 800dbea:	bdb0      	pop	{r4, r5, r7, pc}
 800dbec:	20010134 	.word	0x20010134
 800dbf0:	20010114 	.word	0x20010114
 800dbf4:	2001013e 	.word	0x2001013e
 800dbf8:	080144f8 	.word	0x080144f8
 800dbfc:	080148a0 	.word	0x080148a0
 800dc00:	08014544 	.word	0x08014544

0800dc04 <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 800dc04:	b480      	push	{r7}
 800dc06:	b083      	sub	sp, #12
 800dc08:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 800dc0a:	4b15      	ldr	r3, [pc, #84]	@ (800dc60 <tcp_get_next_optbyte+0x5c>)
 800dc0c:	881b      	ldrh	r3, [r3, #0]
 800dc0e:	1c5a      	adds	r2, r3, #1
 800dc10:	b291      	uxth	r1, r2
 800dc12:	4a13      	ldr	r2, [pc, #76]	@ (800dc60 <tcp_get_next_optbyte+0x5c>)
 800dc14:	8011      	strh	r1, [r2, #0]
 800dc16:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 800dc18:	4b12      	ldr	r3, [pc, #72]	@ (800dc64 <tcp_get_next_optbyte+0x60>)
 800dc1a:	681b      	ldr	r3, [r3, #0]
 800dc1c:	2b00      	cmp	r3, #0
 800dc1e:	d004      	beq.n	800dc2a <tcp_get_next_optbyte+0x26>
 800dc20:	4b11      	ldr	r3, [pc, #68]	@ (800dc68 <tcp_get_next_optbyte+0x64>)
 800dc22:	881b      	ldrh	r3, [r3, #0]
 800dc24:	88fa      	ldrh	r2, [r7, #6]
 800dc26:	429a      	cmp	r2, r3
 800dc28:	d208      	bcs.n	800dc3c <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 800dc2a:	4b10      	ldr	r3, [pc, #64]	@ (800dc6c <tcp_get_next_optbyte+0x68>)
 800dc2c:	681b      	ldr	r3, [r3, #0]
 800dc2e:	3314      	adds	r3, #20
 800dc30:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 800dc32:	88fb      	ldrh	r3, [r7, #6]
 800dc34:	683a      	ldr	r2, [r7, #0]
 800dc36:	4413      	add	r3, r2
 800dc38:	781b      	ldrb	r3, [r3, #0]
 800dc3a:	e00b      	b.n	800dc54 <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 800dc3c:	88fb      	ldrh	r3, [r7, #6]
 800dc3e:	b2da      	uxtb	r2, r3
 800dc40:	4b09      	ldr	r3, [pc, #36]	@ (800dc68 <tcp_get_next_optbyte+0x64>)
 800dc42:	881b      	ldrh	r3, [r3, #0]
 800dc44:	b2db      	uxtb	r3, r3
 800dc46:	1ad3      	subs	r3, r2, r3
 800dc48:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 800dc4a:	4b06      	ldr	r3, [pc, #24]	@ (800dc64 <tcp_get_next_optbyte+0x60>)
 800dc4c:	681a      	ldr	r2, [r3, #0]
 800dc4e:	797b      	ldrb	r3, [r7, #5]
 800dc50:	4413      	add	r3, r2
 800dc52:	781b      	ldrb	r3, [r3, #0]
  }
}
 800dc54:	4618      	mov	r0, r3
 800dc56:	370c      	adds	r7, #12
 800dc58:	46bd      	mov	sp, r7
 800dc5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc5e:	4770      	bx	lr
 800dc60:	20010130 	.word	0x20010130
 800dc64:	2001012c 	.word	0x2001012c
 800dc68:	2001012a 	.word	0x2001012a
 800dc6c:	20010124 	.word	0x20010124

0800dc70 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 800dc70:	b580      	push	{r7, lr}
 800dc72:	b084      	sub	sp, #16
 800dc74:	af00      	add	r7, sp, #0
 800dc76:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 800dc78:	687b      	ldr	r3, [r7, #4]
 800dc7a:	2b00      	cmp	r3, #0
 800dc7c:	d106      	bne.n	800dc8c <tcp_parseopt+0x1c>
 800dc7e:	4b32      	ldr	r3, [pc, #200]	@ (800dd48 <tcp_parseopt+0xd8>)
 800dc80:	f240 727d 	movw	r2, #1917	@ 0x77d
 800dc84:	4931      	ldr	r1, [pc, #196]	@ (800dd4c <tcp_parseopt+0xdc>)
 800dc86:	4832      	ldr	r0, [pc, #200]	@ (800dd50 <tcp_parseopt+0xe0>)
 800dc88:	f004 fb18 	bl	80122bc <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 800dc8c:	4b31      	ldr	r3, [pc, #196]	@ (800dd54 <tcp_parseopt+0xe4>)
 800dc8e:	881b      	ldrh	r3, [r3, #0]
 800dc90:	2b00      	cmp	r3, #0
 800dc92:	d056      	beq.n	800dd42 <tcp_parseopt+0xd2>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 800dc94:	4b30      	ldr	r3, [pc, #192]	@ (800dd58 <tcp_parseopt+0xe8>)
 800dc96:	2200      	movs	r2, #0
 800dc98:	801a      	strh	r2, [r3, #0]
 800dc9a:	e046      	b.n	800dd2a <tcp_parseopt+0xba>
      u8_t opt = tcp_get_next_optbyte();
 800dc9c:	f7ff ffb2 	bl	800dc04 <tcp_get_next_optbyte>
 800dca0:	4603      	mov	r3, r0
 800dca2:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 800dca4:	7bfb      	ldrb	r3, [r7, #15]
 800dca6:	2b02      	cmp	r3, #2
 800dca8:	d006      	beq.n	800dcb8 <tcp_parseopt+0x48>
 800dcaa:	2b02      	cmp	r3, #2
 800dcac:	dc2a      	bgt.n	800dd04 <tcp_parseopt+0x94>
 800dcae:	2b00      	cmp	r3, #0
 800dcb0:	d042      	beq.n	800dd38 <tcp_parseopt+0xc8>
 800dcb2:	2b01      	cmp	r3, #1
 800dcb4:	d038      	beq.n	800dd28 <tcp_parseopt+0xb8>
 800dcb6:	e025      	b.n	800dd04 <tcp_parseopt+0x94>
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 800dcb8:	f7ff ffa4 	bl	800dc04 <tcp_get_next_optbyte>
 800dcbc:	4603      	mov	r3, r0
 800dcbe:	2b04      	cmp	r3, #4
 800dcc0:	d13c      	bne.n	800dd3c <tcp_parseopt+0xcc>
 800dcc2:	4b25      	ldr	r3, [pc, #148]	@ (800dd58 <tcp_parseopt+0xe8>)
 800dcc4:	881b      	ldrh	r3, [r3, #0]
 800dcc6:	3301      	adds	r3, #1
 800dcc8:	4a22      	ldr	r2, [pc, #136]	@ (800dd54 <tcp_parseopt+0xe4>)
 800dcca:	8812      	ldrh	r2, [r2, #0]
 800dccc:	4293      	cmp	r3, r2
 800dcce:	da35      	bge.n	800dd3c <tcp_parseopt+0xcc>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 800dcd0:	f7ff ff98 	bl	800dc04 <tcp_get_next_optbyte>
 800dcd4:	4603      	mov	r3, r0
 800dcd6:	021b      	lsls	r3, r3, #8
 800dcd8:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 800dcda:	f7ff ff93 	bl	800dc04 <tcp_get_next_optbyte>
 800dcde:	4603      	mov	r3, r0
 800dce0:	461a      	mov	r2, r3
 800dce2:	89bb      	ldrh	r3, [r7, #12]
 800dce4:	4313      	orrs	r3, r2
 800dce6:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 800dce8:	89bb      	ldrh	r3, [r7, #12]
 800dcea:	f5b3 7f06 	cmp.w	r3, #536	@ 0x218
 800dcee:	d804      	bhi.n	800dcfa <tcp_parseopt+0x8a>
 800dcf0:	89bb      	ldrh	r3, [r7, #12]
 800dcf2:	2b00      	cmp	r3, #0
 800dcf4:	d001      	beq.n	800dcfa <tcp_parseopt+0x8a>
 800dcf6:	89ba      	ldrh	r2, [r7, #12]
 800dcf8:	e001      	b.n	800dcfe <tcp_parseopt+0x8e>
 800dcfa:	f44f 7206 	mov.w	r2, #536	@ 0x218
 800dcfe:	687b      	ldr	r3, [r7, #4]
 800dd00:	865a      	strh	r2, [r3, #50]	@ 0x32
          break;
 800dd02:	e012      	b.n	800dd2a <tcp_parseopt+0xba>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 800dd04:	f7ff ff7e 	bl	800dc04 <tcp_get_next_optbyte>
 800dd08:	4603      	mov	r3, r0
 800dd0a:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 800dd0c:	7afb      	ldrb	r3, [r7, #11]
 800dd0e:	2b01      	cmp	r3, #1
 800dd10:	d916      	bls.n	800dd40 <tcp_parseopt+0xd0>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 800dd12:	7afb      	ldrb	r3, [r7, #11]
 800dd14:	b29a      	uxth	r2, r3
 800dd16:	4b10      	ldr	r3, [pc, #64]	@ (800dd58 <tcp_parseopt+0xe8>)
 800dd18:	881b      	ldrh	r3, [r3, #0]
 800dd1a:	4413      	add	r3, r2
 800dd1c:	b29b      	uxth	r3, r3
 800dd1e:	3b02      	subs	r3, #2
 800dd20:	b29a      	uxth	r2, r3
 800dd22:	4b0d      	ldr	r3, [pc, #52]	@ (800dd58 <tcp_parseopt+0xe8>)
 800dd24:	801a      	strh	r2, [r3, #0]
 800dd26:	e000      	b.n	800dd2a <tcp_parseopt+0xba>
          break;
 800dd28:	bf00      	nop
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 800dd2a:	4b0b      	ldr	r3, [pc, #44]	@ (800dd58 <tcp_parseopt+0xe8>)
 800dd2c:	881a      	ldrh	r2, [r3, #0]
 800dd2e:	4b09      	ldr	r3, [pc, #36]	@ (800dd54 <tcp_parseopt+0xe4>)
 800dd30:	881b      	ldrh	r3, [r3, #0]
 800dd32:	429a      	cmp	r2, r3
 800dd34:	d3b2      	bcc.n	800dc9c <tcp_parseopt+0x2c>
 800dd36:	e004      	b.n	800dd42 <tcp_parseopt+0xd2>
          return;
 800dd38:	bf00      	nop
 800dd3a:	e002      	b.n	800dd42 <tcp_parseopt+0xd2>
            return;
 800dd3c:	bf00      	nop
 800dd3e:	e000      	b.n	800dd42 <tcp_parseopt+0xd2>
            return;
 800dd40:	bf00      	nop
      }
    }
  }
}
 800dd42:	3710      	adds	r7, #16
 800dd44:	46bd      	mov	sp, r7
 800dd46:	bd80      	pop	{r7, pc}
 800dd48:	080144f8 	.word	0x080144f8
 800dd4c:	0801495c 	.word	0x0801495c
 800dd50:	08014544 	.word	0x08014544
 800dd54:	20010128 	.word	0x20010128
 800dd58:	20010130 	.word	0x20010130

0800dd5c <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 800dd5c:	b480      	push	{r7}
 800dd5e:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 800dd60:	4b05      	ldr	r3, [pc, #20]	@ (800dd78 <tcp_trigger_input_pcb_close+0x1c>)
 800dd62:	781b      	ldrb	r3, [r3, #0]
 800dd64:	f043 0310 	orr.w	r3, r3, #16
 800dd68:	b2da      	uxtb	r2, r3
 800dd6a:	4b03      	ldr	r3, [pc, #12]	@ (800dd78 <tcp_trigger_input_pcb_close+0x1c>)
 800dd6c:	701a      	strb	r2, [r3, #0]
}
 800dd6e:	bf00      	nop
 800dd70:	46bd      	mov	sp, r7
 800dd72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd76:	4770      	bx	lr
 800dd78:	20010141 	.word	0x20010141

0800dd7c <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 800dd7c:	b580      	push	{r7, lr}
 800dd7e:	b084      	sub	sp, #16
 800dd80:	af00      	add	r7, sp, #0
 800dd82:	60f8      	str	r0, [r7, #12]
 800dd84:	60b9      	str	r1, [r7, #8]
 800dd86:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 800dd88:	68fb      	ldr	r3, [r7, #12]
 800dd8a:	2b00      	cmp	r3, #0
 800dd8c:	d00a      	beq.n	800dda4 <tcp_route+0x28>
 800dd8e:	68fb      	ldr	r3, [r7, #12]
 800dd90:	7a1b      	ldrb	r3, [r3, #8]
 800dd92:	2b00      	cmp	r3, #0
 800dd94:	d006      	beq.n	800dda4 <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 800dd96:	68fb      	ldr	r3, [r7, #12]
 800dd98:	7a1b      	ldrb	r3, [r3, #8]
 800dd9a:	4618      	mov	r0, r3
 800dd9c:	f7fb fb22 	bl	80093e4 <netif_get_by_index>
 800dda0:	4603      	mov	r3, r0
 800dda2:	e003      	b.n	800ddac <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 800dda4:	6878      	ldr	r0, [r7, #4]
 800dda6:	f002 feab 	bl	8010b00 <ip4_route>
 800ddaa:	4603      	mov	r3, r0
  }
}
 800ddac:	4618      	mov	r0, r3
 800ddae:	3710      	adds	r7, #16
 800ddb0:	46bd      	mov	sp, r7
 800ddb2:	bd80      	pop	{r7, pc}

0800ddb4 <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 800ddb4:	b590      	push	{r4, r7, lr}
 800ddb6:	b087      	sub	sp, #28
 800ddb8:	af00      	add	r7, sp, #0
 800ddba:	60f8      	str	r0, [r7, #12]
 800ddbc:	60b9      	str	r1, [r7, #8]
 800ddbe:	603b      	str	r3, [r7, #0]
 800ddc0:	4613      	mov	r3, r2
 800ddc2:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 800ddc4:	68fb      	ldr	r3, [r7, #12]
 800ddc6:	2b00      	cmp	r3, #0
 800ddc8:	d105      	bne.n	800ddd6 <tcp_create_segment+0x22>
 800ddca:	4b43      	ldr	r3, [pc, #268]	@ (800ded8 <tcp_create_segment+0x124>)
 800ddcc:	22a3      	movs	r2, #163	@ 0xa3
 800ddce:	4943      	ldr	r1, [pc, #268]	@ (800dedc <tcp_create_segment+0x128>)
 800ddd0:	4843      	ldr	r0, [pc, #268]	@ (800dee0 <tcp_create_segment+0x12c>)
 800ddd2:	f004 fa73 	bl	80122bc <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 800ddd6:	68bb      	ldr	r3, [r7, #8]
 800ddd8:	2b00      	cmp	r3, #0
 800ddda:	d105      	bne.n	800dde8 <tcp_create_segment+0x34>
 800dddc:	4b3e      	ldr	r3, [pc, #248]	@ (800ded8 <tcp_create_segment+0x124>)
 800ddde:	22a4      	movs	r2, #164	@ 0xa4
 800dde0:	4940      	ldr	r1, [pc, #256]	@ (800dee4 <tcp_create_segment+0x130>)
 800dde2:	483f      	ldr	r0, [pc, #252]	@ (800dee0 <tcp_create_segment+0x12c>)
 800dde4:	f004 fa6a 	bl	80122bc <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800dde8:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800ddec:	009b      	lsls	r3, r3, #2
 800ddee:	b2db      	uxtb	r3, r3
 800ddf0:	f003 0304 	and.w	r3, r3, #4
 800ddf4:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 800ddf6:	2003      	movs	r0, #3
 800ddf8:	f7fa ff68 	bl	8008ccc <memp_malloc>
 800ddfc:	6138      	str	r0, [r7, #16]
 800ddfe:	693b      	ldr	r3, [r7, #16]
 800de00:	2b00      	cmp	r3, #0
 800de02:	d104      	bne.n	800de0e <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 800de04:	68b8      	ldr	r0, [r7, #8]
 800de06:	f7fb fe7b 	bl	8009b00 <pbuf_free>
    return NULL;
 800de0a:	2300      	movs	r3, #0
 800de0c:	e060      	b.n	800ded0 <tcp_create_segment+0x11c>
  }
  seg->flags = optflags;
 800de0e:	693b      	ldr	r3, [r7, #16]
 800de10:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 800de14:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 800de16:	693b      	ldr	r3, [r7, #16]
 800de18:	2200      	movs	r2, #0
 800de1a:	601a      	str	r2, [r3, #0]
  seg->p = p;
 800de1c:	693b      	ldr	r3, [r7, #16]
 800de1e:	68ba      	ldr	r2, [r7, #8]
 800de20:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 800de22:	68bb      	ldr	r3, [r7, #8]
 800de24:	891a      	ldrh	r2, [r3, #8]
 800de26:	7dfb      	ldrb	r3, [r7, #23]
 800de28:	b29b      	uxth	r3, r3
 800de2a:	429a      	cmp	r2, r3
 800de2c:	d205      	bcs.n	800de3a <tcp_create_segment+0x86>
 800de2e:	4b2a      	ldr	r3, [pc, #168]	@ (800ded8 <tcp_create_segment+0x124>)
 800de30:	22b0      	movs	r2, #176	@ 0xb0
 800de32:	492d      	ldr	r1, [pc, #180]	@ (800dee8 <tcp_create_segment+0x134>)
 800de34:	482a      	ldr	r0, [pc, #168]	@ (800dee0 <tcp_create_segment+0x12c>)
 800de36:	f004 fa41 	bl	80122bc <iprintf>
  seg->len = p->tot_len - optlen;
 800de3a:	68bb      	ldr	r3, [r7, #8]
 800de3c:	891a      	ldrh	r2, [r3, #8]
 800de3e:	7dfb      	ldrb	r3, [r7, #23]
 800de40:	b29b      	uxth	r3, r3
 800de42:	1ad3      	subs	r3, r2, r3
 800de44:	b29a      	uxth	r2, r3
 800de46:	693b      	ldr	r3, [r7, #16]
 800de48:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 800de4a:	2114      	movs	r1, #20
 800de4c:	68b8      	ldr	r0, [r7, #8]
 800de4e:	f7fb fdc1 	bl	80099d4 <pbuf_add_header>
 800de52:	4603      	mov	r3, r0
 800de54:	2b00      	cmp	r3, #0
 800de56:	d004      	beq.n	800de62 <tcp_create_segment+0xae>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 800de58:	6938      	ldr	r0, [r7, #16]
 800de5a:	f7fd f8d2 	bl	800b002 <tcp_seg_free>
    return NULL;
 800de5e:	2300      	movs	r3, #0
 800de60:	e036      	b.n	800ded0 <tcp_create_segment+0x11c>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 800de62:	693b      	ldr	r3, [r7, #16]
 800de64:	685b      	ldr	r3, [r3, #4]
 800de66:	685a      	ldr	r2, [r3, #4]
 800de68:	693b      	ldr	r3, [r7, #16]
 800de6a:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 800de6c:	68fb      	ldr	r3, [r7, #12]
 800de6e:	8ada      	ldrh	r2, [r3, #22]
 800de70:	693b      	ldr	r3, [r7, #16]
 800de72:	68dc      	ldr	r4, [r3, #12]
 800de74:	4610      	mov	r0, r2
 800de76:	f7fa fa51 	bl	800831c <lwip_htons>
 800de7a:	4603      	mov	r3, r0
 800de7c:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 800de7e:	68fb      	ldr	r3, [r7, #12]
 800de80:	8b1a      	ldrh	r2, [r3, #24]
 800de82:	693b      	ldr	r3, [r7, #16]
 800de84:	68dc      	ldr	r4, [r3, #12]
 800de86:	4610      	mov	r0, r2
 800de88:	f7fa fa48 	bl	800831c <lwip_htons>
 800de8c:	4603      	mov	r3, r0
 800de8e:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 800de90:	693b      	ldr	r3, [r7, #16]
 800de92:	68dc      	ldr	r4, [r3, #12]
 800de94:	6838      	ldr	r0, [r7, #0]
 800de96:	f7fa fa56 	bl	8008346 <lwip_htonl>
 800de9a:	4603      	mov	r3, r0
 800de9c:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 800de9e:	7dfb      	ldrb	r3, [r7, #23]
 800dea0:	089b      	lsrs	r3, r3, #2
 800dea2:	b2db      	uxtb	r3, r3
 800dea4:	3305      	adds	r3, #5
 800dea6:	b29b      	uxth	r3, r3
 800dea8:	031b      	lsls	r3, r3, #12
 800deaa:	b29a      	uxth	r2, r3
 800deac:	79fb      	ldrb	r3, [r7, #7]
 800deae:	b29b      	uxth	r3, r3
 800deb0:	4313      	orrs	r3, r2
 800deb2:	b29a      	uxth	r2, r3
 800deb4:	693b      	ldr	r3, [r7, #16]
 800deb6:	68dc      	ldr	r4, [r3, #12]
 800deb8:	4610      	mov	r0, r2
 800deba:	f7fa fa2f 	bl	800831c <lwip_htons>
 800debe:	4603      	mov	r3, r0
 800dec0:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 800dec2:	693b      	ldr	r3, [r7, #16]
 800dec4:	68db      	ldr	r3, [r3, #12]
 800dec6:	2200      	movs	r2, #0
 800dec8:	749a      	strb	r2, [r3, #18]
 800deca:	2200      	movs	r2, #0
 800decc:	74da      	strb	r2, [r3, #19]
  return seg;
 800dece:	693b      	ldr	r3, [r7, #16]
}
 800ded0:	4618      	mov	r0, r3
 800ded2:	371c      	adds	r7, #28
 800ded4:	46bd      	mov	sp, r7
 800ded6:	bd90      	pop	{r4, r7, pc}
 800ded8:	08014978 	.word	0x08014978
 800dedc:	080149ac 	.word	0x080149ac
 800dee0:	080149cc 	.word	0x080149cc
 800dee4:	080149f4 	.word	0x080149f4
 800dee8:	08014a18 	.word	0x08014a18

0800deec <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 800deec:	b590      	push	{r4, r7, lr}
 800deee:	b08b      	sub	sp, #44	@ 0x2c
 800def0:	af02      	add	r7, sp, #8
 800def2:	6078      	str	r0, [r7, #4]
 800def4:	460b      	mov	r3, r1
 800def6:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 800def8:	2300      	movs	r3, #0
 800defa:	61fb      	str	r3, [r7, #28]
 800defc:	2300      	movs	r3, #0
 800defe:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 800df00:	2300      	movs	r3, #0
 800df02:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 800df04:	687b      	ldr	r3, [r7, #4]
 800df06:	2b00      	cmp	r3, #0
 800df08:	d106      	bne.n	800df18 <tcp_split_unsent_seg+0x2c>
 800df0a:	4b95      	ldr	r3, [pc, #596]	@ (800e160 <tcp_split_unsent_seg+0x274>)
 800df0c:	f240 324b 	movw	r2, #843	@ 0x34b
 800df10:	4994      	ldr	r1, [pc, #592]	@ (800e164 <tcp_split_unsent_seg+0x278>)
 800df12:	4895      	ldr	r0, [pc, #596]	@ (800e168 <tcp_split_unsent_seg+0x27c>)
 800df14:	f004 f9d2 	bl	80122bc <iprintf>

  useg = pcb->unsent;
 800df18:	687b      	ldr	r3, [r7, #4]
 800df1a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800df1c:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 800df1e:	697b      	ldr	r3, [r7, #20]
 800df20:	2b00      	cmp	r3, #0
 800df22:	d102      	bne.n	800df2a <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 800df24:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800df28:	e116      	b.n	800e158 <tcp_split_unsent_seg+0x26c>
  }

  if (split == 0) {
 800df2a:	887b      	ldrh	r3, [r7, #2]
 800df2c:	2b00      	cmp	r3, #0
 800df2e:	d109      	bne.n	800df44 <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 800df30:	4b8b      	ldr	r3, [pc, #556]	@ (800e160 <tcp_split_unsent_seg+0x274>)
 800df32:	f240 3253 	movw	r2, #851	@ 0x353
 800df36:	498d      	ldr	r1, [pc, #564]	@ (800e16c <tcp_split_unsent_seg+0x280>)
 800df38:	488b      	ldr	r0, [pc, #556]	@ (800e168 <tcp_split_unsent_seg+0x27c>)
 800df3a:	f004 f9bf 	bl	80122bc <iprintf>
    return ERR_VAL;
 800df3e:	f06f 0305 	mvn.w	r3, #5
 800df42:	e109      	b.n	800e158 <tcp_split_unsent_seg+0x26c>
  }

  if (useg->len <= split) {
 800df44:	697b      	ldr	r3, [r7, #20]
 800df46:	891b      	ldrh	r3, [r3, #8]
 800df48:	887a      	ldrh	r2, [r7, #2]
 800df4a:	429a      	cmp	r2, r3
 800df4c:	d301      	bcc.n	800df52 <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 800df4e:	2300      	movs	r3, #0
 800df50:	e102      	b.n	800e158 <tcp_split_unsent_seg+0x26c>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 800df52:	687b      	ldr	r3, [r7, #4]
 800df54:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800df56:	887a      	ldrh	r2, [r7, #2]
 800df58:	429a      	cmp	r2, r3
 800df5a:	d906      	bls.n	800df6a <tcp_split_unsent_seg+0x7e>
 800df5c:	4b80      	ldr	r3, [pc, #512]	@ (800e160 <tcp_split_unsent_seg+0x274>)
 800df5e:	f240 325b 	movw	r2, #859	@ 0x35b
 800df62:	4983      	ldr	r1, [pc, #524]	@ (800e170 <tcp_split_unsent_seg+0x284>)
 800df64:	4880      	ldr	r0, [pc, #512]	@ (800e168 <tcp_split_unsent_seg+0x27c>)
 800df66:	f004 f9a9 	bl	80122bc <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 800df6a:	697b      	ldr	r3, [r7, #20]
 800df6c:	891b      	ldrh	r3, [r3, #8]
 800df6e:	2b00      	cmp	r3, #0
 800df70:	d106      	bne.n	800df80 <tcp_split_unsent_seg+0x94>
 800df72:	4b7b      	ldr	r3, [pc, #492]	@ (800e160 <tcp_split_unsent_seg+0x274>)
 800df74:	f44f 7257 	mov.w	r2, #860	@ 0x35c
 800df78:	497e      	ldr	r1, [pc, #504]	@ (800e174 <tcp_split_unsent_seg+0x288>)
 800df7a:	487b      	ldr	r0, [pc, #492]	@ (800e168 <tcp_split_unsent_seg+0x27c>)
 800df7c:	f004 f99e 	bl	80122bc <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 800df80:	697b      	ldr	r3, [r7, #20]
 800df82:	7a9b      	ldrb	r3, [r3, #10]
 800df84:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 800df86:	7bfb      	ldrb	r3, [r7, #15]
 800df88:	009b      	lsls	r3, r3, #2
 800df8a:	b2db      	uxtb	r3, r3
 800df8c:	f003 0304 	and.w	r3, r3, #4
 800df90:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 800df92:	697b      	ldr	r3, [r7, #20]
 800df94:	891a      	ldrh	r2, [r3, #8]
 800df96:	887b      	ldrh	r3, [r7, #2]
 800df98:	1ad3      	subs	r3, r2, r3
 800df9a:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 800df9c:	7bbb      	ldrb	r3, [r7, #14]
 800df9e:	b29a      	uxth	r2, r3
 800dfa0:	89bb      	ldrh	r3, [r7, #12]
 800dfa2:	4413      	add	r3, r2
 800dfa4:	b29b      	uxth	r3, r3
 800dfa6:	f44f 7220 	mov.w	r2, #640	@ 0x280
 800dfaa:	4619      	mov	r1, r3
 800dfac:	2036      	movs	r0, #54	@ 0x36
 800dfae:	f7fb fac3 	bl	8009538 <pbuf_alloc>
 800dfb2:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800dfb4:	693b      	ldr	r3, [r7, #16]
 800dfb6:	2b00      	cmp	r3, #0
 800dfb8:	f000 80b7 	beq.w	800e12a <tcp_split_unsent_seg+0x23e>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 800dfbc:	697b      	ldr	r3, [r7, #20]
 800dfbe:	685b      	ldr	r3, [r3, #4]
 800dfc0:	891a      	ldrh	r2, [r3, #8]
 800dfc2:	697b      	ldr	r3, [r7, #20]
 800dfc4:	891b      	ldrh	r3, [r3, #8]
 800dfc6:	1ad3      	subs	r3, r2, r3
 800dfc8:	b29a      	uxth	r2, r3
 800dfca:	887b      	ldrh	r3, [r7, #2]
 800dfcc:	4413      	add	r3, r2
 800dfce:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 800dfd0:	697b      	ldr	r3, [r7, #20]
 800dfd2:	6858      	ldr	r0, [r3, #4]
 800dfd4:	693b      	ldr	r3, [r7, #16]
 800dfd6:	685a      	ldr	r2, [r3, #4]
 800dfd8:	7bbb      	ldrb	r3, [r7, #14]
 800dfda:	18d1      	adds	r1, r2, r3
 800dfdc:	897b      	ldrh	r3, [r7, #10]
 800dfde:	89ba      	ldrh	r2, [r7, #12]
 800dfe0:	f7fb ff84 	bl	8009eec <pbuf_copy_partial>
 800dfe4:	4603      	mov	r3, r0
 800dfe6:	461a      	mov	r2, r3
 800dfe8:	89bb      	ldrh	r3, [r7, #12]
 800dfea:	4293      	cmp	r3, r2
 800dfec:	f040 809f 	bne.w	800e12e <tcp_split_unsent_seg+0x242>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 800dff0:	697b      	ldr	r3, [r7, #20]
 800dff2:	68db      	ldr	r3, [r3, #12]
 800dff4:	899b      	ldrh	r3, [r3, #12]
 800dff6:	b29b      	uxth	r3, r3
 800dff8:	4618      	mov	r0, r3
 800dffa:	f7fa f98f 	bl	800831c <lwip_htons>
 800dffe:	4603      	mov	r3, r0
 800e000:	b2db      	uxtb	r3, r3
 800e002:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800e006:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 800e008:	2300      	movs	r3, #0
 800e00a:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 800e00c:	7efb      	ldrb	r3, [r7, #27]
 800e00e:	f003 0308 	and.w	r3, r3, #8
 800e012:	2b00      	cmp	r3, #0
 800e014:	d007      	beq.n	800e026 <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 800e016:	7efb      	ldrb	r3, [r7, #27]
 800e018:	f023 0308 	bic.w	r3, r3, #8
 800e01c:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 800e01e:	7ebb      	ldrb	r3, [r7, #26]
 800e020:	f043 0308 	orr.w	r3, r3, #8
 800e024:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 800e026:	7efb      	ldrb	r3, [r7, #27]
 800e028:	f003 0301 	and.w	r3, r3, #1
 800e02c:	2b00      	cmp	r3, #0
 800e02e:	d007      	beq.n	800e040 <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 800e030:	7efb      	ldrb	r3, [r7, #27]
 800e032:	f023 0301 	bic.w	r3, r3, #1
 800e036:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 800e038:	7ebb      	ldrb	r3, [r7, #26]
 800e03a:	f043 0301 	orr.w	r3, r3, #1
 800e03e:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 800e040:	697b      	ldr	r3, [r7, #20]
 800e042:	68db      	ldr	r3, [r3, #12]
 800e044:	685b      	ldr	r3, [r3, #4]
 800e046:	4618      	mov	r0, r3
 800e048:	f7fa f97d 	bl	8008346 <lwip_htonl>
 800e04c:	4602      	mov	r2, r0
 800e04e:	887b      	ldrh	r3, [r7, #2]
 800e050:	18d1      	adds	r1, r2, r3
 800e052:	7eba      	ldrb	r2, [r7, #26]
 800e054:	7bfb      	ldrb	r3, [r7, #15]
 800e056:	9300      	str	r3, [sp, #0]
 800e058:	460b      	mov	r3, r1
 800e05a:	6939      	ldr	r1, [r7, #16]
 800e05c:	6878      	ldr	r0, [r7, #4]
 800e05e:	f7ff fea9 	bl	800ddb4 <tcp_create_segment>
 800e062:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 800e064:	69fb      	ldr	r3, [r7, #28]
 800e066:	2b00      	cmp	r3, #0
 800e068:	d063      	beq.n	800e132 <tcp_split_unsent_seg+0x246>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 800e06a:	697b      	ldr	r3, [r7, #20]
 800e06c:	685b      	ldr	r3, [r3, #4]
 800e06e:	4618      	mov	r0, r3
 800e070:	f7fb fdd4 	bl	8009c1c <pbuf_clen>
 800e074:	4603      	mov	r3, r0
 800e076:	461a      	mov	r2, r3
 800e078:	687b      	ldr	r3, [r7, #4]
 800e07a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800e07e:	1a9b      	subs	r3, r3, r2
 800e080:	b29a      	uxth	r2, r3
 800e082:	687b      	ldr	r3, [r7, #4]
 800e084:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 800e088:	697b      	ldr	r3, [r7, #20]
 800e08a:	6858      	ldr	r0, [r3, #4]
 800e08c:	697b      	ldr	r3, [r7, #20]
 800e08e:	685b      	ldr	r3, [r3, #4]
 800e090:	891a      	ldrh	r2, [r3, #8]
 800e092:	89bb      	ldrh	r3, [r7, #12]
 800e094:	1ad3      	subs	r3, r2, r3
 800e096:	b29b      	uxth	r3, r3
 800e098:	4619      	mov	r1, r3
 800e09a:	f7fb fbab 	bl	80097f4 <pbuf_realloc>
  useg->len -= remainder;
 800e09e:	697b      	ldr	r3, [r7, #20]
 800e0a0:	891a      	ldrh	r2, [r3, #8]
 800e0a2:	89bb      	ldrh	r3, [r7, #12]
 800e0a4:	1ad3      	subs	r3, r2, r3
 800e0a6:	b29a      	uxth	r2, r3
 800e0a8:	697b      	ldr	r3, [r7, #20]
 800e0aa:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 800e0ac:	697b      	ldr	r3, [r7, #20]
 800e0ae:	68db      	ldr	r3, [r3, #12]
 800e0b0:	899b      	ldrh	r3, [r3, #12]
 800e0b2:	b29c      	uxth	r4, r3
 800e0b4:	7efb      	ldrb	r3, [r7, #27]
 800e0b6:	b29b      	uxth	r3, r3
 800e0b8:	4618      	mov	r0, r3
 800e0ba:	f7fa f92f 	bl	800831c <lwip_htons>
 800e0be:	4603      	mov	r3, r0
 800e0c0:	461a      	mov	r2, r3
 800e0c2:	697b      	ldr	r3, [r7, #20]
 800e0c4:	68db      	ldr	r3, [r3, #12]
 800e0c6:	4322      	orrs	r2, r4
 800e0c8:	b292      	uxth	r2, r2
 800e0ca:	819a      	strh	r2, [r3, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 800e0cc:	697b      	ldr	r3, [r7, #20]
 800e0ce:	685b      	ldr	r3, [r3, #4]
 800e0d0:	4618      	mov	r0, r3
 800e0d2:	f7fb fda3 	bl	8009c1c <pbuf_clen>
 800e0d6:	4603      	mov	r3, r0
 800e0d8:	461a      	mov	r2, r3
 800e0da:	687b      	ldr	r3, [r7, #4]
 800e0dc:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800e0e0:	4413      	add	r3, r2
 800e0e2:	b29a      	uxth	r2, r3
 800e0e4:	687b      	ldr	r3, [r7, #4]
 800e0e6:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 800e0ea:	69fb      	ldr	r3, [r7, #28]
 800e0ec:	685b      	ldr	r3, [r3, #4]
 800e0ee:	4618      	mov	r0, r3
 800e0f0:	f7fb fd94 	bl	8009c1c <pbuf_clen>
 800e0f4:	4603      	mov	r3, r0
 800e0f6:	461a      	mov	r2, r3
 800e0f8:	687b      	ldr	r3, [r7, #4]
 800e0fa:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800e0fe:	4413      	add	r3, r2
 800e100:	b29a      	uxth	r2, r3
 800e102:	687b      	ldr	r3, [r7, #4]
 800e104:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 800e108:	697b      	ldr	r3, [r7, #20]
 800e10a:	681a      	ldr	r2, [r3, #0]
 800e10c:	69fb      	ldr	r3, [r7, #28]
 800e10e:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 800e110:	697b      	ldr	r3, [r7, #20]
 800e112:	69fa      	ldr	r2, [r7, #28]
 800e114:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 800e116:	69fb      	ldr	r3, [r7, #28]
 800e118:	681b      	ldr	r3, [r3, #0]
 800e11a:	2b00      	cmp	r3, #0
 800e11c:	d103      	bne.n	800e126 <tcp_split_unsent_seg+0x23a>
    pcb->unsent_oversize = 0;
 800e11e:	687b      	ldr	r3, [r7, #4]
 800e120:	2200      	movs	r2, #0
 800e122:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 800e126:	2300      	movs	r3, #0
 800e128:	e016      	b.n	800e158 <tcp_split_unsent_seg+0x26c>
    goto memerr;
 800e12a:	bf00      	nop
 800e12c:	e002      	b.n	800e134 <tcp_split_unsent_seg+0x248>
    goto memerr;
 800e12e:	bf00      	nop
 800e130:	e000      	b.n	800e134 <tcp_split_unsent_seg+0x248>
    goto memerr;
 800e132:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 800e134:	69fb      	ldr	r3, [r7, #28]
 800e136:	2b00      	cmp	r3, #0
 800e138:	d006      	beq.n	800e148 <tcp_split_unsent_seg+0x25c>
 800e13a:	4b09      	ldr	r3, [pc, #36]	@ (800e160 <tcp_split_unsent_seg+0x274>)
 800e13c:	f44f 7276 	mov.w	r2, #984	@ 0x3d8
 800e140:	490d      	ldr	r1, [pc, #52]	@ (800e178 <tcp_split_unsent_seg+0x28c>)
 800e142:	4809      	ldr	r0, [pc, #36]	@ (800e168 <tcp_split_unsent_seg+0x27c>)
 800e144:	f004 f8ba 	bl	80122bc <iprintf>
  if (p != NULL) {
 800e148:	693b      	ldr	r3, [r7, #16]
 800e14a:	2b00      	cmp	r3, #0
 800e14c:	d002      	beq.n	800e154 <tcp_split_unsent_seg+0x268>
    pbuf_free(p);
 800e14e:	6938      	ldr	r0, [r7, #16]
 800e150:	f7fb fcd6 	bl	8009b00 <pbuf_free>
  }

  return ERR_MEM;
 800e154:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 800e158:	4618      	mov	r0, r3
 800e15a:	3724      	adds	r7, #36	@ 0x24
 800e15c:	46bd      	mov	sp, r7
 800e15e:	bd90      	pop	{r4, r7, pc}
 800e160:	08014978 	.word	0x08014978
 800e164:	08014d0c 	.word	0x08014d0c
 800e168:	080149cc 	.word	0x080149cc
 800e16c:	08014d30 	.word	0x08014d30
 800e170:	08014d54 	.word	0x08014d54
 800e174:	08014d64 	.word	0x08014d64
 800e178:	08014d74 	.word	0x08014d74

0800e17c <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 800e17c:	b590      	push	{r4, r7, lr}
 800e17e:	b085      	sub	sp, #20
 800e180:	af00      	add	r7, sp, #0
 800e182:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 800e184:	687b      	ldr	r3, [r7, #4]
 800e186:	2b00      	cmp	r3, #0
 800e188:	d106      	bne.n	800e198 <tcp_send_fin+0x1c>
 800e18a:	4b21      	ldr	r3, [pc, #132]	@ (800e210 <tcp_send_fin+0x94>)
 800e18c:	f240 32eb 	movw	r2, #1003	@ 0x3eb
 800e190:	4920      	ldr	r1, [pc, #128]	@ (800e214 <tcp_send_fin+0x98>)
 800e192:	4821      	ldr	r0, [pc, #132]	@ (800e218 <tcp_send_fin+0x9c>)
 800e194:	f004 f892 	bl	80122bc <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 800e198:	687b      	ldr	r3, [r7, #4]
 800e19a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800e19c:	2b00      	cmp	r3, #0
 800e19e:	d02e      	beq.n	800e1fe <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800e1a0:	687b      	ldr	r3, [r7, #4]
 800e1a2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800e1a4:	60fb      	str	r3, [r7, #12]
 800e1a6:	e002      	b.n	800e1ae <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 800e1a8:	68fb      	ldr	r3, [r7, #12]
 800e1aa:	681b      	ldr	r3, [r3, #0]
 800e1ac:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800e1ae:	68fb      	ldr	r3, [r7, #12]
 800e1b0:	681b      	ldr	r3, [r3, #0]
 800e1b2:	2b00      	cmp	r3, #0
 800e1b4:	d1f8      	bne.n	800e1a8 <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 800e1b6:	68fb      	ldr	r3, [r7, #12]
 800e1b8:	68db      	ldr	r3, [r3, #12]
 800e1ba:	899b      	ldrh	r3, [r3, #12]
 800e1bc:	b29b      	uxth	r3, r3
 800e1be:	4618      	mov	r0, r3
 800e1c0:	f7fa f8ac 	bl	800831c <lwip_htons>
 800e1c4:	4603      	mov	r3, r0
 800e1c6:	b2db      	uxtb	r3, r3
 800e1c8:	f003 0307 	and.w	r3, r3, #7
 800e1cc:	2b00      	cmp	r3, #0
 800e1ce:	d116      	bne.n	800e1fe <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 800e1d0:	68fb      	ldr	r3, [r7, #12]
 800e1d2:	68db      	ldr	r3, [r3, #12]
 800e1d4:	899b      	ldrh	r3, [r3, #12]
 800e1d6:	b29c      	uxth	r4, r3
 800e1d8:	2001      	movs	r0, #1
 800e1da:	f7fa f89f 	bl	800831c <lwip_htons>
 800e1de:	4603      	mov	r3, r0
 800e1e0:	461a      	mov	r2, r3
 800e1e2:	68fb      	ldr	r3, [r7, #12]
 800e1e4:	68db      	ldr	r3, [r3, #12]
 800e1e6:	4322      	orrs	r2, r4
 800e1e8:	b292      	uxth	r2, r2
 800e1ea:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 800e1ec:	687b      	ldr	r3, [r7, #4]
 800e1ee:	8b5b      	ldrh	r3, [r3, #26]
 800e1f0:	f043 0320 	orr.w	r3, r3, #32
 800e1f4:	b29a      	uxth	r2, r3
 800e1f6:	687b      	ldr	r3, [r7, #4]
 800e1f8:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 800e1fa:	2300      	movs	r3, #0
 800e1fc:	e004      	b.n	800e208 <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 800e1fe:	2101      	movs	r1, #1
 800e200:	6878      	ldr	r0, [r7, #4]
 800e202:	f000 f80b 	bl	800e21c <tcp_enqueue_flags>
 800e206:	4603      	mov	r3, r0
}
 800e208:	4618      	mov	r0, r3
 800e20a:	3714      	adds	r7, #20
 800e20c:	46bd      	mov	sp, r7
 800e20e:	bd90      	pop	{r4, r7, pc}
 800e210:	08014978 	.word	0x08014978
 800e214:	08014d80 	.word	0x08014d80
 800e218:	080149cc 	.word	0x080149cc

0800e21c <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 800e21c:	b580      	push	{r7, lr}
 800e21e:	b08a      	sub	sp, #40	@ 0x28
 800e220:	af02      	add	r7, sp, #8
 800e222:	6078      	str	r0, [r7, #4]
 800e224:	460b      	mov	r3, r1
 800e226:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 800e228:	2300      	movs	r3, #0
 800e22a:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 800e22c:	2300      	movs	r3, #0
 800e22e:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 800e230:	78fb      	ldrb	r3, [r7, #3]
 800e232:	f003 0303 	and.w	r3, r3, #3
 800e236:	2b00      	cmp	r3, #0
 800e238:	d106      	bne.n	800e248 <tcp_enqueue_flags+0x2c>
 800e23a:	4b67      	ldr	r3, [pc, #412]	@ (800e3d8 <tcp_enqueue_flags+0x1bc>)
 800e23c:	f240 4211 	movw	r2, #1041	@ 0x411
 800e240:	4966      	ldr	r1, [pc, #408]	@ (800e3dc <tcp_enqueue_flags+0x1c0>)
 800e242:	4867      	ldr	r0, [pc, #412]	@ (800e3e0 <tcp_enqueue_flags+0x1c4>)
 800e244:	f004 f83a 	bl	80122bc <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 800e248:	687b      	ldr	r3, [r7, #4]
 800e24a:	2b00      	cmp	r3, #0
 800e24c:	d106      	bne.n	800e25c <tcp_enqueue_flags+0x40>
 800e24e:	4b62      	ldr	r3, [pc, #392]	@ (800e3d8 <tcp_enqueue_flags+0x1bc>)
 800e250:	f240 4213 	movw	r2, #1043	@ 0x413
 800e254:	4963      	ldr	r1, [pc, #396]	@ (800e3e4 <tcp_enqueue_flags+0x1c8>)
 800e256:	4862      	ldr	r0, [pc, #392]	@ (800e3e0 <tcp_enqueue_flags+0x1c4>)
 800e258:	f004 f830 	bl	80122bc <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 800e25c:	78fb      	ldrb	r3, [r7, #3]
 800e25e:	f003 0302 	and.w	r3, r3, #2
 800e262:	2b00      	cmp	r3, #0
 800e264:	d001      	beq.n	800e26a <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 800e266:	2301      	movs	r3, #1
 800e268:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800e26a:	7ffb      	ldrb	r3, [r7, #31]
 800e26c:	009b      	lsls	r3, r3, #2
 800e26e:	b2db      	uxtb	r3, r3
 800e270:	f003 0304 	and.w	r3, r3, #4
 800e274:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 800e276:	7dfb      	ldrb	r3, [r7, #23]
 800e278:	b29b      	uxth	r3, r3
 800e27a:	f44f 7220 	mov.w	r2, #640	@ 0x280
 800e27e:	4619      	mov	r1, r3
 800e280:	2036      	movs	r0, #54	@ 0x36
 800e282:	f7fb f959 	bl	8009538 <pbuf_alloc>
 800e286:	6138      	str	r0, [r7, #16]
 800e288:	693b      	ldr	r3, [r7, #16]
 800e28a:	2b00      	cmp	r3, #0
 800e28c:	d109      	bne.n	800e2a2 <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800e28e:	687b      	ldr	r3, [r7, #4]
 800e290:	8b5b      	ldrh	r3, [r3, #26]
 800e292:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e296:	b29a      	uxth	r2, r3
 800e298:	687b      	ldr	r3, [r7, #4]
 800e29a:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 800e29c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800e2a0:	e095      	b.n	800e3ce <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 800e2a2:	693b      	ldr	r3, [r7, #16]
 800e2a4:	895a      	ldrh	r2, [r3, #10]
 800e2a6:	7dfb      	ldrb	r3, [r7, #23]
 800e2a8:	b29b      	uxth	r3, r3
 800e2aa:	429a      	cmp	r2, r3
 800e2ac:	d206      	bcs.n	800e2bc <tcp_enqueue_flags+0xa0>
 800e2ae:	4b4a      	ldr	r3, [pc, #296]	@ (800e3d8 <tcp_enqueue_flags+0x1bc>)
 800e2b0:	f240 4239 	movw	r2, #1081	@ 0x439
 800e2b4:	494c      	ldr	r1, [pc, #304]	@ (800e3e8 <tcp_enqueue_flags+0x1cc>)
 800e2b6:	484a      	ldr	r0, [pc, #296]	@ (800e3e0 <tcp_enqueue_flags+0x1c4>)
 800e2b8:	f004 f800 	bl	80122bc <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 800e2bc:	687b      	ldr	r3, [r7, #4]
 800e2be:	6dd9      	ldr	r1, [r3, #92]	@ 0x5c
 800e2c0:	78fa      	ldrb	r2, [r7, #3]
 800e2c2:	7ffb      	ldrb	r3, [r7, #31]
 800e2c4:	9300      	str	r3, [sp, #0]
 800e2c6:	460b      	mov	r3, r1
 800e2c8:	6939      	ldr	r1, [r7, #16]
 800e2ca:	6878      	ldr	r0, [r7, #4]
 800e2cc:	f7ff fd72 	bl	800ddb4 <tcp_create_segment>
 800e2d0:	60f8      	str	r0, [r7, #12]
 800e2d2:	68fb      	ldr	r3, [r7, #12]
 800e2d4:	2b00      	cmp	r3, #0
 800e2d6:	d109      	bne.n	800e2ec <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800e2d8:	687b      	ldr	r3, [r7, #4]
 800e2da:	8b5b      	ldrh	r3, [r3, #26]
 800e2dc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e2e0:	b29a      	uxth	r2, r3
 800e2e2:	687b      	ldr	r3, [r7, #4]
 800e2e4:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 800e2e6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800e2ea:	e070      	b.n	800e3ce <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 800e2ec:	68fb      	ldr	r3, [r7, #12]
 800e2ee:	68db      	ldr	r3, [r3, #12]
 800e2f0:	f003 0303 	and.w	r3, r3, #3
 800e2f4:	2b00      	cmp	r3, #0
 800e2f6:	d006      	beq.n	800e306 <tcp_enqueue_flags+0xea>
 800e2f8:	4b37      	ldr	r3, [pc, #220]	@ (800e3d8 <tcp_enqueue_flags+0x1bc>)
 800e2fa:	f240 4242 	movw	r2, #1090	@ 0x442
 800e2fe:	493b      	ldr	r1, [pc, #236]	@ (800e3ec <tcp_enqueue_flags+0x1d0>)
 800e300:	4837      	ldr	r0, [pc, #220]	@ (800e3e0 <tcp_enqueue_flags+0x1c4>)
 800e302:	f003 ffdb 	bl	80122bc <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 800e306:	68fb      	ldr	r3, [r7, #12]
 800e308:	891b      	ldrh	r3, [r3, #8]
 800e30a:	2b00      	cmp	r3, #0
 800e30c:	d006      	beq.n	800e31c <tcp_enqueue_flags+0x100>
 800e30e:	4b32      	ldr	r3, [pc, #200]	@ (800e3d8 <tcp_enqueue_flags+0x1bc>)
 800e310:	f240 4243 	movw	r2, #1091	@ 0x443
 800e314:	4936      	ldr	r1, [pc, #216]	@ (800e3f0 <tcp_enqueue_flags+0x1d4>)
 800e316:	4832      	ldr	r0, [pc, #200]	@ (800e3e0 <tcp_enqueue_flags+0x1c4>)
 800e318:	f003 ffd0 	bl	80122bc <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 800e31c:	687b      	ldr	r3, [r7, #4]
 800e31e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800e320:	2b00      	cmp	r3, #0
 800e322:	d103      	bne.n	800e32c <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 800e324:	687b      	ldr	r3, [r7, #4]
 800e326:	68fa      	ldr	r2, [r7, #12]
 800e328:	66da      	str	r2, [r3, #108]	@ 0x6c
 800e32a:	e00d      	b.n	800e348 <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 800e32c:	687b      	ldr	r3, [r7, #4]
 800e32e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800e330:	61bb      	str	r3, [r7, #24]
 800e332:	e002      	b.n	800e33a <tcp_enqueue_flags+0x11e>
 800e334:	69bb      	ldr	r3, [r7, #24]
 800e336:	681b      	ldr	r3, [r3, #0]
 800e338:	61bb      	str	r3, [r7, #24]
 800e33a:	69bb      	ldr	r3, [r7, #24]
 800e33c:	681b      	ldr	r3, [r3, #0]
 800e33e:	2b00      	cmp	r3, #0
 800e340:	d1f8      	bne.n	800e334 <tcp_enqueue_flags+0x118>
    useg->next = seg;
 800e342:	69bb      	ldr	r3, [r7, #24]
 800e344:	68fa      	ldr	r2, [r7, #12]
 800e346:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 800e348:	687b      	ldr	r3, [r7, #4]
 800e34a:	2200      	movs	r2, #0
 800e34c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 800e350:	78fb      	ldrb	r3, [r7, #3]
 800e352:	f003 0302 	and.w	r3, r3, #2
 800e356:	2b00      	cmp	r3, #0
 800e358:	d104      	bne.n	800e364 <tcp_enqueue_flags+0x148>
 800e35a:	78fb      	ldrb	r3, [r7, #3]
 800e35c:	f003 0301 	and.w	r3, r3, #1
 800e360:	2b00      	cmp	r3, #0
 800e362:	d004      	beq.n	800e36e <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 800e364:	687b      	ldr	r3, [r7, #4]
 800e366:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800e368:	1c5a      	adds	r2, r3, #1
 800e36a:	687b      	ldr	r3, [r7, #4]
 800e36c:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 800e36e:	78fb      	ldrb	r3, [r7, #3]
 800e370:	f003 0301 	and.w	r3, r3, #1
 800e374:	2b00      	cmp	r3, #0
 800e376:	d006      	beq.n	800e386 <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 800e378:	687b      	ldr	r3, [r7, #4]
 800e37a:	8b5b      	ldrh	r3, [r3, #26]
 800e37c:	f043 0320 	orr.w	r3, r3, #32
 800e380:	b29a      	uxth	r2, r3
 800e382:	687b      	ldr	r3, [r7, #4]
 800e384:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 800e386:	68fb      	ldr	r3, [r7, #12]
 800e388:	685b      	ldr	r3, [r3, #4]
 800e38a:	4618      	mov	r0, r3
 800e38c:	f7fb fc46 	bl	8009c1c <pbuf_clen>
 800e390:	4603      	mov	r3, r0
 800e392:	461a      	mov	r2, r3
 800e394:	687b      	ldr	r3, [r7, #4]
 800e396:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800e39a:	4413      	add	r3, r2
 800e39c:	b29a      	uxth	r2, r3
 800e39e:	687b      	ldr	r3, [r7, #4]
 800e3a0:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 800e3a4:	687b      	ldr	r3, [r7, #4]
 800e3a6:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800e3aa:	2b00      	cmp	r3, #0
 800e3ac:	d00e      	beq.n	800e3cc <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 800e3ae:	687b      	ldr	r3, [r7, #4]
 800e3b0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800e3b2:	2b00      	cmp	r3, #0
 800e3b4:	d10a      	bne.n	800e3cc <tcp_enqueue_flags+0x1b0>
 800e3b6:	687b      	ldr	r3, [r7, #4]
 800e3b8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800e3ba:	2b00      	cmp	r3, #0
 800e3bc:	d106      	bne.n	800e3cc <tcp_enqueue_flags+0x1b0>
 800e3be:	4b06      	ldr	r3, [pc, #24]	@ (800e3d8 <tcp_enqueue_flags+0x1bc>)
 800e3c0:	f240 4265 	movw	r2, #1125	@ 0x465
 800e3c4:	490b      	ldr	r1, [pc, #44]	@ (800e3f4 <tcp_enqueue_flags+0x1d8>)
 800e3c6:	4806      	ldr	r0, [pc, #24]	@ (800e3e0 <tcp_enqueue_flags+0x1c4>)
 800e3c8:	f003 ff78 	bl	80122bc <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 800e3cc:	2300      	movs	r3, #0
}
 800e3ce:	4618      	mov	r0, r3
 800e3d0:	3720      	adds	r7, #32
 800e3d2:	46bd      	mov	sp, r7
 800e3d4:	bd80      	pop	{r7, pc}
 800e3d6:	bf00      	nop
 800e3d8:	08014978 	.word	0x08014978
 800e3dc:	08014d9c 	.word	0x08014d9c
 800e3e0:	080149cc 	.word	0x080149cc
 800e3e4:	08014df4 	.word	0x08014df4
 800e3e8:	08014e14 	.word	0x08014e14
 800e3ec:	08014e50 	.word	0x08014e50
 800e3f0:	08014e68 	.word	0x08014e68
 800e3f4:	08014e94 	.word	0x08014e94

0800e3f8 <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 800e3f8:	b5b0      	push	{r4, r5, r7, lr}
 800e3fa:	b08a      	sub	sp, #40	@ 0x28
 800e3fc:	af00      	add	r7, sp, #0
 800e3fe:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 800e400:	687b      	ldr	r3, [r7, #4]
 800e402:	2b00      	cmp	r3, #0
 800e404:	d106      	bne.n	800e414 <tcp_output+0x1c>
 800e406:	4b8a      	ldr	r3, [pc, #552]	@ (800e630 <tcp_output+0x238>)
 800e408:	f240 42e1 	movw	r2, #1249	@ 0x4e1
 800e40c:	4989      	ldr	r1, [pc, #548]	@ (800e634 <tcp_output+0x23c>)
 800e40e:	488a      	ldr	r0, [pc, #552]	@ (800e638 <tcp_output+0x240>)
 800e410:	f003 ff54 	bl	80122bc <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 800e414:	687b      	ldr	r3, [r7, #4]
 800e416:	7d1b      	ldrb	r3, [r3, #20]
 800e418:	2b01      	cmp	r3, #1
 800e41a:	d106      	bne.n	800e42a <tcp_output+0x32>
 800e41c:	4b84      	ldr	r3, [pc, #528]	@ (800e630 <tcp_output+0x238>)
 800e41e:	f240 42e3 	movw	r2, #1251	@ 0x4e3
 800e422:	4986      	ldr	r1, [pc, #536]	@ (800e63c <tcp_output+0x244>)
 800e424:	4884      	ldr	r0, [pc, #528]	@ (800e638 <tcp_output+0x240>)
 800e426:	f003 ff49 	bl	80122bc <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 800e42a:	4b85      	ldr	r3, [pc, #532]	@ (800e640 <tcp_output+0x248>)
 800e42c:	681b      	ldr	r3, [r3, #0]
 800e42e:	687a      	ldr	r2, [r7, #4]
 800e430:	429a      	cmp	r2, r3
 800e432:	d101      	bne.n	800e438 <tcp_output+0x40>
    return ERR_OK;
 800e434:	2300      	movs	r3, #0
 800e436:	e1ce      	b.n	800e7d6 <tcp_output+0x3de>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 800e438:	687b      	ldr	r3, [r7, #4]
 800e43a:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 800e43e:	687b      	ldr	r3, [r7, #4]
 800e440:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800e444:	4293      	cmp	r3, r2
 800e446:	bf28      	it	cs
 800e448:	4613      	movcs	r3, r2
 800e44a:	b29b      	uxth	r3, r3
 800e44c:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 800e44e:	687b      	ldr	r3, [r7, #4]
 800e450:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800e452:	627b      	str	r3, [r7, #36]	@ 0x24

  if (seg == NULL) {
 800e454:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e456:	2b00      	cmp	r3, #0
 800e458:	d10b      	bne.n	800e472 <tcp_output+0x7a>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 800e45a:	687b      	ldr	r3, [r7, #4]
 800e45c:	8b5b      	ldrh	r3, [r3, #26]
 800e45e:	f003 0302 	and.w	r3, r3, #2
 800e462:	2b00      	cmp	r3, #0
 800e464:	f000 81aa 	beq.w	800e7bc <tcp_output+0x3c4>
      return tcp_send_empty_ack(pcb);
 800e468:	6878      	ldr	r0, [r7, #4]
 800e46a:	f000 fdcb 	bl	800f004 <tcp_send_empty_ack>
 800e46e:	4603      	mov	r3, r0
 800e470:	e1b1      	b.n	800e7d6 <tcp_output+0x3de>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 800e472:	6879      	ldr	r1, [r7, #4]
 800e474:	687b      	ldr	r3, [r7, #4]
 800e476:	3304      	adds	r3, #4
 800e478:	461a      	mov	r2, r3
 800e47a:	6878      	ldr	r0, [r7, #4]
 800e47c:	f7ff fc7e 	bl	800dd7c <tcp_route>
 800e480:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 800e482:	697b      	ldr	r3, [r7, #20]
 800e484:	2b00      	cmp	r3, #0
 800e486:	d102      	bne.n	800e48e <tcp_output+0x96>
    return ERR_RTE;
 800e488:	f06f 0303 	mvn.w	r3, #3
 800e48c:	e1a3      	b.n	800e7d6 <tcp_output+0x3de>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 800e48e:	687b      	ldr	r3, [r7, #4]
 800e490:	2b00      	cmp	r3, #0
 800e492:	d003      	beq.n	800e49c <tcp_output+0xa4>
 800e494:	687b      	ldr	r3, [r7, #4]
 800e496:	681b      	ldr	r3, [r3, #0]
 800e498:	2b00      	cmp	r3, #0
 800e49a:	d111      	bne.n	800e4c0 <tcp_output+0xc8>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 800e49c:	697b      	ldr	r3, [r7, #20]
 800e49e:	2b00      	cmp	r3, #0
 800e4a0:	d002      	beq.n	800e4a8 <tcp_output+0xb0>
 800e4a2:	697b      	ldr	r3, [r7, #20]
 800e4a4:	3304      	adds	r3, #4
 800e4a6:	e000      	b.n	800e4aa <tcp_output+0xb2>
 800e4a8:	2300      	movs	r3, #0
 800e4aa:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 800e4ac:	693b      	ldr	r3, [r7, #16]
 800e4ae:	2b00      	cmp	r3, #0
 800e4b0:	d102      	bne.n	800e4b8 <tcp_output+0xc0>
      return ERR_RTE;
 800e4b2:	f06f 0303 	mvn.w	r3, #3
 800e4b6:	e18e      	b.n	800e7d6 <tcp_output+0x3de>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 800e4b8:	693b      	ldr	r3, [r7, #16]
 800e4ba:	681a      	ldr	r2, [r3, #0]
 800e4bc:	687b      	ldr	r3, [r7, #4]
 800e4be:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 800e4c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e4c2:	68db      	ldr	r3, [r3, #12]
 800e4c4:	685b      	ldr	r3, [r3, #4]
 800e4c6:	4618      	mov	r0, r3
 800e4c8:	f7f9 ff3d 	bl	8008346 <lwip_htonl>
 800e4cc:	4602      	mov	r2, r0
 800e4ce:	687b      	ldr	r3, [r7, #4]
 800e4d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800e4d2:	1ad3      	subs	r3, r2, r3
 800e4d4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800e4d6:	8912      	ldrh	r2, [r2, #8]
 800e4d8:	4413      	add	r3, r2
 800e4da:	69ba      	ldr	r2, [r7, #24]
 800e4dc:	429a      	cmp	r2, r3
 800e4de:	d227      	bcs.n	800e530 <tcp_output+0x138>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 800e4e0:	687b      	ldr	r3, [r7, #4]
 800e4e2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800e4e6:	461a      	mov	r2, r3
 800e4e8:	69bb      	ldr	r3, [r7, #24]
 800e4ea:	4293      	cmp	r3, r2
 800e4ec:	d114      	bne.n	800e518 <tcp_output+0x120>
 800e4ee:	687b      	ldr	r3, [r7, #4]
 800e4f0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800e4f2:	2b00      	cmp	r3, #0
 800e4f4:	d110      	bne.n	800e518 <tcp_output+0x120>
 800e4f6:	687b      	ldr	r3, [r7, #4]
 800e4f8:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 800e4fc:	2b00      	cmp	r3, #0
 800e4fe:	d10b      	bne.n	800e518 <tcp_output+0x120>
      pcb->persist_cnt = 0;
 800e500:	687b      	ldr	r3, [r7, #4]
 800e502:	2200      	movs	r2, #0
 800e504:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98
      pcb->persist_backoff = 1;
 800e508:	687b      	ldr	r3, [r7, #4]
 800e50a:	2201      	movs	r2, #1
 800e50c:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99
      pcb->persist_probe = 0;
 800e510:	687b      	ldr	r3, [r7, #4]
 800e512:	2200      	movs	r2, #0
 800e514:	f883 209a 	strb.w	r2, [r3, #154]	@ 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 800e518:	687b      	ldr	r3, [r7, #4]
 800e51a:	8b5b      	ldrh	r3, [r3, #26]
 800e51c:	f003 0302 	and.w	r3, r3, #2
 800e520:	2b00      	cmp	r3, #0
 800e522:	f000 814d 	beq.w	800e7c0 <tcp_output+0x3c8>
      return tcp_send_empty_ack(pcb);
 800e526:	6878      	ldr	r0, [r7, #4]
 800e528:	f000 fd6c 	bl	800f004 <tcp_send_empty_ack>
 800e52c:	4603      	mov	r3, r0
 800e52e:	e152      	b.n	800e7d6 <tcp_output+0x3de>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 800e530:	687b      	ldr	r3, [r7, #4]
 800e532:	2200      	movs	r2, #0
 800e534:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 800e538:	687b      	ldr	r3, [r7, #4]
 800e53a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800e53c:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 800e53e:	6a3b      	ldr	r3, [r7, #32]
 800e540:	2b00      	cmp	r3, #0
 800e542:	f000 811c 	beq.w	800e77e <tcp_output+0x386>
    for (; useg->next != NULL; useg = useg->next);
 800e546:	e002      	b.n	800e54e <tcp_output+0x156>
 800e548:	6a3b      	ldr	r3, [r7, #32]
 800e54a:	681b      	ldr	r3, [r3, #0]
 800e54c:	623b      	str	r3, [r7, #32]
 800e54e:	6a3b      	ldr	r3, [r7, #32]
 800e550:	681b      	ldr	r3, [r3, #0]
 800e552:	2b00      	cmp	r3, #0
 800e554:	d1f8      	bne.n	800e548 <tcp_output+0x150>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 800e556:	e112      	b.n	800e77e <tcp_output+0x386>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 800e558:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e55a:	68db      	ldr	r3, [r3, #12]
 800e55c:	899b      	ldrh	r3, [r3, #12]
 800e55e:	b29b      	uxth	r3, r3
 800e560:	4618      	mov	r0, r3
 800e562:	f7f9 fedb 	bl	800831c <lwip_htons>
 800e566:	4603      	mov	r3, r0
 800e568:	b2db      	uxtb	r3, r3
 800e56a:	f003 0304 	and.w	r3, r3, #4
 800e56e:	2b00      	cmp	r3, #0
 800e570:	d006      	beq.n	800e580 <tcp_output+0x188>
 800e572:	4b2f      	ldr	r3, [pc, #188]	@ (800e630 <tcp_output+0x238>)
 800e574:	f240 5236 	movw	r2, #1334	@ 0x536
 800e578:	4932      	ldr	r1, [pc, #200]	@ (800e644 <tcp_output+0x24c>)
 800e57a:	482f      	ldr	r0, [pc, #188]	@ (800e638 <tcp_output+0x240>)
 800e57c:	f003 fe9e 	bl	80122bc <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 800e580:	687b      	ldr	r3, [r7, #4]
 800e582:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800e584:	2b00      	cmp	r3, #0
 800e586:	d01f      	beq.n	800e5c8 <tcp_output+0x1d0>
 800e588:	687b      	ldr	r3, [r7, #4]
 800e58a:	8b5b      	ldrh	r3, [r3, #26]
 800e58c:	f003 0344 	and.w	r3, r3, #68	@ 0x44
 800e590:	2b00      	cmp	r3, #0
 800e592:	d119      	bne.n	800e5c8 <tcp_output+0x1d0>
 800e594:	687b      	ldr	r3, [r7, #4]
 800e596:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800e598:	2b00      	cmp	r3, #0
 800e59a:	d00b      	beq.n	800e5b4 <tcp_output+0x1bc>
 800e59c:	687b      	ldr	r3, [r7, #4]
 800e59e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800e5a0:	681b      	ldr	r3, [r3, #0]
 800e5a2:	2b00      	cmp	r3, #0
 800e5a4:	d110      	bne.n	800e5c8 <tcp_output+0x1d0>
 800e5a6:	687b      	ldr	r3, [r7, #4]
 800e5a8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800e5aa:	891a      	ldrh	r2, [r3, #8]
 800e5ac:	687b      	ldr	r3, [r7, #4]
 800e5ae:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800e5b0:	429a      	cmp	r2, r3
 800e5b2:	d209      	bcs.n	800e5c8 <tcp_output+0x1d0>
 800e5b4:	687b      	ldr	r3, [r7, #4]
 800e5b6:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 800e5ba:	2b00      	cmp	r3, #0
 800e5bc:	d004      	beq.n	800e5c8 <tcp_output+0x1d0>
 800e5be:	687b      	ldr	r3, [r7, #4]
 800e5c0:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800e5c4:	2b08      	cmp	r3, #8
 800e5c6:	d901      	bls.n	800e5cc <tcp_output+0x1d4>
 800e5c8:	2301      	movs	r3, #1
 800e5ca:	e000      	b.n	800e5ce <tcp_output+0x1d6>
 800e5cc:	2300      	movs	r3, #0
 800e5ce:	2b00      	cmp	r3, #0
 800e5d0:	d106      	bne.n	800e5e0 <tcp_output+0x1e8>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 800e5d2:	687b      	ldr	r3, [r7, #4]
 800e5d4:	8b5b      	ldrh	r3, [r3, #26]
 800e5d6:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 800e5da:	2b00      	cmp	r3, #0
 800e5dc:	f000 80e4 	beq.w	800e7a8 <tcp_output+0x3b0>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 800e5e0:	687b      	ldr	r3, [r7, #4]
 800e5e2:	7d1b      	ldrb	r3, [r3, #20]
 800e5e4:	2b02      	cmp	r3, #2
 800e5e6:	d00d      	beq.n	800e604 <tcp_output+0x20c>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 800e5e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e5ea:	68db      	ldr	r3, [r3, #12]
 800e5ec:	899b      	ldrh	r3, [r3, #12]
 800e5ee:	b29c      	uxth	r4, r3
 800e5f0:	2010      	movs	r0, #16
 800e5f2:	f7f9 fe93 	bl	800831c <lwip_htons>
 800e5f6:	4603      	mov	r3, r0
 800e5f8:	461a      	mov	r2, r3
 800e5fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e5fc:	68db      	ldr	r3, [r3, #12]
 800e5fe:	4322      	orrs	r2, r4
 800e600:	b292      	uxth	r2, r2
 800e602:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 800e604:	697a      	ldr	r2, [r7, #20]
 800e606:	6879      	ldr	r1, [r7, #4]
 800e608:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800e60a:	f000 f909 	bl	800e820 <tcp_output_segment>
 800e60e:	4603      	mov	r3, r0
 800e610:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 800e612:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e616:	2b00      	cmp	r3, #0
 800e618:	d016      	beq.n	800e648 <tcp_output+0x250>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800e61a:	687b      	ldr	r3, [r7, #4]
 800e61c:	8b5b      	ldrh	r3, [r3, #26]
 800e61e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e622:	b29a      	uxth	r2, r3
 800e624:	687b      	ldr	r3, [r7, #4]
 800e626:	835a      	strh	r2, [r3, #26]
      return err;
 800e628:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e62c:	e0d3      	b.n	800e7d6 <tcp_output+0x3de>
 800e62e:	bf00      	nop
 800e630:	08014978 	.word	0x08014978
 800e634:	08014ebc 	.word	0x08014ebc
 800e638:	080149cc 	.word	0x080149cc
 800e63c:	08014ed4 	.word	0x08014ed4
 800e640:	20010148 	.word	0x20010148
 800e644:	08014efc 	.word	0x08014efc
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 800e648:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e64a:	681a      	ldr	r2, [r3, #0]
 800e64c:	687b      	ldr	r3, [r7, #4]
 800e64e:	66da      	str	r2, [r3, #108]	@ 0x6c
    if (pcb->state != SYN_SENT) {
 800e650:	687b      	ldr	r3, [r7, #4]
 800e652:	7d1b      	ldrb	r3, [r3, #20]
 800e654:	2b02      	cmp	r3, #2
 800e656:	d006      	beq.n	800e666 <tcp_output+0x26e>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800e658:	687b      	ldr	r3, [r7, #4]
 800e65a:	8b5b      	ldrh	r3, [r3, #26]
 800e65c:	f023 0303 	bic.w	r3, r3, #3
 800e660:	b29a      	uxth	r2, r3
 800e662:	687b      	ldr	r3, [r7, #4]
 800e664:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 800e666:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e668:	68db      	ldr	r3, [r3, #12]
 800e66a:	685b      	ldr	r3, [r3, #4]
 800e66c:	4618      	mov	r0, r3
 800e66e:	f7f9 fe6a 	bl	8008346 <lwip_htonl>
 800e672:	4604      	mov	r4, r0
 800e674:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e676:	891b      	ldrh	r3, [r3, #8]
 800e678:	461d      	mov	r5, r3
 800e67a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e67c:	68db      	ldr	r3, [r3, #12]
 800e67e:	899b      	ldrh	r3, [r3, #12]
 800e680:	b29b      	uxth	r3, r3
 800e682:	4618      	mov	r0, r3
 800e684:	f7f9 fe4a 	bl	800831c <lwip_htons>
 800e688:	4603      	mov	r3, r0
 800e68a:	b2db      	uxtb	r3, r3
 800e68c:	f003 0303 	and.w	r3, r3, #3
 800e690:	2b00      	cmp	r3, #0
 800e692:	d001      	beq.n	800e698 <tcp_output+0x2a0>
 800e694:	2301      	movs	r3, #1
 800e696:	e000      	b.n	800e69a <tcp_output+0x2a2>
 800e698:	2300      	movs	r3, #0
 800e69a:	442b      	add	r3, r5
 800e69c:	4423      	add	r3, r4
 800e69e:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 800e6a0:	687b      	ldr	r3, [r7, #4]
 800e6a2:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800e6a4:	68bb      	ldr	r3, [r7, #8]
 800e6a6:	1ad3      	subs	r3, r2, r3
 800e6a8:	2b00      	cmp	r3, #0
 800e6aa:	da02      	bge.n	800e6b2 <tcp_output+0x2ba>
      pcb->snd_nxt = snd_nxt;
 800e6ac:	687b      	ldr	r3, [r7, #4]
 800e6ae:	68ba      	ldr	r2, [r7, #8]
 800e6b0:	651a      	str	r2, [r3, #80]	@ 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 800e6b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e6b4:	891b      	ldrh	r3, [r3, #8]
 800e6b6:	461c      	mov	r4, r3
 800e6b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e6ba:	68db      	ldr	r3, [r3, #12]
 800e6bc:	899b      	ldrh	r3, [r3, #12]
 800e6be:	b29b      	uxth	r3, r3
 800e6c0:	4618      	mov	r0, r3
 800e6c2:	f7f9 fe2b 	bl	800831c <lwip_htons>
 800e6c6:	4603      	mov	r3, r0
 800e6c8:	b2db      	uxtb	r3, r3
 800e6ca:	f003 0303 	and.w	r3, r3, #3
 800e6ce:	2b00      	cmp	r3, #0
 800e6d0:	d001      	beq.n	800e6d6 <tcp_output+0x2de>
 800e6d2:	2301      	movs	r3, #1
 800e6d4:	e000      	b.n	800e6d8 <tcp_output+0x2e0>
 800e6d6:	2300      	movs	r3, #0
 800e6d8:	4423      	add	r3, r4
 800e6da:	2b00      	cmp	r3, #0
 800e6dc:	d049      	beq.n	800e772 <tcp_output+0x37a>
      seg->next = NULL;
 800e6de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e6e0:	2200      	movs	r2, #0
 800e6e2:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 800e6e4:	687b      	ldr	r3, [r7, #4]
 800e6e6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800e6e8:	2b00      	cmp	r3, #0
 800e6ea:	d105      	bne.n	800e6f8 <tcp_output+0x300>
        pcb->unacked = seg;
 800e6ec:	687b      	ldr	r3, [r7, #4]
 800e6ee:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800e6f0:	671a      	str	r2, [r3, #112]	@ 0x70
        useg = seg;
 800e6f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e6f4:	623b      	str	r3, [r7, #32]
 800e6f6:	e03f      	b.n	800e778 <tcp_output+0x380>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 800e6f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e6fa:	68db      	ldr	r3, [r3, #12]
 800e6fc:	685b      	ldr	r3, [r3, #4]
 800e6fe:	4618      	mov	r0, r3
 800e700:	f7f9 fe21 	bl	8008346 <lwip_htonl>
 800e704:	4604      	mov	r4, r0
 800e706:	6a3b      	ldr	r3, [r7, #32]
 800e708:	68db      	ldr	r3, [r3, #12]
 800e70a:	685b      	ldr	r3, [r3, #4]
 800e70c:	4618      	mov	r0, r3
 800e70e:	f7f9 fe1a 	bl	8008346 <lwip_htonl>
 800e712:	4603      	mov	r3, r0
 800e714:	1ae3      	subs	r3, r4, r3
 800e716:	2b00      	cmp	r3, #0
 800e718:	da24      	bge.n	800e764 <tcp_output+0x36c>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 800e71a:	687b      	ldr	r3, [r7, #4]
 800e71c:	3370      	adds	r3, #112	@ 0x70
 800e71e:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 800e720:	e002      	b.n	800e728 <tcp_output+0x330>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 800e722:	69fb      	ldr	r3, [r7, #28]
 800e724:	681b      	ldr	r3, [r3, #0]
 800e726:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 800e728:	69fb      	ldr	r3, [r7, #28]
 800e72a:	681b      	ldr	r3, [r3, #0]
 800e72c:	2b00      	cmp	r3, #0
 800e72e:	d011      	beq.n	800e754 <tcp_output+0x35c>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 800e730:	69fb      	ldr	r3, [r7, #28]
 800e732:	681b      	ldr	r3, [r3, #0]
 800e734:	68db      	ldr	r3, [r3, #12]
 800e736:	685b      	ldr	r3, [r3, #4]
 800e738:	4618      	mov	r0, r3
 800e73a:	f7f9 fe04 	bl	8008346 <lwip_htonl>
 800e73e:	4604      	mov	r4, r0
 800e740:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e742:	68db      	ldr	r3, [r3, #12]
 800e744:	685b      	ldr	r3, [r3, #4]
 800e746:	4618      	mov	r0, r3
 800e748:	f7f9 fdfd 	bl	8008346 <lwip_htonl>
 800e74c:	4603      	mov	r3, r0
 800e74e:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 800e750:	2b00      	cmp	r3, #0
 800e752:	dbe6      	blt.n	800e722 <tcp_output+0x32a>
          }
          seg->next = (*cur_seg);
 800e754:	69fb      	ldr	r3, [r7, #28]
 800e756:	681a      	ldr	r2, [r3, #0]
 800e758:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e75a:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 800e75c:	69fb      	ldr	r3, [r7, #28]
 800e75e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800e760:	601a      	str	r2, [r3, #0]
 800e762:	e009      	b.n	800e778 <tcp_output+0x380>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 800e764:	6a3b      	ldr	r3, [r7, #32]
 800e766:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800e768:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 800e76a:	6a3b      	ldr	r3, [r7, #32]
 800e76c:	681b      	ldr	r3, [r3, #0]
 800e76e:	623b      	str	r3, [r7, #32]
 800e770:	e002      	b.n	800e778 <tcp_output+0x380>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 800e772:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800e774:	f7fc fc45 	bl	800b002 <tcp_seg_free>
    }
    seg = pcb->unsent;
 800e778:	687b      	ldr	r3, [r7, #4]
 800e77a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800e77c:	627b      	str	r3, [r7, #36]	@ 0x24
  while (seg != NULL &&
 800e77e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e780:	2b00      	cmp	r3, #0
 800e782:	d012      	beq.n	800e7aa <tcp_output+0x3b2>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 800e784:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e786:	68db      	ldr	r3, [r3, #12]
 800e788:	685b      	ldr	r3, [r3, #4]
 800e78a:	4618      	mov	r0, r3
 800e78c:	f7f9 fddb 	bl	8008346 <lwip_htonl>
 800e790:	4602      	mov	r2, r0
 800e792:	687b      	ldr	r3, [r7, #4]
 800e794:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800e796:	1ad3      	subs	r3, r2, r3
 800e798:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800e79a:	8912      	ldrh	r2, [r2, #8]
 800e79c:	4413      	add	r3, r2
  while (seg != NULL &&
 800e79e:	69ba      	ldr	r2, [r7, #24]
 800e7a0:	429a      	cmp	r2, r3
 800e7a2:	f4bf aed9 	bcs.w	800e558 <tcp_output+0x160>
 800e7a6:	e000      	b.n	800e7aa <tcp_output+0x3b2>
      break;
 800e7a8:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 800e7aa:	687b      	ldr	r3, [r7, #4]
 800e7ac:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800e7ae:	2b00      	cmp	r3, #0
 800e7b0:	d108      	bne.n	800e7c4 <tcp_output+0x3cc>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 800e7b2:	687b      	ldr	r3, [r7, #4]
 800e7b4:	2200      	movs	r2, #0
 800e7b6:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
 800e7ba:	e004      	b.n	800e7c6 <tcp_output+0x3ce>
    goto output_done;
 800e7bc:	bf00      	nop
 800e7be:	e002      	b.n	800e7c6 <tcp_output+0x3ce>
    goto output_done;
 800e7c0:	bf00      	nop
 800e7c2:	e000      	b.n	800e7c6 <tcp_output+0x3ce>
  }
#endif /* TCP_OVERSIZE */

output_done:
 800e7c4:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 800e7c6:	687b      	ldr	r3, [r7, #4]
 800e7c8:	8b5b      	ldrh	r3, [r3, #26]
 800e7ca:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800e7ce:	b29a      	uxth	r2, r3
 800e7d0:	687b      	ldr	r3, [r7, #4]
 800e7d2:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 800e7d4:	2300      	movs	r3, #0
}
 800e7d6:	4618      	mov	r0, r3
 800e7d8:	3728      	adds	r7, #40	@ 0x28
 800e7da:	46bd      	mov	sp, r7
 800e7dc:	bdb0      	pop	{r4, r5, r7, pc}
 800e7de:	bf00      	nop

0800e7e0 <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 800e7e0:	b580      	push	{r7, lr}
 800e7e2:	b082      	sub	sp, #8
 800e7e4:	af00      	add	r7, sp, #0
 800e7e6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 800e7e8:	687b      	ldr	r3, [r7, #4]
 800e7ea:	2b00      	cmp	r3, #0
 800e7ec:	d106      	bne.n	800e7fc <tcp_output_segment_busy+0x1c>
 800e7ee:	4b09      	ldr	r3, [pc, #36]	@ (800e814 <tcp_output_segment_busy+0x34>)
 800e7f0:	f240 529a 	movw	r2, #1434	@ 0x59a
 800e7f4:	4908      	ldr	r1, [pc, #32]	@ (800e818 <tcp_output_segment_busy+0x38>)
 800e7f6:	4809      	ldr	r0, [pc, #36]	@ (800e81c <tcp_output_segment_busy+0x3c>)
 800e7f8:	f003 fd60 	bl	80122bc <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 800e7fc:	687b      	ldr	r3, [r7, #4]
 800e7fe:	685b      	ldr	r3, [r3, #4]
 800e800:	7b9b      	ldrb	r3, [r3, #14]
 800e802:	2b01      	cmp	r3, #1
 800e804:	d001      	beq.n	800e80a <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 800e806:	2301      	movs	r3, #1
 800e808:	e000      	b.n	800e80c <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 800e80a:	2300      	movs	r3, #0
}
 800e80c:	4618      	mov	r0, r3
 800e80e:	3708      	adds	r7, #8
 800e810:	46bd      	mov	sp, r7
 800e812:	bd80      	pop	{r7, pc}
 800e814:	08014978 	.word	0x08014978
 800e818:	08014f14 	.word	0x08014f14
 800e81c:	080149cc 	.word	0x080149cc

0800e820 <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 800e820:	b5b0      	push	{r4, r5, r7, lr}
 800e822:	b08c      	sub	sp, #48	@ 0x30
 800e824:	af04      	add	r7, sp, #16
 800e826:	60f8      	str	r0, [r7, #12]
 800e828:	60b9      	str	r1, [r7, #8]
 800e82a:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 800e82c:	68fb      	ldr	r3, [r7, #12]
 800e82e:	2b00      	cmp	r3, #0
 800e830:	d106      	bne.n	800e840 <tcp_output_segment+0x20>
 800e832:	4b64      	ldr	r3, [pc, #400]	@ (800e9c4 <tcp_output_segment+0x1a4>)
 800e834:	f44f 62b7 	mov.w	r2, #1464	@ 0x5b8
 800e838:	4963      	ldr	r1, [pc, #396]	@ (800e9c8 <tcp_output_segment+0x1a8>)
 800e83a:	4864      	ldr	r0, [pc, #400]	@ (800e9cc <tcp_output_segment+0x1ac>)
 800e83c:	f003 fd3e 	bl	80122bc <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 800e840:	68bb      	ldr	r3, [r7, #8]
 800e842:	2b00      	cmp	r3, #0
 800e844:	d106      	bne.n	800e854 <tcp_output_segment+0x34>
 800e846:	4b5f      	ldr	r3, [pc, #380]	@ (800e9c4 <tcp_output_segment+0x1a4>)
 800e848:	f240 52b9 	movw	r2, #1465	@ 0x5b9
 800e84c:	4960      	ldr	r1, [pc, #384]	@ (800e9d0 <tcp_output_segment+0x1b0>)
 800e84e:	485f      	ldr	r0, [pc, #380]	@ (800e9cc <tcp_output_segment+0x1ac>)
 800e850:	f003 fd34 	bl	80122bc <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 800e854:	687b      	ldr	r3, [r7, #4]
 800e856:	2b00      	cmp	r3, #0
 800e858:	d106      	bne.n	800e868 <tcp_output_segment+0x48>
 800e85a:	4b5a      	ldr	r3, [pc, #360]	@ (800e9c4 <tcp_output_segment+0x1a4>)
 800e85c:	f240 52ba 	movw	r2, #1466	@ 0x5ba
 800e860:	495c      	ldr	r1, [pc, #368]	@ (800e9d4 <tcp_output_segment+0x1b4>)
 800e862:	485a      	ldr	r0, [pc, #360]	@ (800e9cc <tcp_output_segment+0x1ac>)
 800e864:	f003 fd2a 	bl	80122bc <iprintf>

  if (tcp_output_segment_busy(seg)) {
 800e868:	68f8      	ldr	r0, [r7, #12]
 800e86a:	f7ff ffb9 	bl	800e7e0 <tcp_output_segment_busy>
 800e86e:	4603      	mov	r3, r0
 800e870:	2b00      	cmp	r3, #0
 800e872:	d001      	beq.n	800e878 <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 800e874:	2300      	movs	r3, #0
 800e876:	e0a1      	b.n	800e9bc <tcp_output_segment+0x19c>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 800e878:	68bb      	ldr	r3, [r7, #8]
 800e87a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800e87c:	68fb      	ldr	r3, [r7, #12]
 800e87e:	68dc      	ldr	r4, [r3, #12]
 800e880:	4610      	mov	r0, r2
 800e882:	f7f9 fd60 	bl	8008346 <lwip_htonl>
 800e886:	4603      	mov	r3, r0
 800e888:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 800e88a:	68bb      	ldr	r3, [r7, #8]
 800e88c:	8d5a      	ldrh	r2, [r3, #42]	@ 0x2a
 800e88e:	68fb      	ldr	r3, [r7, #12]
 800e890:	68dc      	ldr	r4, [r3, #12]
 800e892:	4610      	mov	r0, r2
 800e894:	f7f9 fd42 	bl	800831c <lwip_htons>
 800e898:	4603      	mov	r3, r0
 800e89a:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800e89c:	68bb      	ldr	r3, [r7, #8]
 800e89e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e8a0:	68ba      	ldr	r2, [r7, #8]
 800e8a2:	8d52      	ldrh	r2, [r2, #42]	@ 0x2a
 800e8a4:	441a      	add	r2, r3
 800e8a6:	68bb      	ldr	r3, [r7, #8]
 800e8a8:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 800e8aa:	68fb      	ldr	r3, [r7, #12]
 800e8ac:	68db      	ldr	r3, [r3, #12]
 800e8ae:	3314      	adds	r3, #20
 800e8b0:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 800e8b2:	68fb      	ldr	r3, [r7, #12]
 800e8b4:	7a9b      	ldrb	r3, [r3, #10]
 800e8b6:	f003 0301 	and.w	r3, r3, #1
 800e8ba:	2b00      	cmp	r3, #0
 800e8bc:	d015      	beq.n	800e8ea <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 800e8be:	68bb      	ldr	r3, [r7, #8]
 800e8c0:	3304      	adds	r3, #4
 800e8c2:	461a      	mov	r2, r3
 800e8c4:	6879      	ldr	r1, [r7, #4]
 800e8c6:	f44f 7006 	mov.w	r0, #536	@ 0x218
 800e8ca:	f7fc fe91 	bl	800b5f0 <tcp_eff_send_mss_netif>
 800e8ce:	4603      	mov	r3, r0
 800e8d0:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 800e8d2:	8b7b      	ldrh	r3, [r7, #26]
 800e8d4:	f043 7301 	orr.w	r3, r3, #33816576	@ 0x2040000
 800e8d8:	4618      	mov	r0, r3
 800e8da:	f7f9 fd34 	bl	8008346 <lwip_htonl>
 800e8de:	4602      	mov	r2, r0
 800e8e0:	69fb      	ldr	r3, [r7, #28]
 800e8e2:	601a      	str	r2, [r3, #0]
    opts += 1;
 800e8e4:	69fb      	ldr	r3, [r7, #28]
 800e8e6:	3304      	adds	r3, #4
 800e8e8:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 800e8ea:	68bb      	ldr	r3, [r7, #8]
 800e8ec:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 800e8f0:	2b00      	cmp	r3, #0
 800e8f2:	da02      	bge.n	800e8fa <tcp_output_segment+0xda>
    pcb->rtime = 0;
 800e8f4:	68bb      	ldr	r3, [r7, #8]
 800e8f6:	2200      	movs	r2, #0
 800e8f8:	861a      	strh	r2, [r3, #48]	@ 0x30
  }

  if (pcb->rttest == 0) {
 800e8fa:	68bb      	ldr	r3, [r7, #8]
 800e8fc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800e8fe:	2b00      	cmp	r3, #0
 800e900:	d10c      	bne.n	800e91c <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 800e902:	4b35      	ldr	r3, [pc, #212]	@ (800e9d8 <tcp_output_segment+0x1b8>)
 800e904:	681a      	ldr	r2, [r3, #0]
 800e906:	68bb      	ldr	r3, [r7, #8]
 800e908:	635a      	str	r2, [r3, #52]	@ 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 800e90a:	68fb      	ldr	r3, [r7, #12]
 800e90c:	68db      	ldr	r3, [r3, #12]
 800e90e:	685b      	ldr	r3, [r3, #4]
 800e910:	4618      	mov	r0, r3
 800e912:	f7f9 fd18 	bl	8008346 <lwip_htonl>
 800e916:	4602      	mov	r2, r0
 800e918:	68bb      	ldr	r3, [r7, #8]
 800e91a:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 800e91c:	68fb      	ldr	r3, [r7, #12]
 800e91e:	68da      	ldr	r2, [r3, #12]
 800e920:	68fb      	ldr	r3, [r7, #12]
 800e922:	685b      	ldr	r3, [r3, #4]
 800e924:	685b      	ldr	r3, [r3, #4]
 800e926:	1ad3      	subs	r3, r2, r3
 800e928:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 800e92a:	68fb      	ldr	r3, [r7, #12]
 800e92c:	685b      	ldr	r3, [r3, #4]
 800e92e:	8959      	ldrh	r1, [r3, #10]
 800e930:	68fb      	ldr	r3, [r7, #12]
 800e932:	685b      	ldr	r3, [r3, #4]
 800e934:	8b3a      	ldrh	r2, [r7, #24]
 800e936:	1a8a      	subs	r2, r1, r2
 800e938:	b292      	uxth	r2, r2
 800e93a:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 800e93c:	68fb      	ldr	r3, [r7, #12]
 800e93e:	685b      	ldr	r3, [r3, #4]
 800e940:	8919      	ldrh	r1, [r3, #8]
 800e942:	68fb      	ldr	r3, [r7, #12]
 800e944:	685b      	ldr	r3, [r3, #4]
 800e946:	8b3a      	ldrh	r2, [r7, #24]
 800e948:	1a8a      	subs	r2, r1, r2
 800e94a:	b292      	uxth	r2, r2
 800e94c:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 800e94e:	68fb      	ldr	r3, [r7, #12]
 800e950:	685b      	ldr	r3, [r3, #4]
 800e952:	68fa      	ldr	r2, [r7, #12]
 800e954:	68d2      	ldr	r2, [r2, #12]
 800e956:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 800e958:	68fb      	ldr	r3, [r7, #12]
 800e95a:	68db      	ldr	r3, [r3, #12]
 800e95c:	2200      	movs	r2, #0
 800e95e:	741a      	strb	r2, [r3, #16]
 800e960:	2200      	movs	r2, #0
 800e962:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 800e964:	68fb      	ldr	r3, [r7, #12]
 800e966:	68da      	ldr	r2, [r3, #12]
 800e968:	68fb      	ldr	r3, [r7, #12]
 800e96a:	7a9b      	ldrb	r3, [r3, #10]
 800e96c:	f003 0301 	and.w	r3, r3, #1
 800e970:	2b00      	cmp	r3, #0
 800e972:	d001      	beq.n	800e978 <tcp_output_segment+0x158>
 800e974:	2318      	movs	r3, #24
 800e976:	e000      	b.n	800e97a <tcp_output_segment+0x15a>
 800e978:	2314      	movs	r3, #20
 800e97a:	4413      	add	r3, r2
 800e97c:	69fa      	ldr	r2, [r7, #28]
 800e97e:	429a      	cmp	r2, r3
 800e980:	d006      	beq.n	800e990 <tcp_output_segment+0x170>
 800e982:	4b10      	ldr	r3, [pc, #64]	@ (800e9c4 <tcp_output_segment+0x1a4>)
 800e984:	f240 621c 	movw	r2, #1564	@ 0x61c
 800e988:	4914      	ldr	r1, [pc, #80]	@ (800e9dc <tcp_output_segment+0x1bc>)
 800e98a:	4810      	ldr	r0, [pc, #64]	@ (800e9cc <tcp_output_segment+0x1ac>)
 800e98c:	f003 fc96 	bl	80122bc <iprintf>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 800e990:	68fb      	ldr	r3, [r7, #12]
 800e992:	6858      	ldr	r0, [r3, #4]
 800e994:	68b9      	ldr	r1, [r7, #8]
 800e996:	68bb      	ldr	r3, [r7, #8]
 800e998:	1d1c      	adds	r4, r3, #4
 800e99a:	68bb      	ldr	r3, [r7, #8]
 800e99c:	7add      	ldrb	r5, [r3, #11]
 800e99e:	68bb      	ldr	r3, [r7, #8]
 800e9a0:	7a9b      	ldrb	r3, [r3, #10]
 800e9a2:	687a      	ldr	r2, [r7, #4]
 800e9a4:	9202      	str	r2, [sp, #8]
 800e9a6:	2206      	movs	r2, #6
 800e9a8:	9201      	str	r2, [sp, #4]
 800e9aa:	9300      	str	r3, [sp, #0]
 800e9ac:	462b      	mov	r3, r5
 800e9ae:	4622      	mov	r2, r4
 800e9b0:	f002 fa64 	bl	8010e7c <ip4_output_if>
 800e9b4:	4603      	mov	r3, r0
 800e9b6:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 800e9b8:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800e9bc:	4618      	mov	r0, r3
 800e9be:	3720      	adds	r7, #32
 800e9c0:	46bd      	mov	sp, r7
 800e9c2:	bdb0      	pop	{r4, r5, r7, pc}
 800e9c4:	08014978 	.word	0x08014978
 800e9c8:	08014f3c 	.word	0x08014f3c
 800e9cc:	080149cc 	.word	0x080149cc
 800e9d0:	08014f5c 	.word	0x08014f5c
 800e9d4:	08014f7c 	.word	0x08014f7c
 800e9d8:	200100fc 	.word	0x200100fc
 800e9dc:	08014fa0 	.word	0x08014fa0

0800e9e0 <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 800e9e0:	b5b0      	push	{r4, r5, r7, lr}
 800e9e2:	b084      	sub	sp, #16
 800e9e4:	af00      	add	r7, sp, #0
 800e9e6:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 800e9e8:	687b      	ldr	r3, [r7, #4]
 800e9ea:	2b00      	cmp	r3, #0
 800e9ec:	d106      	bne.n	800e9fc <tcp_rexmit_rto_prepare+0x1c>
 800e9ee:	4b31      	ldr	r3, [pc, #196]	@ (800eab4 <tcp_rexmit_rto_prepare+0xd4>)
 800e9f0:	f240 6263 	movw	r2, #1635	@ 0x663
 800e9f4:	4930      	ldr	r1, [pc, #192]	@ (800eab8 <tcp_rexmit_rto_prepare+0xd8>)
 800e9f6:	4831      	ldr	r0, [pc, #196]	@ (800eabc <tcp_rexmit_rto_prepare+0xdc>)
 800e9f8:	f003 fc60 	bl	80122bc <iprintf>

  if (pcb->unacked == NULL) {
 800e9fc:	687b      	ldr	r3, [r7, #4]
 800e9fe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ea00:	2b00      	cmp	r3, #0
 800ea02:	d102      	bne.n	800ea0a <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 800ea04:	f06f 0305 	mvn.w	r3, #5
 800ea08:	e050      	b.n	800eaac <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 800ea0a:	687b      	ldr	r3, [r7, #4]
 800ea0c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ea0e:	60fb      	str	r3, [r7, #12]
 800ea10:	e00b      	b.n	800ea2a <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 800ea12:	68f8      	ldr	r0, [r7, #12]
 800ea14:	f7ff fee4 	bl	800e7e0 <tcp_output_segment_busy>
 800ea18:	4603      	mov	r3, r0
 800ea1a:	2b00      	cmp	r3, #0
 800ea1c:	d002      	beq.n	800ea24 <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 800ea1e:	f06f 0305 	mvn.w	r3, #5
 800ea22:	e043      	b.n	800eaac <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 800ea24:	68fb      	ldr	r3, [r7, #12]
 800ea26:	681b      	ldr	r3, [r3, #0]
 800ea28:	60fb      	str	r3, [r7, #12]
 800ea2a:	68fb      	ldr	r3, [r7, #12]
 800ea2c:	681b      	ldr	r3, [r3, #0]
 800ea2e:	2b00      	cmp	r3, #0
 800ea30:	d1ef      	bne.n	800ea12 <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 800ea32:	68f8      	ldr	r0, [r7, #12]
 800ea34:	f7ff fed4 	bl	800e7e0 <tcp_output_segment_busy>
 800ea38:	4603      	mov	r3, r0
 800ea3a:	2b00      	cmp	r3, #0
 800ea3c:	d002      	beq.n	800ea44 <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 800ea3e:	f06f 0305 	mvn.w	r3, #5
 800ea42:	e033      	b.n	800eaac <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 800ea44:	687b      	ldr	r3, [r7, #4]
 800ea46:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 800ea48:	68fb      	ldr	r3, [r7, #12]
 800ea4a:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 800ea4c:	687b      	ldr	r3, [r7, #4]
 800ea4e:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800ea50:	687b      	ldr	r3, [r7, #4]
 800ea52:	66da      	str	r2, [r3, #108]	@ 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 800ea54:	687b      	ldr	r3, [r7, #4]
 800ea56:	2200      	movs	r2, #0
 800ea58:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 800ea5a:	687b      	ldr	r3, [r7, #4]
 800ea5c:	8b5b      	ldrh	r3, [r3, #26]
 800ea5e:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800ea62:	b29a      	uxth	r2, r3
 800ea64:	687b      	ldr	r3, [r7, #4]
 800ea66:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 800ea68:	68fb      	ldr	r3, [r7, #12]
 800ea6a:	68db      	ldr	r3, [r3, #12]
 800ea6c:	685b      	ldr	r3, [r3, #4]
 800ea6e:	4618      	mov	r0, r3
 800ea70:	f7f9 fc69 	bl	8008346 <lwip_htonl>
 800ea74:	4604      	mov	r4, r0
 800ea76:	68fb      	ldr	r3, [r7, #12]
 800ea78:	891b      	ldrh	r3, [r3, #8]
 800ea7a:	461d      	mov	r5, r3
 800ea7c:	68fb      	ldr	r3, [r7, #12]
 800ea7e:	68db      	ldr	r3, [r3, #12]
 800ea80:	899b      	ldrh	r3, [r3, #12]
 800ea82:	b29b      	uxth	r3, r3
 800ea84:	4618      	mov	r0, r3
 800ea86:	f7f9 fc49 	bl	800831c <lwip_htons>
 800ea8a:	4603      	mov	r3, r0
 800ea8c:	b2db      	uxtb	r3, r3
 800ea8e:	f003 0303 	and.w	r3, r3, #3
 800ea92:	2b00      	cmp	r3, #0
 800ea94:	d001      	beq.n	800ea9a <tcp_rexmit_rto_prepare+0xba>
 800ea96:	2301      	movs	r3, #1
 800ea98:	e000      	b.n	800ea9c <tcp_rexmit_rto_prepare+0xbc>
 800ea9a:	2300      	movs	r3, #0
 800ea9c:	442b      	add	r3, r5
 800ea9e:	18e2      	adds	r2, r4, r3
 800eaa0:	687b      	ldr	r3, [r7, #4]
 800eaa2:	64da      	str	r2, [r3, #76]	@ 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 800eaa4:	687b      	ldr	r3, [r7, #4]
 800eaa6:	2200      	movs	r2, #0
 800eaa8:	635a      	str	r2, [r3, #52]	@ 0x34

  return ERR_OK;
 800eaaa:	2300      	movs	r3, #0
}
 800eaac:	4618      	mov	r0, r3
 800eaae:	3710      	adds	r7, #16
 800eab0:	46bd      	mov	sp, r7
 800eab2:	bdb0      	pop	{r4, r5, r7, pc}
 800eab4:	08014978 	.word	0x08014978
 800eab8:	08014fb4 	.word	0x08014fb4
 800eabc:	080149cc 	.word	0x080149cc

0800eac0 <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 800eac0:	b580      	push	{r7, lr}
 800eac2:	b082      	sub	sp, #8
 800eac4:	af00      	add	r7, sp, #0
 800eac6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 800eac8:	687b      	ldr	r3, [r7, #4]
 800eaca:	2b00      	cmp	r3, #0
 800eacc:	d106      	bne.n	800eadc <tcp_rexmit_rto_commit+0x1c>
 800eace:	4b0d      	ldr	r3, [pc, #52]	@ (800eb04 <tcp_rexmit_rto_commit+0x44>)
 800ead0:	f44f 62d3 	mov.w	r2, #1688	@ 0x698
 800ead4:	490c      	ldr	r1, [pc, #48]	@ (800eb08 <tcp_rexmit_rto_commit+0x48>)
 800ead6:	480d      	ldr	r0, [pc, #52]	@ (800eb0c <tcp_rexmit_rto_commit+0x4c>)
 800ead8:	f003 fbf0 	bl	80122bc <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 800eadc:	687b      	ldr	r3, [r7, #4]
 800eade:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800eae2:	2bff      	cmp	r3, #255	@ 0xff
 800eae4:	d007      	beq.n	800eaf6 <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 800eae6:	687b      	ldr	r3, [r7, #4]
 800eae8:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800eaec:	3301      	adds	r3, #1
 800eaee:	b2da      	uxtb	r2, r3
 800eaf0:	687b      	ldr	r3, [r7, #4]
 800eaf2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 800eaf6:	6878      	ldr	r0, [r7, #4]
 800eaf8:	f7ff fc7e 	bl	800e3f8 <tcp_output>
}
 800eafc:	bf00      	nop
 800eafe:	3708      	adds	r7, #8
 800eb00:	46bd      	mov	sp, r7
 800eb02:	bd80      	pop	{r7, pc}
 800eb04:	08014978 	.word	0x08014978
 800eb08:	08014fd8 	.word	0x08014fd8
 800eb0c:	080149cc 	.word	0x080149cc

0800eb10 <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 800eb10:	b580      	push	{r7, lr}
 800eb12:	b082      	sub	sp, #8
 800eb14:	af00      	add	r7, sp, #0
 800eb16:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 800eb18:	687b      	ldr	r3, [r7, #4]
 800eb1a:	2b00      	cmp	r3, #0
 800eb1c:	d106      	bne.n	800eb2c <tcp_rexmit_rto+0x1c>
 800eb1e:	4b0a      	ldr	r3, [pc, #40]	@ (800eb48 <tcp_rexmit_rto+0x38>)
 800eb20:	f240 62ad 	movw	r2, #1709	@ 0x6ad
 800eb24:	4909      	ldr	r1, [pc, #36]	@ (800eb4c <tcp_rexmit_rto+0x3c>)
 800eb26:	480a      	ldr	r0, [pc, #40]	@ (800eb50 <tcp_rexmit_rto+0x40>)
 800eb28:	f003 fbc8 	bl	80122bc <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 800eb2c:	6878      	ldr	r0, [r7, #4]
 800eb2e:	f7ff ff57 	bl	800e9e0 <tcp_rexmit_rto_prepare>
 800eb32:	4603      	mov	r3, r0
 800eb34:	2b00      	cmp	r3, #0
 800eb36:	d102      	bne.n	800eb3e <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 800eb38:	6878      	ldr	r0, [r7, #4]
 800eb3a:	f7ff ffc1 	bl	800eac0 <tcp_rexmit_rto_commit>
  }
}
 800eb3e:	bf00      	nop
 800eb40:	3708      	adds	r7, #8
 800eb42:	46bd      	mov	sp, r7
 800eb44:	bd80      	pop	{r7, pc}
 800eb46:	bf00      	nop
 800eb48:	08014978 	.word	0x08014978
 800eb4c:	08014ffc 	.word	0x08014ffc
 800eb50:	080149cc 	.word	0x080149cc

0800eb54 <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 800eb54:	b590      	push	{r4, r7, lr}
 800eb56:	b085      	sub	sp, #20
 800eb58:	af00      	add	r7, sp, #0
 800eb5a:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 800eb5c:	687b      	ldr	r3, [r7, #4]
 800eb5e:	2b00      	cmp	r3, #0
 800eb60:	d106      	bne.n	800eb70 <tcp_rexmit+0x1c>
 800eb62:	4b2f      	ldr	r3, [pc, #188]	@ (800ec20 <tcp_rexmit+0xcc>)
 800eb64:	f240 62c1 	movw	r2, #1729	@ 0x6c1
 800eb68:	492e      	ldr	r1, [pc, #184]	@ (800ec24 <tcp_rexmit+0xd0>)
 800eb6a:	482f      	ldr	r0, [pc, #188]	@ (800ec28 <tcp_rexmit+0xd4>)
 800eb6c:	f003 fba6 	bl	80122bc <iprintf>

  if (pcb->unacked == NULL) {
 800eb70:	687b      	ldr	r3, [r7, #4]
 800eb72:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800eb74:	2b00      	cmp	r3, #0
 800eb76:	d102      	bne.n	800eb7e <tcp_rexmit+0x2a>
    return ERR_VAL;
 800eb78:	f06f 0305 	mvn.w	r3, #5
 800eb7c:	e04c      	b.n	800ec18 <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 800eb7e:	687b      	ldr	r3, [r7, #4]
 800eb80:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800eb82:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 800eb84:	68b8      	ldr	r0, [r7, #8]
 800eb86:	f7ff fe2b 	bl	800e7e0 <tcp_output_segment_busy>
 800eb8a:	4603      	mov	r3, r0
 800eb8c:	2b00      	cmp	r3, #0
 800eb8e:	d002      	beq.n	800eb96 <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 800eb90:	f06f 0305 	mvn.w	r3, #5
 800eb94:	e040      	b.n	800ec18 <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 800eb96:	68bb      	ldr	r3, [r7, #8]
 800eb98:	681a      	ldr	r2, [r3, #0]
 800eb9a:	687b      	ldr	r3, [r7, #4]
 800eb9c:	671a      	str	r2, [r3, #112]	@ 0x70

  cur_seg = &(pcb->unsent);
 800eb9e:	687b      	ldr	r3, [r7, #4]
 800eba0:	336c      	adds	r3, #108	@ 0x6c
 800eba2:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 800eba4:	e002      	b.n	800ebac <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 800eba6:	68fb      	ldr	r3, [r7, #12]
 800eba8:	681b      	ldr	r3, [r3, #0]
 800ebaa:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 800ebac:	68fb      	ldr	r3, [r7, #12]
 800ebae:	681b      	ldr	r3, [r3, #0]
 800ebb0:	2b00      	cmp	r3, #0
 800ebb2:	d011      	beq.n	800ebd8 <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 800ebb4:	68fb      	ldr	r3, [r7, #12]
 800ebb6:	681b      	ldr	r3, [r3, #0]
 800ebb8:	68db      	ldr	r3, [r3, #12]
 800ebba:	685b      	ldr	r3, [r3, #4]
 800ebbc:	4618      	mov	r0, r3
 800ebbe:	f7f9 fbc2 	bl	8008346 <lwip_htonl>
 800ebc2:	4604      	mov	r4, r0
 800ebc4:	68bb      	ldr	r3, [r7, #8]
 800ebc6:	68db      	ldr	r3, [r3, #12]
 800ebc8:	685b      	ldr	r3, [r3, #4]
 800ebca:	4618      	mov	r0, r3
 800ebcc:	f7f9 fbbb 	bl	8008346 <lwip_htonl>
 800ebd0:	4603      	mov	r3, r0
 800ebd2:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 800ebd4:	2b00      	cmp	r3, #0
 800ebd6:	dbe6      	blt.n	800eba6 <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 800ebd8:	68fb      	ldr	r3, [r7, #12]
 800ebda:	681a      	ldr	r2, [r3, #0]
 800ebdc:	68bb      	ldr	r3, [r7, #8]
 800ebde:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 800ebe0:	68fb      	ldr	r3, [r7, #12]
 800ebe2:	68ba      	ldr	r2, [r7, #8]
 800ebe4:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 800ebe6:	68bb      	ldr	r3, [r7, #8]
 800ebe8:	681b      	ldr	r3, [r3, #0]
 800ebea:	2b00      	cmp	r3, #0
 800ebec:	d103      	bne.n	800ebf6 <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 800ebee:	687b      	ldr	r3, [r7, #4]
 800ebf0:	2200      	movs	r2, #0
 800ebf2:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 800ebf6:	687b      	ldr	r3, [r7, #4]
 800ebf8:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800ebfc:	2bff      	cmp	r3, #255	@ 0xff
 800ebfe:	d007      	beq.n	800ec10 <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 800ec00:	687b      	ldr	r3, [r7, #4]
 800ec02:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800ec06:	3301      	adds	r3, #1
 800ec08:	b2da      	uxtb	r2, r3
 800ec0a:	687b      	ldr	r3, [r7, #4]
 800ec0c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 800ec10:	687b      	ldr	r3, [r7, #4]
 800ec12:	2200      	movs	r2, #0
 800ec14:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 800ec16:	2300      	movs	r3, #0
}
 800ec18:	4618      	mov	r0, r3
 800ec1a:	3714      	adds	r7, #20
 800ec1c:	46bd      	mov	sp, r7
 800ec1e:	bd90      	pop	{r4, r7, pc}
 800ec20:	08014978 	.word	0x08014978
 800ec24:	08015018 	.word	0x08015018
 800ec28:	080149cc 	.word	0x080149cc

0800ec2c <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 800ec2c:	b580      	push	{r7, lr}
 800ec2e:	b082      	sub	sp, #8
 800ec30:	af00      	add	r7, sp, #0
 800ec32:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 800ec34:	687b      	ldr	r3, [r7, #4]
 800ec36:	2b00      	cmp	r3, #0
 800ec38:	d106      	bne.n	800ec48 <tcp_rexmit_fast+0x1c>
 800ec3a:	4b2a      	ldr	r3, [pc, #168]	@ (800ece4 <tcp_rexmit_fast+0xb8>)
 800ec3c:	f240 62f9 	movw	r2, #1785	@ 0x6f9
 800ec40:	4929      	ldr	r1, [pc, #164]	@ (800ece8 <tcp_rexmit_fast+0xbc>)
 800ec42:	482a      	ldr	r0, [pc, #168]	@ (800ecec <tcp_rexmit_fast+0xc0>)
 800ec44:	f003 fb3a 	bl	80122bc <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 800ec48:	687b      	ldr	r3, [r7, #4]
 800ec4a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ec4c:	2b00      	cmp	r3, #0
 800ec4e:	d044      	beq.n	800ecda <tcp_rexmit_fast+0xae>
 800ec50:	687b      	ldr	r3, [r7, #4]
 800ec52:	8b5b      	ldrh	r3, [r3, #26]
 800ec54:	f003 0304 	and.w	r3, r3, #4
 800ec58:	2b00      	cmp	r3, #0
 800ec5a:	d13e      	bne.n	800ecda <tcp_rexmit_fast+0xae>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 800ec5c:	6878      	ldr	r0, [r7, #4]
 800ec5e:	f7ff ff79 	bl	800eb54 <tcp_rexmit>
 800ec62:	4603      	mov	r3, r0
 800ec64:	2b00      	cmp	r3, #0
 800ec66:	d138      	bne.n	800ecda <tcp_rexmit_fast+0xae>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 800ec68:	687b      	ldr	r3, [r7, #4]
 800ec6a:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 800ec6e:	687b      	ldr	r3, [r7, #4]
 800ec70:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 800ec74:	4293      	cmp	r3, r2
 800ec76:	bf28      	it	cs
 800ec78:	4613      	movcs	r3, r2
 800ec7a:	b29b      	uxth	r3, r3
 800ec7c:	0fda      	lsrs	r2, r3, #31
 800ec7e:	4413      	add	r3, r2
 800ec80:	105b      	asrs	r3, r3, #1
 800ec82:	b29a      	uxth	r2, r3
 800ec84:	687b      	ldr	r3, [r7, #4]
 800ec86:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 800ec8a:	687b      	ldr	r3, [r7, #4]
 800ec8c:	f8b3 304a 	ldrh.w	r3, [r3, #74]	@ 0x4a
 800ec90:	461a      	mov	r2, r3
 800ec92:	687b      	ldr	r3, [r7, #4]
 800ec94:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800ec96:	005b      	lsls	r3, r3, #1
 800ec98:	429a      	cmp	r2, r3
 800ec9a:	d206      	bcs.n	800ecaa <tcp_rexmit_fast+0x7e>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 800ec9c:	687b      	ldr	r3, [r7, #4]
 800ec9e:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800eca0:	005b      	lsls	r3, r3, #1
 800eca2:	b29a      	uxth	r2, r3
 800eca4:	687b      	ldr	r3, [r7, #4]
 800eca6:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 800ecaa:	687b      	ldr	r3, [r7, #4]
 800ecac:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 800ecb0:	687b      	ldr	r3, [r7, #4]
 800ecb2:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800ecb4:	4619      	mov	r1, r3
 800ecb6:	0049      	lsls	r1, r1, #1
 800ecb8:	440b      	add	r3, r1
 800ecba:	b29b      	uxth	r3, r3
 800ecbc:	4413      	add	r3, r2
 800ecbe:	b29a      	uxth	r2, r3
 800ecc0:	687b      	ldr	r3, [r7, #4]
 800ecc2:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
      tcp_set_flags(pcb, TF_INFR);
 800ecc6:	687b      	ldr	r3, [r7, #4]
 800ecc8:	8b5b      	ldrh	r3, [r3, #26]
 800ecca:	f043 0304 	orr.w	r3, r3, #4
 800ecce:	b29a      	uxth	r2, r3
 800ecd0:	687b      	ldr	r3, [r7, #4]
 800ecd2:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 800ecd4:	687b      	ldr	r3, [r7, #4]
 800ecd6:	2200      	movs	r2, #0
 800ecd8:	861a      	strh	r2, [r3, #48]	@ 0x30
    }
  }
}
 800ecda:	bf00      	nop
 800ecdc:	3708      	adds	r7, #8
 800ecde:	46bd      	mov	sp, r7
 800ece0:	bd80      	pop	{r7, pc}
 800ece2:	bf00      	nop
 800ece4:	08014978 	.word	0x08014978
 800ece8:	08015030 	.word	0x08015030
 800ecec:	080149cc 	.word	0x080149cc

0800ecf0 <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 800ecf0:	b580      	push	{r7, lr}
 800ecf2:	b086      	sub	sp, #24
 800ecf4:	af00      	add	r7, sp, #0
 800ecf6:	60f8      	str	r0, [r7, #12]
 800ecf8:	607b      	str	r3, [r7, #4]
 800ecfa:	460b      	mov	r3, r1
 800ecfc:	817b      	strh	r3, [r7, #10]
 800ecfe:	4613      	mov	r3, r2
 800ed00:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 800ed02:	897a      	ldrh	r2, [r7, #10]
 800ed04:	893b      	ldrh	r3, [r7, #8]
 800ed06:	4413      	add	r3, r2
 800ed08:	b29b      	uxth	r3, r3
 800ed0a:	3314      	adds	r3, #20
 800ed0c:	b29b      	uxth	r3, r3
 800ed0e:	f44f 7220 	mov.w	r2, #640	@ 0x280
 800ed12:	4619      	mov	r1, r3
 800ed14:	2022      	movs	r0, #34	@ 0x22
 800ed16:	f7fa fc0f 	bl	8009538 <pbuf_alloc>
 800ed1a:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 800ed1c:	697b      	ldr	r3, [r7, #20]
 800ed1e:	2b00      	cmp	r3, #0
 800ed20:	d04d      	beq.n	800edbe <tcp_output_alloc_header_common+0xce>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 800ed22:	897b      	ldrh	r3, [r7, #10]
 800ed24:	3313      	adds	r3, #19
 800ed26:	697a      	ldr	r2, [r7, #20]
 800ed28:	8952      	ldrh	r2, [r2, #10]
 800ed2a:	4293      	cmp	r3, r2
 800ed2c:	db06      	blt.n	800ed3c <tcp_output_alloc_header_common+0x4c>
 800ed2e:	4b26      	ldr	r3, [pc, #152]	@ (800edc8 <tcp_output_alloc_header_common+0xd8>)
 800ed30:	f240 7223 	movw	r2, #1827	@ 0x723
 800ed34:	4925      	ldr	r1, [pc, #148]	@ (800edcc <tcp_output_alloc_header_common+0xdc>)
 800ed36:	4826      	ldr	r0, [pc, #152]	@ (800edd0 <tcp_output_alloc_header_common+0xe0>)
 800ed38:	f003 fac0 	bl	80122bc <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 800ed3c:	697b      	ldr	r3, [r7, #20]
 800ed3e:	685b      	ldr	r3, [r3, #4]
 800ed40:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 800ed42:	8c3b      	ldrh	r3, [r7, #32]
 800ed44:	4618      	mov	r0, r3
 800ed46:	f7f9 fae9 	bl	800831c <lwip_htons>
 800ed4a:	4603      	mov	r3, r0
 800ed4c:	461a      	mov	r2, r3
 800ed4e:	693b      	ldr	r3, [r7, #16]
 800ed50:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 800ed52:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800ed54:	4618      	mov	r0, r3
 800ed56:	f7f9 fae1 	bl	800831c <lwip_htons>
 800ed5a:	4603      	mov	r3, r0
 800ed5c:	461a      	mov	r2, r3
 800ed5e:	693b      	ldr	r3, [r7, #16]
 800ed60:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 800ed62:	693b      	ldr	r3, [r7, #16]
 800ed64:	687a      	ldr	r2, [r7, #4]
 800ed66:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 800ed68:	68f8      	ldr	r0, [r7, #12]
 800ed6a:	f7f9 faec 	bl	8008346 <lwip_htonl>
 800ed6e:	4602      	mov	r2, r0
 800ed70:	693b      	ldr	r3, [r7, #16]
 800ed72:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 800ed74:	897b      	ldrh	r3, [r7, #10]
 800ed76:	089b      	lsrs	r3, r3, #2
 800ed78:	b29b      	uxth	r3, r3
 800ed7a:	3305      	adds	r3, #5
 800ed7c:	b29b      	uxth	r3, r3
 800ed7e:	031b      	lsls	r3, r3, #12
 800ed80:	b29a      	uxth	r2, r3
 800ed82:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800ed86:	b29b      	uxth	r3, r3
 800ed88:	4313      	orrs	r3, r2
 800ed8a:	b29b      	uxth	r3, r3
 800ed8c:	4618      	mov	r0, r3
 800ed8e:	f7f9 fac5 	bl	800831c <lwip_htons>
 800ed92:	4603      	mov	r3, r0
 800ed94:	461a      	mov	r2, r3
 800ed96:	693b      	ldr	r3, [r7, #16]
 800ed98:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 800ed9a:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 800ed9c:	4618      	mov	r0, r3
 800ed9e:	f7f9 fabd 	bl	800831c <lwip_htons>
 800eda2:	4603      	mov	r3, r0
 800eda4:	461a      	mov	r2, r3
 800eda6:	693b      	ldr	r3, [r7, #16]
 800eda8:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 800edaa:	693b      	ldr	r3, [r7, #16]
 800edac:	2200      	movs	r2, #0
 800edae:	741a      	strb	r2, [r3, #16]
 800edb0:	2200      	movs	r2, #0
 800edb2:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 800edb4:	693b      	ldr	r3, [r7, #16]
 800edb6:	2200      	movs	r2, #0
 800edb8:	749a      	strb	r2, [r3, #18]
 800edba:	2200      	movs	r2, #0
 800edbc:	74da      	strb	r2, [r3, #19]
  }
  return p;
 800edbe:	697b      	ldr	r3, [r7, #20]
}
 800edc0:	4618      	mov	r0, r3
 800edc2:	3718      	adds	r7, #24
 800edc4:	46bd      	mov	sp, r7
 800edc6:	bd80      	pop	{r7, pc}
 800edc8:	08014978 	.word	0x08014978
 800edcc:	08015050 	.word	0x08015050
 800edd0:	080149cc 	.word	0x080149cc

0800edd4 <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 800edd4:	b5b0      	push	{r4, r5, r7, lr}
 800edd6:	b08a      	sub	sp, #40	@ 0x28
 800edd8:	af04      	add	r7, sp, #16
 800edda:	60f8      	str	r0, [r7, #12]
 800eddc:	607b      	str	r3, [r7, #4]
 800edde:	460b      	mov	r3, r1
 800ede0:	817b      	strh	r3, [r7, #10]
 800ede2:	4613      	mov	r3, r2
 800ede4:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 800ede6:	68fb      	ldr	r3, [r7, #12]
 800ede8:	2b00      	cmp	r3, #0
 800edea:	d106      	bne.n	800edfa <tcp_output_alloc_header+0x26>
 800edec:	4b15      	ldr	r3, [pc, #84]	@ (800ee44 <tcp_output_alloc_header+0x70>)
 800edee:	f240 7242 	movw	r2, #1858	@ 0x742
 800edf2:	4915      	ldr	r1, [pc, #84]	@ (800ee48 <tcp_output_alloc_header+0x74>)
 800edf4:	4815      	ldr	r0, [pc, #84]	@ (800ee4c <tcp_output_alloc_header+0x78>)
 800edf6:	f003 fa61 	bl	80122bc <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 800edfa:	68fb      	ldr	r3, [r7, #12]
 800edfc:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 800edfe:	68fb      	ldr	r3, [r7, #12]
 800ee00:	8adb      	ldrh	r3, [r3, #22]
 800ee02:	68fa      	ldr	r2, [r7, #12]
 800ee04:	8b12      	ldrh	r2, [r2, #24]
 800ee06:	68f9      	ldr	r1, [r7, #12]
 800ee08:	8d49      	ldrh	r1, [r1, #42]	@ 0x2a
 800ee0a:	893d      	ldrh	r5, [r7, #8]
 800ee0c:	897c      	ldrh	r4, [r7, #10]
 800ee0e:	9103      	str	r1, [sp, #12]
 800ee10:	2110      	movs	r1, #16
 800ee12:	9102      	str	r1, [sp, #8]
 800ee14:	9201      	str	r2, [sp, #4]
 800ee16:	9300      	str	r3, [sp, #0]
 800ee18:	687b      	ldr	r3, [r7, #4]
 800ee1a:	462a      	mov	r2, r5
 800ee1c:	4621      	mov	r1, r4
 800ee1e:	f7ff ff67 	bl	800ecf0 <tcp_output_alloc_header_common>
 800ee22:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 800ee24:	697b      	ldr	r3, [r7, #20]
 800ee26:	2b00      	cmp	r3, #0
 800ee28:	d006      	beq.n	800ee38 <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800ee2a:	68fb      	ldr	r3, [r7, #12]
 800ee2c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ee2e:	68fa      	ldr	r2, [r7, #12]
 800ee30:	8d52      	ldrh	r2, [r2, #42]	@ 0x2a
 800ee32:	441a      	add	r2, r3
 800ee34:	68fb      	ldr	r3, [r7, #12]
 800ee36:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  return p;
 800ee38:	697b      	ldr	r3, [r7, #20]
}
 800ee3a:	4618      	mov	r0, r3
 800ee3c:	3718      	adds	r7, #24
 800ee3e:	46bd      	mov	sp, r7
 800ee40:	bdb0      	pop	{r4, r5, r7, pc}
 800ee42:	bf00      	nop
 800ee44:	08014978 	.word	0x08014978
 800ee48:	08015080 	.word	0x08015080
 800ee4c:	080149cc 	.word	0x080149cc

0800ee50 <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 800ee50:	b580      	push	{r7, lr}
 800ee52:	b088      	sub	sp, #32
 800ee54:	af00      	add	r7, sp, #0
 800ee56:	60f8      	str	r0, [r7, #12]
 800ee58:	60b9      	str	r1, [r7, #8]
 800ee5a:	4611      	mov	r1, r2
 800ee5c:	461a      	mov	r2, r3
 800ee5e:	460b      	mov	r3, r1
 800ee60:	71fb      	strb	r3, [r7, #7]
 800ee62:	4613      	mov	r3, r2
 800ee64:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 800ee66:	2300      	movs	r3, #0
 800ee68:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 800ee6a:	68bb      	ldr	r3, [r7, #8]
 800ee6c:	2b00      	cmp	r3, #0
 800ee6e:	d106      	bne.n	800ee7e <tcp_output_fill_options+0x2e>
 800ee70:	4b12      	ldr	r3, [pc, #72]	@ (800eebc <tcp_output_fill_options+0x6c>)
 800ee72:	f240 7256 	movw	r2, #1878	@ 0x756
 800ee76:	4912      	ldr	r1, [pc, #72]	@ (800eec0 <tcp_output_fill_options+0x70>)
 800ee78:	4812      	ldr	r0, [pc, #72]	@ (800eec4 <tcp_output_fill_options+0x74>)
 800ee7a:	f003 fa1f 	bl	80122bc <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 800ee7e:	68bb      	ldr	r3, [r7, #8]
 800ee80:	685b      	ldr	r3, [r3, #4]
 800ee82:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 800ee84:	69bb      	ldr	r3, [r7, #24]
 800ee86:	3314      	adds	r3, #20
 800ee88:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 800ee8a:	8bfb      	ldrh	r3, [r7, #30]
 800ee8c:	009b      	lsls	r3, r3, #2
 800ee8e:	461a      	mov	r2, r3
 800ee90:	79fb      	ldrb	r3, [r7, #7]
 800ee92:	009b      	lsls	r3, r3, #2
 800ee94:	f003 0304 	and.w	r3, r3, #4
 800ee98:	4413      	add	r3, r2
 800ee9a:	3314      	adds	r3, #20
 800ee9c:	69ba      	ldr	r2, [r7, #24]
 800ee9e:	4413      	add	r3, r2
 800eea0:	697a      	ldr	r2, [r7, #20]
 800eea2:	429a      	cmp	r2, r3
 800eea4:	d006      	beq.n	800eeb4 <tcp_output_fill_options+0x64>
 800eea6:	4b05      	ldr	r3, [pc, #20]	@ (800eebc <tcp_output_fill_options+0x6c>)
 800eea8:	f240 7275 	movw	r2, #1909	@ 0x775
 800eeac:	4906      	ldr	r1, [pc, #24]	@ (800eec8 <tcp_output_fill_options+0x78>)
 800eeae:	4805      	ldr	r0, [pc, #20]	@ (800eec4 <tcp_output_fill_options+0x74>)
 800eeb0:	f003 fa04 	bl	80122bc <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 800eeb4:	bf00      	nop
 800eeb6:	3720      	adds	r7, #32
 800eeb8:	46bd      	mov	sp, r7
 800eeba:	bd80      	pop	{r7, pc}
 800eebc:	08014978 	.word	0x08014978
 800eec0:	080150a8 	.word	0x080150a8
 800eec4:	080149cc 	.word	0x080149cc
 800eec8:	08014fa0 	.word	0x08014fa0

0800eecc <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 800eecc:	b580      	push	{r7, lr}
 800eece:	b08a      	sub	sp, #40	@ 0x28
 800eed0:	af04      	add	r7, sp, #16
 800eed2:	60f8      	str	r0, [r7, #12]
 800eed4:	60b9      	str	r1, [r7, #8]
 800eed6:	607a      	str	r2, [r7, #4]
 800eed8:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 800eeda:	68bb      	ldr	r3, [r7, #8]
 800eedc:	2b00      	cmp	r3, #0
 800eede:	d106      	bne.n	800eeee <tcp_output_control_segment+0x22>
 800eee0:	4b1c      	ldr	r3, [pc, #112]	@ (800ef54 <tcp_output_control_segment+0x88>)
 800eee2:	f240 7287 	movw	r2, #1927	@ 0x787
 800eee6:	491c      	ldr	r1, [pc, #112]	@ (800ef58 <tcp_output_control_segment+0x8c>)
 800eee8:	481c      	ldr	r0, [pc, #112]	@ (800ef5c <tcp_output_control_segment+0x90>)
 800eeea:	f003 f9e7 	bl	80122bc <iprintf>

  netif = tcp_route(pcb, src, dst);
 800eeee:	683a      	ldr	r2, [r7, #0]
 800eef0:	6879      	ldr	r1, [r7, #4]
 800eef2:	68f8      	ldr	r0, [r7, #12]
 800eef4:	f7fe ff42 	bl	800dd7c <tcp_route>
 800eef8:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 800eefa:	693b      	ldr	r3, [r7, #16]
 800eefc:	2b00      	cmp	r3, #0
 800eefe:	d102      	bne.n	800ef06 <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 800ef00:	23fc      	movs	r3, #252	@ 0xfc
 800ef02:	75fb      	strb	r3, [r7, #23]
 800ef04:	e01c      	b.n	800ef40 <tcp_output_control_segment+0x74>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 800ef06:	68fb      	ldr	r3, [r7, #12]
 800ef08:	2b00      	cmp	r3, #0
 800ef0a:	d006      	beq.n	800ef1a <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 800ef0c:	68fb      	ldr	r3, [r7, #12]
 800ef0e:	7adb      	ldrb	r3, [r3, #11]
 800ef10:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 800ef12:	68fb      	ldr	r3, [r7, #12]
 800ef14:	7a9b      	ldrb	r3, [r3, #10]
 800ef16:	757b      	strb	r3, [r7, #21]
 800ef18:	e003      	b.n	800ef22 <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 800ef1a:	23ff      	movs	r3, #255	@ 0xff
 800ef1c:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 800ef1e:	2300      	movs	r3, #0
 800ef20:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 800ef22:	7dba      	ldrb	r2, [r7, #22]
 800ef24:	693b      	ldr	r3, [r7, #16]
 800ef26:	9302      	str	r3, [sp, #8]
 800ef28:	2306      	movs	r3, #6
 800ef2a:	9301      	str	r3, [sp, #4]
 800ef2c:	7d7b      	ldrb	r3, [r7, #21]
 800ef2e:	9300      	str	r3, [sp, #0]
 800ef30:	4613      	mov	r3, r2
 800ef32:	683a      	ldr	r2, [r7, #0]
 800ef34:	6879      	ldr	r1, [r7, #4]
 800ef36:	68b8      	ldr	r0, [r7, #8]
 800ef38:	f001 ffa0 	bl	8010e7c <ip4_output_if>
 800ef3c:	4603      	mov	r3, r0
 800ef3e:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 800ef40:	68b8      	ldr	r0, [r7, #8]
 800ef42:	f7fa fddd 	bl	8009b00 <pbuf_free>
  return err;
 800ef46:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800ef4a:	4618      	mov	r0, r3
 800ef4c:	3718      	adds	r7, #24
 800ef4e:	46bd      	mov	sp, r7
 800ef50:	bd80      	pop	{r7, pc}
 800ef52:	bf00      	nop
 800ef54:	08014978 	.word	0x08014978
 800ef58:	080150d0 	.word	0x080150d0
 800ef5c:	080149cc 	.word	0x080149cc

0800ef60 <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 800ef60:	b590      	push	{r4, r7, lr}
 800ef62:	b08b      	sub	sp, #44	@ 0x2c
 800ef64:	af04      	add	r7, sp, #16
 800ef66:	60f8      	str	r0, [r7, #12]
 800ef68:	60b9      	str	r1, [r7, #8]
 800ef6a:	607a      	str	r2, [r7, #4]
 800ef6c:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 800ef6e:	683b      	ldr	r3, [r7, #0]
 800ef70:	2b00      	cmp	r3, #0
 800ef72:	d106      	bne.n	800ef82 <tcp_rst+0x22>
 800ef74:	4b1f      	ldr	r3, [pc, #124]	@ (800eff4 <tcp_rst+0x94>)
 800ef76:	f240 72c4 	movw	r2, #1988	@ 0x7c4
 800ef7a:	491f      	ldr	r1, [pc, #124]	@ (800eff8 <tcp_rst+0x98>)
 800ef7c:	481f      	ldr	r0, [pc, #124]	@ (800effc <tcp_rst+0x9c>)
 800ef7e:	f003 f99d 	bl	80122bc <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 800ef82:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ef84:	2b00      	cmp	r3, #0
 800ef86:	d106      	bne.n	800ef96 <tcp_rst+0x36>
 800ef88:	4b1a      	ldr	r3, [pc, #104]	@ (800eff4 <tcp_rst+0x94>)
 800ef8a:	f240 72c5 	movw	r2, #1989	@ 0x7c5
 800ef8e:	491c      	ldr	r1, [pc, #112]	@ (800f000 <tcp_rst+0xa0>)
 800ef90:	481a      	ldr	r0, [pc, #104]	@ (800effc <tcp_rst+0x9c>)
 800ef92:	f003 f993 	bl	80122bc <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800ef96:	2300      	movs	r3, #0
 800ef98:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 800ef9a:	f246 0308 	movw	r3, #24584	@ 0x6008
 800ef9e:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 800efa0:	7dfb      	ldrb	r3, [r7, #23]
 800efa2:	b29c      	uxth	r4, r3
 800efa4:	68b8      	ldr	r0, [r7, #8]
 800efa6:	f7f9 f9ce 	bl	8008346 <lwip_htonl>
 800efaa:	4602      	mov	r2, r0
 800efac:	8abb      	ldrh	r3, [r7, #20]
 800efae:	9303      	str	r3, [sp, #12]
 800efb0:	2314      	movs	r3, #20
 800efb2:	9302      	str	r3, [sp, #8]
 800efb4:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 800efb6:	9301      	str	r3, [sp, #4]
 800efb8:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 800efba:	9300      	str	r3, [sp, #0]
 800efbc:	4613      	mov	r3, r2
 800efbe:	2200      	movs	r2, #0
 800efc0:	4621      	mov	r1, r4
 800efc2:	6878      	ldr	r0, [r7, #4]
 800efc4:	f7ff fe94 	bl	800ecf0 <tcp_output_alloc_header_common>
 800efc8:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 800efca:	693b      	ldr	r3, [r7, #16]
 800efcc:	2b00      	cmp	r3, #0
 800efce:	d00c      	beq.n	800efea <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800efd0:	7dfb      	ldrb	r3, [r7, #23]
 800efd2:	2200      	movs	r2, #0
 800efd4:	6939      	ldr	r1, [r7, #16]
 800efd6:	68f8      	ldr	r0, [r7, #12]
 800efd8:	f7ff ff3a 	bl	800ee50 <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 800efdc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800efde:	683a      	ldr	r2, [r7, #0]
 800efe0:	6939      	ldr	r1, [r7, #16]
 800efe2:	68f8      	ldr	r0, [r7, #12]
 800efe4:	f7ff ff72 	bl	800eecc <tcp_output_control_segment>
 800efe8:	e000      	b.n	800efec <tcp_rst+0x8c>
    return;
 800efea:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 800efec:	371c      	adds	r7, #28
 800efee:	46bd      	mov	sp, r7
 800eff0:	bd90      	pop	{r4, r7, pc}
 800eff2:	bf00      	nop
 800eff4:	08014978 	.word	0x08014978
 800eff8:	080150fc 	.word	0x080150fc
 800effc:	080149cc 	.word	0x080149cc
 800f000:	08015118 	.word	0x08015118

0800f004 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 800f004:	b590      	push	{r4, r7, lr}
 800f006:	b087      	sub	sp, #28
 800f008:	af00      	add	r7, sp, #0
 800f00a:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 800f00c:	2300      	movs	r3, #0
 800f00e:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 800f010:	2300      	movs	r3, #0
 800f012:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 800f014:	687b      	ldr	r3, [r7, #4]
 800f016:	2b00      	cmp	r3, #0
 800f018:	d106      	bne.n	800f028 <tcp_send_empty_ack+0x24>
 800f01a:	4b28      	ldr	r3, [pc, #160]	@ (800f0bc <tcp_send_empty_ack+0xb8>)
 800f01c:	f240 72ea 	movw	r2, #2026	@ 0x7ea
 800f020:	4927      	ldr	r1, [pc, #156]	@ (800f0c0 <tcp_send_empty_ack+0xbc>)
 800f022:	4828      	ldr	r0, [pc, #160]	@ (800f0c4 <tcp_send_empty_ack+0xc0>)
 800f024:	f003 f94a 	bl	80122bc <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800f028:	7dfb      	ldrb	r3, [r7, #23]
 800f02a:	009b      	lsls	r3, r3, #2
 800f02c:	b2db      	uxtb	r3, r3
 800f02e:	f003 0304 	and.w	r3, r3, #4
 800f032:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 800f034:	7d7b      	ldrb	r3, [r7, #21]
 800f036:	b29c      	uxth	r4, r3
 800f038:	687b      	ldr	r3, [r7, #4]
 800f03a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800f03c:	4618      	mov	r0, r3
 800f03e:	f7f9 f982 	bl	8008346 <lwip_htonl>
 800f042:	4603      	mov	r3, r0
 800f044:	2200      	movs	r2, #0
 800f046:	4621      	mov	r1, r4
 800f048:	6878      	ldr	r0, [r7, #4]
 800f04a:	f7ff fec3 	bl	800edd4 <tcp_output_alloc_header>
 800f04e:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800f050:	693b      	ldr	r3, [r7, #16]
 800f052:	2b00      	cmp	r3, #0
 800f054:	d109      	bne.n	800f06a <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800f056:	687b      	ldr	r3, [r7, #4]
 800f058:	8b5b      	ldrh	r3, [r3, #26]
 800f05a:	f043 0303 	orr.w	r3, r3, #3
 800f05e:	b29a      	uxth	r2, r3
 800f060:	687b      	ldr	r3, [r7, #4]
 800f062:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 800f064:	f06f 0301 	mvn.w	r3, #1
 800f068:	e023      	b.n	800f0b2 <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 800f06a:	7dbb      	ldrb	r3, [r7, #22]
 800f06c:	7dfa      	ldrb	r2, [r7, #23]
 800f06e:	6939      	ldr	r1, [r7, #16]
 800f070:	6878      	ldr	r0, [r7, #4]
 800f072:	f7ff feed 	bl	800ee50 <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800f076:	687a      	ldr	r2, [r7, #4]
 800f078:	687b      	ldr	r3, [r7, #4]
 800f07a:	3304      	adds	r3, #4
 800f07c:	6939      	ldr	r1, [r7, #16]
 800f07e:	6878      	ldr	r0, [r7, #4]
 800f080:	f7ff ff24 	bl	800eecc <tcp_output_control_segment>
 800f084:	4603      	mov	r3, r0
 800f086:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 800f088:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f08c:	2b00      	cmp	r3, #0
 800f08e:	d007      	beq.n	800f0a0 <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800f090:	687b      	ldr	r3, [r7, #4]
 800f092:	8b5b      	ldrh	r3, [r3, #26]
 800f094:	f043 0303 	orr.w	r3, r3, #3
 800f098:	b29a      	uxth	r2, r3
 800f09a:	687b      	ldr	r3, [r7, #4]
 800f09c:	835a      	strh	r2, [r3, #26]
 800f09e:	e006      	b.n	800f0ae <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800f0a0:	687b      	ldr	r3, [r7, #4]
 800f0a2:	8b5b      	ldrh	r3, [r3, #26]
 800f0a4:	f023 0303 	bic.w	r3, r3, #3
 800f0a8:	b29a      	uxth	r2, r3
 800f0aa:	687b      	ldr	r3, [r7, #4]
 800f0ac:	835a      	strh	r2, [r3, #26]
  }

  return err;
 800f0ae:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800f0b2:	4618      	mov	r0, r3
 800f0b4:	371c      	adds	r7, #28
 800f0b6:	46bd      	mov	sp, r7
 800f0b8:	bd90      	pop	{r4, r7, pc}
 800f0ba:	bf00      	nop
 800f0bc:	08014978 	.word	0x08014978
 800f0c0:	08015134 	.word	0x08015134
 800f0c4:	080149cc 	.word	0x080149cc

0800f0c8 <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 800f0c8:	b590      	push	{r4, r7, lr}
 800f0ca:	b087      	sub	sp, #28
 800f0cc:	af00      	add	r7, sp, #0
 800f0ce:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800f0d0:	2300      	movs	r3, #0
 800f0d2:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 800f0d4:	687b      	ldr	r3, [r7, #4]
 800f0d6:	2b00      	cmp	r3, #0
 800f0d8:	d106      	bne.n	800f0e8 <tcp_keepalive+0x20>
 800f0da:	4b18      	ldr	r3, [pc, #96]	@ (800f13c <tcp_keepalive+0x74>)
 800f0dc:	f640 0224 	movw	r2, #2084	@ 0x824
 800f0e0:	4917      	ldr	r1, [pc, #92]	@ (800f140 <tcp_keepalive+0x78>)
 800f0e2:	4818      	ldr	r0, [pc, #96]	@ (800f144 <tcp_keepalive+0x7c>)
 800f0e4:	f003 f8ea 	bl	80122bc <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 800f0e8:	7dfb      	ldrb	r3, [r7, #23]
 800f0ea:	b29c      	uxth	r4, r3
 800f0ec:	687b      	ldr	r3, [r7, #4]
 800f0ee:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800f0f0:	3b01      	subs	r3, #1
 800f0f2:	4618      	mov	r0, r3
 800f0f4:	f7f9 f927 	bl	8008346 <lwip_htonl>
 800f0f8:	4603      	mov	r3, r0
 800f0fa:	2200      	movs	r2, #0
 800f0fc:	4621      	mov	r1, r4
 800f0fe:	6878      	ldr	r0, [r7, #4]
 800f100:	f7ff fe68 	bl	800edd4 <tcp_output_alloc_header>
 800f104:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800f106:	693b      	ldr	r3, [r7, #16]
 800f108:	2b00      	cmp	r3, #0
 800f10a:	d102      	bne.n	800f112 <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 800f10c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800f110:	e010      	b.n	800f134 <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800f112:	7dfb      	ldrb	r3, [r7, #23]
 800f114:	2200      	movs	r2, #0
 800f116:	6939      	ldr	r1, [r7, #16]
 800f118:	6878      	ldr	r0, [r7, #4]
 800f11a:	f7ff fe99 	bl	800ee50 <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800f11e:	687a      	ldr	r2, [r7, #4]
 800f120:	687b      	ldr	r3, [r7, #4]
 800f122:	3304      	adds	r3, #4
 800f124:	6939      	ldr	r1, [r7, #16]
 800f126:	6878      	ldr	r0, [r7, #4]
 800f128:	f7ff fed0 	bl	800eecc <tcp_output_control_segment>
 800f12c:	4603      	mov	r3, r0
 800f12e:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 800f130:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800f134:	4618      	mov	r0, r3
 800f136:	371c      	adds	r7, #28
 800f138:	46bd      	mov	sp, r7
 800f13a:	bd90      	pop	{r4, r7, pc}
 800f13c:	08014978 	.word	0x08014978
 800f140:	08015154 	.word	0x08015154
 800f144:	080149cc 	.word	0x080149cc

0800f148 <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 800f148:	b590      	push	{r4, r7, lr}
 800f14a:	b08b      	sub	sp, #44	@ 0x2c
 800f14c:	af00      	add	r7, sp, #0
 800f14e:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800f150:	2300      	movs	r3, #0
 800f152:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 800f156:	687b      	ldr	r3, [r7, #4]
 800f158:	2b00      	cmp	r3, #0
 800f15a:	d106      	bne.n	800f16a <tcp_zero_window_probe+0x22>
 800f15c:	4b4c      	ldr	r3, [pc, #304]	@ (800f290 <tcp_zero_window_probe+0x148>)
 800f15e:	f640 024f 	movw	r2, #2127	@ 0x84f
 800f162:	494c      	ldr	r1, [pc, #304]	@ (800f294 <tcp_zero_window_probe+0x14c>)
 800f164:	484c      	ldr	r0, [pc, #304]	@ (800f298 <tcp_zero_window_probe+0x150>)
 800f166:	f003 f8a9 	bl	80122bc <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 800f16a:	687b      	ldr	r3, [r7, #4]
 800f16c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800f16e:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 800f170:	6a3b      	ldr	r3, [r7, #32]
 800f172:	2b00      	cmp	r3, #0
 800f174:	d101      	bne.n	800f17a <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 800f176:	2300      	movs	r3, #0
 800f178:	e086      	b.n	800f288 <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 800f17a:	687b      	ldr	r3, [r7, #4]
 800f17c:	f893 309a 	ldrb.w	r3, [r3, #154]	@ 0x9a
 800f180:	2bff      	cmp	r3, #255	@ 0xff
 800f182:	d007      	beq.n	800f194 <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
 800f184:	687b      	ldr	r3, [r7, #4]
 800f186:	f893 309a 	ldrb.w	r3, [r3, #154]	@ 0x9a
 800f18a:	3301      	adds	r3, #1
 800f18c:	b2da      	uxtb	r2, r3
 800f18e:	687b      	ldr	r3, [r7, #4]
 800f190:	f883 209a 	strb.w	r2, [r3, #154]	@ 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 800f194:	6a3b      	ldr	r3, [r7, #32]
 800f196:	68db      	ldr	r3, [r3, #12]
 800f198:	899b      	ldrh	r3, [r3, #12]
 800f19a:	b29b      	uxth	r3, r3
 800f19c:	4618      	mov	r0, r3
 800f19e:	f7f9 f8bd 	bl	800831c <lwip_htons>
 800f1a2:	4603      	mov	r3, r0
 800f1a4:	b2db      	uxtb	r3, r3
 800f1a6:	f003 0301 	and.w	r3, r3, #1
 800f1aa:	2b00      	cmp	r3, #0
 800f1ac:	d005      	beq.n	800f1ba <tcp_zero_window_probe+0x72>
 800f1ae:	6a3b      	ldr	r3, [r7, #32]
 800f1b0:	891b      	ldrh	r3, [r3, #8]
 800f1b2:	2b00      	cmp	r3, #0
 800f1b4:	d101      	bne.n	800f1ba <tcp_zero_window_probe+0x72>
 800f1b6:	2301      	movs	r3, #1
 800f1b8:	e000      	b.n	800f1bc <tcp_zero_window_probe+0x74>
 800f1ba:	2300      	movs	r3, #0
 800f1bc:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 800f1be:	7ffb      	ldrb	r3, [r7, #31]
 800f1c0:	2b00      	cmp	r3, #0
 800f1c2:	bf0c      	ite	eq
 800f1c4:	2301      	moveq	r3, #1
 800f1c6:	2300      	movne	r3, #0
 800f1c8:	b2db      	uxtb	r3, r3
 800f1ca:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 800f1cc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800f1d0:	b299      	uxth	r1, r3
 800f1d2:	6a3b      	ldr	r3, [r7, #32]
 800f1d4:	68db      	ldr	r3, [r3, #12]
 800f1d6:	685b      	ldr	r3, [r3, #4]
 800f1d8:	8bba      	ldrh	r2, [r7, #28]
 800f1da:	6878      	ldr	r0, [r7, #4]
 800f1dc:	f7ff fdfa 	bl	800edd4 <tcp_output_alloc_header>
 800f1e0:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 800f1e2:	69bb      	ldr	r3, [r7, #24]
 800f1e4:	2b00      	cmp	r3, #0
 800f1e6:	d102      	bne.n	800f1ee <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 800f1e8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800f1ec:	e04c      	b.n	800f288 <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 800f1ee:	69bb      	ldr	r3, [r7, #24]
 800f1f0:	685b      	ldr	r3, [r3, #4]
 800f1f2:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 800f1f4:	7ffb      	ldrb	r3, [r7, #31]
 800f1f6:	2b00      	cmp	r3, #0
 800f1f8:	d011      	beq.n	800f21e <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 800f1fa:	697b      	ldr	r3, [r7, #20]
 800f1fc:	899b      	ldrh	r3, [r3, #12]
 800f1fe:	b29b      	uxth	r3, r3
 800f200:	b21b      	sxth	r3, r3
 800f202:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800f206:	b21c      	sxth	r4, r3
 800f208:	2011      	movs	r0, #17
 800f20a:	f7f9 f887 	bl	800831c <lwip_htons>
 800f20e:	4603      	mov	r3, r0
 800f210:	b21b      	sxth	r3, r3
 800f212:	4323      	orrs	r3, r4
 800f214:	b21b      	sxth	r3, r3
 800f216:	b29a      	uxth	r2, r3
 800f218:	697b      	ldr	r3, [r7, #20]
 800f21a:	819a      	strh	r2, [r3, #12]
 800f21c:	e010      	b.n	800f240 <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 800f21e:	69bb      	ldr	r3, [r7, #24]
 800f220:	685b      	ldr	r3, [r3, #4]
 800f222:	3314      	adds	r3, #20
 800f224:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 800f226:	6a3b      	ldr	r3, [r7, #32]
 800f228:	6858      	ldr	r0, [r3, #4]
 800f22a:	6a3b      	ldr	r3, [r7, #32]
 800f22c:	685b      	ldr	r3, [r3, #4]
 800f22e:	891a      	ldrh	r2, [r3, #8]
 800f230:	6a3b      	ldr	r3, [r7, #32]
 800f232:	891b      	ldrh	r3, [r3, #8]
 800f234:	1ad3      	subs	r3, r2, r3
 800f236:	b29b      	uxth	r3, r3
 800f238:	2201      	movs	r2, #1
 800f23a:	6939      	ldr	r1, [r7, #16]
 800f23c:	f7fa fe56 	bl	8009eec <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 800f240:	6a3b      	ldr	r3, [r7, #32]
 800f242:	68db      	ldr	r3, [r3, #12]
 800f244:	685b      	ldr	r3, [r3, #4]
 800f246:	4618      	mov	r0, r3
 800f248:	f7f9 f87d 	bl	8008346 <lwip_htonl>
 800f24c:	4603      	mov	r3, r0
 800f24e:	3301      	adds	r3, #1
 800f250:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 800f252:	687b      	ldr	r3, [r7, #4]
 800f254:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800f256:	68fb      	ldr	r3, [r7, #12]
 800f258:	1ad3      	subs	r3, r2, r3
 800f25a:	2b00      	cmp	r3, #0
 800f25c:	da02      	bge.n	800f264 <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
 800f25e:	687b      	ldr	r3, [r7, #4]
 800f260:	68fa      	ldr	r2, [r7, #12]
 800f262:	651a      	str	r2, [r3, #80]	@ 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800f264:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800f268:	2200      	movs	r2, #0
 800f26a:	69b9      	ldr	r1, [r7, #24]
 800f26c:	6878      	ldr	r0, [r7, #4]
 800f26e:	f7ff fdef 	bl	800ee50 <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800f272:	687a      	ldr	r2, [r7, #4]
 800f274:	687b      	ldr	r3, [r7, #4]
 800f276:	3304      	adds	r3, #4
 800f278:	69b9      	ldr	r1, [r7, #24]
 800f27a:	6878      	ldr	r0, [r7, #4]
 800f27c:	f7ff fe26 	bl	800eecc <tcp_output_control_segment>
 800f280:	4603      	mov	r3, r0
 800f282:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 800f284:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 800f288:	4618      	mov	r0, r3
 800f28a:	372c      	adds	r7, #44	@ 0x2c
 800f28c:	46bd      	mov	sp, r7
 800f28e:	bd90      	pop	{r4, r7, pc}
 800f290:	08014978 	.word	0x08014978
 800f294:	08015170 	.word	0x08015170
 800f298:	080149cc 	.word	0x080149cc

0800f29c <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 800f29c:	b580      	push	{r7, lr}
 800f29e:	b082      	sub	sp, #8
 800f2a0:	af00      	add	r7, sp, #0
 800f2a2:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 800f2a4:	f7fa ff10 	bl	800a0c8 <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 800f2a8:	4b0a      	ldr	r3, [pc, #40]	@ (800f2d4 <tcpip_tcp_timer+0x38>)
 800f2aa:	681b      	ldr	r3, [r3, #0]
 800f2ac:	2b00      	cmp	r3, #0
 800f2ae:	d103      	bne.n	800f2b8 <tcpip_tcp_timer+0x1c>
 800f2b0:	4b09      	ldr	r3, [pc, #36]	@ (800f2d8 <tcpip_tcp_timer+0x3c>)
 800f2b2:	681b      	ldr	r3, [r3, #0]
 800f2b4:	2b00      	cmp	r3, #0
 800f2b6:	d005      	beq.n	800f2c4 <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 800f2b8:	2200      	movs	r2, #0
 800f2ba:	4908      	ldr	r1, [pc, #32]	@ (800f2dc <tcpip_tcp_timer+0x40>)
 800f2bc:	20fa      	movs	r0, #250	@ 0xfa
 800f2be:	f000 f8f3 	bl	800f4a8 <sys_timeout>
 800f2c2:	e003      	b.n	800f2cc <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 800f2c4:	4b06      	ldr	r3, [pc, #24]	@ (800f2e0 <tcpip_tcp_timer+0x44>)
 800f2c6:	2200      	movs	r2, #0
 800f2c8:	601a      	str	r2, [r3, #0]
  }
}
 800f2ca:	bf00      	nop
 800f2cc:	bf00      	nop
 800f2ce:	3708      	adds	r7, #8
 800f2d0:	46bd      	mov	sp, r7
 800f2d2:	bd80      	pop	{r7, pc}
 800f2d4:	20010108 	.word	0x20010108
 800f2d8:	2001010c 	.word	0x2001010c
 800f2dc:	0800f29d 	.word	0x0800f29d
 800f2e0:	20010154 	.word	0x20010154

0800f2e4 <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 800f2e4:	b580      	push	{r7, lr}
 800f2e6:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 800f2e8:	4b0a      	ldr	r3, [pc, #40]	@ (800f314 <tcp_timer_needed+0x30>)
 800f2ea:	681b      	ldr	r3, [r3, #0]
 800f2ec:	2b00      	cmp	r3, #0
 800f2ee:	d10f      	bne.n	800f310 <tcp_timer_needed+0x2c>
 800f2f0:	4b09      	ldr	r3, [pc, #36]	@ (800f318 <tcp_timer_needed+0x34>)
 800f2f2:	681b      	ldr	r3, [r3, #0]
 800f2f4:	2b00      	cmp	r3, #0
 800f2f6:	d103      	bne.n	800f300 <tcp_timer_needed+0x1c>
 800f2f8:	4b08      	ldr	r3, [pc, #32]	@ (800f31c <tcp_timer_needed+0x38>)
 800f2fa:	681b      	ldr	r3, [r3, #0]
 800f2fc:	2b00      	cmp	r3, #0
 800f2fe:	d007      	beq.n	800f310 <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 800f300:	4b04      	ldr	r3, [pc, #16]	@ (800f314 <tcp_timer_needed+0x30>)
 800f302:	2201      	movs	r2, #1
 800f304:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 800f306:	2200      	movs	r2, #0
 800f308:	4905      	ldr	r1, [pc, #20]	@ (800f320 <tcp_timer_needed+0x3c>)
 800f30a:	20fa      	movs	r0, #250	@ 0xfa
 800f30c:	f000 f8cc 	bl	800f4a8 <sys_timeout>
  }
}
 800f310:	bf00      	nop
 800f312:	bd80      	pop	{r7, pc}
 800f314:	20010154 	.word	0x20010154
 800f318:	20010108 	.word	0x20010108
 800f31c:	2001010c 	.word	0x2001010c
 800f320:	0800f29d 	.word	0x0800f29d

0800f324 <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 800f324:	b580      	push	{r7, lr}
 800f326:	b086      	sub	sp, #24
 800f328:	af00      	add	r7, sp, #0
 800f32a:	60f8      	str	r0, [r7, #12]
 800f32c:	60b9      	str	r1, [r7, #8]
 800f32e:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 800f330:	200a      	movs	r0, #10
 800f332:	f7f9 fccb 	bl	8008ccc <memp_malloc>
 800f336:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 800f338:	693b      	ldr	r3, [r7, #16]
 800f33a:	2b00      	cmp	r3, #0
 800f33c:	d109      	bne.n	800f352 <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 800f33e:	693b      	ldr	r3, [r7, #16]
 800f340:	2b00      	cmp	r3, #0
 800f342:	d151      	bne.n	800f3e8 <sys_timeout_abs+0xc4>
 800f344:	4b2a      	ldr	r3, [pc, #168]	@ (800f3f0 <sys_timeout_abs+0xcc>)
 800f346:	22be      	movs	r2, #190	@ 0xbe
 800f348:	492a      	ldr	r1, [pc, #168]	@ (800f3f4 <sys_timeout_abs+0xd0>)
 800f34a:	482b      	ldr	r0, [pc, #172]	@ (800f3f8 <sys_timeout_abs+0xd4>)
 800f34c:	f002 ffb6 	bl	80122bc <iprintf>
    return;
 800f350:	e04a      	b.n	800f3e8 <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 800f352:	693b      	ldr	r3, [r7, #16]
 800f354:	2200      	movs	r2, #0
 800f356:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 800f358:	693b      	ldr	r3, [r7, #16]
 800f35a:	68ba      	ldr	r2, [r7, #8]
 800f35c:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 800f35e:	693b      	ldr	r3, [r7, #16]
 800f360:	687a      	ldr	r2, [r7, #4]
 800f362:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 800f364:	693b      	ldr	r3, [r7, #16]
 800f366:	68fa      	ldr	r2, [r7, #12]
 800f368:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 800f36a:	4b24      	ldr	r3, [pc, #144]	@ (800f3fc <sys_timeout_abs+0xd8>)
 800f36c:	681b      	ldr	r3, [r3, #0]
 800f36e:	2b00      	cmp	r3, #0
 800f370:	d103      	bne.n	800f37a <sys_timeout_abs+0x56>
    next_timeout = timeout;
 800f372:	4a22      	ldr	r2, [pc, #136]	@ (800f3fc <sys_timeout_abs+0xd8>)
 800f374:	693b      	ldr	r3, [r7, #16]
 800f376:	6013      	str	r3, [r2, #0]
    return;
 800f378:	e037      	b.n	800f3ea <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 800f37a:	693b      	ldr	r3, [r7, #16]
 800f37c:	685a      	ldr	r2, [r3, #4]
 800f37e:	4b1f      	ldr	r3, [pc, #124]	@ (800f3fc <sys_timeout_abs+0xd8>)
 800f380:	681b      	ldr	r3, [r3, #0]
 800f382:	685b      	ldr	r3, [r3, #4]
 800f384:	1ad3      	subs	r3, r2, r3
 800f386:	0fdb      	lsrs	r3, r3, #31
 800f388:	f003 0301 	and.w	r3, r3, #1
 800f38c:	b2db      	uxtb	r3, r3
 800f38e:	2b00      	cmp	r3, #0
 800f390:	d007      	beq.n	800f3a2 <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 800f392:	4b1a      	ldr	r3, [pc, #104]	@ (800f3fc <sys_timeout_abs+0xd8>)
 800f394:	681a      	ldr	r2, [r3, #0]
 800f396:	693b      	ldr	r3, [r7, #16]
 800f398:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 800f39a:	4a18      	ldr	r2, [pc, #96]	@ (800f3fc <sys_timeout_abs+0xd8>)
 800f39c:	693b      	ldr	r3, [r7, #16]
 800f39e:	6013      	str	r3, [r2, #0]
 800f3a0:	e023      	b.n	800f3ea <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 800f3a2:	4b16      	ldr	r3, [pc, #88]	@ (800f3fc <sys_timeout_abs+0xd8>)
 800f3a4:	681b      	ldr	r3, [r3, #0]
 800f3a6:	617b      	str	r3, [r7, #20]
 800f3a8:	e01a      	b.n	800f3e0 <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 800f3aa:	697b      	ldr	r3, [r7, #20]
 800f3ac:	681b      	ldr	r3, [r3, #0]
 800f3ae:	2b00      	cmp	r3, #0
 800f3b0:	d00b      	beq.n	800f3ca <sys_timeout_abs+0xa6>
 800f3b2:	693b      	ldr	r3, [r7, #16]
 800f3b4:	685a      	ldr	r2, [r3, #4]
 800f3b6:	697b      	ldr	r3, [r7, #20]
 800f3b8:	681b      	ldr	r3, [r3, #0]
 800f3ba:	685b      	ldr	r3, [r3, #4]
 800f3bc:	1ad3      	subs	r3, r2, r3
 800f3be:	0fdb      	lsrs	r3, r3, #31
 800f3c0:	f003 0301 	and.w	r3, r3, #1
 800f3c4:	b2db      	uxtb	r3, r3
 800f3c6:	2b00      	cmp	r3, #0
 800f3c8:	d007      	beq.n	800f3da <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 800f3ca:	697b      	ldr	r3, [r7, #20]
 800f3cc:	681a      	ldr	r2, [r3, #0]
 800f3ce:	693b      	ldr	r3, [r7, #16]
 800f3d0:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 800f3d2:	697b      	ldr	r3, [r7, #20]
 800f3d4:	693a      	ldr	r2, [r7, #16]
 800f3d6:	601a      	str	r2, [r3, #0]
        break;
 800f3d8:	e007      	b.n	800f3ea <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 800f3da:	697b      	ldr	r3, [r7, #20]
 800f3dc:	681b      	ldr	r3, [r3, #0]
 800f3de:	617b      	str	r3, [r7, #20]
 800f3e0:	697b      	ldr	r3, [r7, #20]
 800f3e2:	2b00      	cmp	r3, #0
 800f3e4:	d1e1      	bne.n	800f3aa <sys_timeout_abs+0x86>
 800f3e6:	e000      	b.n	800f3ea <sys_timeout_abs+0xc6>
    return;
 800f3e8:	bf00      	nop
      }
    }
  }
}
 800f3ea:	3718      	adds	r7, #24
 800f3ec:	46bd      	mov	sp, r7
 800f3ee:	bd80      	pop	{r7, pc}
 800f3f0:	08015194 	.word	0x08015194
 800f3f4:	080151c8 	.word	0x080151c8
 800f3f8:	08015208 	.word	0x08015208
 800f3fc:	2001014c 	.word	0x2001014c

0800f400 <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 800f400:	b580      	push	{r7, lr}
 800f402:	b086      	sub	sp, #24
 800f404:	af00      	add	r7, sp, #0
 800f406:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 800f408:	687b      	ldr	r3, [r7, #4]
 800f40a:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 800f40c:	697b      	ldr	r3, [r7, #20]
 800f40e:	685b      	ldr	r3, [r3, #4]
 800f410:	4798      	blx	r3

  now = sys_now();
 800f412:	f7f4 fd5d 	bl	8003ed0 <sys_now>
 800f416:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 800f418:	697b      	ldr	r3, [r7, #20]
 800f41a:	681a      	ldr	r2, [r3, #0]
 800f41c:	4b0f      	ldr	r3, [pc, #60]	@ (800f45c <lwip_cyclic_timer+0x5c>)
 800f41e:	681b      	ldr	r3, [r3, #0]
 800f420:	4413      	add	r3, r2
 800f422:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 800f424:	68fa      	ldr	r2, [r7, #12]
 800f426:	693b      	ldr	r3, [r7, #16]
 800f428:	1ad3      	subs	r3, r2, r3
 800f42a:	0fdb      	lsrs	r3, r3, #31
 800f42c:	f003 0301 	and.w	r3, r3, #1
 800f430:	b2db      	uxtb	r3, r3
 800f432:	2b00      	cmp	r3, #0
 800f434:	d009      	beq.n	800f44a <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 800f436:	697b      	ldr	r3, [r7, #20]
 800f438:	681a      	ldr	r2, [r3, #0]
 800f43a:	693b      	ldr	r3, [r7, #16]
 800f43c:	4413      	add	r3, r2
 800f43e:	687a      	ldr	r2, [r7, #4]
 800f440:	4907      	ldr	r1, [pc, #28]	@ (800f460 <lwip_cyclic_timer+0x60>)
 800f442:	4618      	mov	r0, r3
 800f444:	f7ff ff6e 	bl	800f324 <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 800f448:	e004      	b.n	800f454 <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 800f44a:	687a      	ldr	r2, [r7, #4]
 800f44c:	4904      	ldr	r1, [pc, #16]	@ (800f460 <lwip_cyclic_timer+0x60>)
 800f44e:	68f8      	ldr	r0, [r7, #12]
 800f450:	f7ff ff68 	bl	800f324 <sys_timeout_abs>
}
 800f454:	bf00      	nop
 800f456:	3718      	adds	r7, #24
 800f458:	46bd      	mov	sp, r7
 800f45a:	bd80      	pop	{r7, pc}
 800f45c:	20010150 	.word	0x20010150
 800f460:	0800f401 	.word	0x0800f401

0800f464 <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 800f464:	b580      	push	{r7, lr}
 800f466:	b082      	sub	sp, #8
 800f468:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 800f46a:	2301      	movs	r3, #1
 800f46c:	607b      	str	r3, [r7, #4]
 800f46e:	e00e      	b.n	800f48e <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 800f470:	4a0b      	ldr	r2, [pc, #44]	@ (800f4a0 <sys_timeouts_init+0x3c>)
 800f472:	687b      	ldr	r3, [r7, #4]
 800f474:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 800f478:	687b      	ldr	r3, [r7, #4]
 800f47a:	00db      	lsls	r3, r3, #3
 800f47c:	4a08      	ldr	r2, [pc, #32]	@ (800f4a0 <sys_timeouts_init+0x3c>)
 800f47e:	4413      	add	r3, r2
 800f480:	461a      	mov	r2, r3
 800f482:	4908      	ldr	r1, [pc, #32]	@ (800f4a4 <sys_timeouts_init+0x40>)
 800f484:	f000 f810 	bl	800f4a8 <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 800f488:	687b      	ldr	r3, [r7, #4]
 800f48a:	3301      	adds	r3, #1
 800f48c:	607b      	str	r3, [r7, #4]
 800f48e:	687b      	ldr	r3, [r7, #4]
 800f490:	2b02      	cmp	r3, #2
 800f492:	d9ed      	bls.n	800f470 <sys_timeouts_init+0xc>
  }
}
 800f494:	bf00      	nop
 800f496:	bf00      	nop
 800f498:	3708      	adds	r7, #8
 800f49a:	46bd      	mov	sp, r7
 800f49c:	bd80      	pop	{r7, pc}
 800f49e:	bf00      	nop
 800f4a0:	08015de4 	.word	0x08015de4
 800f4a4:	0800f401 	.word	0x0800f401

0800f4a8 <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 800f4a8:	b580      	push	{r7, lr}
 800f4aa:	b086      	sub	sp, #24
 800f4ac:	af00      	add	r7, sp, #0
 800f4ae:	60f8      	str	r0, [r7, #12]
 800f4b0:	60b9      	str	r1, [r7, #8]
 800f4b2:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 800f4b4:	68fb      	ldr	r3, [r7, #12]
 800f4b6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800f4ba:	d306      	bcc.n	800f4ca <sys_timeout+0x22>
 800f4bc:	4b0a      	ldr	r3, [pc, #40]	@ (800f4e8 <sys_timeout+0x40>)
 800f4be:	f240 1229 	movw	r2, #297	@ 0x129
 800f4c2:	490a      	ldr	r1, [pc, #40]	@ (800f4ec <sys_timeout+0x44>)
 800f4c4:	480a      	ldr	r0, [pc, #40]	@ (800f4f0 <sys_timeout+0x48>)
 800f4c6:	f002 fef9 	bl	80122bc <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 800f4ca:	f7f4 fd01 	bl	8003ed0 <sys_now>
 800f4ce:	4602      	mov	r2, r0
 800f4d0:	68fb      	ldr	r3, [r7, #12]
 800f4d2:	4413      	add	r3, r2
 800f4d4:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 800f4d6:	687a      	ldr	r2, [r7, #4]
 800f4d8:	68b9      	ldr	r1, [r7, #8]
 800f4da:	6978      	ldr	r0, [r7, #20]
 800f4dc:	f7ff ff22 	bl	800f324 <sys_timeout_abs>
#endif
}
 800f4e0:	bf00      	nop
 800f4e2:	3718      	adds	r7, #24
 800f4e4:	46bd      	mov	sp, r7
 800f4e6:	bd80      	pop	{r7, pc}
 800f4e8:	08015194 	.word	0x08015194
 800f4ec:	08015230 	.word	0x08015230
 800f4f0:	08015208 	.word	0x08015208

0800f4f4 <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 800f4f4:	b580      	push	{r7, lr}
 800f4f6:	b084      	sub	sp, #16
 800f4f8:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 800f4fa:	f7f4 fce9 	bl	8003ed0 <sys_now>
 800f4fe:	60f8      	str	r0, [r7, #12]
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();

    tmptimeout = next_timeout;
 800f500:	4b17      	ldr	r3, [pc, #92]	@ (800f560 <sys_check_timeouts+0x6c>)
 800f502:	681b      	ldr	r3, [r3, #0]
 800f504:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 800f506:	68bb      	ldr	r3, [r7, #8]
 800f508:	2b00      	cmp	r3, #0
 800f50a:	d022      	beq.n	800f552 <sys_check_timeouts+0x5e>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 800f50c:	68bb      	ldr	r3, [r7, #8]
 800f50e:	685b      	ldr	r3, [r3, #4]
 800f510:	68fa      	ldr	r2, [r7, #12]
 800f512:	1ad3      	subs	r3, r2, r3
 800f514:	0fdb      	lsrs	r3, r3, #31
 800f516:	f003 0301 	and.w	r3, r3, #1
 800f51a:	b2db      	uxtb	r3, r3
 800f51c:	2b00      	cmp	r3, #0
 800f51e:	d11a      	bne.n	800f556 <sys_check_timeouts+0x62>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 800f520:	68bb      	ldr	r3, [r7, #8]
 800f522:	681b      	ldr	r3, [r3, #0]
 800f524:	4a0e      	ldr	r2, [pc, #56]	@ (800f560 <sys_check_timeouts+0x6c>)
 800f526:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 800f528:	68bb      	ldr	r3, [r7, #8]
 800f52a:	689b      	ldr	r3, [r3, #8]
 800f52c:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 800f52e:	68bb      	ldr	r3, [r7, #8]
 800f530:	68db      	ldr	r3, [r3, #12]
 800f532:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 800f534:	68bb      	ldr	r3, [r7, #8]
 800f536:	685b      	ldr	r3, [r3, #4]
 800f538:	4a0a      	ldr	r2, [pc, #40]	@ (800f564 <sys_check_timeouts+0x70>)
 800f53a:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 800f53c:	68b9      	ldr	r1, [r7, #8]
 800f53e:	200a      	movs	r0, #10
 800f540:	f7f9 fc3a 	bl	8008db8 <memp_free>
    if (handler != NULL) {
 800f544:	687b      	ldr	r3, [r7, #4]
 800f546:	2b00      	cmp	r3, #0
 800f548:	d0da      	beq.n	800f500 <sys_check_timeouts+0xc>
      handler(arg);
 800f54a:	687b      	ldr	r3, [r7, #4]
 800f54c:	6838      	ldr	r0, [r7, #0]
 800f54e:	4798      	blx	r3
  do {
 800f550:	e7d6      	b.n	800f500 <sys_check_timeouts+0xc>
      return;
 800f552:	bf00      	nop
 800f554:	e000      	b.n	800f558 <sys_check_timeouts+0x64>
      return;
 800f556:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 800f558:	3710      	adds	r7, #16
 800f55a:	46bd      	mov	sp, r7
 800f55c:	bd80      	pop	{r7, pc}
 800f55e:	bf00      	nop
 800f560:	2001014c 	.word	0x2001014c
 800f564:	20010150 	.word	0x20010150

0800f568 <sys_timeouts_sleeptime>:
/** Return the time left before the next timeout is due. If no timeouts are
 * enqueued, returns 0xffffffff
 */
u32_t
sys_timeouts_sleeptime(void)
{
 800f568:	b580      	push	{r7, lr}
 800f56a:	b082      	sub	sp, #8
 800f56c:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  if (next_timeout == NULL) {
 800f56e:	4b16      	ldr	r3, [pc, #88]	@ (800f5c8 <sys_timeouts_sleeptime+0x60>)
 800f570:	681b      	ldr	r3, [r3, #0]
 800f572:	2b00      	cmp	r3, #0
 800f574:	d102      	bne.n	800f57c <sys_timeouts_sleeptime+0x14>
    return SYS_TIMEOUTS_SLEEPTIME_INFINITE;
 800f576:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800f57a:	e020      	b.n	800f5be <sys_timeouts_sleeptime+0x56>
  }
  now = sys_now();
 800f57c:	f7f4 fca8 	bl	8003ed0 <sys_now>
 800f580:	6078      	str	r0, [r7, #4]
  if (TIME_LESS_THAN(next_timeout->time, now)) {
 800f582:	4b11      	ldr	r3, [pc, #68]	@ (800f5c8 <sys_timeouts_sleeptime+0x60>)
 800f584:	681b      	ldr	r3, [r3, #0]
 800f586:	685a      	ldr	r2, [r3, #4]
 800f588:	687b      	ldr	r3, [r7, #4]
 800f58a:	1ad3      	subs	r3, r2, r3
 800f58c:	0fdb      	lsrs	r3, r3, #31
 800f58e:	f003 0301 	and.w	r3, r3, #1
 800f592:	b2db      	uxtb	r3, r3
 800f594:	2b00      	cmp	r3, #0
 800f596:	d001      	beq.n	800f59c <sys_timeouts_sleeptime+0x34>
    return 0;
 800f598:	2300      	movs	r3, #0
 800f59a:	e010      	b.n	800f5be <sys_timeouts_sleeptime+0x56>
  } else {
    u32_t ret = (u32_t)(next_timeout->time - now);
 800f59c:	4b0a      	ldr	r3, [pc, #40]	@ (800f5c8 <sys_timeouts_sleeptime+0x60>)
 800f59e:	681b      	ldr	r3, [r3, #0]
 800f5a0:	685a      	ldr	r2, [r3, #4]
 800f5a2:	687b      	ldr	r3, [r7, #4]
 800f5a4:	1ad3      	subs	r3, r2, r3
 800f5a6:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("invalid sleeptime", ret <= LWIP_MAX_TIMEOUT);
 800f5a8:	683b      	ldr	r3, [r7, #0]
 800f5aa:	2b00      	cmp	r3, #0
 800f5ac:	da06      	bge.n	800f5bc <sys_timeouts_sleeptime+0x54>
 800f5ae:	4b07      	ldr	r3, [pc, #28]	@ (800f5cc <sys_timeouts_sleeptime+0x64>)
 800f5b0:	f44f 72dc 	mov.w	r2, #440	@ 0x1b8
 800f5b4:	4906      	ldr	r1, [pc, #24]	@ (800f5d0 <sys_timeouts_sleeptime+0x68>)
 800f5b6:	4807      	ldr	r0, [pc, #28]	@ (800f5d4 <sys_timeouts_sleeptime+0x6c>)
 800f5b8:	f002 fe80 	bl	80122bc <iprintf>
    return ret;
 800f5bc:	683b      	ldr	r3, [r7, #0]
  }
}
 800f5be:	4618      	mov	r0, r3
 800f5c0:	3708      	adds	r7, #8
 800f5c2:	46bd      	mov	sp, r7
 800f5c4:	bd80      	pop	{r7, pc}
 800f5c6:	bf00      	nop
 800f5c8:	2001014c 	.word	0x2001014c
 800f5cc:	08015194 	.word	0x08015194
 800f5d0:	08015268 	.word	0x08015268
 800f5d4:	08015208 	.word	0x08015208

0800f5d8 <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 800f5d8:	b580      	push	{r7, lr}
 800f5da:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 800f5dc:	f002 fd6e 	bl	80120bc <rand>
 800f5e0:	4603      	mov	r3, r0
 800f5e2:	b29b      	uxth	r3, r3
 800f5e4:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800f5e8:	b29b      	uxth	r3, r3
 800f5ea:	f5a3 4380 	sub.w	r3, r3, #16384	@ 0x4000
 800f5ee:	b29a      	uxth	r2, r3
 800f5f0:	4b01      	ldr	r3, [pc, #4]	@ (800f5f8 <udp_init+0x20>)
 800f5f2:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 800f5f4:	bf00      	nop
 800f5f6:	bd80      	pop	{r7, pc}
 800f5f8:	2000002c 	.word	0x2000002c

0800f5fc <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 800f5fc:	b580      	push	{r7, lr}
 800f5fe:	b084      	sub	sp, #16
 800f600:	af00      	add	r7, sp, #0
 800f602:	60f8      	str	r0, [r7, #12]
 800f604:	60b9      	str	r1, [r7, #8]
 800f606:	4613      	mov	r3, r2
 800f608:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 800f60a:	68fb      	ldr	r3, [r7, #12]
 800f60c:	2b00      	cmp	r3, #0
 800f60e:	d105      	bne.n	800f61c <udp_input_local_match+0x20>
 800f610:	4b27      	ldr	r3, [pc, #156]	@ (800f6b0 <udp_input_local_match+0xb4>)
 800f612:	2287      	movs	r2, #135	@ 0x87
 800f614:	4927      	ldr	r1, [pc, #156]	@ (800f6b4 <udp_input_local_match+0xb8>)
 800f616:	4828      	ldr	r0, [pc, #160]	@ (800f6b8 <udp_input_local_match+0xbc>)
 800f618:	f002 fe50 	bl	80122bc <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 800f61c:	68bb      	ldr	r3, [r7, #8]
 800f61e:	2b00      	cmp	r3, #0
 800f620:	d105      	bne.n	800f62e <udp_input_local_match+0x32>
 800f622:	4b23      	ldr	r3, [pc, #140]	@ (800f6b0 <udp_input_local_match+0xb4>)
 800f624:	2288      	movs	r2, #136	@ 0x88
 800f626:	4925      	ldr	r1, [pc, #148]	@ (800f6bc <udp_input_local_match+0xc0>)
 800f628:	4823      	ldr	r0, [pc, #140]	@ (800f6b8 <udp_input_local_match+0xbc>)
 800f62a:	f002 fe47 	bl	80122bc <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800f62e:	68fb      	ldr	r3, [r7, #12]
 800f630:	7a1b      	ldrb	r3, [r3, #8]
 800f632:	2b00      	cmp	r3, #0
 800f634:	d00b      	beq.n	800f64e <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800f636:	68fb      	ldr	r3, [r7, #12]
 800f638:	7a1a      	ldrb	r2, [r3, #8]
 800f63a:	4b21      	ldr	r3, [pc, #132]	@ (800f6c0 <udp_input_local_match+0xc4>)
 800f63c:	685b      	ldr	r3, [r3, #4]
 800f63e:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800f642:	3301      	adds	r3, #1
 800f644:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800f646:	429a      	cmp	r2, r3
 800f648:	d001      	beq.n	800f64e <udp_input_local_match+0x52>
    return 0;
 800f64a:	2300      	movs	r3, #0
 800f64c:	e02b      	b.n	800f6a6 <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 800f64e:	79fb      	ldrb	r3, [r7, #7]
 800f650:	2b00      	cmp	r3, #0
 800f652:	d018      	beq.n	800f686 <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800f654:	68fb      	ldr	r3, [r7, #12]
 800f656:	2b00      	cmp	r3, #0
 800f658:	d013      	beq.n	800f682 <udp_input_local_match+0x86>
 800f65a:	68fb      	ldr	r3, [r7, #12]
 800f65c:	681b      	ldr	r3, [r3, #0]
 800f65e:	2b00      	cmp	r3, #0
 800f660:	d00f      	beq.n	800f682 <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 800f662:	4b17      	ldr	r3, [pc, #92]	@ (800f6c0 <udp_input_local_match+0xc4>)
 800f664:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800f666:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800f66a:	d00a      	beq.n	800f682 <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 800f66c:	68fb      	ldr	r3, [r7, #12]
 800f66e:	681a      	ldr	r2, [r3, #0]
 800f670:	4b13      	ldr	r3, [pc, #76]	@ (800f6c0 <udp_input_local_match+0xc4>)
 800f672:	695b      	ldr	r3, [r3, #20]
 800f674:	405a      	eors	r2, r3
 800f676:	68bb      	ldr	r3, [r7, #8]
 800f678:	3308      	adds	r3, #8
 800f67a:	681b      	ldr	r3, [r3, #0]
 800f67c:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 800f67e:	2b00      	cmp	r3, #0
 800f680:	d110      	bne.n	800f6a4 <udp_input_local_match+0xa8>
          return 1;
 800f682:	2301      	movs	r3, #1
 800f684:	e00f      	b.n	800f6a6 <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800f686:	68fb      	ldr	r3, [r7, #12]
 800f688:	2b00      	cmp	r3, #0
 800f68a:	d009      	beq.n	800f6a0 <udp_input_local_match+0xa4>
 800f68c:	68fb      	ldr	r3, [r7, #12]
 800f68e:	681b      	ldr	r3, [r3, #0]
 800f690:	2b00      	cmp	r3, #0
 800f692:	d005      	beq.n	800f6a0 <udp_input_local_match+0xa4>
 800f694:	68fb      	ldr	r3, [r7, #12]
 800f696:	681a      	ldr	r2, [r3, #0]
 800f698:	4b09      	ldr	r3, [pc, #36]	@ (800f6c0 <udp_input_local_match+0xc4>)
 800f69a:	695b      	ldr	r3, [r3, #20]
 800f69c:	429a      	cmp	r2, r3
 800f69e:	d101      	bne.n	800f6a4 <udp_input_local_match+0xa8>
        return 1;
 800f6a0:	2301      	movs	r3, #1
 800f6a2:	e000      	b.n	800f6a6 <udp_input_local_match+0xaa>
      }
  }

  return 0;
 800f6a4:	2300      	movs	r3, #0
}
 800f6a6:	4618      	mov	r0, r3
 800f6a8:	3710      	adds	r7, #16
 800f6aa:	46bd      	mov	sp, r7
 800f6ac:	bd80      	pop	{r7, pc}
 800f6ae:	bf00      	nop
 800f6b0:	0801527c 	.word	0x0801527c
 800f6b4:	080152ac 	.word	0x080152ac
 800f6b8:	080152d0 	.word	0x080152d0
 800f6bc:	080152f8 	.word	0x080152f8
 800f6c0:	2000a7e8 	.word	0x2000a7e8

0800f6c4 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 800f6c4:	b590      	push	{r4, r7, lr}
 800f6c6:	b08d      	sub	sp, #52	@ 0x34
 800f6c8:	af02      	add	r7, sp, #8
 800f6ca:	6078      	str	r0, [r7, #4]
 800f6cc:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 800f6ce:	2300      	movs	r3, #0
 800f6d0:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 800f6d2:	687b      	ldr	r3, [r7, #4]
 800f6d4:	2b00      	cmp	r3, #0
 800f6d6:	d105      	bne.n	800f6e4 <udp_input+0x20>
 800f6d8:	4b7c      	ldr	r3, [pc, #496]	@ (800f8cc <udp_input+0x208>)
 800f6da:	22cf      	movs	r2, #207	@ 0xcf
 800f6dc:	497c      	ldr	r1, [pc, #496]	@ (800f8d0 <udp_input+0x20c>)
 800f6de:	487d      	ldr	r0, [pc, #500]	@ (800f8d4 <udp_input+0x210>)
 800f6e0:	f002 fdec 	bl	80122bc <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 800f6e4:	683b      	ldr	r3, [r7, #0]
 800f6e6:	2b00      	cmp	r3, #0
 800f6e8:	d105      	bne.n	800f6f6 <udp_input+0x32>
 800f6ea:	4b78      	ldr	r3, [pc, #480]	@ (800f8cc <udp_input+0x208>)
 800f6ec:	22d0      	movs	r2, #208	@ 0xd0
 800f6ee:	497a      	ldr	r1, [pc, #488]	@ (800f8d8 <udp_input+0x214>)
 800f6f0:	4878      	ldr	r0, [pc, #480]	@ (800f8d4 <udp_input+0x210>)
 800f6f2:	f002 fde3 	bl	80122bc <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 800f6f6:	687b      	ldr	r3, [r7, #4]
 800f6f8:	895b      	ldrh	r3, [r3, #10]
 800f6fa:	2b07      	cmp	r3, #7
 800f6fc:	d803      	bhi.n	800f706 <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 800f6fe:	6878      	ldr	r0, [r7, #4]
 800f700:	f7fa f9fe 	bl	8009b00 <pbuf_free>
    goto end;
 800f704:	e0de      	b.n	800f8c4 <udp_input+0x200>
  }

  udphdr = (struct udp_hdr *)p->payload;
 800f706:	687b      	ldr	r3, [r7, #4]
 800f708:	685b      	ldr	r3, [r3, #4]
 800f70a:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 800f70c:	4b73      	ldr	r3, [pc, #460]	@ (800f8dc <udp_input+0x218>)
 800f70e:	695b      	ldr	r3, [r3, #20]
 800f710:	4a72      	ldr	r2, [pc, #456]	@ (800f8dc <udp_input+0x218>)
 800f712:	6812      	ldr	r2, [r2, #0]
 800f714:	4611      	mov	r1, r2
 800f716:	4618      	mov	r0, r3
 800f718:	f001 fc88 	bl	801102c <ip4_addr_isbroadcast_u32>
 800f71c:	4603      	mov	r3, r0
 800f71e:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 800f720:	697b      	ldr	r3, [r7, #20]
 800f722:	881b      	ldrh	r3, [r3, #0]
 800f724:	b29b      	uxth	r3, r3
 800f726:	4618      	mov	r0, r3
 800f728:	f7f8 fdf8 	bl	800831c <lwip_htons>
 800f72c:	4603      	mov	r3, r0
 800f72e:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 800f730:	697b      	ldr	r3, [r7, #20]
 800f732:	885b      	ldrh	r3, [r3, #2]
 800f734:	b29b      	uxth	r3, r3
 800f736:	4618      	mov	r0, r3
 800f738:	f7f8 fdf0 	bl	800831c <lwip_htons>
 800f73c:	4603      	mov	r3, r0
 800f73e:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 800f740:	2300      	movs	r3, #0
 800f742:	627b      	str	r3, [r7, #36]	@ 0x24
  prev = NULL;
 800f744:	2300      	movs	r3, #0
 800f746:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 800f748:	2300      	movs	r3, #0
 800f74a:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800f74c:	4b64      	ldr	r3, [pc, #400]	@ (800f8e0 <udp_input+0x21c>)
 800f74e:	681b      	ldr	r3, [r3, #0]
 800f750:	627b      	str	r3, [r7, #36]	@ 0x24
 800f752:	e054      	b.n	800f7fe <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 800f754:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f756:	8a5b      	ldrh	r3, [r3, #18]
 800f758:	89fa      	ldrh	r2, [r7, #14]
 800f75a:	429a      	cmp	r2, r3
 800f75c:	d14a      	bne.n	800f7f4 <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 800f75e:	7cfb      	ldrb	r3, [r7, #19]
 800f760:	461a      	mov	r2, r3
 800f762:	6839      	ldr	r1, [r7, #0]
 800f764:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800f766:	f7ff ff49 	bl	800f5fc <udp_input_local_match>
 800f76a:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 800f76c:	2b00      	cmp	r3, #0
 800f76e:	d041      	beq.n	800f7f4 <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 800f770:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f772:	7c1b      	ldrb	r3, [r3, #16]
 800f774:	f003 0304 	and.w	r3, r3, #4
 800f778:	2b00      	cmp	r3, #0
 800f77a:	d11d      	bne.n	800f7b8 <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 800f77c:	69fb      	ldr	r3, [r7, #28]
 800f77e:	2b00      	cmp	r3, #0
 800f780:	d102      	bne.n	800f788 <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 800f782:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f784:	61fb      	str	r3, [r7, #28]
 800f786:	e017      	b.n	800f7b8 <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 800f788:	7cfb      	ldrb	r3, [r7, #19]
 800f78a:	2b00      	cmp	r3, #0
 800f78c:	d014      	beq.n	800f7b8 <udp_input+0xf4>
 800f78e:	4b53      	ldr	r3, [pc, #332]	@ (800f8dc <udp_input+0x218>)
 800f790:	695b      	ldr	r3, [r3, #20]
 800f792:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800f796:	d10f      	bne.n	800f7b8 <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 800f798:	69fb      	ldr	r3, [r7, #28]
 800f79a:	681a      	ldr	r2, [r3, #0]
 800f79c:	683b      	ldr	r3, [r7, #0]
 800f79e:	3304      	adds	r3, #4
 800f7a0:	681b      	ldr	r3, [r3, #0]
 800f7a2:	429a      	cmp	r2, r3
 800f7a4:	d008      	beq.n	800f7b8 <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 800f7a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f7a8:	681a      	ldr	r2, [r3, #0]
 800f7aa:	683b      	ldr	r3, [r7, #0]
 800f7ac:	3304      	adds	r3, #4
 800f7ae:	681b      	ldr	r3, [r3, #0]
 800f7b0:	429a      	cmp	r2, r3
 800f7b2:	d101      	bne.n	800f7b8 <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 800f7b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f7b6:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 800f7b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f7ba:	8a9b      	ldrh	r3, [r3, #20]
 800f7bc:	8a3a      	ldrh	r2, [r7, #16]
 800f7be:	429a      	cmp	r2, r3
 800f7c0:	d118      	bne.n	800f7f4 <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 800f7c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f7c4:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 800f7c6:	2b00      	cmp	r3, #0
 800f7c8:	d005      	beq.n	800f7d6 <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 800f7ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f7cc:	685a      	ldr	r2, [r3, #4]
 800f7ce:	4b43      	ldr	r3, [pc, #268]	@ (800f8dc <udp_input+0x218>)
 800f7d0:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 800f7d2:	429a      	cmp	r2, r3
 800f7d4:	d10e      	bne.n	800f7f4 <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 800f7d6:	6a3b      	ldr	r3, [r7, #32]
 800f7d8:	2b00      	cmp	r3, #0
 800f7da:	d014      	beq.n	800f806 <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 800f7dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f7de:	68da      	ldr	r2, [r3, #12]
 800f7e0:	6a3b      	ldr	r3, [r7, #32]
 800f7e2:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 800f7e4:	4b3e      	ldr	r3, [pc, #248]	@ (800f8e0 <udp_input+0x21c>)
 800f7e6:	681a      	ldr	r2, [r3, #0]
 800f7e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f7ea:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 800f7ec:	4a3c      	ldr	r2, [pc, #240]	@ (800f8e0 <udp_input+0x21c>)
 800f7ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f7f0:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 800f7f2:	e008      	b.n	800f806 <udp_input+0x142>
      }
    }

    prev = pcb;
 800f7f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f7f6:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800f7f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f7fa:	68db      	ldr	r3, [r3, #12]
 800f7fc:	627b      	str	r3, [r7, #36]	@ 0x24
 800f7fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f800:	2b00      	cmp	r3, #0
 800f802:	d1a7      	bne.n	800f754 <udp_input+0x90>
 800f804:	e000      	b.n	800f808 <udp_input+0x144>
        break;
 800f806:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 800f808:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f80a:	2b00      	cmp	r3, #0
 800f80c:	d101      	bne.n	800f812 <udp_input+0x14e>
    pcb = uncon_pcb;
 800f80e:	69fb      	ldr	r3, [r7, #28]
 800f810:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 800f812:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f814:	2b00      	cmp	r3, #0
 800f816:	d002      	beq.n	800f81e <udp_input+0x15a>
    for_us = 1;
 800f818:	2301      	movs	r3, #1
 800f81a:	76fb      	strb	r3, [r7, #27]
 800f81c:	e00a      	b.n	800f834 <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 800f81e:	683b      	ldr	r3, [r7, #0]
 800f820:	3304      	adds	r3, #4
 800f822:	681a      	ldr	r2, [r3, #0]
 800f824:	4b2d      	ldr	r3, [pc, #180]	@ (800f8dc <udp_input+0x218>)
 800f826:	695b      	ldr	r3, [r3, #20]
 800f828:	429a      	cmp	r2, r3
 800f82a:	bf0c      	ite	eq
 800f82c:	2301      	moveq	r3, #1
 800f82e:	2300      	movne	r3, #0
 800f830:	b2db      	uxtb	r3, r3
 800f832:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 800f834:	7efb      	ldrb	r3, [r7, #27]
 800f836:	2b00      	cmp	r3, #0
 800f838:	d041      	beq.n	800f8be <udp_input+0x1fa>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 800f83a:	2108      	movs	r1, #8
 800f83c:	6878      	ldr	r0, [r7, #4]
 800f83e:	f7fa f8d9 	bl	80099f4 <pbuf_remove_header>
 800f842:	4603      	mov	r3, r0
 800f844:	2b00      	cmp	r3, #0
 800f846:	d00a      	beq.n	800f85e <udp_input+0x19a>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 800f848:	4b20      	ldr	r3, [pc, #128]	@ (800f8cc <udp_input+0x208>)
 800f84a:	f44f 72b8 	mov.w	r2, #368	@ 0x170
 800f84e:	4925      	ldr	r1, [pc, #148]	@ (800f8e4 <udp_input+0x220>)
 800f850:	4820      	ldr	r0, [pc, #128]	@ (800f8d4 <udp_input+0x210>)
 800f852:	f002 fd33 	bl	80122bc <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 800f856:	6878      	ldr	r0, [r7, #4]
 800f858:	f7fa f952 	bl	8009b00 <pbuf_free>
      goto end;
 800f85c:	e032      	b.n	800f8c4 <udp_input+0x200>
    }

    if (pcb != NULL) {
 800f85e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f860:	2b00      	cmp	r3, #0
 800f862:	d012      	beq.n	800f88a <udp_input+0x1c6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 800f864:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f866:	699b      	ldr	r3, [r3, #24]
 800f868:	2b00      	cmp	r3, #0
 800f86a:	d00a      	beq.n	800f882 <udp_input+0x1be>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 800f86c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f86e:	699c      	ldr	r4, [r3, #24]
 800f870:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f872:	69d8      	ldr	r0, [r3, #28]
 800f874:	8a3b      	ldrh	r3, [r7, #16]
 800f876:	9300      	str	r3, [sp, #0]
 800f878:	4b1b      	ldr	r3, [pc, #108]	@ (800f8e8 <udp_input+0x224>)
 800f87a:	687a      	ldr	r2, [r7, #4]
 800f87c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800f87e:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 800f880:	e021      	b.n	800f8c6 <udp_input+0x202>
        pbuf_free(p);
 800f882:	6878      	ldr	r0, [r7, #4]
 800f884:	f7fa f93c 	bl	8009b00 <pbuf_free>
        goto end;
 800f888:	e01c      	b.n	800f8c4 <udp_input+0x200>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 800f88a:	7cfb      	ldrb	r3, [r7, #19]
 800f88c:	2b00      	cmp	r3, #0
 800f88e:	d112      	bne.n	800f8b6 <udp_input+0x1f2>
 800f890:	4b12      	ldr	r3, [pc, #72]	@ (800f8dc <udp_input+0x218>)
 800f892:	695b      	ldr	r3, [r3, #20]
 800f894:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800f898:	2be0      	cmp	r3, #224	@ 0xe0
 800f89a:	d00c      	beq.n	800f8b6 <udp_input+0x1f2>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 800f89c:	4b0f      	ldr	r3, [pc, #60]	@ (800f8dc <udp_input+0x218>)
 800f89e:	899b      	ldrh	r3, [r3, #12]
 800f8a0:	3308      	adds	r3, #8
 800f8a2:	b29b      	uxth	r3, r3
 800f8a4:	b21b      	sxth	r3, r3
 800f8a6:	4619      	mov	r1, r3
 800f8a8:	6878      	ldr	r0, [r7, #4]
 800f8aa:	f7fa f916 	bl	8009ada <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 800f8ae:	2103      	movs	r1, #3
 800f8b0:	6878      	ldr	r0, [r7, #4]
 800f8b2:	f001 f89b 	bl	80109ec <icmp_dest_unreach>
      pbuf_free(p);
 800f8b6:	6878      	ldr	r0, [r7, #4]
 800f8b8:	f7fa f922 	bl	8009b00 <pbuf_free>
  return;
 800f8bc:	e003      	b.n	800f8c6 <udp_input+0x202>
    pbuf_free(p);
 800f8be:	6878      	ldr	r0, [r7, #4]
 800f8c0:	f7fa f91e 	bl	8009b00 <pbuf_free>
  return;
 800f8c4:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 800f8c6:	372c      	adds	r7, #44	@ 0x2c
 800f8c8:	46bd      	mov	sp, r7
 800f8ca:	bd90      	pop	{r4, r7, pc}
 800f8cc:	0801527c 	.word	0x0801527c
 800f8d0:	08015320 	.word	0x08015320
 800f8d4:	080152d0 	.word	0x080152d0
 800f8d8:	08015338 	.word	0x08015338
 800f8dc:	2000a7e8 	.word	0x2000a7e8
 800f8e0:	20010158 	.word	0x20010158
 800f8e4:	08015354 	.word	0x08015354
 800f8e8:	2000a7f8 	.word	0x2000a7f8

0800f8ec <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800f8ec:	b480      	push	{r7}
 800f8ee:	b085      	sub	sp, #20
 800f8f0:	af00      	add	r7, sp, #0
 800f8f2:	6078      	str	r0, [r7, #4]
 800f8f4:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 800f8f6:	687b      	ldr	r3, [r7, #4]
 800f8f8:	2b00      	cmp	r3, #0
 800f8fa:	d01e      	beq.n	800f93a <udp_netif_ip_addr_changed+0x4e>
 800f8fc:	687b      	ldr	r3, [r7, #4]
 800f8fe:	681b      	ldr	r3, [r3, #0]
 800f900:	2b00      	cmp	r3, #0
 800f902:	d01a      	beq.n	800f93a <udp_netif_ip_addr_changed+0x4e>
 800f904:	683b      	ldr	r3, [r7, #0]
 800f906:	2b00      	cmp	r3, #0
 800f908:	d017      	beq.n	800f93a <udp_netif_ip_addr_changed+0x4e>
 800f90a:	683b      	ldr	r3, [r7, #0]
 800f90c:	681b      	ldr	r3, [r3, #0]
 800f90e:	2b00      	cmp	r3, #0
 800f910:	d013      	beq.n	800f93a <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 800f912:	4b0d      	ldr	r3, [pc, #52]	@ (800f948 <udp_netif_ip_addr_changed+0x5c>)
 800f914:	681b      	ldr	r3, [r3, #0]
 800f916:	60fb      	str	r3, [r7, #12]
 800f918:	e00c      	b.n	800f934 <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 800f91a:	68fb      	ldr	r3, [r7, #12]
 800f91c:	681a      	ldr	r2, [r3, #0]
 800f91e:	687b      	ldr	r3, [r7, #4]
 800f920:	681b      	ldr	r3, [r3, #0]
 800f922:	429a      	cmp	r2, r3
 800f924:	d103      	bne.n	800f92e <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 800f926:	683b      	ldr	r3, [r7, #0]
 800f928:	681a      	ldr	r2, [r3, #0]
 800f92a:	68fb      	ldr	r3, [r7, #12]
 800f92c:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 800f92e:	68fb      	ldr	r3, [r7, #12]
 800f930:	68db      	ldr	r3, [r3, #12]
 800f932:	60fb      	str	r3, [r7, #12]
 800f934:	68fb      	ldr	r3, [r7, #12]
 800f936:	2b00      	cmp	r3, #0
 800f938:	d1ef      	bne.n	800f91a <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 800f93a:	bf00      	nop
 800f93c:	3714      	adds	r7, #20
 800f93e:	46bd      	mov	sp, r7
 800f940:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f944:	4770      	bx	lr
 800f946:	bf00      	nop
 800f948:	20010158 	.word	0x20010158

0800f94c <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 800f94c:	b580      	push	{r7, lr}
 800f94e:	b082      	sub	sp, #8
 800f950:	af00      	add	r7, sp, #0
 800f952:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 800f954:	4915      	ldr	r1, [pc, #84]	@ (800f9ac <etharp_free_entry+0x60>)
 800f956:	687a      	ldr	r2, [r7, #4]
 800f958:	4613      	mov	r3, r2
 800f95a:	005b      	lsls	r3, r3, #1
 800f95c:	4413      	add	r3, r2
 800f95e:	00db      	lsls	r3, r3, #3
 800f960:	440b      	add	r3, r1
 800f962:	681b      	ldr	r3, [r3, #0]
 800f964:	2b00      	cmp	r3, #0
 800f966:	d013      	beq.n	800f990 <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 800f968:	4910      	ldr	r1, [pc, #64]	@ (800f9ac <etharp_free_entry+0x60>)
 800f96a:	687a      	ldr	r2, [r7, #4]
 800f96c:	4613      	mov	r3, r2
 800f96e:	005b      	lsls	r3, r3, #1
 800f970:	4413      	add	r3, r2
 800f972:	00db      	lsls	r3, r3, #3
 800f974:	440b      	add	r3, r1
 800f976:	681b      	ldr	r3, [r3, #0]
 800f978:	4618      	mov	r0, r3
 800f97a:	f7fa f8c1 	bl	8009b00 <pbuf_free>
    arp_table[i].q = NULL;
 800f97e:	490b      	ldr	r1, [pc, #44]	@ (800f9ac <etharp_free_entry+0x60>)
 800f980:	687a      	ldr	r2, [r7, #4]
 800f982:	4613      	mov	r3, r2
 800f984:	005b      	lsls	r3, r3, #1
 800f986:	4413      	add	r3, r2
 800f988:	00db      	lsls	r3, r3, #3
 800f98a:	440b      	add	r3, r1
 800f98c:	2200      	movs	r2, #0
 800f98e:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 800f990:	4906      	ldr	r1, [pc, #24]	@ (800f9ac <etharp_free_entry+0x60>)
 800f992:	687a      	ldr	r2, [r7, #4]
 800f994:	4613      	mov	r3, r2
 800f996:	005b      	lsls	r3, r3, #1
 800f998:	4413      	add	r3, r2
 800f99a:	00db      	lsls	r3, r3, #3
 800f99c:	440b      	add	r3, r1
 800f99e:	3314      	adds	r3, #20
 800f9a0:	2200      	movs	r2, #0
 800f9a2:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 800f9a4:	bf00      	nop
 800f9a6:	3708      	adds	r7, #8
 800f9a8:	46bd      	mov	sp, r7
 800f9aa:	bd80      	pop	{r7, pc}
 800f9ac:	2001015c 	.word	0x2001015c

0800f9b0 <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 800f9b0:	b580      	push	{r7, lr}
 800f9b2:	b082      	sub	sp, #8
 800f9b4:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800f9b6:	2300      	movs	r3, #0
 800f9b8:	607b      	str	r3, [r7, #4]
 800f9ba:	e096      	b.n	800faea <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 800f9bc:	494f      	ldr	r1, [pc, #316]	@ (800fafc <etharp_tmr+0x14c>)
 800f9be:	687a      	ldr	r2, [r7, #4]
 800f9c0:	4613      	mov	r3, r2
 800f9c2:	005b      	lsls	r3, r3, #1
 800f9c4:	4413      	add	r3, r2
 800f9c6:	00db      	lsls	r3, r3, #3
 800f9c8:	440b      	add	r3, r1
 800f9ca:	3314      	adds	r3, #20
 800f9cc:	781b      	ldrb	r3, [r3, #0]
 800f9ce:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 800f9d0:	78fb      	ldrb	r3, [r7, #3]
 800f9d2:	2b00      	cmp	r3, #0
 800f9d4:	f000 8086 	beq.w	800fae4 <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 800f9d8:	4948      	ldr	r1, [pc, #288]	@ (800fafc <etharp_tmr+0x14c>)
 800f9da:	687a      	ldr	r2, [r7, #4]
 800f9dc:	4613      	mov	r3, r2
 800f9de:	005b      	lsls	r3, r3, #1
 800f9e0:	4413      	add	r3, r2
 800f9e2:	00db      	lsls	r3, r3, #3
 800f9e4:	440b      	add	r3, r1
 800f9e6:	3312      	adds	r3, #18
 800f9e8:	881b      	ldrh	r3, [r3, #0]
 800f9ea:	3301      	adds	r3, #1
 800f9ec:	b298      	uxth	r0, r3
 800f9ee:	4943      	ldr	r1, [pc, #268]	@ (800fafc <etharp_tmr+0x14c>)
 800f9f0:	687a      	ldr	r2, [r7, #4]
 800f9f2:	4613      	mov	r3, r2
 800f9f4:	005b      	lsls	r3, r3, #1
 800f9f6:	4413      	add	r3, r2
 800f9f8:	00db      	lsls	r3, r3, #3
 800f9fa:	440b      	add	r3, r1
 800f9fc:	3312      	adds	r3, #18
 800f9fe:	4602      	mov	r2, r0
 800fa00:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 800fa02:	493e      	ldr	r1, [pc, #248]	@ (800fafc <etharp_tmr+0x14c>)
 800fa04:	687a      	ldr	r2, [r7, #4]
 800fa06:	4613      	mov	r3, r2
 800fa08:	005b      	lsls	r3, r3, #1
 800fa0a:	4413      	add	r3, r2
 800fa0c:	00db      	lsls	r3, r3, #3
 800fa0e:	440b      	add	r3, r1
 800fa10:	3312      	adds	r3, #18
 800fa12:	881b      	ldrh	r3, [r3, #0]
 800fa14:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 800fa18:	d215      	bcs.n	800fa46 <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 800fa1a:	4938      	ldr	r1, [pc, #224]	@ (800fafc <etharp_tmr+0x14c>)
 800fa1c:	687a      	ldr	r2, [r7, #4]
 800fa1e:	4613      	mov	r3, r2
 800fa20:	005b      	lsls	r3, r3, #1
 800fa22:	4413      	add	r3, r2
 800fa24:	00db      	lsls	r3, r3, #3
 800fa26:	440b      	add	r3, r1
 800fa28:	3314      	adds	r3, #20
 800fa2a:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 800fa2c:	2b01      	cmp	r3, #1
 800fa2e:	d10e      	bne.n	800fa4e <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 800fa30:	4932      	ldr	r1, [pc, #200]	@ (800fafc <etharp_tmr+0x14c>)
 800fa32:	687a      	ldr	r2, [r7, #4]
 800fa34:	4613      	mov	r3, r2
 800fa36:	005b      	lsls	r3, r3, #1
 800fa38:	4413      	add	r3, r2
 800fa3a:	00db      	lsls	r3, r3, #3
 800fa3c:	440b      	add	r3, r1
 800fa3e:	3312      	adds	r3, #18
 800fa40:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 800fa42:	2b04      	cmp	r3, #4
 800fa44:	d903      	bls.n	800fa4e <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 800fa46:	6878      	ldr	r0, [r7, #4]
 800fa48:	f7ff ff80 	bl	800f94c <etharp_free_entry>
 800fa4c:	e04a      	b.n	800fae4 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 800fa4e:	492b      	ldr	r1, [pc, #172]	@ (800fafc <etharp_tmr+0x14c>)
 800fa50:	687a      	ldr	r2, [r7, #4]
 800fa52:	4613      	mov	r3, r2
 800fa54:	005b      	lsls	r3, r3, #1
 800fa56:	4413      	add	r3, r2
 800fa58:	00db      	lsls	r3, r3, #3
 800fa5a:	440b      	add	r3, r1
 800fa5c:	3314      	adds	r3, #20
 800fa5e:	781b      	ldrb	r3, [r3, #0]
 800fa60:	2b03      	cmp	r3, #3
 800fa62:	d10a      	bne.n	800fa7a <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 800fa64:	4925      	ldr	r1, [pc, #148]	@ (800fafc <etharp_tmr+0x14c>)
 800fa66:	687a      	ldr	r2, [r7, #4]
 800fa68:	4613      	mov	r3, r2
 800fa6a:	005b      	lsls	r3, r3, #1
 800fa6c:	4413      	add	r3, r2
 800fa6e:	00db      	lsls	r3, r3, #3
 800fa70:	440b      	add	r3, r1
 800fa72:	3314      	adds	r3, #20
 800fa74:	2204      	movs	r2, #4
 800fa76:	701a      	strb	r2, [r3, #0]
 800fa78:	e034      	b.n	800fae4 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 800fa7a:	4920      	ldr	r1, [pc, #128]	@ (800fafc <etharp_tmr+0x14c>)
 800fa7c:	687a      	ldr	r2, [r7, #4]
 800fa7e:	4613      	mov	r3, r2
 800fa80:	005b      	lsls	r3, r3, #1
 800fa82:	4413      	add	r3, r2
 800fa84:	00db      	lsls	r3, r3, #3
 800fa86:	440b      	add	r3, r1
 800fa88:	3314      	adds	r3, #20
 800fa8a:	781b      	ldrb	r3, [r3, #0]
 800fa8c:	2b04      	cmp	r3, #4
 800fa8e:	d10a      	bne.n	800faa6 <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 800fa90:	491a      	ldr	r1, [pc, #104]	@ (800fafc <etharp_tmr+0x14c>)
 800fa92:	687a      	ldr	r2, [r7, #4]
 800fa94:	4613      	mov	r3, r2
 800fa96:	005b      	lsls	r3, r3, #1
 800fa98:	4413      	add	r3, r2
 800fa9a:	00db      	lsls	r3, r3, #3
 800fa9c:	440b      	add	r3, r1
 800fa9e:	3314      	adds	r3, #20
 800faa0:	2202      	movs	r2, #2
 800faa2:	701a      	strb	r2, [r3, #0]
 800faa4:	e01e      	b.n	800fae4 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 800faa6:	4915      	ldr	r1, [pc, #84]	@ (800fafc <etharp_tmr+0x14c>)
 800faa8:	687a      	ldr	r2, [r7, #4]
 800faaa:	4613      	mov	r3, r2
 800faac:	005b      	lsls	r3, r3, #1
 800faae:	4413      	add	r3, r2
 800fab0:	00db      	lsls	r3, r3, #3
 800fab2:	440b      	add	r3, r1
 800fab4:	3314      	adds	r3, #20
 800fab6:	781b      	ldrb	r3, [r3, #0]
 800fab8:	2b01      	cmp	r3, #1
 800faba:	d113      	bne.n	800fae4 <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 800fabc:	490f      	ldr	r1, [pc, #60]	@ (800fafc <etharp_tmr+0x14c>)
 800fabe:	687a      	ldr	r2, [r7, #4]
 800fac0:	4613      	mov	r3, r2
 800fac2:	005b      	lsls	r3, r3, #1
 800fac4:	4413      	add	r3, r2
 800fac6:	00db      	lsls	r3, r3, #3
 800fac8:	440b      	add	r3, r1
 800faca:	3308      	adds	r3, #8
 800facc:	6818      	ldr	r0, [r3, #0]
 800face:	687a      	ldr	r2, [r7, #4]
 800fad0:	4613      	mov	r3, r2
 800fad2:	005b      	lsls	r3, r3, #1
 800fad4:	4413      	add	r3, r2
 800fad6:	00db      	lsls	r3, r3, #3
 800fad8:	4a08      	ldr	r2, [pc, #32]	@ (800fafc <etharp_tmr+0x14c>)
 800fada:	4413      	add	r3, r2
 800fadc:	3304      	adds	r3, #4
 800fade:	4619      	mov	r1, r3
 800fae0:	f000 fe6e 	bl	80107c0 <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800fae4:	687b      	ldr	r3, [r7, #4]
 800fae6:	3301      	adds	r3, #1
 800fae8:	607b      	str	r3, [r7, #4]
 800faea:	687b      	ldr	r3, [r7, #4]
 800faec:	2b09      	cmp	r3, #9
 800faee:	f77f af65 	ble.w	800f9bc <etharp_tmr+0xc>
      }
    }
  }
}
 800faf2:	bf00      	nop
 800faf4:	bf00      	nop
 800faf6:	3708      	adds	r7, #8
 800faf8:	46bd      	mov	sp, r7
 800fafa:	bd80      	pop	{r7, pc}
 800fafc:	2001015c 	.word	0x2001015c

0800fb00 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 800fb00:	b580      	push	{r7, lr}
 800fb02:	b08a      	sub	sp, #40	@ 0x28
 800fb04:	af00      	add	r7, sp, #0
 800fb06:	60f8      	str	r0, [r7, #12]
 800fb08:	460b      	mov	r3, r1
 800fb0a:	607a      	str	r2, [r7, #4]
 800fb0c:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 800fb0e:	230a      	movs	r3, #10
 800fb10:	84fb      	strh	r3, [r7, #38]	@ 0x26
 800fb12:	230a      	movs	r3, #10
 800fb14:	84bb      	strh	r3, [r7, #36]	@ 0x24
  s16_t empty = ARP_TABLE_SIZE;
 800fb16:	230a      	movs	r3, #10
 800fb18:	847b      	strh	r3, [r7, #34]	@ 0x22
  s16_t i = 0;
 800fb1a:	2300      	movs	r3, #0
 800fb1c:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 800fb1e:	230a      	movs	r3, #10
 800fb20:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 800fb22:	2300      	movs	r3, #0
 800fb24:	83bb      	strh	r3, [r7, #28]
 800fb26:	2300      	movs	r3, #0
 800fb28:	837b      	strh	r3, [r7, #26]
 800fb2a:	2300      	movs	r3, #0
 800fb2c:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800fb2e:	2300      	movs	r3, #0
 800fb30:	843b      	strh	r3, [r7, #32]
 800fb32:	e0ae      	b.n	800fc92 <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 800fb34:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800fb38:	49a6      	ldr	r1, [pc, #664]	@ (800fdd4 <etharp_find_entry+0x2d4>)
 800fb3a:	4613      	mov	r3, r2
 800fb3c:	005b      	lsls	r3, r3, #1
 800fb3e:	4413      	add	r3, r2
 800fb40:	00db      	lsls	r3, r3, #3
 800fb42:	440b      	add	r3, r1
 800fb44:	3314      	adds	r3, #20
 800fb46:	781b      	ldrb	r3, [r3, #0]
 800fb48:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 800fb4a:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 800fb4e:	2b0a      	cmp	r3, #10
 800fb50:	d105      	bne.n	800fb5e <etharp_find_entry+0x5e>
 800fb52:	7dfb      	ldrb	r3, [r7, #23]
 800fb54:	2b00      	cmp	r3, #0
 800fb56:	d102      	bne.n	800fb5e <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 800fb58:	8c3b      	ldrh	r3, [r7, #32]
 800fb5a:	847b      	strh	r3, [r7, #34]	@ 0x22
 800fb5c:	e095      	b.n	800fc8a <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 800fb5e:	7dfb      	ldrb	r3, [r7, #23]
 800fb60:	2b00      	cmp	r3, #0
 800fb62:	f000 8092 	beq.w	800fc8a <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 800fb66:	7dfb      	ldrb	r3, [r7, #23]
 800fb68:	2b01      	cmp	r3, #1
 800fb6a:	d009      	beq.n	800fb80 <etharp_find_entry+0x80>
 800fb6c:	7dfb      	ldrb	r3, [r7, #23]
 800fb6e:	2b01      	cmp	r3, #1
 800fb70:	d806      	bhi.n	800fb80 <etharp_find_entry+0x80>
 800fb72:	4b99      	ldr	r3, [pc, #612]	@ (800fdd8 <etharp_find_entry+0x2d8>)
 800fb74:	f240 1223 	movw	r2, #291	@ 0x123
 800fb78:	4998      	ldr	r1, [pc, #608]	@ (800fddc <etharp_find_entry+0x2dc>)
 800fb7a:	4899      	ldr	r0, [pc, #612]	@ (800fde0 <etharp_find_entry+0x2e0>)
 800fb7c:	f002 fb9e 	bl	80122bc <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 800fb80:	68fb      	ldr	r3, [r7, #12]
 800fb82:	2b00      	cmp	r3, #0
 800fb84:	d020      	beq.n	800fbc8 <etharp_find_entry+0xc8>
 800fb86:	68fb      	ldr	r3, [r7, #12]
 800fb88:	6819      	ldr	r1, [r3, #0]
 800fb8a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800fb8e:	4891      	ldr	r0, [pc, #580]	@ (800fdd4 <etharp_find_entry+0x2d4>)
 800fb90:	4613      	mov	r3, r2
 800fb92:	005b      	lsls	r3, r3, #1
 800fb94:	4413      	add	r3, r2
 800fb96:	00db      	lsls	r3, r3, #3
 800fb98:	4403      	add	r3, r0
 800fb9a:	3304      	adds	r3, #4
 800fb9c:	681b      	ldr	r3, [r3, #0]
 800fb9e:	4299      	cmp	r1, r3
 800fba0:	d112      	bne.n	800fbc8 <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 800fba2:	687b      	ldr	r3, [r7, #4]
 800fba4:	2b00      	cmp	r3, #0
 800fba6:	d00c      	beq.n	800fbc2 <etharp_find_entry+0xc2>
 800fba8:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800fbac:	4989      	ldr	r1, [pc, #548]	@ (800fdd4 <etharp_find_entry+0x2d4>)
 800fbae:	4613      	mov	r3, r2
 800fbb0:	005b      	lsls	r3, r3, #1
 800fbb2:	4413      	add	r3, r2
 800fbb4:	00db      	lsls	r3, r3, #3
 800fbb6:	440b      	add	r3, r1
 800fbb8:	3308      	adds	r3, #8
 800fbba:	681b      	ldr	r3, [r3, #0]
 800fbbc:	687a      	ldr	r2, [r7, #4]
 800fbbe:	429a      	cmp	r2, r3
 800fbc0:	d102      	bne.n	800fbc8 <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 800fbc2:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800fbc6:	e100      	b.n	800fdca <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 800fbc8:	7dfb      	ldrb	r3, [r7, #23]
 800fbca:	2b01      	cmp	r3, #1
 800fbcc:	d140      	bne.n	800fc50 <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 800fbce:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800fbd2:	4980      	ldr	r1, [pc, #512]	@ (800fdd4 <etharp_find_entry+0x2d4>)
 800fbd4:	4613      	mov	r3, r2
 800fbd6:	005b      	lsls	r3, r3, #1
 800fbd8:	4413      	add	r3, r2
 800fbda:	00db      	lsls	r3, r3, #3
 800fbdc:	440b      	add	r3, r1
 800fbde:	681b      	ldr	r3, [r3, #0]
 800fbe0:	2b00      	cmp	r3, #0
 800fbe2:	d01a      	beq.n	800fc1a <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 800fbe4:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800fbe8:	497a      	ldr	r1, [pc, #488]	@ (800fdd4 <etharp_find_entry+0x2d4>)
 800fbea:	4613      	mov	r3, r2
 800fbec:	005b      	lsls	r3, r3, #1
 800fbee:	4413      	add	r3, r2
 800fbf0:	00db      	lsls	r3, r3, #3
 800fbf2:	440b      	add	r3, r1
 800fbf4:	3312      	adds	r3, #18
 800fbf6:	881b      	ldrh	r3, [r3, #0]
 800fbf8:	8bba      	ldrh	r2, [r7, #28]
 800fbfa:	429a      	cmp	r2, r3
 800fbfc:	d845      	bhi.n	800fc8a <etharp_find_entry+0x18a>
            old_queue = i;
 800fbfe:	8c3b      	ldrh	r3, [r7, #32]
 800fc00:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 800fc02:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800fc06:	4973      	ldr	r1, [pc, #460]	@ (800fdd4 <etharp_find_entry+0x2d4>)
 800fc08:	4613      	mov	r3, r2
 800fc0a:	005b      	lsls	r3, r3, #1
 800fc0c:	4413      	add	r3, r2
 800fc0e:	00db      	lsls	r3, r3, #3
 800fc10:	440b      	add	r3, r1
 800fc12:	3312      	adds	r3, #18
 800fc14:	881b      	ldrh	r3, [r3, #0]
 800fc16:	83bb      	strh	r3, [r7, #28]
 800fc18:	e037      	b.n	800fc8a <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 800fc1a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800fc1e:	496d      	ldr	r1, [pc, #436]	@ (800fdd4 <etharp_find_entry+0x2d4>)
 800fc20:	4613      	mov	r3, r2
 800fc22:	005b      	lsls	r3, r3, #1
 800fc24:	4413      	add	r3, r2
 800fc26:	00db      	lsls	r3, r3, #3
 800fc28:	440b      	add	r3, r1
 800fc2a:	3312      	adds	r3, #18
 800fc2c:	881b      	ldrh	r3, [r3, #0]
 800fc2e:	8b7a      	ldrh	r2, [r7, #26]
 800fc30:	429a      	cmp	r2, r3
 800fc32:	d82a      	bhi.n	800fc8a <etharp_find_entry+0x18a>
            old_pending = i;
 800fc34:	8c3b      	ldrh	r3, [r7, #32]
 800fc36:	84fb      	strh	r3, [r7, #38]	@ 0x26
            age_pending = arp_table[i].ctime;
 800fc38:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800fc3c:	4965      	ldr	r1, [pc, #404]	@ (800fdd4 <etharp_find_entry+0x2d4>)
 800fc3e:	4613      	mov	r3, r2
 800fc40:	005b      	lsls	r3, r3, #1
 800fc42:	4413      	add	r3, r2
 800fc44:	00db      	lsls	r3, r3, #3
 800fc46:	440b      	add	r3, r1
 800fc48:	3312      	adds	r3, #18
 800fc4a:	881b      	ldrh	r3, [r3, #0]
 800fc4c:	837b      	strh	r3, [r7, #26]
 800fc4e:	e01c      	b.n	800fc8a <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 800fc50:	7dfb      	ldrb	r3, [r7, #23]
 800fc52:	2b01      	cmp	r3, #1
 800fc54:	d919      	bls.n	800fc8a <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 800fc56:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800fc5a:	495e      	ldr	r1, [pc, #376]	@ (800fdd4 <etharp_find_entry+0x2d4>)
 800fc5c:	4613      	mov	r3, r2
 800fc5e:	005b      	lsls	r3, r3, #1
 800fc60:	4413      	add	r3, r2
 800fc62:	00db      	lsls	r3, r3, #3
 800fc64:	440b      	add	r3, r1
 800fc66:	3312      	adds	r3, #18
 800fc68:	881b      	ldrh	r3, [r3, #0]
 800fc6a:	8b3a      	ldrh	r2, [r7, #24]
 800fc6c:	429a      	cmp	r2, r3
 800fc6e:	d80c      	bhi.n	800fc8a <etharp_find_entry+0x18a>
            old_stable = i;
 800fc70:	8c3b      	ldrh	r3, [r7, #32]
 800fc72:	84bb      	strh	r3, [r7, #36]	@ 0x24
            age_stable = arp_table[i].ctime;
 800fc74:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800fc78:	4956      	ldr	r1, [pc, #344]	@ (800fdd4 <etharp_find_entry+0x2d4>)
 800fc7a:	4613      	mov	r3, r2
 800fc7c:	005b      	lsls	r3, r3, #1
 800fc7e:	4413      	add	r3, r2
 800fc80:	00db      	lsls	r3, r3, #3
 800fc82:	440b      	add	r3, r1
 800fc84:	3312      	adds	r3, #18
 800fc86:	881b      	ldrh	r3, [r3, #0]
 800fc88:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800fc8a:	8c3b      	ldrh	r3, [r7, #32]
 800fc8c:	3301      	adds	r3, #1
 800fc8e:	b29b      	uxth	r3, r3
 800fc90:	843b      	strh	r3, [r7, #32]
 800fc92:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800fc96:	2b09      	cmp	r3, #9
 800fc98:	f77f af4c 	ble.w	800fb34 <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 800fc9c:	7afb      	ldrb	r3, [r7, #11]
 800fc9e:	f003 0302 	and.w	r3, r3, #2
 800fca2:	2b00      	cmp	r3, #0
 800fca4:	d108      	bne.n	800fcb8 <etharp_find_entry+0x1b8>
 800fca6:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 800fcaa:	2b0a      	cmp	r3, #10
 800fcac:	d107      	bne.n	800fcbe <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 800fcae:	7afb      	ldrb	r3, [r7, #11]
 800fcb0:	f003 0301 	and.w	r3, r3, #1
 800fcb4:	2b00      	cmp	r3, #0
 800fcb6:	d102      	bne.n	800fcbe <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 800fcb8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800fcbc:	e085      	b.n	800fdca <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 800fcbe:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 800fcc2:	2b09      	cmp	r3, #9
 800fcc4:	dc02      	bgt.n	800fccc <etharp_find_entry+0x1cc>
    i = empty;
 800fcc6:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800fcc8:	843b      	strh	r3, [r7, #32]
 800fcca:	e039      	b.n	800fd40 <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 800fccc:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 800fcd0:	2b09      	cmp	r3, #9
 800fcd2:	dc14      	bgt.n	800fcfe <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 800fcd4:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800fcd6:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 800fcd8:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800fcdc:	493d      	ldr	r1, [pc, #244]	@ (800fdd4 <etharp_find_entry+0x2d4>)
 800fcde:	4613      	mov	r3, r2
 800fce0:	005b      	lsls	r3, r3, #1
 800fce2:	4413      	add	r3, r2
 800fce4:	00db      	lsls	r3, r3, #3
 800fce6:	440b      	add	r3, r1
 800fce8:	681b      	ldr	r3, [r3, #0]
 800fcea:	2b00      	cmp	r3, #0
 800fcec:	d018      	beq.n	800fd20 <etharp_find_entry+0x220>
 800fcee:	4b3a      	ldr	r3, [pc, #232]	@ (800fdd8 <etharp_find_entry+0x2d8>)
 800fcf0:	f240 126d 	movw	r2, #365	@ 0x16d
 800fcf4:	493b      	ldr	r1, [pc, #236]	@ (800fde4 <etharp_find_entry+0x2e4>)
 800fcf6:	483a      	ldr	r0, [pc, #232]	@ (800fde0 <etharp_find_entry+0x2e0>)
 800fcf8:	f002 fae0 	bl	80122bc <iprintf>
 800fcfc:	e010      	b.n	800fd20 <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 800fcfe:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 800fd02:	2b09      	cmp	r3, #9
 800fd04:	dc02      	bgt.n	800fd0c <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 800fd06:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800fd08:	843b      	strh	r3, [r7, #32]
 800fd0a:	e009      	b.n	800fd20 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 800fd0c:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800fd10:	2b09      	cmp	r3, #9
 800fd12:	dc02      	bgt.n	800fd1a <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 800fd14:	8bfb      	ldrh	r3, [r7, #30]
 800fd16:	843b      	strh	r3, [r7, #32]
 800fd18:	e002      	b.n	800fd20 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 800fd1a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800fd1e:	e054      	b.n	800fdca <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 800fd20:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800fd24:	2b09      	cmp	r3, #9
 800fd26:	dd06      	ble.n	800fd36 <etharp_find_entry+0x236>
 800fd28:	4b2b      	ldr	r3, [pc, #172]	@ (800fdd8 <etharp_find_entry+0x2d8>)
 800fd2a:	f240 127f 	movw	r2, #383	@ 0x17f
 800fd2e:	492e      	ldr	r1, [pc, #184]	@ (800fde8 <etharp_find_entry+0x2e8>)
 800fd30:	482b      	ldr	r0, [pc, #172]	@ (800fde0 <etharp_find_entry+0x2e0>)
 800fd32:	f002 fac3 	bl	80122bc <iprintf>
    etharp_free_entry(i);
 800fd36:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800fd3a:	4618      	mov	r0, r3
 800fd3c:	f7ff fe06 	bl	800f94c <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 800fd40:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800fd44:	2b09      	cmp	r3, #9
 800fd46:	dd06      	ble.n	800fd56 <etharp_find_entry+0x256>
 800fd48:	4b23      	ldr	r3, [pc, #140]	@ (800fdd8 <etharp_find_entry+0x2d8>)
 800fd4a:	f240 1283 	movw	r2, #387	@ 0x183
 800fd4e:	4926      	ldr	r1, [pc, #152]	@ (800fde8 <etharp_find_entry+0x2e8>)
 800fd50:	4823      	ldr	r0, [pc, #140]	@ (800fde0 <etharp_find_entry+0x2e0>)
 800fd52:	f002 fab3 	bl	80122bc <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 800fd56:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800fd5a:	491e      	ldr	r1, [pc, #120]	@ (800fdd4 <etharp_find_entry+0x2d4>)
 800fd5c:	4613      	mov	r3, r2
 800fd5e:	005b      	lsls	r3, r3, #1
 800fd60:	4413      	add	r3, r2
 800fd62:	00db      	lsls	r3, r3, #3
 800fd64:	440b      	add	r3, r1
 800fd66:	3314      	adds	r3, #20
 800fd68:	781b      	ldrb	r3, [r3, #0]
 800fd6a:	2b00      	cmp	r3, #0
 800fd6c:	d006      	beq.n	800fd7c <etharp_find_entry+0x27c>
 800fd6e:	4b1a      	ldr	r3, [pc, #104]	@ (800fdd8 <etharp_find_entry+0x2d8>)
 800fd70:	f44f 72c2 	mov.w	r2, #388	@ 0x184
 800fd74:	491d      	ldr	r1, [pc, #116]	@ (800fdec <etharp_find_entry+0x2ec>)
 800fd76:	481a      	ldr	r0, [pc, #104]	@ (800fde0 <etharp_find_entry+0x2e0>)
 800fd78:	f002 faa0 	bl	80122bc <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 800fd7c:	68fb      	ldr	r3, [r7, #12]
 800fd7e:	2b00      	cmp	r3, #0
 800fd80:	d00b      	beq.n	800fd9a <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 800fd82:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800fd86:	68fb      	ldr	r3, [r7, #12]
 800fd88:	6819      	ldr	r1, [r3, #0]
 800fd8a:	4812      	ldr	r0, [pc, #72]	@ (800fdd4 <etharp_find_entry+0x2d4>)
 800fd8c:	4613      	mov	r3, r2
 800fd8e:	005b      	lsls	r3, r3, #1
 800fd90:	4413      	add	r3, r2
 800fd92:	00db      	lsls	r3, r3, #3
 800fd94:	4403      	add	r3, r0
 800fd96:	3304      	adds	r3, #4
 800fd98:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 800fd9a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800fd9e:	490d      	ldr	r1, [pc, #52]	@ (800fdd4 <etharp_find_entry+0x2d4>)
 800fda0:	4613      	mov	r3, r2
 800fda2:	005b      	lsls	r3, r3, #1
 800fda4:	4413      	add	r3, r2
 800fda6:	00db      	lsls	r3, r3, #3
 800fda8:	440b      	add	r3, r1
 800fdaa:	3312      	adds	r3, #18
 800fdac:	2200      	movs	r2, #0
 800fdae:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 800fdb0:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800fdb4:	4907      	ldr	r1, [pc, #28]	@ (800fdd4 <etharp_find_entry+0x2d4>)
 800fdb6:	4613      	mov	r3, r2
 800fdb8:	005b      	lsls	r3, r3, #1
 800fdba:	4413      	add	r3, r2
 800fdbc:	00db      	lsls	r3, r3, #3
 800fdbe:	440b      	add	r3, r1
 800fdc0:	3308      	adds	r3, #8
 800fdc2:	687a      	ldr	r2, [r7, #4]
 800fdc4:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 800fdc6:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 800fdca:	4618      	mov	r0, r3
 800fdcc:	3728      	adds	r7, #40	@ 0x28
 800fdce:	46bd      	mov	sp, r7
 800fdd0:	bd80      	pop	{r7, pc}
 800fdd2:	bf00      	nop
 800fdd4:	2001015c 	.word	0x2001015c
 800fdd8:	080155e0 	.word	0x080155e0
 800fddc:	08015618 	.word	0x08015618
 800fde0:	08015658 	.word	0x08015658
 800fde4:	08015680 	.word	0x08015680
 800fde8:	08015698 	.word	0x08015698
 800fdec:	080156ac 	.word	0x080156ac

0800fdf0 <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 800fdf0:	b580      	push	{r7, lr}
 800fdf2:	b088      	sub	sp, #32
 800fdf4:	af02      	add	r7, sp, #8
 800fdf6:	60f8      	str	r0, [r7, #12]
 800fdf8:	60b9      	str	r1, [r7, #8]
 800fdfa:	607a      	str	r2, [r7, #4]
 800fdfc:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 800fdfe:	68fb      	ldr	r3, [r7, #12]
 800fe00:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 800fe04:	2b06      	cmp	r3, #6
 800fe06:	d006      	beq.n	800fe16 <etharp_update_arp_entry+0x26>
 800fe08:	4b48      	ldr	r3, [pc, #288]	@ (800ff2c <etharp_update_arp_entry+0x13c>)
 800fe0a:	f240 12a9 	movw	r2, #425	@ 0x1a9
 800fe0e:	4948      	ldr	r1, [pc, #288]	@ (800ff30 <etharp_update_arp_entry+0x140>)
 800fe10:	4848      	ldr	r0, [pc, #288]	@ (800ff34 <etharp_update_arp_entry+0x144>)
 800fe12:	f002 fa53 	bl	80122bc <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 800fe16:	68bb      	ldr	r3, [r7, #8]
 800fe18:	2b00      	cmp	r3, #0
 800fe1a:	d012      	beq.n	800fe42 <etharp_update_arp_entry+0x52>
 800fe1c:	68bb      	ldr	r3, [r7, #8]
 800fe1e:	681b      	ldr	r3, [r3, #0]
 800fe20:	2b00      	cmp	r3, #0
 800fe22:	d00e      	beq.n	800fe42 <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 800fe24:	68bb      	ldr	r3, [r7, #8]
 800fe26:	681b      	ldr	r3, [r3, #0]
 800fe28:	68f9      	ldr	r1, [r7, #12]
 800fe2a:	4618      	mov	r0, r3
 800fe2c:	f001 f8fe 	bl	801102c <ip4_addr_isbroadcast_u32>
 800fe30:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 800fe32:	2b00      	cmp	r3, #0
 800fe34:	d105      	bne.n	800fe42 <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 800fe36:	68bb      	ldr	r3, [r7, #8]
 800fe38:	681b      	ldr	r3, [r3, #0]
 800fe3a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 800fe3e:	2be0      	cmp	r3, #224	@ 0xe0
 800fe40:	d102      	bne.n	800fe48 <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 800fe42:	f06f 030f 	mvn.w	r3, #15
 800fe46:	e06c      	b.n	800ff22 <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 800fe48:	78fb      	ldrb	r3, [r7, #3]
 800fe4a:	68fa      	ldr	r2, [r7, #12]
 800fe4c:	4619      	mov	r1, r3
 800fe4e:	68b8      	ldr	r0, [r7, #8]
 800fe50:	f7ff fe56 	bl	800fb00 <etharp_find_entry>
 800fe54:	4603      	mov	r3, r0
 800fe56:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 800fe58:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800fe5c:	2b00      	cmp	r3, #0
 800fe5e:	da02      	bge.n	800fe66 <etharp_update_arp_entry+0x76>
    return (err_t)i;
 800fe60:	8afb      	ldrh	r3, [r7, #22]
 800fe62:	b25b      	sxtb	r3, r3
 800fe64:	e05d      	b.n	800ff22 <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 800fe66:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800fe6a:	4933      	ldr	r1, [pc, #204]	@ (800ff38 <etharp_update_arp_entry+0x148>)
 800fe6c:	4613      	mov	r3, r2
 800fe6e:	005b      	lsls	r3, r3, #1
 800fe70:	4413      	add	r3, r2
 800fe72:	00db      	lsls	r3, r3, #3
 800fe74:	440b      	add	r3, r1
 800fe76:	3314      	adds	r3, #20
 800fe78:	2202      	movs	r2, #2
 800fe7a:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 800fe7c:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800fe80:	492d      	ldr	r1, [pc, #180]	@ (800ff38 <etharp_update_arp_entry+0x148>)
 800fe82:	4613      	mov	r3, r2
 800fe84:	005b      	lsls	r3, r3, #1
 800fe86:	4413      	add	r3, r2
 800fe88:	00db      	lsls	r3, r3, #3
 800fe8a:	440b      	add	r3, r1
 800fe8c:	3308      	adds	r3, #8
 800fe8e:	68fa      	ldr	r2, [r7, #12]
 800fe90:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 800fe92:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800fe96:	4613      	mov	r3, r2
 800fe98:	005b      	lsls	r3, r3, #1
 800fe9a:	4413      	add	r3, r2
 800fe9c:	00db      	lsls	r3, r3, #3
 800fe9e:	3308      	adds	r3, #8
 800fea0:	4a25      	ldr	r2, [pc, #148]	@ (800ff38 <etharp_update_arp_entry+0x148>)
 800fea2:	4413      	add	r3, r2
 800fea4:	3304      	adds	r3, #4
 800fea6:	2206      	movs	r2, #6
 800fea8:	6879      	ldr	r1, [r7, #4]
 800feaa:	4618      	mov	r0, r3
 800feac:	f002 fb37 	bl	801251e <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 800feb0:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800feb4:	4920      	ldr	r1, [pc, #128]	@ (800ff38 <etharp_update_arp_entry+0x148>)
 800feb6:	4613      	mov	r3, r2
 800feb8:	005b      	lsls	r3, r3, #1
 800feba:	4413      	add	r3, r2
 800febc:	00db      	lsls	r3, r3, #3
 800febe:	440b      	add	r3, r1
 800fec0:	3312      	adds	r3, #18
 800fec2:	2200      	movs	r2, #0
 800fec4:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 800fec6:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800feca:	491b      	ldr	r1, [pc, #108]	@ (800ff38 <etharp_update_arp_entry+0x148>)
 800fecc:	4613      	mov	r3, r2
 800fece:	005b      	lsls	r3, r3, #1
 800fed0:	4413      	add	r3, r2
 800fed2:	00db      	lsls	r3, r3, #3
 800fed4:	440b      	add	r3, r1
 800fed6:	681b      	ldr	r3, [r3, #0]
 800fed8:	2b00      	cmp	r3, #0
 800feda:	d021      	beq.n	800ff20 <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 800fedc:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800fee0:	4915      	ldr	r1, [pc, #84]	@ (800ff38 <etharp_update_arp_entry+0x148>)
 800fee2:	4613      	mov	r3, r2
 800fee4:	005b      	lsls	r3, r3, #1
 800fee6:	4413      	add	r3, r2
 800fee8:	00db      	lsls	r3, r3, #3
 800feea:	440b      	add	r3, r1
 800feec:	681b      	ldr	r3, [r3, #0]
 800feee:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 800fef0:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800fef4:	4910      	ldr	r1, [pc, #64]	@ (800ff38 <etharp_update_arp_entry+0x148>)
 800fef6:	4613      	mov	r3, r2
 800fef8:	005b      	lsls	r3, r3, #1
 800fefa:	4413      	add	r3, r2
 800fefc:	00db      	lsls	r3, r3, #3
 800fefe:	440b      	add	r3, r1
 800ff00:	2200      	movs	r2, #0
 800ff02:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 800ff04:	68fb      	ldr	r3, [r7, #12]
 800ff06:	f103 0226 	add.w	r2, r3, #38	@ 0x26
 800ff0a:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800ff0e:	9300      	str	r3, [sp, #0]
 800ff10:	687b      	ldr	r3, [r7, #4]
 800ff12:	6939      	ldr	r1, [r7, #16]
 800ff14:	68f8      	ldr	r0, [r7, #12]
 800ff16:	f001 ff97 	bl	8011e48 <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 800ff1a:	6938      	ldr	r0, [r7, #16]
 800ff1c:	f7f9 fdf0 	bl	8009b00 <pbuf_free>
  }
  return ERR_OK;
 800ff20:	2300      	movs	r3, #0
}
 800ff22:	4618      	mov	r0, r3
 800ff24:	3718      	adds	r7, #24
 800ff26:	46bd      	mov	sp, r7
 800ff28:	bd80      	pop	{r7, pc}
 800ff2a:	bf00      	nop
 800ff2c:	080155e0 	.word	0x080155e0
 800ff30:	080156d8 	.word	0x080156d8
 800ff34:	08015658 	.word	0x08015658
 800ff38:	2001015c 	.word	0x2001015c

0800ff3c <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 800ff3c:	b580      	push	{r7, lr}
 800ff3e:	b084      	sub	sp, #16
 800ff40:	af00      	add	r7, sp, #0
 800ff42:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800ff44:	2300      	movs	r3, #0
 800ff46:	60fb      	str	r3, [r7, #12]
 800ff48:	e01e      	b.n	800ff88 <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 800ff4a:	4913      	ldr	r1, [pc, #76]	@ (800ff98 <etharp_cleanup_netif+0x5c>)
 800ff4c:	68fa      	ldr	r2, [r7, #12]
 800ff4e:	4613      	mov	r3, r2
 800ff50:	005b      	lsls	r3, r3, #1
 800ff52:	4413      	add	r3, r2
 800ff54:	00db      	lsls	r3, r3, #3
 800ff56:	440b      	add	r3, r1
 800ff58:	3314      	adds	r3, #20
 800ff5a:	781b      	ldrb	r3, [r3, #0]
 800ff5c:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 800ff5e:	7afb      	ldrb	r3, [r7, #11]
 800ff60:	2b00      	cmp	r3, #0
 800ff62:	d00e      	beq.n	800ff82 <etharp_cleanup_netif+0x46>
 800ff64:	490c      	ldr	r1, [pc, #48]	@ (800ff98 <etharp_cleanup_netif+0x5c>)
 800ff66:	68fa      	ldr	r2, [r7, #12]
 800ff68:	4613      	mov	r3, r2
 800ff6a:	005b      	lsls	r3, r3, #1
 800ff6c:	4413      	add	r3, r2
 800ff6e:	00db      	lsls	r3, r3, #3
 800ff70:	440b      	add	r3, r1
 800ff72:	3308      	adds	r3, #8
 800ff74:	681b      	ldr	r3, [r3, #0]
 800ff76:	687a      	ldr	r2, [r7, #4]
 800ff78:	429a      	cmp	r2, r3
 800ff7a:	d102      	bne.n	800ff82 <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 800ff7c:	68f8      	ldr	r0, [r7, #12]
 800ff7e:	f7ff fce5 	bl	800f94c <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800ff82:	68fb      	ldr	r3, [r7, #12]
 800ff84:	3301      	adds	r3, #1
 800ff86:	60fb      	str	r3, [r7, #12]
 800ff88:	68fb      	ldr	r3, [r7, #12]
 800ff8a:	2b09      	cmp	r3, #9
 800ff8c:	dddd      	ble.n	800ff4a <etharp_cleanup_netif+0xe>
    }
  }
}
 800ff8e:	bf00      	nop
 800ff90:	bf00      	nop
 800ff92:	3710      	adds	r7, #16
 800ff94:	46bd      	mov	sp, r7
 800ff96:	bd80      	pop	{r7, pc}
 800ff98:	2001015c 	.word	0x2001015c

0800ff9c <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 800ff9c:	b5b0      	push	{r4, r5, r7, lr}
 800ff9e:	b08a      	sub	sp, #40	@ 0x28
 800ffa0:	af04      	add	r7, sp, #16
 800ffa2:	6078      	str	r0, [r7, #4]
 800ffa4:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 800ffa6:	683b      	ldr	r3, [r7, #0]
 800ffa8:	2b00      	cmp	r3, #0
 800ffaa:	d107      	bne.n	800ffbc <etharp_input+0x20>
 800ffac:	4b3d      	ldr	r3, [pc, #244]	@ (80100a4 <etharp_input+0x108>)
 800ffae:	f240 228a 	movw	r2, #650	@ 0x28a
 800ffb2:	493d      	ldr	r1, [pc, #244]	@ (80100a8 <etharp_input+0x10c>)
 800ffb4:	483d      	ldr	r0, [pc, #244]	@ (80100ac <etharp_input+0x110>)
 800ffb6:	f002 f981 	bl	80122bc <iprintf>
 800ffba:	e06f      	b.n	801009c <etharp_input+0x100>

  hdr = (struct etharp_hdr *)p->payload;
 800ffbc:	687b      	ldr	r3, [r7, #4]
 800ffbe:	685b      	ldr	r3, [r3, #4]
 800ffc0:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 800ffc2:	693b      	ldr	r3, [r7, #16]
 800ffc4:	881b      	ldrh	r3, [r3, #0]
 800ffc6:	b29b      	uxth	r3, r3
 800ffc8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800ffcc:	d10c      	bne.n	800ffe8 <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 800ffce:	693b      	ldr	r3, [r7, #16]
 800ffd0:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 800ffd2:	2b06      	cmp	r3, #6
 800ffd4:	d108      	bne.n	800ffe8 <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 800ffd6:	693b      	ldr	r3, [r7, #16]
 800ffd8:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 800ffda:	2b04      	cmp	r3, #4
 800ffdc:	d104      	bne.n	800ffe8 <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 800ffde:	693b      	ldr	r3, [r7, #16]
 800ffe0:	885b      	ldrh	r3, [r3, #2]
 800ffe2:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 800ffe4:	2b08      	cmp	r3, #8
 800ffe6:	d003      	beq.n	800fff0 <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 800ffe8:	6878      	ldr	r0, [r7, #4]
 800ffea:	f7f9 fd89 	bl	8009b00 <pbuf_free>
    return;
 800ffee:	e055      	b.n	801009c <etharp_input+0x100>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 800fff0:	693b      	ldr	r3, [r7, #16]
 800fff2:	330e      	adds	r3, #14
 800fff4:	681b      	ldr	r3, [r3, #0]
 800fff6:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 800fff8:	693b      	ldr	r3, [r7, #16]
 800fffa:	3318      	adds	r3, #24
 800fffc:	681b      	ldr	r3, [r3, #0]
 800fffe:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8010000:	683b      	ldr	r3, [r7, #0]
 8010002:	3304      	adds	r3, #4
 8010004:	681b      	ldr	r3, [r3, #0]
 8010006:	2b00      	cmp	r3, #0
 8010008:	d102      	bne.n	8010010 <etharp_input+0x74>
    for_us = 0;
 801000a:	2300      	movs	r3, #0
 801000c:	75fb      	strb	r3, [r7, #23]
 801000e:	e009      	b.n	8010024 <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 8010010:	68ba      	ldr	r2, [r7, #8]
 8010012:	683b      	ldr	r3, [r7, #0]
 8010014:	3304      	adds	r3, #4
 8010016:	681b      	ldr	r3, [r3, #0]
 8010018:	429a      	cmp	r2, r3
 801001a:	bf0c      	ite	eq
 801001c:	2301      	moveq	r3, #1
 801001e:	2300      	movne	r3, #0
 8010020:	b2db      	uxtb	r3, r3
 8010022:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 8010024:	693b      	ldr	r3, [r7, #16]
 8010026:	f103 0208 	add.w	r2, r3, #8
 801002a:	7dfb      	ldrb	r3, [r7, #23]
 801002c:	2b00      	cmp	r3, #0
 801002e:	d001      	beq.n	8010034 <etharp_input+0x98>
 8010030:	2301      	movs	r3, #1
 8010032:	e000      	b.n	8010036 <etharp_input+0x9a>
 8010034:	2302      	movs	r3, #2
 8010036:	f107 010c 	add.w	r1, r7, #12
 801003a:	6838      	ldr	r0, [r7, #0]
 801003c:	f7ff fed8 	bl	800fdf0 <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 8010040:	693b      	ldr	r3, [r7, #16]
 8010042:	88db      	ldrh	r3, [r3, #6]
 8010044:	b29b      	uxth	r3, r3
 8010046:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 801004a:	d003      	beq.n	8010054 <etharp_input+0xb8>
 801004c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8010050:	d01e      	beq.n	8010090 <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 8010052:	e020      	b.n	8010096 <etharp_input+0xfa>
      if (for_us) {
 8010054:	7dfb      	ldrb	r3, [r7, #23]
 8010056:	2b00      	cmp	r3, #0
 8010058:	d01c      	beq.n	8010094 <etharp_input+0xf8>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 801005a:	683b      	ldr	r3, [r7, #0]
 801005c:	f103 0026 	add.w	r0, r3, #38	@ 0x26
 8010060:	693b      	ldr	r3, [r7, #16]
 8010062:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 8010066:	683b      	ldr	r3, [r7, #0]
 8010068:	f103 0526 	add.w	r5, r3, #38	@ 0x26
 801006c:	683b      	ldr	r3, [r7, #0]
 801006e:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 8010070:	693a      	ldr	r2, [r7, #16]
 8010072:	3208      	adds	r2, #8
        etharp_raw(netif,
 8010074:	2102      	movs	r1, #2
 8010076:	9103      	str	r1, [sp, #12]
 8010078:	f107 010c 	add.w	r1, r7, #12
 801007c:	9102      	str	r1, [sp, #8]
 801007e:	9201      	str	r2, [sp, #4]
 8010080:	9300      	str	r3, [sp, #0]
 8010082:	462b      	mov	r3, r5
 8010084:	4622      	mov	r2, r4
 8010086:	4601      	mov	r1, r0
 8010088:	6838      	ldr	r0, [r7, #0]
 801008a:	f000 faeb 	bl	8010664 <etharp_raw>
      break;
 801008e:	e001      	b.n	8010094 <etharp_input+0xf8>
      break;
 8010090:	bf00      	nop
 8010092:	e000      	b.n	8010096 <etharp_input+0xfa>
      break;
 8010094:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 8010096:	6878      	ldr	r0, [r7, #4]
 8010098:	f7f9 fd32 	bl	8009b00 <pbuf_free>
}
 801009c:	3718      	adds	r7, #24
 801009e:	46bd      	mov	sp, r7
 80100a0:	bdb0      	pop	{r4, r5, r7, pc}
 80100a2:	bf00      	nop
 80100a4:	080155e0 	.word	0x080155e0
 80100a8:	08015730 	.word	0x08015730
 80100ac:	08015658 	.word	0x08015658

080100b0 <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 80100b0:	b580      	push	{r7, lr}
 80100b2:	b086      	sub	sp, #24
 80100b4:	af02      	add	r7, sp, #8
 80100b6:	60f8      	str	r0, [r7, #12]
 80100b8:	60b9      	str	r1, [r7, #8]
 80100ba:	4613      	mov	r3, r2
 80100bc:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 80100be:	79fa      	ldrb	r2, [r7, #7]
 80100c0:	4944      	ldr	r1, [pc, #272]	@ (80101d4 <etharp_output_to_arp_index+0x124>)
 80100c2:	4613      	mov	r3, r2
 80100c4:	005b      	lsls	r3, r3, #1
 80100c6:	4413      	add	r3, r2
 80100c8:	00db      	lsls	r3, r3, #3
 80100ca:	440b      	add	r3, r1
 80100cc:	3314      	adds	r3, #20
 80100ce:	781b      	ldrb	r3, [r3, #0]
 80100d0:	2b01      	cmp	r3, #1
 80100d2:	d806      	bhi.n	80100e2 <etharp_output_to_arp_index+0x32>
 80100d4:	4b40      	ldr	r3, [pc, #256]	@ (80101d8 <etharp_output_to_arp_index+0x128>)
 80100d6:	f240 22ee 	movw	r2, #750	@ 0x2ee
 80100da:	4940      	ldr	r1, [pc, #256]	@ (80101dc <etharp_output_to_arp_index+0x12c>)
 80100dc:	4840      	ldr	r0, [pc, #256]	@ (80101e0 <etharp_output_to_arp_index+0x130>)
 80100de:	f002 f8ed 	bl	80122bc <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 80100e2:	79fa      	ldrb	r2, [r7, #7]
 80100e4:	493b      	ldr	r1, [pc, #236]	@ (80101d4 <etharp_output_to_arp_index+0x124>)
 80100e6:	4613      	mov	r3, r2
 80100e8:	005b      	lsls	r3, r3, #1
 80100ea:	4413      	add	r3, r2
 80100ec:	00db      	lsls	r3, r3, #3
 80100ee:	440b      	add	r3, r1
 80100f0:	3314      	adds	r3, #20
 80100f2:	781b      	ldrb	r3, [r3, #0]
 80100f4:	2b02      	cmp	r3, #2
 80100f6:	d153      	bne.n	80101a0 <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 80100f8:	79fa      	ldrb	r2, [r7, #7]
 80100fa:	4936      	ldr	r1, [pc, #216]	@ (80101d4 <etharp_output_to_arp_index+0x124>)
 80100fc:	4613      	mov	r3, r2
 80100fe:	005b      	lsls	r3, r3, #1
 8010100:	4413      	add	r3, r2
 8010102:	00db      	lsls	r3, r3, #3
 8010104:	440b      	add	r3, r1
 8010106:	3312      	adds	r3, #18
 8010108:	881b      	ldrh	r3, [r3, #0]
 801010a:	f5b3 7f8e 	cmp.w	r3, #284	@ 0x11c
 801010e:	d919      	bls.n	8010144 <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 8010110:	79fa      	ldrb	r2, [r7, #7]
 8010112:	4613      	mov	r3, r2
 8010114:	005b      	lsls	r3, r3, #1
 8010116:	4413      	add	r3, r2
 8010118:	00db      	lsls	r3, r3, #3
 801011a:	4a2e      	ldr	r2, [pc, #184]	@ (80101d4 <etharp_output_to_arp_index+0x124>)
 801011c:	4413      	add	r3, r2
 801011e:	3304      	adds	r3, #4
 8010120:	4619      	mov	r1, r3
 8010122:	68f8      	ldr	r0, [r7, #12]
 8010124:	f000 fb4c 	bl	80107c0 <etharp_request>
 8010128:	4603      	mov	r3, r0
 801012a:	2b00      	cmp	r3, #0
 801012c:	d138      	bne.n	80101a0 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 801012e:	79fa      	ldrb	r2, [r7, #7]
 8010130:	4928      	ldr	r1, [pc, #160]	@ (80101d4 <etharp_output_to_arp_index+0x124>)
 8010132:	4613      	mov	r3, r2
 8010134:	005b      	lsls	r3, r3, #1
 8010136:	4413      	add	r3, r2
 8010138:	00db      	lsls	r3, r3, #3
 801013a:	440b      	add	r3, r1
 801013c:	3314      	adds	r3, #20
 801013e:	2203      	movs	r2, #3
 8010140:	701a      	strb	r2, [r3, #0]
 8010142:	e02d      	b.n	80101a0 <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 8010144:	79fa      	ldrb	r2, [r7, #7]
 8010146:	4923      	ldr	r1, [pc, #140]	@ (80101d4 <etharp_output_to_arp_index+0x124>)
 8010148:	4613      	mov	r3, r2
 801014a:	005b      	lsls	r3, r3, #1
 801014c:	4413      	add	r3, r2
 801014e:	00db      	lsls	r3, r3, #3
 8010150:	440b      	add	r3, r1
 8010152:	3312      	adds	r3, #18
 8010154:	881b      	ldrh	r3, [r3, #0]
 8010156:	f5b3 7f87 	cmp.w	r3, #270	@ 0x10e
 801015a:	d321      	bcc.n	80101a0 <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 801015c:	79fa      	ldrb	r2, [r7, #7]
 801015e:	4613      	mov	r3, r2
 8010160:	005b      	lsls	r3, r3, #1
 8010162:	4413      	add	r3, r2
 8010164:	00db      	lsls	r3, r3, #3
 8010166:	4a1b      	ldr	r2, [pc, #108]	@ (80101d4 <etharp_output_to_arp_index+0x124>)
 8010168:	4413      	add	r3, r2
 801016a:	1d19      	adds	r1, r3, #4
 801016c:	79fa      	ldrb	r2, [r7, #7]
 801016e:	4613      	mov	r3, r2
 8010170:	005b      	lsls	r3, r3, #1
 8010172:	4413      	add	r3, r2
 8010174:	00db      	lsls	r3, r3, #3
 8010176:	3308      	adds	r3, #8
 8010178:	4a16      	ldr	r2, [pc, #88]	@ (80101d4 <etharp_output_to_arp_index+0x124>)
 801017a:	4413      	add	r3, r2
 801017c:	3304      	adds	r3, #4
 801017e:	461a      	mov	r2, r3
 8010180:	68f8      	ldr	r0, [r7, #12]
 8010182:	f000 fafb 	bl	801077c <etharp_request_dst>
 8010186:	4603      	mov	r3, r0
 8010188:	2b00      	cmp	r3, #0
 801018a:	d109      	bne.n	80101a0 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 801018c:	79fa      	ldrb	r2, [r7, #7]
 801018e:	4911      	ldr	r1, [pc, #68]	@ (80101d4 <etharp_output_to_arp_index+0x124>)
 8010190:	4613      	mov	r3, r2
 8010192:	005b      	lsls	r3, r3, #1
 8010194:	4413      	add	r3, r2
 8010196:	00db      	lsls	r3, r3, #3
 8010198:	440b      	add	r3, r1
 801019a:	3314      	adds	r3, #20
 801019c:	2203      	movs	r2, #3
 801019e:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 80101a0:	68fb      	ldr	r3, [r7, #12]
 80101a2:	f103 0126 	add.w	r1, r3, #38	@ 0x26
 80101a6:	79fa      	ldrb	r2, [r7, #7]
 80101a8:	4613      	mov	r3, r2
 80101aa:	005b      	lsls	r3, r3, #1
 80101ac:	4413      	add	r3, r2
 80101ae:	00db      	lsls	r3, r3, #3
 80101b0:	3308      	adds	r3, #8
 80101b2:	4a08      	ldr	r2, [pc, #32]	@ (80101d4 <etharp_output_to_arp_index+0x124>)
 80101b4:	4413      	add	r3, r2
 80101b6:	3304      	adds	r3, #4
 80101b8:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80101bc:	9200      	str	r2, [sp, #0]
 80101be:	460a      	mov	r2, r1
 80101c0:	68b9      	ldr	r1, [r7, #8]
 80101c2:	68f8      	ldr	r0, [r7, #12]
 80101c4:	f001 fe40 	bl	8011e48 <ethernet_output>
 80101c8:	4603      	mov	r3, r0
}
 80101ca:	4618      	mov	r0, r3
 80101cc:	3710      	adds	r7, #16
 80101ce:	46bd      	mov	sp, r7
 80101d0:	bd80      	pop	{r7, pc}
 80101d2:	bf00      	nop
 80101d4:	2001015c 	.word	0x2001015c
 80101d8:	080155e0 	.word	0x080155e0
 80101dc:	08015750 	.word	0x08015750
 80101e0:	08015658 	.word	0x08015658

080101e4 <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 80101e4:	b580      	push	{r7, lr}
 80101e6:	b08a      	sub	sp, #40	@ 0x28
 80101e8:	af02      	add	r7, sp, #8
 80101ea:	60f8      	str	r0, [r7, #12]
 80101ec:	60b9      	str	r1, [r7, #8]
 80101ee:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 80101f0:	687b      	ldr	r3, [r7, #4]
 80101f2:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 80101f4:	68fb      	ldr	r3, [r7, #12]
 80101f6:	2b00      	cmp	r3, #0
 80101f8:	d106      	bne.n	8010208 <etharp_output+0x24>
 80101fa:	4b73      	ldr	r3, [pc, #460]	@ (80103c8 <etharp_output+0x1e4>)
 80101fc:	f240 321e 	movw	r2, #798	@ 0x31e
 8010200:	4972      	ldr	r1, [pc, #456]	@ (80103cc <etharp_output+0x1e8>)
 8010202:	4873      	ldr	r0, [pc, #460]	@ (80103d0 <etharp_output+0x1ec>)
 8010204:	f002 f85a 	bl	80122bc <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 8010208:	68bb      	ldr	r3, [r7, #8]
 801020a:	2b00      	cmp	r3, #0
 801020c:	d106      	bne.n	801021c <etharp_output+0x38>
 801020e:	4b6e      	ldr	r3, [pc, #440]	@ (80103c8 <etharp_output+0x1e4>)
 8010210:	f240 321f 	movw	r2, #799	@ 0x31f
 8010214:	496f      	ldr	r1, [pc, #444]	@ (80103d4 <etharp_output+0x1f0>)
 8010216:	486e      	ldr	r0, [pc, #440]	@ (80103d0 <etharp_output+0x1ec>)
 8010218:	f002 f850 	bl	80122bc <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 801021c:	687b      	ldr	r3, [r7, #4]
 801021e:	2b00      	cmp	r3, #0
 8010220:	d106      	bne.n	8010230 <etharp_output+0x4c>
 8010222:	4b69      	ldr	r3, [pc, #420]	@ (80103c8 <etharp_output+0x1e4>)
 8010224:	f44f 7248 	mov.w	r2, #800	@ 0x320
 8010228:	496b      	ldr	r1, [pc, #428]	@ (80103d8 <etharp_output+0x1f4>)
 801022a:	4869      	ldr	r0, [pc, #420]	@ (80103d0 <etharp_output+0x1ec>)
 801022c:	f002 f846 	bl	80122bc <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 8010230:	687b      	ldr	r3, [r7, #4]
 8010232:	681b      	ldr	r3, [r3, #0]
 8010234:	68f9      	ldr	r1, [r7, #12]
 8010236:	4618      	mov	r0, r3
 8010238:	f000 fef8 	bl	801102c <ip4_addr_isbroadcast_u32>
 801023c:	4603      	mov	r3, r0
 801023e:	2b00      	cmp	r3, #0
 8010240:	d002      	beq.n	8010248 <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 8010242:	4b66      	ldr	r3, [pc, #408]	@ (80103dc <etharp_output+0x1f8>)
 8010244:	61fb      	str	r3, [r7, #28]
 8010246:	e0af      	b.n	80103a8 <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 8010248:	687b      	ldr	r3, [r7, #4]
 801024a:	681b      	ldr	r3, [r3, #0]
 801024c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8010250:	2be0      	cmp	r3, #224	@ 0xe0
 8010252:	d118      	bne.n	8010286 <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 8010254:	2301      	movs	r3, #1
 8010256:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 8010258:	2300      	movs	r3, #0
 801025a:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 801025c:	235e      	movs	r3, #94	@ 0x5e
 801025e:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 8010260:	687b      	ldr	r3, [r7, #4]
 8010262:	3301      	adds	r3, #1
 8010264:	781b      	ldrb	r3, [r3, #0]
 8010266:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 801026a:	b2db      	uxtb	r3, r3
 801026c:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 801026e:	687b      	ldr	r3, [r7, #4]
 8010270:	3302      	adds	r3, #2
 8010272:	781b      	ldrb	r3, [r3, #0]
 8010274:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 8010276:	687b      	ldr	r3, [r7, #4]
 8010278:	3303      	adds	r3, #3
 801027a:	781b      	ldrb	r3, [r3, #0]
 801027c:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 801027e:	f107 0310 	add.w	r3, r7, #16
 8010282:	61fb      	str	r3, [r7, #28]
 8010284:	e090      	b.n	80103a8 <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8010286:	687b      	ldr	r3, [r7, #4]
 8010288:	681a      	ldr	r2, [r3, #0]
 801028a:	68fb      	ldr	r3, [r7, #12]
 801028c:	3304      	adds	r3, #4
 801028e:	681b      	ldr	r3, [r3, #0]
 8010290:	405a      	eors	r2, r3
 8010292:	68fb      	ldr	r3, [r7, #12]
 8010294:	3308      	adds	r3, #8
 8010296:	681b      	ldr	r3, [r3, #0]
 8010298:	4013      	ands	r3, r2
 801029a:	2b00      	cmp	r3, #0
 801029c:	d012      	beq.n	80102c4 <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 801029e:	687b      	ldr	r3, [r7, #4]
 80102a0:	681b      	ldr	r3, [r3, #0]
 80102a2:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 80102a4:	f64f 62a9 	movw	r2, #65193	@ 0xfea9
 80102a8:	4293      	cmp	r3, r2
 80102aa:	d00b      	beq.n	80102c4 <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 80102ac:	68fb      	ldr	r3, [r7, #12]
 80102ae:	330c      	adds	r3, #12
 80102b0:	681b      	ldr	r3, [r3, #0]
 80102b2:	2b00      	cmp	r3, #0
 80102b4:	d003      	beq.n	80102be <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 80102b6:	68fb      	ldr	r3, [r7, #12]
 80102b8:	330c      	adds	r3, #12
 80102ba:	61bb      	str	r3, [r7, #24]
 80102bc:	e002      	b.n	80102c4 <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 80102be:	f06f 0303 	mvn.w	r3, #3
 80102c2:	e07d      	b.n	80103c0 <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 80102c4:	4b46      	ldr	r3, [pc, #280]	@ (80103e0 <etharp_output+0x1fc>)
 80102c6:	781b      	ldrb	r3, [r3, #0]
 80102c8:	4619      	mov	r1, r3
 80102ca:	4a46      	ldr	r2, [pc, #280]	@ (80103e4 <etharp_output+0x200>)
 80102cc:	460b      	mov	r3, r1
 80102ce:	005b      	lsls	r3, r3, #1
 80102d0:	440b      	add	r3, r1
 80102d2:	00db      	lsls	r3, r3, #3
 80102d4:	4413      	add	r3, r2
 80102d6:	3314      	adds	r3, #20
 80102d8:	781b      	ldrb	r3, [r3, #0]
 80102da:	2b01      	cmp	r3, #1
 80102dc:	d925      	bls.n	801032a <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 80102de:	4b40      	ldr	r3, [pc, #256]	@ (80103e0 <etharp_output+0x1fc>)
 80102e0:	781b      	ldrb	r3, [r3, #0]
 80102e2:	4619      	mov	r1, r3
 80102e4:	4a3f      	ldr	r2, [pc, #252]	@ (80103e4 <etharp_output+0x200>)
 80102e6:	460b      	mov	r3, r1
 80102e8:	005b      	lsls	r3, r3, #1
 80102ea:	440b      	add	r3, r1
 80102ec:	00db      	lsls	r3, r3, #3
 80102ee:	4413      	add	r3, r2
 80102f0:	3308      	adds	r3, #8
 80102f2:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 80102f4:	68fa      	ldr	r2, [r7, #12]
 80102f6:	429a      	cmp	r2, r3
 80102f8:	d117      	bne.n	801032a <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 80102fa:	69bb      	ldr	r3, [r7, #24]
 80102fc:	681a      	ldr	r2, [r3, #0]
 80102fe:	4b38      	ldr	r3, [pc, #224]	@ (80103e0 <etharp_output+0x1fc>)
 8010300:	781b      	ldrb	r3, [r3, #0]
 8010302:	4618      	mov	r0, r3
 8010304:	4937      	ldr	r1, [pc, #220]	@ (80103e4 <etharp_output+0x200>)
 8010306:	4603      	mov	r3, r0
 8010308:	005b      	lsls	r3, r3, #1
 801030a:	4403      	add	r3, r0
 801030c:	00db      	lsls	r3, r3, #3
 801030e:	440b      	add	r3, r1
 8010310:	3304      	adds	r3, #4
 8010312:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 8010314:	429a      	cmp	r2, r3
 8010316:	d108      	bne.n	801032a <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 8010318:	4b31      	ldr	r3, [pc, #196]	@ (80103e0 <etharp_output+0x1fc>)
 801031a:	781b      	ldrb	r3, [r3, #0]
 801031c:	461a      	mov	r2, r3
 801031e:	68b9      	ldr	r1, [r7, #8]
 8010320:	68f8      	ldr	r0, [r7, #12]
 8010322:	f7ff fec5 	bl	80100b0 <etharp_output_to_arp_index>
 8010326:	4603      	mov	r3, r0
 8010328:	e04a      	b.n	80103c0 <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 801032a:	2300      	movs	r3, #0
 801032c:	75fb      	strb	r3, [r7, #23]
 801032e:	e031      	b.n	8010394 <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8010330:	7dfa      	ldrb	r2, [r7, #23]
 8010332:	492c      	ldr	r1, [pc, #176]	@ (80103e4 <etharp_output+0x200>)
 8010334:	4613      	mov	r3, r2
 8010336:	005b      	lsls	r3, r3, #1
 8010338:	4413      	add	r3, r2
 801033a:	00db      	lsls	r3, r3, #3
 801033c:	440b      	add	r3, r1
 801033e:	3314      	adds	r3, #20
 8010340:	781b      	ldrb	r3, [r3, #0]
 8010342:	2b01      	cmp	r3, #1
 8010344:	d923      	bls.n	801038e <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 8010346:	7dfa      	ldrb	r2, [r7, #23]
 8010348:	4926      	ldr	r1, [pc, #152]	@ (80103e4 <etharp_output+0x200>)
 801034a:	4613      	mov	r3, r2
 801034c:	005b      	lsls	r3, r3, #1
 801034e:	4413      	add	r3, r2
 8010350:	00db      	lsls	r3, r3, #3
 8010352:	440b      	add	r3, r1
 8010354:	3308      	adds	r3, #8
 8010356:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8010358:	68fa      	ldr	r2, [r7, #12]
 801035a:	429a      	cmp	r2, r3
 801035c:	d117      	bne.n	801038e <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 801035e:	69bb      	ldr	r3, [r7, #24]
 8010360:	6819      	ldr	r1, [r3, #0]
 8010362:	7dfa      	ldrb	r2, [r7, #23]
 8010364:	481f      	ldr	r0, [pc, #124]	@ (80103e4 <etharp_output+0x200>)
 8010366:	4613      	mov	r3, r2
 8010368:	005b      	lsls	r3, r3, #1
 801036a:	4413      	add	r3, r2
 801036c:	00db      	lsls	r3, r3, #3
 801036e:	4403      	add	r3, r0
 8010370:	3304      	adds	r3, #4
 8010372:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 8010374:	4299      	cmp	r1, r3
 8010376:	d10a      	bne.n	801038e <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 8010378:	4a19      	ldr	r2, [pc, #100]	@ (80103e0 <etharp_output+0x1fc>)
 801037a:	7dfb      	ldrb	r3, [r7, #23]
 801037c:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 801037e:	7dfb      	ldrb	r3, [r7, #23]
 8010380:	461a      	mov	r2, r3
 8010382:	68b9      	ldr	r1, [r7, #8]
 8010384:	68f8      	ldr	r0, [r7, #12]
 8010386:	f7ff fe93 	bl	80100b0 <etharp_output_to_arp_index>
 801038a:	4603      	mov	r3, r0
 801038c:	e018      	b.n	80103c0 <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 801038e:	7dfb      	ldrb	r3, [r7, #23]
 8010390:	3301      	adds	r3, #1
 8010392:	75fb      	strb	r3, [r7, #23]
 8010394:	7dfb      	ldrb	r3, [r7, #23]
 8010396:	2b09      	cmp	r3, #9
 8010398:	d9ca      	bls.n	8010330 <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 801039a:	68ba      	ldr	r2, [r7, #8]
 801039c:	69b9      	ldr	r1, [r7, #24]
 801039e:	68f8      	ldr	r0, [r7, #12]
 80103a0:	f000 f822 	bl	80103e8 <etharp_query>
 80103a4:	4603      	mov	r3, r0
 80103a6:	e00b      	b.n	80103c0 <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 80103a8:	68fb      	ldr	r3, [r7, #12]
 80103aa:	f103 0226 	add.w	r2, r3, #38	@ 0x26
 80103ae:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80103b2:	9300      	str	r3, [sp, #0]
 80103b4:	69fb      	ldr	r3, [r7, #28]
 80103b6:	68b9      	ldr	r1, [r7, #8]
 80103b8:	68f8      	ldr	r0, [r7, #12]
 80103ba:	f001 fd45 	bl	8011e48 <ethernet_output>
 80103be:	4603      	mov	r3, r0
}
 80103c0:	4618      	mov	r0, r3
 80103c2:	3720      	adds	r7, #32
 80103c4:	46bd      	mov	sp, r7
 80103c6:	bd80      	pop	{r7, pc}
 80103c8:	080155e0 	.word	0x080155e0
 80103cc:	08015730 	.word	0x08015730
 80103d0:	08015658 	.word	0x08015658
 80103d4:	08015780 	.word	0x08015780
 80103d8:	08015720 	.word	0x08015720
 80103dc:	08015e00 	.word	0x08015e00
 80103e0:	2001024c 	.word	0x2001024c
 80103e4:	2001015c 	.word	0x2001015c

080103e8 <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 80103e8:	b580      	push	{r7, lr}
 80103ea:	b08c      	sub	sp, #48	@ 0x30
 80103ec:	af02      	add	r7, sp, #8
 80103ee:	60f8      	str	r0, [r7, #12]
 80103f0:	60b9      	str	r1, [r7, #8]
 80103f2:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 80103f4:	68fb      	ldr	r3, [r7, #12]
 80103f6:	3326      	adds	r3, #38	@ 0x26
 80103f8:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 80103fa:	23ff      	movs	r3, #255	@ 0xff
 80103fc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  int is_new_entry = 0;
 8010400:	2300      	movs	r3, #0
 8010402:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8010404:	68bb      	ldr	r3, [r7, #8]
 8010406:	681b      	ldr	r3, [r3, #0]
 8010408:	68f9      	ldr	r1, [r7, #12]
 801040a:	4618      	mov	r0, r3
 801040c:	f000 fe0e 	bl	801102c <ip4_addr_isbroadcast_u32>
 8010410:	4603      	mov	r3, r0
 8010412:	2b00      	cmp	r3, #0
 8010414:	d10c      	bne.n	8010430 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 8010416:	68bb      	ldr	r3, [r7, #8]
 8010418:	681b      	ldr	r3, [r3, #0]
 801041a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 801041e:	2be0      	cmp	r3, #224	@ 0xe0
 8010420:	d006      	beq.n	8010430 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 8010422:	68bb      	ldr	r3, [r7, #8]
 8010424:	2b00      	cmp	r3, #0
 8010426:	d003      	beq.n	8010430 <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 8010428:	68bb      	ldr	r3, [r7, #8]
 801042a:	681b      	ldr	r3, [r3, #0]
 801042c:	2b00      	cmp	r3, #0
 801042e:	d102      	bne.n	8010436 <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 8010430:	f06f 030f 	mvn.w	r3, #15
 8010434:	e101      	b.n	801063a <etharp_query+0x252>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 8010436:	68fa      	ldr	r2, [r7, #12]
 8010438:	2101      	movs	r1, #1
 801043a:	68b8      	ldr	r0, [r7, #8]
 801043c:	f7ff fb60 	bl	800fb00 <etharp_find_entry>
 8010440:	4603      	mov	r3, r0
 8010442:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 8010444:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8010448:	2b00      	cmp	r3, #0
 801044a:	da02      	bge.n	8010452 <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 801044c:	8a7b      	ldrh	r3, [r7, #18]
 801044e:	b25b      	sxtb	r3, r3
 8010450:	e0f3      	b.n	801063a <etharp_query+0x252>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 8010452:	8a7b      	ldrh	r3, [r7, #18]
 8010454:	2b7e      	cmp	r3, #126	@ 0x7e
 8010456:	d906      	bls.n	8010466 <etharp_query+0x7e>
 8010458:	4b7a      	ldr	r3, [pc, #488]	@ (8010644 <etharp_query+0x25c>)
 801045a:	f240 32c1 	movw	r2, #961	@ 0x3c1
 801045e:	497a      	ldr	r1, [pc, #488]	@ (8010648 <etharp_query+0x260>)
 8010460:	487a      	ldr	r0, [pc, #488]	@ (801064c <etharp_query+0x264>)
 8010462:	f001 ff2b 	bl	80122bc <iprintf>
  i = (netif_addr_idx_t)i_err;
 8010466:	8a7b      	ldrh	r3, [r7, #18]
 8010468:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 801046a:	7c7a      	ldrb	r2, [r7, #17]
 801046c:	4978      	ldr	r1, [pc, #480]	@ (8010650 <etharp_query+0x268>)
 801046e:	4613      	mov	r3, r2
 8010470:	005b      	lsls	r3, r3, #1
 8010472:	4413      	add	r3, r2
 8010474:	00db      	lsls	r3, r3, #3
 8010476:	440b      	add	r3, r1
 8010478:	3314      	adds	r3, #20
 801047a:	781b      	ldrb	r3, [r3, #0]
 801047c:	2b00      	cmp	r3, #0
 801047e:	d115      	bne.n	80104ac <etharp_query+0xc4>
    is_new_entry = 1;
 8010480:	2301      	movs	r3, #1
 8010482:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 8010484:	7c7a      	ldrb	r2, [r7, #17]
 8010486:	4972      	ldr	r1, [pc, #456]	@ (8010650 <etharp_query+0x268>)
 8010488:	4613      	mov	r3, r2
 801048a:	005b      	lsls	r3, r3, #1
 801048c:	4413      	add	r3, r2
 801048e:	00db      	lsls	r3, r3, #3
 8010490:	440b      	add	r3, r1
 8010492:	3314      	adds	r3, #20
 8010494:	2201      	movs	r2, #1
 8010496:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 8010498:	7c7a      	ldrb	r2, [r7, #17]
 801049a:	496d      	ldr	r1, [pc, #436]	@ (8010650 <etharp_query+0x268>)
 801049c:	4613      	mov	r3, r2
 801049e:	005b      	lsls	r3, r3, #1
 80104a0:	4413      	add	r3, r2
 80104a2:	00db      	lsls	r3, r3, #3
 80104a4:	440b      	add	r3, r1
 80104a6:	3308      	adds	r3, #8
 80104a8:	68fa      	ldr	r2, [r7, #12]
 80104aa:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 80104ac:	7c7a      	ldrb	r2, [r7, #17]
 80104ae:	4968      	ldr	r1, [pc, #416]	@ (8010650 <etharp_query+0x268>)
 80104b0:	4613      	mov	r3, r2
 80104b2:	005b      	lsls	r3, r3, #1
 80104b4:	4413      	add	r3, r2
 80104b6:	00db      	lsls	r3, r3, #3
 80104b8:	440b      	add	r3, r1
 80104ba:	3314      	adds	r3, #20
 80104bc:	781b      	ldrb	r3, [r3, #0]
 80104be:	2b01      	cmp	r3, #1
 80104c0:	d011      	beq.n	80104e6 <etharp_query+0xfe>
 80104c2:	7c7a      	ldrb	r2, [r7, #17]
 80104c4:	4962      	ldr	r1, [pc, #392]	@ (8010650 <etharp_query+0x268>)
 80104c6:	4613      	mov	r3, r2
 80104c8:	005b      	lsls	r3, r3, #1
 80104ca:	4413      	add	r3, r2
 80104cc:	00db      	lsls	r3, r3, #3
 80104ce:	440b      	add	r3, r1
 80104d0:	3314      	adds	r3, #20
 80104d2:	781b      	ldrb	r3, [r3, #0]
 80104d4:	2b01      	cmp	r3, #1
 80104d6:	d806      	bhi.n	80104e6 <etharp_query+0xfe>
 80104d8:	4b5a      	ldr	r3, [pc, #360]	@ (8010644 <etharp_query+0x25c>)
 80104da:	f240 32cd 	movw	r2, #973	@ 0x3cd
 80104de:	495d      	ldr	r1, [pc, #372]	@ (8010654 <etharp_query+0x26c>)
 80104e0:	485a      	ldr	r0, [pc, #360]	@ (801064c <etharp_query+0x264>)
 80104e2:	f001 feeb 	bl	80122bc <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 80104e6:	6a3b      	ldr	r3, [r7, #32]
 80104e8:	2b00      	cmp	r3, #0
 80104ea:	d102      	bne.n	80104f2 <etharp_query+0x10a>
 80104ec:	687b      	ldr	r3, [r7, #4]
 80104ee:	2b00      	cmp	r3, #0
 80104f0:	d10c      	bne.n	801050c <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 80104f2:	68b9      	ldr	r1, [r7, #8]
 80104f4:	68f8      	ldr	r0, [r7, #12]
 80104f6:	f000 f963 	bl	80107c0 <etharp_request>
 80104fa:	4603      	mov	r3, r0
 80104fc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 8010500:	687b      	ldr	r3, [r7, #4]
 8010502:	2b00      	cmp	r3, #0
 8010504:	d102      	bne.n	801050c <etharp_query+0x124>
      return result;
 8010506:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 801050a:	e096      	b.n	801063a <etharp_query+0x252>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 801050c:	687b      	ldr	r3, [r7, #4]
 801050e:	2b00      	cmp	r3, #0
 8010510:	d106      	bne.n	8010520 <etharp_query+0x138>
 8010512:	4b4c      	ldr	r3, [pc, #304]	@ (8010644 <etharp_query+0x25c>)
 8010514:	f240 32e1 	movw	r2, #993	@ 0x3e1
 8010518:	494f      	ldr	r1, [pc, #316]	@ (8010658 <etharp_query+0x270>)
 801051a:	484c      	ldr	r0, [pc, #304]	@ (801064c <etharp_query+0x264>)
 801051c:	f001 fece 	bl	80122bc <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 8010520:	7c7a      	ldrb	r2, [r7, #17]
 8010522:	494b      	ldr	r1, [pc, #300]	@ (8010650 <etharp_query+0x268>)
 8010524:	4613      	mov	r3, r2
 8010526:	005b      	lsls	r3, r3, #1
 8010528:	4413      	add	r3, r2
 801052a:	00db      	lsls	r3, r3, #3
 801052c:	440b      	add	r3, r1
 801052e:	3314      	adds	r3, #20
 8010530:	781b      	ldrb	r3, [r3, #0]
 8010532:	2b01      	cmp	r3, #1
 8010534:	d917      	bls.n	8010566 <etharp_query+0x17e>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 8010536:	4a49      	ldr	r2, [pc, #292]	@ (801065c <etharp_query+0x274>)
 8010538:	7c7b      	ldrb	r3, [r7, #17]
 801053a:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 801053c:	7c7a      	ldrb	r2, [r7, #17]
 801053e:	4613      	mov	r3, r2
 8010540:	005b      	lsls	r3, r3, #1
 8010542:	4413      	add	r3, r2
 8010544:	00db      	lsls	r3, r3, #3
 8010546:	3308      	adds	r3, #8
 8010548:	4a41      	ldr	r2, [pc, #260]	@ (8010650 <etharp_query+0x268>)
 801054a:	4413      	add	r3, r2
 801054c:	3304      	adds	r3, #4
 801054e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8010552:	9200      	str	r2, [sp, #0]
 8010554:	697a      	ldr	r2, [r7, #20]
 8010556:	6879      	ldr	r1, [r7, #4]
 8010558:	68f8      	ldr	r0, [r7, #12]
 801055a:	f001 fc75 	bl	8011e48 <ethernet_output>
 801055e:	4603      	mov	r3, r0
 8010560:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8010564:	e067      	b.n	8010636 <etharp_query+0x24e>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 8010566:	7c7a      	ldrb	r2, [r7, #17]
 8010568:	4939      	ldr	r1, [pc, #228]	@ (8010650 <etharp_query+0x268>)
 801056a:	4613      	mov	r3, r2
 801056c:	005b      	lsls	r3, r3, #1
 801056e:	4413      	add	r3, r2
 8010570:	00db      	lsls	r3, r3, #3
 8010572:	440b      	add	r3, r1
 8010574:	3314      	adds	r3, #20
 8010576:	781b      	ldrb	r3, [r3, #0]
 8010578:	2b01      	cmp	r3, #1
 801057a:	d15c      	bne.n	8010636 <etharp_query+0x24e>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 801057c:	2300      	movs	r3, #0
 801057e:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 8010580:	687b      	ldr	r3, [r7, #4]
 8010582:	61fb      	str	r3, [r7, #28]
    while (p) {
 8010584:	e01c      	b.n	80105c0 <etharp_query+0x1d8>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 8010586:	69fb      	ldr	r3, [r7, #28]
 8010588:	895a      	ldrh	r2, [r3, #10]
 801058a:	69fb      	ldr	r3, [r7, #28]
 801058c:	891b      	ldrh	r3, [r3, #8]
 801058e:	429a      	cmp	r2, r3
 8010590:	d10a      	bne.n	80105a8 <etharp_query+0x1c0>
 8010592:	69fb      	ldr	r3, [r7, #28]
 8010594:	681b      	ldr	r3, [r3, #0]
 8010596:	2b00      	cmp	r3, #0
 8010598:	d006      	beq.n	80105a8 <etharp_query+0x1c0>
 801059a:	4b2a      	ldr	r3, [pc, #168]	@ (8010644 <etharp_query+0x25c>)
 801059c:	f240 32f1 	movw	r2, #1009	@ 0x3f1
 80105a0:	492f      	ldr	r1, [pc, #188]	@ (8010660 <etharp_query+0x278>)
 80105a2:	482a      	ldr	r0, [pc, #168]	@ (801064c <etharp_query+0x264>)
 80105a4:	f001 fe8a 	bl	80122bc <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 80105a8:	69fb      	ldr	r3, [r7, #28]
 80105aa:	7b1b      	ldrb	r3, [r3, #12]
 80105ac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80105b0:	2b00      	cmp	r3, #0
 80105b2:	d002      	beq.n	80105ba <etharp_query+0x1d2>
        copy_needed = 1;
 80105b4:	2301      	movs	r3, #1
 80105b6:	61bb      	str	r3, [r7, #24]
        break;
 80105b8:	e005      	b.n	80105c6 <etharp_query+0x1de>
      }
      p = p->next;
 80105ba:	69fb      	ldr	r3, [r7, #28]
 80105bc:	681b      	ldr	r3, [r3, #0]
 80105be:	61fb      	str	r3, [r7, #28]
    while (p) {
 80105c0:	69fb      	ldr	r3, [r7, #28]
 80105c2:	2b00      	cmp	r3, #0
 80105c4:	d1df      	bne.n	8010586 <etharp_query+0x19e>
    }
    if (copy_needed) {
 80105c6:	69bb      	ldr	r3, [r7, #24]
 80105c8:	2b00      	cmp	r3, #0
 80105ca:	d007      	beq.n	80105dc <etharp_query+0x1f4>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 80105cc:	687a      	ldr	r2, [r7, #4]
 80105ce:	f44f 7120 	mov.w	r1, #640	@ 0x280
 80105d2:	200e      	movs	r0, #14
 80105d4:	f7f9 fcfc 	bl	8009fd0 <pbuf_clone>
 80105d8:	61f8      	str	r0, [r7, #28]
 80105da:	e004      	b.n	80105e6 <etharp_query+0x1fe>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 80105dc:	687b      	ldr	r3, [r7, #4]
 80105de:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 80105e0:	69f8      	ldr	r0, [r7, #28]
 80105e2:	f7f9 fb33 	bl	8009c4c <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 80105e6:	69fb      	ldr	r3, [r7, #28]
 80105e8:	2b00      	cmp	r3, #0
 80105ea:	d021      	beq.n	8010630 <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 80105ec:	7c7a      	ldrb	r2, [r7, #17]
 80105ee:	4918      	ldr	r1, [pc, #96]	@ (8010650 <etharp_query+0x268>)
 80105f0:	4613      	mov	r3, r2
 80105f2:	005b      	lsls	r3, r3, #1
 80105f4:	4413      	add	r3, r2
 80105f6:	00db      	lsls	r3, r3, #3
 80105f8:	440b      	add	r3, r1
 80105fa:	681b      	ldr	r3, [r3, #0]
 80105fc:	2b00      	cmp	r3, #0
 80105fe:	d00a      	beq.n	8010616 <etharp_query+0x22e>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 8010600:	7c7a      	ldrb	r2, [r7, #17]
 8010602:	4913      	ldr	r1, [pc, #76]	@ (8010650 <etharp_query+0x268>)
 8010604:	4613      	mov	r3, r2
 8010606:	005b      	lsls	r3, r3, #1
 8010608:	4413      	add	r3, r2
 801060a:	00db      	lsls	r3, r3, #3
 801060c:	440b      	add	r3, r1
 801060e:	681b      	ldr	r3, [r3, #0]
 8010610:	4618      	mov	r0, r3
 8010612:	f7f9 fa75 	bl	8009b00 <pbuf_free>
      }
      arp_table[i].q = p;
 8010616:	7c7a      	ldrb	r2, [r7, #17]
 8010618:	490d      	ldr	r1, [pc, #52]	@ (8010650 <etharp_query+0x268>)
 801061a:	4613      	mov	r3, r2
 801061c:	005b      	lsls	r3, r3, #1
 801061e:	4413      	add	r3, r2
 8010620:	00db      	lsls	r3, r3, #3
 8010622:	440b      	add	r3, r1
 8010624:	69fa      	ldr	r2, [r7, #28]
 8010626:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 8010628:	2300      	movs	r3, #0
 801062a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 801062e:	e002      	b.n	8010636 <etharp_query+0x24e>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 8010630:	23ff      	movs	r3, #255	@ 0xff
 8010632:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }
  }
  return result;
 8010636:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
}
 801063a:	4618      	mov	r0, r3
 801063c:	3728      	adds	r7, #40	@ 0x28
 801063e:	46bd      	mov	sp, r7
 8010640:	bd80      	pop	{r7, pc}
 8010642:	bf00      	nop
 8010644:	080155e0 	.word	0x080155e0
 8010648:	0801578c 	.word	0x0801578c
 801064c:	08015658 	.word	0x08015658
 8010650:	2001015c 	.word	0x2001015c
 8010654:	0801579c 	.word	0x0801579c
 8010658:	08015780 	.word	0x08015780
 801065c:	2001024c 	.word	0x2001024c
 8010660:	080157c4 	.word	0x080157c4

08010664 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 8010664:	b580      	push	{r7, lr}
 8010666:	b08a      	sub	sp, #40	@ 0x28
 8010668:	af02      	add	r7, sp, #8
 801066a:	60f8      	str	r0, [r7, #12]
 801066c:	60b9      	str	r1, [r7, #8]
 801066e:	607a      	str	r2, [r7, #4]
 8010670:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 8010672:	2300      	movs	r3, #0
 8010674:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 8010676:	68fb      	ldr	r3, [r7, #12]
 8010678:	2b00      	cmp	r3, #0
 801067a:	d106      	bne.n	801068a <etharp_raw+0x26>
 801067c:	4b3a      	ldr	r3, [pc, #232]	@ (8010768 <etharp_raw+0x104>)
 801067e:	f240 4257 	movw	r2, #1111	@ 0x457
 8010682:	493a      	ldr	r1, [pc, #232]	@ (801076c <etharp_raw+0x108>)
 8010684:	483a      	ldr	r0, [pc, #232]	@ (8010770 <etharp_raw+0x10c>)
 8010686:	f001 fe19 	bl	80122bc <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 801068a:	f44f 7220 	mov.w	r2, #640	@ 0x280
 801068e:	211c      	movs	r1, #28
 8010690:	200e      	movs	r0, #14
 8010692:	f7f8 ff51 	bl	8009538 <pbuf_alloc>
 8010696:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 8010698:	69bb      	ldr	r3, [r7, #24]
 801069a:	2b00      	cmp	r3, #0
 801069c:	d102      	bne.n	80106a4 <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 801069e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80106a2:	e05d      	b.n	8010760 <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 80106a4:	69bb      	ldr	r3, [r7, #24]
 80106a6:	895b      	ldrh	r3, [r3, #10]
 80106a8:	2b1b      	cmp	r3, #27
 80106aa:	d806      	bhi.n	80106ba <etharp_raw+0x56>
 80106ac:	4b2e      	ldr	r3, [pc, #184]	@ (8010768 <etharp_raw+0x104>)
 80106ae:	f240 4262 	movw	r2, #1122	@ 0x462
 80106b2:	4930      	ldr	r1, [pc, #192]	@ (8010774 <etharp_raw+0x110>)
 80106b4:	482e      	ldr	r0, [pc, #184]	@ (8010770 <etharp_raw+0x10c>)
 80106b6:	f001 fe01 	bl	80122bc <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 80106ba:	69bb      	ldr	r3, [r7, #24]
 80106bc:	685b      	ldr	r3, [r3, #4]
 80106be:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 80106c0:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 80106c2:	4618      	mov	r0, r3
 80106c4:	f7f7 fe2a 	bl	800831c <lwip_htons>
 80106c8:	4603      	mov	r3, r0
 80106ca:	461a      	mov	r2, r3
 80106cc:	697b      	ldr	r3, [r7, #20]
 80106ce:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 80106d0:	68fb      	ldr	r3, [r7, #12]
 80106d2:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 80106d6:	2b06      	cmp	r3, #6
 80106d8:	d006      	beq.n	80106e8 <etharp_raw+0x84>
 80106da:	4b23      	ldr	r3, [pc, #140]	@ (8010768 <etharp_raw+0x104>)
 80106dc:	f240 4269 	movw	r2, #1129	@ 0x469
 80106e0:	4925      	ldr	r1, [pc, #148]	@ (8010778 <etharp_raw+0x114>)
 80106e2:	4823      	ldr	r0, [pc, #140]	@ (8010770 <etharp_raw+0x10c>)
 80106e4:	f001 fdea 	bl	80122bc <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 80106e8:	697b      	ldr	r3, [r7, #20]
 80106ea:	3308      	adds	r3, #8
 80106ec:	2206      	movs	r2, #6
 80106ee:	6839      	ldr	r1, [r7, #0]
 80106f0:	4618      	mov	r0, r3
 80106f2:	f001 ff14 	bl	801251e <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 80106f6:	697b      	ldr	r3, [r7, #20]
 80106f8:	3312      	adds	r3, #18
 80106fa:	2206      	movs	r2, #6
 80106fc:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80106fe:	4618      	mov	r0, r3
 8010700:	f001 ff0d 	bl	801251e <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 8010704:	697b      	ldr	r3, [r7, #20]
 8010706:	330e      	adds	r3, #14
 8010708:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801070a:	6812      	ldr	r2, [r2, #0]
 801070c:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 801070e:	697b      	ldr	r3, [r7, #20]
 8010710:	3318      	adds	r3, #24
 8010712:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8010714:	6812      	ldr	r2, [r2, #0]
 8010716:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 8010718:	697b      	ldr	r3, [r7, #20]
 801071a:	2200      	movs	r2, #0
 801071c:	701a      	strb	r2, [r3, #0]
 801071e:	2200      	movs	r2, #0
 8010720:	f042 0201 	orr.w	r2, r2, #1
 8010724:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 8010726:	697b      	ldr	r3, [r7, #20]
 8010728:	2200      	movs	r2, #0
 801072a:	f042 0208 	orr.w	r2, r2, #8
 801072e:	709a      	strb	r2, [r3, #2]
 8010730:	2200      	movs	r2, #0
 8010732:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 8010734:	697b      	ldr	r3, [r7, #20]
 8010736:	2206      	movs	r2, #6
 8010738:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 801073a:	697b      	ldr	r3, [r7, #20]
 801073c:	2204      	movs	r2, #4
 801073e:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 8010740:	f640 0306 	movw	r3, #2054	@ 0x806
 8010744:	9300      	str	r3, [sp, #0]
 8010746:	687b      	ldr	r3, [r7, #4]
 8010748:	68ba      	ldr	r2, [r7, #8]
 801074a:	69b9      	ldr	r1, [r7, #24]
 801074c:	68f8      	ldr	r0, [r7, #12]
 801074e:	f001 fb7b 	bl	8011e48 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 8010752:	69b8      	ldr	r0, [r7, #24]
 8010754:	f7f9 f9d4 	bl	8009b00 <pbuf_free>
  p = NULL;
 8010758:	2300      	movs	r3, #0
 801075a:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 801075c:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8010760:	4618      	mov	r0, r3
 8010762:	3720      	adds	r7, #32
 8010764:	46bd      	mov	sp, r7
 8010766:	bd80      	pop	{r7, pc}
 8010768:	080155e0 	.word	0x080155e0
 801076c:	08015730 	.word	0x08015730
 8010770:	08015658 	.word	0x08015658
 8010774:	080157e0 	.word	0x080157e0
 8010778:	08015814 	.word	0x08015814

0801077c <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 801077c:	b580      	push	{r7, lr}
 801077e:	b088      	sub	sp, #32
 8010780:	af04      	add	r7, sp, #16
 8010782:	60f8      	str	r0, [r7, #12]
 8010784:	60b9      	str	r1, [r7, #8]
 8010786:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8010788:	68fb      	ldr	r3, [r7, #12]
 801078a:	f103 0126 	add.w	r1, r3, #38	@ 0x26
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 801078e:	68fb      	ldr	r3, [r7, #12]
 8010790:	f103 0026 	add.w	r0, r3, #38	@ 0x26
 8010794:	68fb      	ldr	r3, [r7, #12]
 8010796:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8010798:	2201      	movs	r2, #1
 801079a:	9203      	str	r2, [sp, #12]
 801079c:	68ba      	ldr	r2, [r7, #8]
 801079e:	9202      	str	r2, [sp, #8]
 80107a0:	4a06      	ldr	r2, [pc, #24]	@ (80107bc <etharp_request_dst+0x40>)
 80107a2:	9201      	str	r2, [sp, #4]
 80107a4:	9300      	str	r3, [sp, #0]
 80107a6:	4603      	mov	r3, r0
 80107a8:	687a      	ldr	r2, [r7, #4]
 80107aa:	68f8      	ldr	r0, [r7, #12]
 80107ac:	f7ff ff5a 	bl	8010664 <etharp_raw>
 80107b0:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 80107b2:	4618      	mov	r0, r3
 80107b4:	3710      	adds	r7, #16
 80107b6:	46bd      	mov	sp, r7
 80107b8:	bd80      	pop	{r7, pc}
 80107ba:	bf00      	nop
 80107bc:	08015e08 	.word	0x08015e08

080107c0 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 80107c0:	b580      	push	{r7, lr}
 80107c2:	b082      	sub	sp, #8
 80107c4:	af00      	add	r7, sp, #0
 80107c6:	6078      	str	r0, [r7, #4]
 80107c8:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 80107ca:	4a05      	ldr	r2, [pc, #20]	@ (80107e0 <etharp_request+0x20>)
 80107cc:	6839      	ldr	r1, [r7, #0]
 80107ce:	6878      	ldr	r0, [r7, #4]
 80107d0:	f7ff ffd4 	bl	801077c <etharp_request_dst>
 80107d4:	4603      	mov	r3, r0
}
 80107d6:	4618      	mov	r0, r3
 80107d8:	3708      	adds	r7, #8
 80107da:	46bd      	mov	sp, r7
 80107dc:	bd80      	pop	{r7, pc}
 80107de:	bf00      	nop
 80107e0:	08015e00 	.word	0x08015e00

080107e4 <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 80107e4:	b580      	push	{r7, lr}
 80107e6:	b08e      	sub	sp, #56	@ 0x38
 80107e8:	af04      	add	r7, sp, #16
 80107ea:	6078      	str	r0, [r7, #4]
 80107ec:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 80107ee:	4b79      	ldr	r3, [pc, #484]	@ (80109d4 <icmp_input+0x1f0>)
 80107f0:	689b      	ldr	r3, [r3, #8]
 80107f2:	627b      	str	r3, [r7, #36]	@ 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 80107f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80107f6:	781b      	ldrb	r3, [r3, #0]
 80107f8:	f003 030f 	and.w	r3, r3, #15
 80107fc:	b2db      	uxtb	r3, r3
 80107fe:	009b      	lsls	r3, r3, #2
 8010800:	b2db      	uxtb	r3, r3
 8010802:	847b      	strh	r3, [r7, #34]	@ 0x22
  if (hlen < IP_HLEN) {
 8010804:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8010806:	2b13      	cmp	r3, #19
 8010808:	f240 80cd 	bls.w	80109a6 <icmp_input+0x1c2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 801080c:	687b      	ldr	r3, [r7, #4]
 801080e:	895b      	ldrh	r3, [r3, #10]
 8010810:	2b03      	cmp	r3, #3
 8010812:	f240 80ca 	bls.w	80109aa <icmp_input+0x1c6>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 8010816:	687b      	ldr	r3, [r7, #4]
 8010818:	685b      	ldr	r3, [r3, #4]
 801081a:	781b      	ldrb	r3, [r3, #0]
 801081c:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 8010820:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8010824:	2b00      	cmp	r3, #0
 8010826:	f000 80b7 	beq.w	8010998 <icmp_input+0x1b4>
 801082a:	2b08      	cmp	r3, #8
 801082c:	f040 80b7 	bne.w	801099e <icmp_input+0x1ba>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 8010830:	4b69      	ldr	r3, [pc, #420]	@ (80109d8 <icmp_input+0x1f4>)
 8010832:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8010834:	4b67      	ldr	r3, [pc, #412]	@ (80109d4 <icmp_input+0x1f0>)
 8010836:	695b      	ldr	r3, [r3, #20]
 8010838:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 801083c:	2be0      	cmp	r3, #224	@ 0xe0
 801083e:	f000 80bb 	beq.w	80109b8 <icmp_input+0x1d4>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 8010842:	4b64      	ldr	r3, [pc, #400]	@ (80109d4 <icmp_input+0x1f0>)
 8010844:	695b      	ldr	r3, [r3, #20]
 8010846:	4a63      	ldr	r2, [pc, #396]	@ (80109d4 <icmp_input+0x1f0>)
 8010848:	6812      	ldr	r2, [r2, #0]
 801084a:	4611      	mov	r1, r2
 801084c:	4618      	mov	r0, r3
 801084e:	f000 fbed 	bl	801102c <ip4_addr_isbroadcast_u32>
 8010852:	4603      	mov	r3, r0
 8010854:	2b00      	cmp	r3, #0
 8010856:	f040 80b1 	bne.w	80109bc <icmp_input+0x1d8>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 801085a:	687b      	ldr	r3, [r7, #4]
 801085c:	891b      	ldrh	r3, [r3, #8]
 801085e:	2b07      	cmp	r3, #7
 8010860:	f240 80a5 	bls.w	80109ae <icmp_input+0x1ca>
          return;
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 8010864:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8010866:	330e      	adds	r3, #14
 8010868:	4619      	mov	r1, r3
 801086a:	6878      	ldr	r0, [r7, #4]
 801086c:	f7f9 f8b2 	bl	80099d4 <pbuf_add_header>
 8010870:	4603      	mov	r3, r0
 8010872:	2b00      	cmp	r3, #0
 8010874:	d04b      	beq.n	801090e <icmp_input+0x12a>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 8010876:	687b      	ldr	r3, [r7, #4]
 8010878:	891a      	ldrh	r2, [r3, #8]
 801087a:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 801087c:	4413      	add	r3, r2
 801087e:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 8010880:	687b      	ldr	r3, [r7, #4]
 8010882:	891b      	ldrh	r3, [r3, #8]
 8010884:	8b7a      	ldrh	r2, [r7, #26]
 8010886:	429a      	cmp	r2, r3
 8010888:	f0c0 809a 	bcc.w	80109c0 <icmp_input+0x1dc>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 801088c:	8b7b      	ldrh	r3, [r7, #26]
 801088e:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8010892:	4619      	mov	r1, r3
 8010894:	200e      	movs	r0, #14
 8010896:	f7f8 fe4f 	bl	8009538 <pbuf_alloc>
 801089a:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 801089c:	697b      	ldr	r3, [r7, #20]
 801089e:	2b00      	cmp	r3, #0
 80108a0:	f000 8090 	beq.w	80109c4 <icmp_input+0x1e0>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 80108a4:	697b      	ldr	r3, [r7, #20]
 80108a6:	895b      	ldrh	r3, [r3, #10]
 80108a8:	461a      	mov	r2, r3
 80108aa:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80108ac:	3308      	adds	r3, #8
 80108ae:	429a      	cmp	r2, r3
 80108b0:	d203      	bcs.n	80108ba <icmp_input+0xd6>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 80108b2:	6978      	ldr	r0, [r7, #20]
 80108b4:	f7f9 f924 	bl	8009b00 <pbuf_free>
          goto icmperr;
 80108b8:	e085      	b.n	80109c6 <icmp_input+0x1e2>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 80108ba:	697b      	ldr	r3, [r7, #20]
 80108bc:	685b      	ldr	r3, [r3, #4]
 80108be:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 80108c0:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80108c2:	4618      	mov	r0, r3
 80108c4:	f001 fe2b 	bl	801251e <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 80108c8:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80108ca:	4619      	mov	r1, r3
 80108cc:	6978      	ldr	r0, [r7, #20]
 80108ce:	f7f9 f891 	bl	80099f4 <pbuf_remove_header>
 80108d2:	4603      	mov	r3, r0
 80108d4:	2b00      	cmp	r3, #0
 80108d6:	d009      	beq.n	80108ec <icmp_input+0x108>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 80108d8:	4b40      	ldr	r3, [pc, #256]	@ (80109dc <icmp_input+0x1f8>)
 80108da:	22b6      	movs	r2, #182	@ 0xb6
 80108dc:	4940      	ldr	r1, [pc, #256]	@ (80109e0 <icmp_input+0x1fc>)
 80108de:	4841      	ldr	r0, [pc, #260]	@ (80109e4 <icmp_input+0x200>)
 80108e0:	f001 fcec 	bl	80122bc <iprintf>
          pbuf_free(r);
 80108e4:	6978      	ldr	r0, [r7, #20]
 80108e6:	f7f9 f90b 	bl	8009b00 <pbuf_free>
          goto icmperr;
 80108ea:	e06c      	b.n	80109c6 <icmp_input+0x1e2>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 80108ec:	6879      	ldr	r1, [r7, #4]
 80108ee:	6978      	ldr	r0, [r7, #20]
 80108f0:	f7f9 fa2a 	bl	8009d48 <pbuf_copy>
 80108f4:	4603      	mov	r3, r0
 80108f6:	2b00      	cmp	r3, #0
 80108f8:	d003      	beq.n	8010902 <icmp_input+0x11e>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 80108fa:	6978      	ldr	r0, [r7, #20]
 80108fc:	f7f9 f900 	bl	8009b00 <pbuf_free>
          goto icmperr;
 8010900:	e061      	b.n	80109c6 <icmp_input+0x1e2>
        }
        /* free the original p */
        pbuf_free(p);
 8010902:	6878      	ldr	r0, [r7, #4]
 8010904:	f7f9 f8fc 	bl	8009b00 <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 8010908:	697b      	ldr	r3, [r7, #20]
 801090a:	607b      	str	r3, [r7, #4]
 801090c:	e00f      	b.n	801092e <icmp_input+0x14a>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 801090e:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8010910:	330e      	adds	r3, #14
 8010912:	4619      	mov	r1, r3
 8010914:	6878      	ldr	r0, [r7, #4]
 8010916:	f7f9 f86d 	bl	80099f4 <pbuf_remove_header>
 801091a:	4603      	mov	r3, r0
 801091c:	2b00      	cmp	r3, #0
 801091e:	d006      	beq.n	801092e <icmp_input+0x14a>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 8010920:	4b2e      	ldr	r3, [pc, #184]	@ (80109dc <icmp_input+0x1f8>)
 8010922:	22c7      	movs	r2, #199	@ 0xc7
 8010924:	4930      	ldr	r1, [pc, #192]	@ (80109e8 <icmp_input+0x204>)
 8010926:	482f      	ldr	r0, [pc, #188]	@ (80109e4 <icmp_input+0x200>)
 8010928:	f001 fcc8 	bl	80122bc <iprintf>
          goto icmperr;
 801092c:	e04b      	b.n	80109c6 <icmp_input+0x1e2>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 801092e:	687b      	ldr	r3, [r7, #4]
 8010930:	685b      	ldr	r3, [r3, #4]
 8010932:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 8010934:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8010936:	4619      	mov	r1, r3
 8010938:	6878      	ldr	r0, [r7, #4]
 801093a:	f7f9 f84b 	bl	80099d4 <pbuf_add_header>
 801093e:	4603      	mov	r3, r0
 8010940:	2b00      	cmp	r3, #0
 8010942:	d12b      	bne.n	801099c <icmp_input+0x1b8>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 8010944:	687b      	ldr	r3, [r7, #4]
 8010946:	685b      	ldr	r3, [r3, #4]
 8010948:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 801094a:	69fb      	ldr	r3, [r7, #28]
 801094c:	681a      	ldr	r2, [r3, #0]
 801094e:	68fb      	ldr	r3, [r7, #12]
 8010950:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 8010952:	4b20      	ldr	r3, [pc, #128]	@ (80109d4 <icmp_input+0x1f0>)
 8010954:	691a      	ldr	r2, [r3, #16]
 8010956:	68fb      	ldr	r3, [r7, #12]
 8010958:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 801095a:	693b      	ldr	r3, [r7, #16]
 801095c:	2200      	movs	r2, #0
 801095e:	701a      	strb	r2, [r3, #0]
        else {
          iecho->chksum = 0;
        }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF */
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
 8010960:	693b      	ldr	r3, [r7, #16]
 8010962:	2200      	movs	r2, #0
 8010964:	709a      	strb	r2, [r3, #2]
 8010966:	2200      	movs	r2, #0
 8010968:	70da      	strb	r2, [r3, #3]
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 801096a:	68fb      	ldr	r3, [r7, #12]
 801096c:	22ff      	movs	r2, #255	@ 0xff
 801096e:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 8010970:	68fb      	ldr	r3, [r7, #12]
 8010972:	2200      	movs	r2, #0
 8010974:	729a      	strb	r2, [r3, #10]
 8010976:	2200      	movs	r2, #0
 8010978:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 801097a:	683b      	ldr	r3, [r7, #0]
 801097c:	9302      	str	r3, [sp, #8]
 801097e:	2301      	movs	r3, #1
 8010980:	9301      	str	r3, [sp, #4]
 8010982:	2300      	movs	r3, #0
 8010984:	9300      	str	r3, [sp, #0]
 8010986:	23ff      	movs	r3, #255	@ 0xff
 8010988:	2200      	movs	r2, #0
 801098a:	69f9      	ldr	r1, [r7, #28]
 801098c:	6878      	ldr	r0, [r7, #4]
 801098e:	f000 fa75 	bl	8010e7c <ip4_output_if>
 8010992:	4603      	mov	r3, r0
 8010994:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 8010996:	e001      	b.n	801099c <icmp_input+0x1b8>
      break;
 8010998:	bf00      	nop
 801099a:	e000      	b.n	801099e <icmp_input+0x1ba>
      break;
 801099c:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 801099e:	6878      	ldr	r0, [r7, #4]
 80109a0:	f7f9 f8ae 	bl	8009b00 <pbuf_free>
  return;
 80109a4:	e013      	b.n	80109ce <icmp_input+0x1ea>
    goto lenerr;
 80109a6:	bf00      	nop
 80109a8:	e002      	b.n	80109b0 <icmp_input+0x1cc>
    goto lenerr;
 80109aa:	bf00      	nop
 80109ac:	e000      	b.n	80109b0 <icmp_input+0x1cc>
        goto lenerr;
 80109ae:	bf00      	nop
lenerr:
  pbuf_free(p);
 80109b0:	6878      	ldr	r0, [r7, #4]
 80109b2:	f7f9 f8a5 	bl	8009b00 <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 80109b6:	e00a      	b.n	80109ce <icmp_input+0x1ea>
        goto icmperr;
 80109b8:	bf00      	nop
 80109ba:	e004      	b.n	80109c6 <icmp_input+0x1e2>
        goto icmperr;
 80109bc:	bf00      	nop
 80109be:	e002      	b.n	80109c6 <icmp_input+0x1e2>
          goto icmperr;
 80109c0:	bf00      	nop
 80109c2:	e000      	b.n	80109c6 <icmp_input+0x1e2>
          goto icmperr;
 80109c4:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 80109c6:	6878      	ldr	r0, [r7, #4]
 80109c8:	f7f9 f89a 	bl	8009b00 <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 80109cc:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 80109ce:	3728      	adds	r7, #40	@ 0x28
 80109d0:	46bd      	mov	sp, r7
 80109d2:	bd80      	pop	{r7, pc}
 80109d4:	2000a7e8 	.word	0x2000a7e8
 80109d8:	2000a7fc 	.word	0x2000a7fc
 80109dc:	08015858 	.word	0x08015858
 80109e0:	08015890 	.word	0x08015890
 80109e4:	080158c8 	.word	0x080158c8
 80109e8:	080158f0 	.word	0x080158f0

080109ec <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 80109ec:	b580      	push	{r7, lr}
 80109ee:	b082      	sub	sp, #8
 80109f0:	af00      	add	r7, sp, #0
 80109f2:	6078      	str	r0, [r7, #4]
 80109f4:	460b      	mov	r3, r1
 80109f6:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 80109f8:	78fb      	ldrb	r3, [r7, #3]
 80109fa:	461a      	mov	r2, r3
 80109fc:	2103      	movs	r1, #3
 80109fe:	6878      	ldr	r0, [r7, #4]
 8010a00:	f000 f814 	bl	8010a2c <icmp_send_response>
}
 8010a04:	bf00      	nop
 8010a06:	3708      	adds	r7, #8
 8010a08:	46bd      	mov	sp, r7
 8010a0a:	bd80      	pop	{r7, pc}

08010a0c <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 8010a0c:	b580      	push	{r7, lr}
 8010a0e:	b082      	sub	sp, #8
 8010a10:	af00      	add	r7, sp, #0
 8010a12:	6078      	str	r0, [r7, #4]
 8010a14:	460b      	mov	r3, r1
 8010a16:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 8010a18:	78fb      	ldrb	r3, [r7, #3]
 8010a1a:	461a      	mov	r2, r3
 8010a1c:	210b      	movs	r1, #11
 8010a1e:	6878      	ldr	r0, [r7, #4]
 8010a20:	f000 f804 	bl	8010a2c <icmp_send_response>
}
 8010a24:	bf00      	nop
 8010a26:	3708      	adds	r7, #8
 8010a28:	46bd      	mov	sp, r7
 8010a2a:	bd80      	pop	{r7, pc}

08010a2c <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 8010a2c:	b580      	push	{r7, lr}
 8010a2e:	b08c      	sub	sp, #48	@ 0x30
 8010a30:	af04      	add	r7, sp, #16
 8010a32:	6078      	str	r0, [r7, #4]
 8010a34:	460b      	mov	r3, r1
 8010a36:	70fb      	strb	r3, [r7, #3]
 8010a38:	4613      	mov	r3, r2
 8010a3a:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 8010a3c:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8010a40:	2124      	movs	r1, #36	@ 0x24
 8010a42:	2022      	movs	r0, #34	@ 0x22
 8010a44:	f7f8 fd78 	bl	8009538 <pbuf_alloc>
 8010a48:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 8010a4a:	69fb      	ldr	r3, [r7, #28]
 8010a4c:	2b00      	cmp	r3, #0
 8010a4e:	d04c      	beq.n	8010aea <icmp_send_response+0xbe>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 8010a50:	69fb      	ldr	r3, [r7, #28]
 8010a52:	895b      	ldrh	r3, [r3, #10]
 8010a54:	2b23      	cmp	r3, #35	@ 0x23
 8010a56:	d806      	bhi.n	8010a66 <icmp_send_response+0x3a>
 8010a58:	4b26      	ldr	r3, [pc, #152]	@ (8010af4 <icmp_send_response+0xc8>)
 8010a5a:	f44f 72b4 	mov.w	r2, #360	@ 0x168
 8010a5e:	4926      	ldr	r1, [pc, #152]	@ (8010af8 <icmp_send_response+0xcc>)
 8010a60:	4826      	ldr	r0, [pc, #152]	@ (8010afc <icmp_send_response+0xd0>)
 8010a62:	f001 fc2b 	bl	80122bc <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 8010a66:	687b      	ldr	r3, [r7, #4]
 8010a68:	685b      	ldr	r3, [r3, #4]
 8010a6a:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 8010a6c:	69fb      	ldr	r3, [r7, #28]
 8010a6e:	685b      	ldr	r3, [r3, #4]
 8010a70:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 8010a72:	697b      	ldr	r3, [r7, #20]
 8010a74:	78fa      	ldrb	r2, [r7, #3]
 8010a76:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 8010a78:	697b      	ldr	r3, [r7, #20]
 8010a7a:	78ba      	ldrb	r2, [r7, #2]
 8010a7c:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 8010a7e:	697b      	ldr	r3, [r7, #20]
 8010a80:	2200      	movs	r2, #0
 8010a82:	711a      	strb	r2, [r3, #4]
 8010a84:	2200      	movs	r2, #0
 8010a86:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 8010a88:	697b      	ldr	r3, [r7, #20]
 8010a8a:	2200      	movs	r2, #0
 8010a8c:	719a      	strb	r2, [r3, #6]
 8010a8e:	2200      	movs	r2, #0
 8010a90:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 8010a92:	69fb      	ldr	r3, [r7, #28]
 8010a94:	685b      	ldr	r3, [r3, #4]
 8010a96:	f103 0008 	add.w	r0, r3, #8
 8010a9a:	687b      	ldr	r3, [r7, #4]
 8010a9c:	685b      	ldr	r3, [r3, #4]
 8010a9e:	221c      	movs	r2, #28
 8010aa0:	4619      	mov	r1, r3
 8010aa2:	f001 fd3c 	bl	801251e <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 8010aa6:	69bb      	ldr	r3, [r7, #24]
 8010aa8:	68db      	ldr	r3, [r3, #12]
 8010aaa:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 8010aac:	f107 030c 	add.w	r3, r7, #12
 8010ab0:	4618      	mov	r0, r3
 8010ab2:	f000 f825 	bl	8010b00 <ip4_route>
 8010ab6:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 8010ab8:	693b      	ldr	r3, [r7, #16]
 8010aba:	2b00      	cmp	r3, #0
 8010abc:	d011      	beq.n	8010ae2 <icmp_send_response+0xb6>
    /* calculate checksum */
    icmphdr->chksum = 0;
 8010abe:	697b      	ldr	r3, [r7, #20]
 8010ac0:	2200      	movs	r2, #0
 8010ac2:	709a      	strb	r2, [r3, #2]
 8010ac4:	2200      	movs	r2, #0
 8010ac6:	70da      	strb	r2, [r3, #3]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 8010ac8:	f107 020c 	add.w	r2, r7, #12
 8010acc:	693b      	ldr	r3, [r7, #16]
 8010ace:	9302      	str	r3, [sp, #8]
 8010ad0:	2301      	movs	r3, #1
 8010ad2:	9301      	str	r3, [sp, #4]
 8010ad4:	2300      	movs	r3, #0
 8010ad6:	9300      	str	r3, [sp, #0]
 8010ad8:	23ff      	movs	r3, #255	@ 0xff
 8010ada:	2100      	movs	r1, #0
 8010adc:	69f8      	ldr	r0, [r7, #28]
 8010ade:	f000 f9cd 	bl	8010e7c <ip4_output_if>
  }
  pbuf_free(q);
 8010ae2:	69f8      	ldr	r0, [r7, #28]
 8010ae4:	f7f9 f80c 	bl	8009b00 <pbuf_free>
 8010ae8:	e000      	b.n	8010aec <icmp_send_response+0xc0>
    return;
 8010aea:	bf00      	nop
}
 8010aec:	3720      	adds	r7, #32
 8010aee:	46bd      	mov	sp, r7
 8010af0:	bd80      	pop	{r7, pc}
 8010af2:	bf00      	nop
 8010af4:	08015858 	.word	0x08015858
 8010af8:	08015924 	.word	0x08015924
 8010afc:	080158c8 	.word	0x080158c8

08010b00 <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 8010b00:	b480      	push	{r7}
 8010b02:	b085      	sub	sp, #20
 8010b04:	af00      	add	r7, sp, #0
 8010b06:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 8010b08:	4b33      	ldr	r3, [pc, #204]	@ (8010bd8 <ip4_route+0xd8>)
 8010b0a:	681b      	ldr	r3, [r3, #0]
 8010b0c:	60fb      	str	r3, [r7, #12]
 8010b0e:	e036      	b.n	8010b7e <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8010b10:	68fb      	ldr	r3, [r7, #12]
 8010b12:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8010b16:	f003 0301 	and.w	r3, r3, #1
 8010b1a:	b2db      	uxtb	r3, r3
 8010b1c:	2b00      	cmp	r3, #0
 8010b1e:	d02b      	beq.n	8010b78 <ip4_route+0x78>
 8010b20:	68fb      	ldr	r3, [r7, #12]
 8010b22:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8010b26:	089b      	lsrs	r3, r3, #2
 8010b28:	f003 0301 	and.w	r3, r3, #1
 8010b2c:	b2db      	uxtb	r3, r3
 8010b2e:	2b00      	cmp	r3, #0
 8010b30:	d022      	beq.n	8010b78 <ip4_route+0x78>
 8010b32:	68fb      	ldr	r3, [r7, #12]
 8010b34:	3304      	adds	r3, #4
 8010b36:	681b      	ldr	r3, [r3, #0]
 8010b38:	2b00      	cmp	r3, #0
 8010b3a:	d01d      	beq.n	8010b78 <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 8010b3c:	687b      	ldr	r3, [r7, #4]
 8010b3e:	681a      	ldr	r2, [r3, #0]
 8010b40:	68fb      	ldr	r3, [r7, #12]
 8010b42:	3304      	adds	r3, #4
 8010b44:	681b      	ldr	r3, [r3, #0]
 8010b46:	405a      	eors	r2, r3
 8010b48:	68fb      	ldr	r3, [r7, #12]
 8010b4a:	3308      	adds	r3, #8
 8010b4c:	681b      	ldr	r3, [r3, #0]
 8010b4e:	4013      	ands	r3, r2
 8010b50:	2b00      	cmp	r3, #0
 8010b52:	d101      	bne.n	8010b58 <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 8010b54:	68fb      	ldr	r3, [r7, #12]
 8010b56:	e038      	b.n	8010bca <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 8010b58:	68fb      	ldr	r3, [r7, #12]
 8010b5a:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8010b5e:	f003 0302 	and.w	r3, r3, #2
 8010b62:	2b00      	cmp	r3, #0
 8010b64:	d108      	bne.n	8010b78 <ip4_route+0x78>
 8010b66:	687b      	ldr	r3, [r7, #4]
 8010b68:	681a      	ldr	r2, [r3, #0]
 8010b6a:	68fb      	ldr	r3, [r7, #12]
 8010b6c:	330c      	adds	r3, #12
 8010b6e:	681b      	ldr	r3, [r3, #0]
 8010b70:	429a      	cmp	r2, r3
 8010b72:	d101      	bne.n	8010b78 <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 8010b74:	68fb      	ldr	r3, [r7, #12]
 8010b76:	e028      	b.n	8010bca <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 8010b78:	68fb      	ldr	r3, [r7, #12]
 8010b7a:	681b      	ldr	r3, [r3, #0]
 8010b7c:	60fb      	str	r3, [r7, #12]
 8010b7e:	68fb      	ldr	r3, [r7, #12]
 8010b80:	2b00      	cmp	r3, #0
 8010b82:	d1c5      	bne.n	8010b10 <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8010b84:	4b15      	ldr	r3, [pc, #84]	@ (8010bdc <ip4_route+0xdc>)
 8010b86:	681b      	ldr	r3, [r3, #0]
 8010b88:	2b00      	cmp	r3, #0
 8010b8a:	d01a      	beq.n	8010bc2 <ip4_route+0xc2>
 8010b8c:	4b13      	ldr	r3, [pc, #76]	@ (8010bdc <ip4_route+0xdc>)
 8010b8e:	681b      	ldr	r3, [r3, #0]
 8010b90:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8010b94:	f003 0301 	and.w	r3, r3, #1
 8010b98:	2b00      	cmp	r3, #0
 8010b9a:	d012      	beq.n	8010bc2 <ip4_route+0xc2>
 8010b9c:	4b0f      	ldr	r3, [pc, #60]	@ (8010bdc <ip4_route+0xdc>)
 8010b9e:	681b      	ldr	r3, [r3, #0]
 8010ba0:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8010ba4:	f003 0304 	and.w	r3, r3, #4
 8010ba8:	2b00      	cmp	r3, #0
 8010baa:	d00a      	beq.n	8010bc2 <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 8010bac:	4b0b      	ldr	r3, [pc, #44]	@ (8010bdc <ip4_route+0xdc>)
 8010bae:	681b      	ldr	r3, [r3, #0]
 8010bb0:	3304      	adds	r3, #4
 8010bb2:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8010bb4:	2b00      	cmp	r3, #0
 8010bb6:	d004      	beq.n	8010bc2 <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 8010bb8:	687b      	ldr	r3, [r7, #4]
 8010bba:	681b      	ldr	r3, [r3, #0]
 8010bbc:	b2db      	uxtb	r3, r3
 8010bbe:	2b7f      	cmp	r3, #127	@ 0x7f
 8010bc0:	d101      	bne.n	8010bc6 <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 8010bc2:	2300      	movs	r3, #0
 8010bc4:	e001      	b.n	8010bca <ip4_route+0xca>
  }

  return netif_default;
 8010bc6:	4b05      	ldr	r3, [pc, #20]	@ (8010bdc <ip4_route+0xdc>)
 8010bc8:	681b      	ldr	r3, [r3, #0]
}
 8010bca:	4618      	mov	r0, r3
 8010bcc:	3714      	adds	r7, #20
 8010bce:	46bd      	mov	sp, r7
 8010bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010bd4:	4770      	bx	lr
 8010bd6:	bf00      	nop
 8010bd8:	200100f0 	.word	0x200100f0
 8010bdc:	200100f4 	.word	0x200100f4

08010be0 <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 8010be0:	b580      	push	{r7, lr}
 8010be2:	b082      	sub	sp, #8
 8010be4:	af00      	add	r7, sp, #0
 8010be6:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 8010be8:	687b      	ldr	r3, [r7, #4]
 8010bea:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8010bee:	f003 0301 	and.w	r3, r3, #1
 8010bf2:	b2db      	uxtb	r3, r3
 8010bf4:	2b00      	cmp	r3, #0
 8010bf6:	d016      	beq.n	8010c26 <ip4_input_accept+0x46>
 8010bf8:	687b      	ldr	r3, [r7, #4]
 8010bfa:	3304      	adds	r3, #4
 8010bfc:	681b      	ldr	r3, [r3, #0]
 8010bfe:	2b00      	cmp	r3, #0
 8010c00:	d011      	beq.n	8010c26 <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8010c02:	4b0b      	ldr	r3, [pc, #44]	@ (8010c30 <ip4_input_accept+0x50>)
 8010c04:	695a      	ldr	r2, [r3, #20]
 8010c06:	687b      	ldr	r3, [r7, #4]
 8010c08:	3304      	adds	r3, #4
 8010c0a:	681b      	ldr	r3, [r3, #0]
 8010c0c:	429a      	cmp	r2, r3
 8010c0e:	d008      	beq.n	8010c22 <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 8010c10:	4b07      	ldr	r3, [pc, #28]	@ (8010c30 <ip4_input_accept+0x50>)
 8010c12:	695b      	ldr	r3, [r3, #20]
 8010c14:	6879      	ldr	r1, [r7, #4]
 8010c16:	4618      	mov	r0, r3
 8010c18:	f000 fa08 	bl	801102c <ip4_addr_isbroadcast_u32>
 8010c1c:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8010c1e:	2b00      	cmp	r3, #0
 8010c20:	d001      	beq.n	8010c26 <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 8010c22:	2301      	movs	r3, #1
 8010c24:	e000      	b.n	8010c28 <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 8010c26:	2300      	movs	r3, #0
}
 8010c28:	4618      	mov	r0, r3
 8010c2a:	3708      	adds	r7, #8
 8010c2c:	46bd      	mov	sp, r7
 8010c2e:	bd80      	pop	{r7, pc}
 8010c30:	2000a7e8 	.word	0x2000a7e8

08010c34 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 8010c34:	b580      	push	{r7, lr}
 8010c36:	b086      	sub	sp, #24
 8010c38:	af00      	add	r7, sp, #0
 8010c3a:	6078      	str	r0, [r7, #4]
 8010c3c:	6039      	str	r1, [r7, #0]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 8010c3e:	687b      	ldr	r3, [r7, #4]
 8010c40:	685b      	ldr	r3, [r3, #4]
 8010c42:	617b      	str	r3, [r7, #20]
  if (IPH_V(iphdr) != 4) {
 8010c44:	697b      	ldr	r3, [r7, #20]
 8010c46:	781b      	ldrb	r3, [r3, #0]
 8010c48:	091b      	lsrs	r3, r3, #4
 8010c4a:	b2db      	uxtb	r3, r3
 8010c4c:	2b04      	cmp	r3, #4
 8010c4e:	d004      	beq.n	8010c5a <ip4_input+0x26>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 8010c50:	6878      	ldr	r0, [r7, #4]
 8010c52:	f7f8 ff55 	bl	8009b00 <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 8010c56:	2300      	movs	r3, #0
 8010c58:	e107      	b.n	8010e6a <ip4_input+0x236>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 8010c5a:	697b      	ldr	r3, [r7, #20]
 8010c5c:	781b      	ldrb	r3, [r3, #0]
 8010c5e:	f003 030f 	and.w	r3, r3, #15
 8010c62:	b2db      	uxtb	r3, r3
 8010c64:	009b      	lsls	r3, r3, #2
 8010c66:	b2db      	uxtb	r3, r3
 8010c68:	81fb      	strh	r3, [r7, #14]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 8010c6a:	697b      	ldr	r3, [r7, #20]
 8010c6c:	885b      	ldrh	r3, [r3, #2]
 8010c6e:	b29b      	uxth	r3, r3
 8010c70:	4618      	mov	r0, r3
 8010c72:	f7f7 fb53 	bl	800831c <lwip_htons>
 8010c76:	4603      	mov	r3, r0
 8010c78:	81bb      	strh	r3, [r7, #12]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 8010c7a:	687b      	ldr	r3, [r7, #4]
 8010c7c:	891b      	ldrh	r3, [r3, #8]
 8010c7e:	89ba      	ldrh	r2, [r7, #12]
 8010c80:	429a      	cmp	r2, r3
 8010c82:	d204      	bcs.n	8010c8e <ip4_input+0x5a>
    pbuf_realloc(p, iphdr_len);
 8010c84:	89bb      	ldrh	r3, [r7, #12]
 8010c86:	4619      	mov	r1, r3
 8010c88:	6878      	ldr	r0, [r7, #4]
 8010c8a:	f7f8 fdb3 	bl	80097f4 <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 8010c8e:	687b      	ldr	r3, [r7, #4]
 8010c90:	895b      	ldrh	r3, [r3, #10]
 8010c92:	89fa      	ldrh	r2, [r7, #14]
 8010c94:	429a      	cmp	r2, r3
 8010c96:	d807      	bhi.n	8010ca8 <ip4_input+0x74>
 8010c98:	687b      	ldr	r3, [r7, #4]
 8010c9a:	891b      	ldrh	r3, [r3, #8]
 8010c9c:	89ba      	ldrh	r2, [r7, #12]
 8010c9e:	429a      	cmp	r2, r3
 8010ca0:	d802      	bhi.n	8010ca8 <ip4_input+0x74>
 8010ca2:	89fb      	ldrh	r3, [r7, #14]
 8010ca4:	2b13      	cmp	r3, #19
 8010ca6:	d804      	bhi.n	8010cb2 <ip4_input+0x7e>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 8010ca8:	6878      	ldr	r0, [r7, #4]
 8010caa:	f7f8 ff29 	bl	8009b00 <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 8010cae:	2300      	movs	r3, #0
 8010cb0:	e0db      	b.n	8010e6a <ip4_input+0x236>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 8010cb2:	697b      	ldr	r3, [r7, #20]
 8010cb4:	691b      	ldr	r3, [r3, #16]
 8010cb6:	4a6f      	ldr	r2, [pc, #444]	@ (8010e74 <ip4_input+0x240>)
 8010cb8:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 8010cba:	697b      	ldr	r3, [r7, #20]
 8010cbc:	68db      	ldr	r3, [r3, #12]
 8010cbe:	4a6d      	ldr	r2, [pc, #436]	@ (8010e74 <ip4_input+0x240>)
 8010cc0:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8010cc2:	4b6c      	ldr	r3, [pc, #432]	@ (8010e74 <ip4_input+0x240>)
 8010cc4:	695b      	ldr	r3, [r3, #20]
 8010cc6:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8010cca:	2be0      	cmp	r3, #224	@ 0xe0
 8010ccc:	d112      	bne.n	8010cf4 <ip4_input+0xc0>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 8010cce:	683b      	ldr	r3, [r7, #0]
 8010cd0:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8010cd4:	f003 0301 	and.w	r3, r3, #1
 8010cd8:	b2db      	uxtb	r3, r3
 8010cda:	2b00      	cmp	r3, #0
 8010cdc:	d007      	beq.n	8010cee <ip4_input+0xba>
 8010cde:	683b      	ldr	r3, [r7, #0]
 8010ce0:	3304      	adds	r3, #4
 8010ce2:	681b      	ldr	r3, [r3, #0]
 8010ce4:	2b00      	cmp	r3, #0
 8010ce6:	d002      	beq.n	8010cee <ip4_input+0xba>
      netif = inp;
 8010ce8:	683b      	ldr	r3, [r7, #0]
 8010cea:	613b      	str	r3, [r7, #16]
 8010cec:	e02a      	b.n	8010d44 <ip4_input+0x110>
    } else {
      netif = NULL;
 8010cee:	2300      	movs	r3, #0
 8010cf0:	613b      	str	r3, [r7, #16]
 8010cf2:	e027      	b.n	8010d44 <ip4_input+0x110>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 8010cf4:	6838      	ldr	r0, [r7, #0]
 8010cf6:	f7ff ff73 	bl	8010be0 <ip4_input_accept>
 8010cfa:	4603      	mov	r3, r0
 8010cfc:	2b00      	cmp	r3, #0
 8010cfe:	d002      	beq.n	8010d06 <ip4_input+0xd2>
      netif = inp;
 8010d00:	683b      	ldr	r3, [r7, #0]
 8010d02:	613b      	str	r3, [r7, #16]
 8010d04:	e01e      	b.n	8010d44 <ip4_input+0x110>
    } else {
      netif = NULL;
 8010d06:	2300      	movs	r3, #0
 8010d08:	613b      	str	r3, [r7, #16]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 8010d0a:	4b5a      	ldr	r3, [pc, #360]	@ (8010e74 <ip4_input+0x240>)
 8010d0c:	695b      	ldr	r3, [r3, #20]
 8010d0e:	b2db      	uxtb	r3, r3
 8010d10:	2b7f      	cmp	r3, #127	@ 0x7f
 8010d12:	d017      	beq.n	8010d44 <ip4_input+0x110>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 8010d14:	4b58      	ldr	r3, [pc, #352]	@ (8010e78 <ip4_input+0x244>)
 8010d16:	681b      	ldr	r3, [r3, #0]
 8010d18:	613b      	str	r3, [r7, #16]
 8010d1a:	e00e      	b.n	8010d3a <ip4_input+0x106>
          if (netif == inp) {
 8010d1c:	693a      	ldr	r2, [r7, #16]
 8010d1e:	683b      	ldr	r3, [r7, #0]
 8010d20:	429a      	cmp	r2, r3
 8010d22:	d006      	beq.n	8010d32 <ip4_input+0xfe>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 8010d24:	6938      	ldr	r0, [r7, #16]
 8010d26:	f7ff ff5b 	bl	8010be0 <ip4_input_accept>
 8010d2a:	4603      	mov	r3, r0
 8010d2c:	2b00      	cmp	r3, #0
 8010d2e:	d108      	bne.n	8010d42 <ip4_input+0x10e>
 8010d30:	e000      	b.n	8010d34 <ip4_input+0x100>
            continue;
 8010d32:	bf00      	nop
        NETIF_FOREACH(netif) {
 8010d34:	693b      	ldr	r3, [r7, #16]
 8010d36:	681b      	ldr	r3, [r3, #0]
 8010d38:	613b      	str	r3, [r7, #16]
 8010d3a:	693b      	ldr	r3, [r7, #16]
 8010d3c:	2b00      	cmp	r3, #0
 8010d3e:	d1ed      	bne.n	8010d1c <ip4_input+0xe8>
 8010d40:	e000      	b.n	8010d44 <ip4_input+0x110>
            break;
 8010d42:	bf00      	nop
      && !ip4_addr_isany_val(*ip4_current_src_addr())
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8010d44:	4b4b      	ldr	r3, [pc, #300]	@ (8010e74 <ip4_input+0x240>)
 8010d46:	691b      	ldr	r3, [r3, #16]
 8010d48:	6839      	ldr	r1, [r7, #0]
 8010d4a:	4618      	mov	r0, r3
 8010d4c:	f000 f96e 	bl	801102c <ip4_addr_isbroadcast_u32>
 8010d50:	4603      	mov	r3, r0
 8010d52:	2b00      	cmp	r3, #0
 8010d54:	d105      	bne.n	8010d62 <ip4_input+0x12e>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 8010d56:	4b47      	ldr	r3, [pc, #284]	@ (8010e74 <ip4_input+0x240>)
 8010d58:	691b      	ldr	r3, [r3, #16]
 8010d5a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8010d5e:	2be0      	cmp	r3, #224	@ 0xe0
 8010d60:	d104      	bne.n	8010d6c <ip4_input+0x138>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 8010d62:	6878      	ldr	r0, [r7, #4]
 8010d64:	f7f8 fecc 	bl	8009b00 <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 8010d68:	2300      	movs	r3, #0
 8010d6a:	e07e      	b.n	8010e6a <ip4_input+0x236>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 8010d6c:	693b      	ldr	r3, [r7, #16]
 8010d6e:	2b00      	cmp	r3, #0
 8010d70:	d104      	bne.n	8010d7c <ip4_input+0x148>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 8010d72:	6878      	ldr	r0, [r7, #4]
 8010d74:	f7f8 fec4 	bl	8009b00 <pbuf_free>
    return ERR_OK;
 8010d78:	2300      	movs	r3, #0
 8010d7a:	e076      	b.n	8010e6a <ip4_input+0x236>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 8010d7c:	697b      	ldr	r3, [r7, #20]
 8010d7e:	88db      	ldrh	r3, [r3, #6]
 8010d80:	b29b      	uxth	r3, r3
 8010d82:	461a      	mov	r2, r3
 8010d84:	f64f 733f 	movw	r3, #65343	@ 0xff3f
 8010d88:	4013      	ands	r3, r2
 8010d8a:	2b00      	cmp	r3, #0
 8010d8c:	d00b      	beq.n	8010da6 <ip4_input+0x172>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 8010d8e:	6878      	ldr	r0, [r7, #4]
 8010d90:	f000 fc92 	bl	80116b8 <ip4_reass>
 8010d94:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 8010d96:	687b      	ldr	r3, [r7, #4]
 8010d98:	2b00      	cmp	r3, #0
 8010d9a:	d101      	bne.n	8010da0 <ip4_input+0x16c>
      return ERR_OK;
 8010d9c:	2300      	movs	r3, #0
 8010d9e:	e064      	b.n	8010e6a <ip4_input+0x236>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 8010da0:	687b      	ldr	r3, [r7, #4]
 8010da2:	685b      	ldr	r3, [r3, #4]
 8010da4:	617b      	str	r3, [r7, #20]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 8010da6:	4a33      	ldr	r2, [pc, #204]	@ (8010e74 <ip4_input+0x240>)
 8010da8:	693b      	ldr	r3, [r7, #16]
 8010daa:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 8010dac:	4a31      	ldr	r2, [pc, #196]	@ (8010e74 <ip4_input+0x240>)
 8010dae:	683b      	ldr	r3, [r7, #0]
 8010db0:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 8010db2:	4a30      	ldr	r2, [pc, #192]	@ (8010e74 <ip4_input+0x240>)
 8010db4:	697b      	ldr	r3, [r7, #20]
 8010db6:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 8010db8:	697b      	ldr	r3, [r7, #20]
 8010dba:	781b      	ldrb	r3, [r3, #0]
 8010dbc:	f003 030f 	and.w	r3, r3, #15
 8010dc0:	b2db      	uxtb	r3, r3
 8010dc2:	009b      	lsls	r3, r3, #2
 8010dc4:	b2db      	uxtb	r3, r3
 8010dc6:	461a      	mov	r2, r3
 8010dc8:	4b2a      	ldr	r3, [pc, #168]	@ (8010e74 <ip4_input+0x240>)
 8010dca:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 8010dcc:	89fb      	ldrh	r3, [r7, #14]
 8010dce:	4619      	mov	r1, r3
 8010dd0:	6878      	ldr	r0, [r7, #4]
 8010dd2:	f7f8 fe0f 	bl	80099f4 <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 8010dd6:	697b      	ldr	r3, [r7, #20]
 8010dd8:	7a5b      	ldrb	r3, [r3, #9]
 8010dda:	2b11      	cmp	r3, #17
 8010ddc:	d006      	beq.n	8010dec <ip4_input+0x1b8>
 8010dde:	2b11      	cmp	r3, #17
 8010de0:	dc13      	bgt.n	8010e0a <ip4_input+0x1d6>
 8010de2:	2b01      	cmp	r3, #1
 8010de4:	d00c      	beq.n	8010e00 <ip4_input+0x1cc>
 8010de6:	2b06      	cmp	r3, #6
 8010de8:	d005      	beq.n	8010df6 <ip4_input+0x1c2>
 8010dea:	e00e      	b.n	8010e0a <ip4_input+0x1d6>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 8010dec:	6839      	ldr	r1, [r7, #0]
 8010dee:	6878      	ldr	r0, [r7, #4]
 8010df0:	f7fe fc68 	bl	800f6c4 <udp_input>
        break;
 8010df4:	e026      	b.n	8010e44 <ip4_input+0x210>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 8010df6:	6839      	ldr	r1, [r7, #0]
 8010df8:	6878      	ldr	r0, [r7, #4]
 8010dfa:	f7fa fcb7 	bl	800b76c <tcp_input>
        break;
 8010dfe:	e021      	b.n	8010e44 <ip4_input+0x210>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 8010e00:	6839      	ldr	r1, [r7, #0]
 8010e02:	6878      	ldr	r0, [r7, #4]
 8010e04:	f7ff fcee 	bl	80107e4 <icmp_input>
        break;
 8010e08:	e01c      	b.n	8010e44 <ip4_input+0x210>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8010e0a:	4b1a      	ldr	r3, [pc, #104]	@ (8010e74 <ip4_input+0x240>)
 8010e0c:	695b      	ldr	r3, [r3, #20]
 8010e0e:	6939      	ldr	r1, [r7, #16]
 8010e10:	4618      	mov	r0, r3
 8010e12:	f000 f90b 	bl	801102c <ip4_addr_isbroadcast_u32>
 8010e16:	4603      	mov	r3, r0
 8010e18:	2b00      	cmp	r3, #0
 8010e1a:	d10f      	bne.n	8010e3c <ip4_input+0x208>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8010e1c:	4b15      	ldr	r3, [pc, #84]	@ (8010e74 <ip4_input+0x240>)
 8010e1e:	695b      	ldr	r3, [r3, #20]
 8010e20:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8010e24:	2be0      	cmp	r3, #224	@ 0xe0
 8010e26:	d009      	beq.n	8010e3c <ip4_input+0x208>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 8010e28:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8010e2c:	4619      	mov	r1, r3
 8010e2e:	6878      	ldr	r0, [r7, #4]
 8010e30:	f7f8 fe53 	bl	8009ada <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 8010e34:	2102      	movs	r1, #2
 8010e36:	6878      	ldr	r0, [r7, #4]
 8010e38:	f7ff fdd8 	bl	80109ec <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 8010e3c:	6878      	ldr	r0, [r7, #4]
 8010e3e:	f7f8 fe5f 	bl	8009b00 <pbuf_free>
        break;
 8010e42:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 8010e44:	4b0b      	ldr	r3, [pc, #44]	@ (8010e74 <ip4_input+0x240>)
 8010e46:	2200      	movs	r2, #0
 8010e48:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 8010e4a:	4b0a      	ldr	r3, [pc, #40]	@ (8010e74 <ip4_input+0x240>)
 8010e4c:	2200      	movs	r2, #0
 8010e4e:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 8010e50:	4b08      	ldr	r3, [pc, #32]	@ (8010e74 <ip4_input+0x240>)
 8010e52:	2200      	movs	r2, #0
 8010e54:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 8010e56:	4b07      	ldr	r3, [pc, #28]	@ (8010e74 <ip4_input+0x240>)
 8010e58:	2200      	movs	r2, #0
 8010e5a:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 8010e5c:	4b05      	ldr	r3, [pc, #20]	@ (8010e74 <ip4_input+0x240>)
 8010e5e:	2200      	movs	r2, #0
 8010e60:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 8010e62:	4b04      	ldr	r3, [pc, #16]	@ (8010e74 <ip4_input+0x240>)
 8010e64:	2200      	movs	r2, #0
 8010e66:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 8010e68:	2300      	movs	r3, #0
}
 8010e6a:	4618      	mov	r0, r3
 8010e6c:	3718      	adds	r7, #24
 8010e6e:	46bd      	mov	sp, r7
 8010e70:	bd80      	pop	{r7, pc}
 8010e72:	bf00      	nop
 8010e74:	2000a7e8 	.word	0x2000a7e8
 8010e78:	200100f0 	.word	0x200100f0

08010e7c <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 8010e7c:	b580      	push	{r7, lr}
 8010e7e:	b08a      	sub	sp, #40	@ 0x28
 8010e80:	af04      	add	r7, sp, #16
 8010e82:	60f8      	str	r0, [r7, #12]
 8010e84:	60b9      	str	r1, [r7, #8]
 8010e86:	607a      	str	r2, [r7, #4]
 8010e88:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 8010e8a:	68bb      	ldr	r3, [r7, #8]
 8010e8c:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 8010e8e:	687b      	ldr	r3, [r7, #4]
 8010e90:	2b00      	cmp	r3, #0
 8010e92:	d009      	beq.n	8010ea8 <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 8010e94:	68bb      	ldr	r3, [r7, #8]
 8010e96:	2b00      	cmp	r3, #0
 8010e98:	d003      	beq.n	8010ea2 <ip4_output_if+0x26>
 8010e9a:	68bb      	ldr	r3, [r7, #8]
 8010e9c:	681b      	ldr	r3, [r3, #0]
 8010e9e:	2b00      	cmp	r3, #0
 8010ea0:	d102      	bne.n	8010ea8 <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 8010ea2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010ea4:	3304      	adds	r3, #4
 8010ea6:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 8010ea8:	78fa      	ldrb	r2, [r7, #3]
 8010eaa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010eac:	9302      	str	r3, [sp, #8]
 8010eae:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8010eb2:	9301      	str	r3, [sp, #4]
 8010eb4:	f897 3020 	ldrb.w	r3, [r7, #32]
 8010eb8:	9300      	str	r3, [sp, #0]
 8010eba:	4613      	mov	r3, r2
 8010ebc:	687a      	ldr	r2, [r7, #4]
 8010ebe:	6979      	ldr	r1, [r7, #20]
 8010ec0:	68f8      	ldr	r0, [r7, #12]
 8010ec2:	f000 f805 	bl	8010ed0 <ip4_output_if_src>
 8010ec6:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 8010ec8:	4618      	mov	r0, r3
 8010eca:	3718      	adds	r7, #24
 8010ecc:	46bd      	mov	sp, r7
 8010ece:	bd80      	pop	{r7, pc}

08010ed0 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 8010ed0:	b580      	push	{r7, lr}
 8010ed2:	b088      	sub	sp, #32
 8010ed4:	af00      	add	r7, sp, #0
 8010ed6:	60f8      	str	r0, [r7, #12]
 8010ed8:	60b9      	str	r1, [r7, #8]
 8010eda:	607a      	str	r2, [r7, #4]
 8010edc:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 8010ede:	68fb      	ldr	r3, [r7, #12]
 8010ee0:	7b9b      	ldrb	r3, [r3, #14]
 8010ee2:	2b01      	cmp	r3, #1
 8010ee4:	d006      	beq.n	8010ef4 <ip4_output_if_src+0x24>
 8010ee6:	4b4b      	ldr	r3, [pc, #300]	@ (8011014 <ip4_output_if_src+0x144>)
 8010ee8:	f44f 7255 	mov.w	r2, #852	@ 0x354
 8010eec:	494a      	ldr	r1, [pc, #296]	@ (8011018 <ip4_output_if_src+0x148>)
 8010eee:	484b      	ldr	r0, [pc, #300]	@ (801101c <ip4_output_if_src+0x14c>)
 8010ef0:	f001 f9e4 	bl	80122bc <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 8010ef4:	687b      	ldr	r3, [r7, #4]
 8010ef6:	2b00      	cmp	r3, #0
 8010ef8:	d060      	beq.n	8010fbc <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 8010efa:	2314      	movs	r3, #20
 8010efc:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 8010efe:	2114      	movs	r1, #20
 8010f00:	68f8      	ldr	r0, [r7, #12]
 8010f02:	f7f8 fd67 	bl	80099d4 <pbuf_add_header>
 8010f06:	4603      	mov	r3, r0
 8010f08:	2b00      	cmp	r3, #0
 8010f0a:	d002      	beq.n	8010f12 <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8010f0c:	f06f 0301 	mvn.w	r3, #1
 8010f10:	e07c      	b.n	801100c <ip4_output_if_src+0x13c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 8010f12:	68fb      	ldr	r3, [r7, #12]
 8010f14:	685b      	ldr	r3, [r3, #4]
 8010f16:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 8010f18:	68fb      	ldr	r3, [r7, #12]
 8010f1a:	895b      	ldrh	r3, [r3, #10]
 8010f1c:	2b13      	cmp	r3, #19
 8010f1e:	d806      	bhi.n	8010f2e <ip4_output_if_src+0x5e>
 8010f20:	4b3c      	ldr	r3, [pc, #240]	@ (8011014 <ip4_output_if_src+0x144>)
 8010f22:	f44f 7262 	mov.w	r2, #904	@ 0x388
 8010f26:	493e      	ldr	r1, [pc, #248]	@ (8011020 <ip4_output_if_src+0x150>)
 8010f28:	483c      	ldr	r0, [pc, #240]	@ (801101c <ip4_output_if_src+0x14c>)
 8010f2a:	f001 f9c7 	bl	80122bc <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 8010f2e:	69fb      	ldr	r3, [r7, #28]
 8010f30:	78fa      	ldrb	r2, [r7, #3]
 8010f32:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 8010f34:	69fb      	ldr	r3, [r7, #28]
 8010f36:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 8010f3a:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 8010f3c:	687b      	ldr	r3, [r7, #4]
 8010f3e:	681a      	ldr	r2, [r3, #0]
 8010f40:	69fb      	ldr	r3, [r7, #28]
 8010f42:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 8010f44:	8b7b      	ldrh	r3, [r7, #26]
 8010f46:	089b      	lsrs	r3, r3, #2
 8010f48:	b29b      	uxth	r3, r3
 8010f4a:	b2db      	uxtb	r3, r3
 8010f4c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8010f50:	b2da      	uxtb	r2, r3
 8010f52:	69fb      	ldr	r3, [r7, #28]
 8010f54:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 8010f56:	69fb      	ldr	r3, [r7, #28]
 8010f58:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 8010f5c:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 8010f5e:	68fb      	ldr	r3, [r7, #12]
 8010f60:	891b      	ldrh	r3, [r3, #8]
 8010f62:	4618      	mov	r0, r3
 8010f64:	f7f7 f9da 	bl	800831c <lwip_htons>
 8010f68:	4603      	mov	r3, r0
 8010f6a:	461a      	mov	r2, r3
 8010f6c:	69fb      	ldr	r3, [r7, #28]
 8010f6e:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 8010f70:	69fb      	ldr	r3, [r7, #28]
 8010f72:	2200      	movs	r2, #0
 8010f74:	719a      	strb	r2, [r3, #6]
 8010f76:	2200      	movs	r2, #0
 8010f78:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 8010f7a:	4b2a      	ldr	r3, [pc, #168]	@ (8011024 <ip4_output_if_src+0x154>)
 8010f7c:	881b      	ldrh	r3, [r3, #0]
 8010f7e:	4618      	mov	r0, r3
 8010f80:	f7f7 f9cc 	bl	800831c <lwip_htons>
 8010f84:	4603      	mov	r3, r0
 8010f86:	461a      	mov	r2, r3
 8010f88:	69fb      	ldr	r3, [r7, #28]
 8010f8a:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 8010f8c:	4b25      	ldr	r3, [pc, #148]	@ (8011024 <ip4_output_if_src+0x154>)
 8010f8e:	881b      	ldrh	r3, [r3, #0]
 8010f90:	3301      	adds	r3, #1
 8010f92:	b29a      	uxth	r2, r3
 8010f94:	4b23      	ldr	r3, [pc, #140]	@ (8011024 <ip4_output_if_src+0x154>)
 8010f96:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 8010f98:	68bb      	ldr	r3, [r7, #8]
 8010f9a:	2b00      	cmp	r3, #0
 8010f9c:	d104      	bne.n	8010fa8 <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 8010f9e:	4b22      	ldr	r3, [pc, #136]	@ (8011028 <ip4_output_if_src+0x158>)
 8010fa0:	681a      	ldr	r2, [r3, #0]
 8010fa2:	69fb      	ldr	r3, [r7, #28]
 8010fa4:	60da      	str	r2, [r3, #12]
 8010fa6:	e003      	b.n	8010fb0 <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 8010fa8:	68bb      	ldr	r3, [r7, #8]
 8010faa:	681a      	ldr	r2, [r3, #0]
 8010fac:	69fb      	ldr	r3, [r7, #28]
 8010fae:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 8010fb0:	69fb      	ldr	r3, [r7, #28]
 8010fb2:	2200      	movs	r2, #0
 8010fb4:	729a      	strb	r2, [r3, #10]
 8010fb6:	2200      	movs	r2, #0
 8010fb8:	72da      	strb	r2, [r3, #11]
 8010fba:	e00f      	b.n	8010fdc <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 8010fbc:	68fb      	ldr	r3, [r7, #12]
 8010fbe:	895b      	ldrh	r3, [r3, #10]
 8010fc0:	2b13      	cmp	r3, #19
 8010fc2:	d802      	bhi.n	8010fca <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8010fc4:	f06f 0301 	mvn.w	r3, #1
 8010fc8:	e020      	b.n	801100c <ip4_output_if_src+0x13c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 8010fca:	68fb      	ldr	r3, [r7, #12]
 8010fcc:	685b      	ldr	r3, [r3, #4]
 8010fce:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 8010fd0:	69fb      	ldr	r3, [r7, #28]
 8010fd2:	691b      	ldr	r3, [r3, #16]
 8010fd4:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 8010fd6:	f107 0314 	add.w	r3, r7, #20
 8010fda:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 8010fdc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010fde:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8010fe0:	2b00      	cmp	r3, #0
 8010fe2:	d00c      	beq.n	8010ffe <ip4_output_if_src+0x12e>
 8010fe4:	68fb      	ldr	r3, [r7, #12]
 8010fe6:	891a      	ldrh	r2, [r3, #8]
 8010fe8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010fea:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8010fec:	429a      	cmp	r2, r3
 8010fee:	d906      	bls.n	8010ffe <ip4_output_if_src+0x12e>
    return ip4_frag(p, netif, dest);
 8010ff0:	687a      	ldr	r2, [r7, #4]
 8010ff2:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8010ff4:	68f8      	ldr	r0, [r7, #12]
 8010ff6:	f000 fd53 	bl	8011aa0 <ip4_frag>
 8010ffa:	4603      	mov	r3, r0
 8010ffc:	e006      	b.n	801100c <ip4_output_if_src+0x13c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 8010ffe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011000:	695b      	ldr	r3, [r3, #20]
 8011002:	687a      	ldr	r2, [r7, #4]
 8011004:	68f9      	ldr	r1, [r7, #12]
 8011006:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8011008:	4798      	blx	r3
 801100a:	4603      	mov	r3, r0
}
 801100c:	4618      	mov	r0, r3
 801100e:	3720      	adds	r7, #32
 8011010:	46bd      	mov	sp, r7
 8011012:	bd80      	pop	{r7, pc}
 8011014:	08015950 	.word	0x08015950
 8011018:	08015984 	.word	0x08015984
 801101c:	08015990 	.word	0x08015990
 8011020:	080159b8 	.word	0x080159b8
 8011024:	2001024e 	.word	0x2001024e
 8011028:	08015dfc 	.word	0x08015dfc

0801102c <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 801102c:	b480      	push	{r7}
 801102e:	b085      	sub	sp, #20
 8011030:	af00      	add	r7, sp, #0
 8011032:	6078      	str	r0, [r7, #4]
 8011034:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 8011036:	687b      	ldr	r3, [r7, #4]
 8011038:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 801103a:	687b      	ldr	r3, [r7, #4]
 801103c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8011040:	d002      	beq.n	8011048 <ip4_addr_isbroadcast_u32+0x1c>
 8011042:	687b      	ldr	r3, [r7, #4]
 8011044:	2b00      	cmp	r3, #0
 8011046:	d101      	bne.n	801104c <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 8011048:	2301      	movs	r3, #1
 801104a:	e02a      	b.n	80110a2 <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 801104c:	683b      	ldr	r3, [r7, #0]
 801104e:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8011052:	f003 0302 	and.w	r3, r3, #2
 8011056:	2b00      	cmp	r3, #0
 8011058:	d101      	bne.n	801105e <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 801105a:	2300      	movs	r3, #0
 801105c:	e021      	b.n	80110a2 <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 801105e:	683b      	ldr	r3, [r7, #0]
 8011060:	3304      	adds	r3, #4
 8011062:	681b      	ldr	r3, [r3, #0]
 8011064:	687a      	ldr	r2, [r7, #4]
 8011066:	429a      	cmp	r2, r3
 8011068:	d101      	bne.n	801106e <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 801106a:	2300      	movs	r3, #0
 801106c:	e019      	b.n	80110a2 <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 801106e:	68fa      	ldr	r2, [r7, #12]
 8011070:	683b      	ldr	r3, [r7, #0]
 8011072:	3304      	adds	r3, #4
 8011074:	681b      	ldr	r3, [r3, #0]
 8011076:	405a      	eors	r2, r3
 8011078:	683b      	ldr	r3, [r7, #0]
 801107a:	3308      	adds	r3, #8
 801107c:	681b      	ldr	r3, [r3, #0]
 801107e:	4013      	ands	r3, r2
 8011080:	2b00      	cmp	r3, #0
 8011082:	d10d      	bne.n	80110a0 <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8011084:	683b      	ldr	r3, [r7, #0]
 8011086:	3308      	adds	r3, #8
 8011088:	681b      	ldr	r3, [r3, #0]
 801108a:	43da      	mvns	r2, r3
 801108c:	687b      	ldr	r3, [r7, #4]
 801108e:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 8011090:	683b      	ldr	r3, [r7, #0]
 8011092:	3308      	adds	r3, #8
 8011094:	681b      	ldr	r3, [r3, #0]
 8011096:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8011098:	429a      	cmp	r2, r3
 801109a:	d101      	bne.n	80110a0 <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 801109c:	2301      	movs	r3, #1
 801109e:	e000      	b.n	80110a2 <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 80110a0:	2300      	movs	r3, #0
  }
}
 80110a2:	4618      	mov	r0, r3
 80110a4:	3714      	adds	r7, #20
 80110a6:	46bd      	mov	sp, r7
 80110a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80110ac:	4770      	bx	lr
	...

080110b0 <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 80110b0:	b580      	push	{r7, lr}
 80110b2:	b084      	sub	sp, #16
 80110b4:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 80110b6:	2300      	movs	r3, #0
 80110b8:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 80110ba:	4b12      	ldr	r3, [pc, #72]	@ (8011104 <ip_reass_tmr+0x54>)
 80110bc:	681b      	ldr	r3, [r3, #0]
 80110be:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 80110c0:	e018      	b.n	80110f4 <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 80110c2:	68fb      	ldr	r3, [r7, #12]
 80110c4:	7fdb      	ldrb	r3, [r3, #31]
 80110c6:	2b00      	cmp	r3, #0
 80110c8:	d00b      	beq.n	80110e2 <ip_reass_tmr+0x32>
      r->timer--;
 80110ca:	68fb      	ldr	r3, [r7, #12]
 80110cc:	7fdb      	ldrb	r3, [r3, #31]
 80110ce:	3b01      	subs	r3, #1
 80110d0:	b2da      	uxtb	r2, r3
 80110d2:	68fb      	ldr	r3, [r7, #12]
 80110d4:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 80110d6:	68fb      	ldr	r3, [r7, #12]
 80110d8:	60bb      	str	r3, [r7, #8]
      r = r->next;
 80110da:	68fb      	ldr	r3, [r7, #12]
 80110dc:	681b      	ldr	r3, [r3, #0]
 80110de:	60fb      	str	r3, [r7, #12]
 80110e0:	e008      	b.n	80110f4 <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 80110e2:	68fb      	ldr	r3, [r7, #12]
 80110e4:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 80110e6:	68fb      	ldr	r3, [r7, #12]
 80110e8:	681b      	ldr	r3, [r3, #0]
 80110ea:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 80110ec:	68b9      	ldr	r1, [r7, #8]
 80110ee:	6878      	ldr	r0, [r7, #4]
 80110f0:	f000 f80a 	bl	8011108 <ip_reass_free_complete_datagram>
  while (r != NULL) {
 80110f4:	68fb      	ldr	r3, [r7, #12]
 80110f6:	2b00      	cmp	r3, #0
 80110f8:	d1e3      	bne.n	80110c2 <ip_reass_tmr+0x12>
    }
  }
}
 80110fa:	bf00      	nop
 80110fc:	bf00      	nop
 80110fe:	3710      	adds	r7, #16
 8011100:	46bd      	mov	sp, r7
 8011102:	bd80      	pop	{r7, pc}
 8011104:	20010250 	.word	0x20010250

08011108 <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8011108:	b580      	push	{r7, lr}
 801110a:	b088      	sub	sp, #32
 801110c:	af00      	add	r7, sp, #0
 801110e:	6078      	str	r0, [r7, #4]
 8011110:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 8011112:	2300      	movs	r3, #0
 8011114:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 8011116:	683a      	ldr	r2, [r7, #0]
 8011118:	687b      	ldr	r3, [r7, #4]
 801111a:	429a      	cmp	r2, r3
 801111c:	d105      	bne.n	801112a <ip_reass_free_complete_datagram+0x22>
 801111e:	4b45      	ldr	r3, [pc, #276]	@ (8011234 <ip_reass_free_complete_datagram+0x12c>)
 8011120:	22ab      	movs	r2, #171	@ 0xab
 8011122:	4945      	ldr	r1, [pc, #276]	@ (8011238 <ip_reass_free_complete_datagram+0x130>)
 8011124:	4845      	ldr	r0, [pc, #276]	@ (801123c <ip_reass_free_complete_datagram+0x134>)
 8011126:	f001 f8c9 	bl	80122bc <iprintf>
  if (prev != NULL) {
 801112a:	683b      	ldr	r3, [r7, #0]
 801112c:	2b00      	cmp	r3, #0
 801112e:	d00a      	beq.n	8011146 <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 8011130:	683b      	ldr	r3, [r7, #0]
 8011132:	681b      	ldr	r3, [r3, #0]
 8011134:	687a      	ldr	r2, [r7, #4]
 8011136:	429a      	cmp	r2, r3
 8011138:	d005      	beq.n	8011146 <ip_reass_free_complete_datagram+0x3e>
 801113a:	4b3e      	ldr	r3, [pc, #248]	@ (8011234 <ip_reass_free_complete_datagram+0x12c>)
 801113c:	22ad      	movs	r2, #173	@ 0xad
 801113e:	4940      	ldr	r1, [pc, #256]	@ (8011240 <ip_reass_free_complete_datagram+0x138>)
 8011140:	483e      	ldr	r0, [pc, #248]	@ (801123c <ip_reass_free_complete_datagram+0x134>)
 8011142:	f001 f8bb 	bl	80122bc <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 8011146:	687b      	ldr	r3, [r7, #4]
 8011148:	685b      	ldr	r3, [r3, #4]
 801114a:	685b      	ldr	r3, [r3, #4]
 801114c:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 801114e:	697b      	ldr	r3, [r7, #20]
 8011150:	889b      	ldrh	r3, [r3, #4]
 8011152:	b29b      	uxth	r3, r3
 8011154:	2b00      	cmp	r3, #0
 8011156:	d12a      	bne.n	80111ae <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 8011158:	687b      	ldr	r3, [r7, #4]
 801115a:	685b      	ldr	r3, [r3, #4]
 801115c:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 801115e:	697b      	ldr	r3, [r7, #20]
 8011160:	681a      	ldr	r2, [r3, #0]
 8011162:	687b      	ldr	r3, [r7, #4]
 8011164:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 8011166:	69bb      	ldr	r3, [r7, #24]
 8011168:	6858      	ldr	r0, [r3, #4]
 801116a:	687b      	ldr	r3, [r7, #4]
 801116c:	3308      	adds	r3, #8
 801116e:	2214      	movs	r2, #20
 8011170:	4619      	mov	r1, r3
 8011172:	f001 f9d4 	bl	801251e <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 8011176:	2101      	movs	r1, #1
 8011178:	69b8      	ldr	r0, [r7, #24]
 801117a:	f7ff fc47 	bl	8010a0c <icmp_time_exceeded>
    clen = pbuf_clen(p);
 801117e:	69b8      	ldr	r0, [r7, #24]
 8011180:	f7f8 fd4c 	bl	8009c1c <pbuf_clen>
 8011184:	4603      	mov	r3, r0
 8011186:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8011188:	8bfa      	ldrh	r2, [r7, #30]
 801118a:	8a7b      	ldrh	r3, [r7, #18]
 801118c:	4413      	add	r3, r2
 801118e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8011192:	db05      	blt.n	80111a0 <ip_reass_free_complete_datagram+0x98>
 8011194:	4b27      	ldr	r3, [pc, #156]	@ (8011234 <ip_reass_free_complete_datagram+0x12c>)
 8011196:	22bc      	movs	r2, #188	@ 0xbc
 8011198:	492a      	ldr	r1, [pc, #168]	@ (8011244 <ip_reass_free_complete_datagram+0x13c>)
 801119a:	4828      	ldr	r0, [pc, #160]	@ (801123c <ip_reass_free_complete_datagram+0x134>)
 801119c:	f001 f88e 	bl	80122bc <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 80111a0:	8bfa      	ldrh	r2, [r7, #30]
 80111a2:	8a7b      	ldrh	r3, [r7, #18]
 80111a4:	4413      	add	r3, r2
 80111a6:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 80111a8:	69b8      	ldr	r0, [r7, #24]
 80111aa:	f7f8 fca9 	bl	8009b00 <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 80111ae:	687b      	ldr	r3, [r7, #4]
 80111b0:	685b      	ldr	r3, [r3, #4]
 80111b2:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 80111b4:	e01f      	b.n	80111f6 <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 80111b6:	69bb      	ldr	r3, [r7, #24]
 80111b8:	685b      	ldr	r3, [r3, #4]
 80111ba:	617b      	str	r3, [r7, #20]
    pcur = p;
 80111bc:	69bb      	ldr	r3, [r7, #24]
 80111be:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 80111c0:	697b      	ldr	r3, [r7, #20]
 80111c2:	681b      	ldr	r3, [r3, #0]
 80111c4:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 80111c6:	68f8      	ldr	r0, [r7, #12]
 80111c8:	f7f8 fd28 	bl	8009c1c <pbuf_clen>
 80111cc:	4603      	mov	r3, r0
 80111ce:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 80111d0:	8bfa      	ldrh	r2, [r7, #30]
 80111d2:	8a7b      	ldrh	r3, [r7, #18]
 80111d4:	4413      	add	r3, r2
 80111d6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80111da:	db05      	blt.n	80111e8 <ip_reass_free_complete_datagram+0xe0>
 80111dc:	4b15      	ldr	r3, [pc, #84]	@ (8011234 <ip_reass_free_complete_datagram+0x12c>)
 80111de:	22cc      	movs	r2, #204	@ 0xcc
 80111e0:	4918      	ldr	r1, [pc, #96]	@ (8011244 <ip_reass_free_complete_datagram+0x13c>)
 80111e2:	4816      	ldr	r0, [pc, #88]	@ (801123c <ip_reass_free_complete_datagram+0x134>)
 80111e4:	f001 f86a 	bl	80122bc <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 80111e8:	8bfa      	ldrh	r2, [r7, #30]
 80111ea:	8a7b      	ldrh	r3, [r7, #18]
 80111ec:	4413      	add	r3, r2
 80111ee:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 80111f0:	68f8      	ldr	r0, [r7, #12]
 80111f2:	f7f8 fc85 	bl	8009b00 <pbuf_free>
  while (p != NULL) {
 80111f6:	69bb      	ldr	r3, [r7, #24]
 80111f8:	2b00      	cmp	r3, #0
 80111fa:	d1dc      	bne.n	80111b6 <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 80111fc:	6839      	ldr	r1, [r7, #0]
 80111fe:	6878      	ldr	r0, [r7, #4]
 8011200:	f000 f8c2 	bl	8011388 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 8011204:	4b10      	ldr	r3, [pc, #64]	@ (8011248 <ip_reass_free_complete_datagram+0x140>)
 8011206:	881b      	ldrh	r3, [r3, #0]
 8011208:	8bfa      	ldrh	r2, [r7, #30]
 801120a:	429a      	cmp	r2, r3
 801120c:	d905      	bls.n	801121a <ip_reass_free_complete_datagram+0x112>
 801120e:	4b09      	ldr	r3, [pc, #36]	@ (8011234 <ip_reass_free_complete_datagram+0x12c>)
 8011210:	22d2      	movs	r2, #210	@ 0xd2
 8011212:	490e      	ldr	r1, [pc, #56]	@ (801124c <ip_reass_free_complete_datagram+0x144>)
 8011214:	4809      	ldr	r0, [pc, #36]	@ (801123c <ip_reass_free_complete_datagram+0x134>)
 8011216:	f001 f851 	bl	80122bc <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 801121a:	4b0b      	ldr	r3, [pc, #44]	@ (8011248 <ip_reass_free_complete_datagram+0x140>)
 801121c:	881a      	ldrh	r2, [r3, #0]
 801121e:	8bfb      	ldrh	r3, [r7, #30]
 8011220:	1ad3      	subs	r3, r2, r3
 8011222:	b29a      	uxth	r2, r3
 8011224:	4b08      	ldr	r3, [pc, #32]	@ (8011248 <ip_reass_free_complete_datagram+0x140>)
 8011226:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 8011228:	8bfb      	ldrh	r3, [r7, #30]
}
 801122a:	4618      	mov	r0, r3
 801122c:	3720      	adds	r7, #32
 801122e:	46bd      	mov	sp, r7
 8011230:	bd80      	pop	{r7, pc}
 8011232:	bf00      	nop
 8011234:	080159e8 	.word	0x080159e8
 8011238:	08015a24 	.word	0x08015a24
 801123c:	08015a30 	.word	0x08015a30
 8011240:	08015a58 	.word	0x08015a58
 8011244:	08015a6c 	.word	0x08015a6c
 8011248:	20010254 	.word	0x20010254
 801124c:	08015a8c 	.word	0x08015a8c

08011250 <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 8011250:	b580      	push	{r7, lr}
 8011252:	b08a      	sub	sp, #40	@ 0x28
 8011254:	af00      	add	r7, sp, #0
 8011256:	6078      	str	r0, [r7, #4]
 8011258:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 801125a:	2300      	movs	r3, #0
 801125c:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 801125e:	2300      	movs	r3, #0
 8011260:	623b      	str	r3, [r7, #32]
    prev = NULL;
 8011262:	2300      	movs	r3, #0
 8011264:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 8011266:	2300      	movs	r3, #0
 8011268:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 801126a:	2300      	movs	r3, #0
 801126c:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 801126e:	4b28      	ldr	r3, [pc, #160]	@ (8011310 <ip_reass_remove_oldest_datagram+0xc0>)
 8011270:	681b      	ldr	r3, [r3, #0]
 8011272:	627b      	str	r3, [r7, #36]	@ 0x24
    while (r != NULL) {
 8011274:	e030      	b.n	80112d8 <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 8011276:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011278:	695a      	ldr	r2, [r3, #20]
 801127a:	687b      	ldr	r3, [r7, #4]
 801127c:	68db      	ldr	r3, [r3, #12]
 801127e:	429a      	cmp	r2, r3
 8011280:	d10c      	bne.n	801129c <ip_reass_remove_oldest_datagram+0x4c>
 8011282:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011284:	699a      	ldr	r2, [r3, #24]
 8011286:	687b      	ldr	r3, [r7, #4]
 8011288:	691b      	ldr	r3, [r3, #16]
 801128a:	429a      	cmp	r2, r3
 801128c:	d106      	bne.n	801129c <ip_reass_remove_oldest_datagram+0x4c>
 801128e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011290:	899a      	ldrh	r2, [r3, #12]
 8011292:	687b      	ldr	r3, [r7, #4]
 8011294:	889b      	ldrh	r3, [r3, #4]
 8011296:	b29b      	uxth	r3, r3
 8011298:	429a      	cmp	r2, r3
 801129a:	d014      	beq.n	80112c6 <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 801129c:	693b      	ldr	r3, [r7, #16]
 801129e:	3301      	adds	r3, #1
 80112a0:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 80112a2:	6a3b      	ldr	r3, [r7, #32]
 80112a4:	2b00      	cmp	r3, #0
 80112a6:	d104      	bne.n	80112b2 <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 80112a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80112aa:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 80112ac:	69fb      	ldr	r3, [r7, #28]
 80112ae:	61bb      	str	r3, [r7, #24]
 80112b0:	e009      	b.n	80112c6 <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 80112b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80112b4:	7fda      	ldrb	r2, [r3, #31]
 80112b6:	6a3b      	ldr	r3, [r7, #32]
 80112b8:	7fdb      	ldrb	r3, [r3, #31]
 80112ba:	429a      	cmp	r2, r3
 80112bc:	d803      	bhi.n	80112c6 <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 80112be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80112c0:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 80112c2:	69fb      	ldr	r3, [r7, #28]
 80112c4:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 80112c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80112c8:	681b      	ldr	r3, [r3, #0]
 80112ca:	2b00      	cmp	r3, #0
 80112cc:	d001      	beq.n	80112d2 <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 80112ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80112d0:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 80112d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80112d4:	681b      	ldr	r3, [r3, #0]
 80112d6:	627b      	str	r3, [r7, #36]	@ 0x24
    while (r != NULL) {
 80112d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80112da:	2b00      	cmp	r3, #0
 80112dc:	d1cb      	bne.n	8011276 <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 80112de:	6a3b      	ldr	r3, [r7, #32]
 80112e0:	2b00      	cmp	r3, #0
 80112e2:	d008      	beq.n	80112f6 <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 80112e4:	69b9      	ldr	r1, [r7, #24]
 80112e6:	6a38      	ldr	r0, [r7, #32]
 80112e8:	f7ff ff0e 	bl	8011108 <ip_reass_free_complete_datagram>
 80112ec:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 80112ee:	697a      	ldr	r2, [r7, #20]
 80112f0:	68fb      	ldr	r3, [r7, #12]
 80112f2:	4413      	add	r3, r2
 80112f4:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 80112f6:	697a      	ldr	r2, [r7, #20]
 80112f8:	683b      	ldr	r3, [r7, #0]
 80112fa:	429a      	cmp	r2, r3
 80112fc:	da02      	bge.n	8011304 <ip_reass_remove_oldest_datagram+0xb4>
 80112fe:	693b      	ldr	r3, [r7, #16]
 8011300:	2b01      	cmp	r3, #1
 8011302:	dcac      	bgt.n	801125e <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 8011304:	697b      	ldr	r3, [r7, #20]
}
 8011306:	4618      	mov	r0, r3
 8011308:	3728      	adds	r7, #40	@ 0x28
 801130a:	46bd      	mov	sp, r7
 801130c:	bd80      	pop	{r7, pc}
 801130e:	bf00      	nop
 8011310:	20010250 	.word	0x20010250

08011314 <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 8011314:	b580      	push	{r7, lr}
 8011316:	b084      	sub	sp, #16
 8011318:	af00      	add	r7, sp, #0
 801131a:	6078      	str	r0, [r7, #4]
 801131c:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 801131e:	2004      	movs	r0, #4
 8011320:	f7f7 fcd4 	bl	8008ccc <memp_malloc>
 8011324:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 8011326:	68fb      	ldr	r3, [r7, #12]
 8011328:	2b00      	cmp	r3, #0
 801132a:	d110      	bne.n	801134e <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 801132c:	6839      	ldr	r1, [r7, #0]
 801132e:	6878      	ldr	r0, [r7, #4]
 8011330:	f7ff ff8e 	bl	8011250 <ip_reass_remove_oldest_datagram>
 8011334:	4602      	mov	r2, r0
 8011336:	683b      	ldr	r3, [r7, #0]
 8011338:	4293      	cmp	r3, r2
 801133a:	dc03      	bgt.n	8011344 <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 801133c:	2004      	movs	r0, #4
 801133e:	f7f7 fcc5 	bl	8008ccc <memp_malloc>
 8011342:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 8011344:	68fb      	ldr	r3, [r7, #12]
 8011346:	2b00      	cmp	r3, #0
 8011348:	d101      	bne.n	801134e <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 801134a:	2300      	movs	r3, #0
 801134c:	e016      	b.n	801137c <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 801134e:	2220      	movs	r2, #32
 8011350:	2100      	movs	r1, #0
 8011352:	68f8      	ldr	r0, [r7, #12]
 8011354:	f001 f817 	bl	8012386 <memset>
  ipr->timer = IP_REASS_MAXAGE;
 8011358:	68fb      	ldr	r3, [r7, #12]
 801135a:	220f      	movs	r2, #15
 801135c:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 801135e:	4b09      	ldr	r3, [pc, #36]	@ (8011384 <ip_reass_enqueue_new_datagram+0x70>)
 8011360:	681a      	ldr	r2, [r3, #0]
 8011362:	68fb      	ldr	r3, [r7, #12]
 8011364:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 8011366:	4a07      	ldr	r2, [pc, #28]	@ (8011384 <ip_reass_enqueue_new_datagram+0x70>)
 8011368:	68fb      	ldr	r3, [r7, #12]
 801136a:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 801136c:	68fb      	ldr	r3, [r7, #12]
 801136e:	3308      	adds	r3, #8
 8011370:	2214      	movs	r2, #20
 8011372:	6879      	ldr	r1, [r7, #4]
 8011374:	4618      	mov	r0, r3
 8011376:	f001 f8d2 	bl	801251e <memcpy>
  return ipr;
 801137a:	68fb      	ldr	r3, [r7, #12]
}
 801137c:	4618      	mov	r0, r3
 801137e:	3710      	adds	r7, #16
 8011380:	46bd      	mov	sp, r7
 8011382:	bd80      	pop	{r7, pc}
 8011384:	20010250 	.word	0x20010250

08011388 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8011388:	b580      	push	{r7, lr}
 801138a:	b082      	sub	sp, #8
 801138c:	af00      	add	r7, sp, #0
 801138e:	6078      	str	r0, [r7, #4]
 8011390:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 8011392:	4b10      	ldr	r3, [pc, #64]	@ (80113d4 <ip_reass_dequeue_datagram+0x4c>)
 8011394:	681b      	ldr	r3, [r3, #0]
 8011396:	687a      	ldr	r2, [r7, #4]
 8011398:	429a      	cmp	r2, r3
 801139a:	d104      	bne.n	80113a6 <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 801139c:	687b      	ldr	r3, [r7, #4]
 801139e:	681b      	ldr	r3, [r3, #0]
 80113a0:	4a0c      	ldr	r2, [pc, #48]	@ (80113d4 <ip_reass_dequeue_datagram+0x4c>)
 80113a2:	6013      	str	r3, [r2, #0]
 80113a4:	e00d      	b.n	80113c2 <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 80113a6:	683b      	ldr	r3, [r7, #0]
 80113a8:	2b00      	cmp	r3, #0
 80113aa:	d106      	bne.n	80113ba <ip_reass_dequeue_datagram+0x32>
 80113ac:	4b0a      	ldr	r3, [pc, #40]	@ (80113d8 <ip_reass_dequeue_datagram+0x50>)
 80113ae:	f240 1245 	movw	r2, #325	@ 0x145
 80113b2:	490a      	ldr	r1, [pc, #40]	@ (80113dc <ip_reass_dequeue_datagram+0x54>)
 80113b4:	480a      	ldr	r0, [pc, #40]	@ (80113e0 <ip_reass_dequeue_datagram+0x58>)
 80113b6:	f000 ff81 	bl	80122bc <iprintf>
    prev->next = ipr->next;
 80113ba:	687b      	ldr	r3, [r7, #4]
 80113bc:	681a      	ldr	r2, [r3, #0]
 80113be:	683b      	ldr	r3, [r7, #0]
 80113c0:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 80113c2:	6879      	ldr	r1, [r7, #4]
 80113c4:	2004      	movs	r0, #4
 80113c6:	f7f7 fcf7 	bl	8008db8 <memp_free>
}
 80113ca:	bf00      	nop
 80113cc:	3708      	adds	r7, #8
 80113ce:	46bd      	mov	sp, r7
 80113d0:	bd80      	pop	{r7, pc}
 80113d2:	bf00      	nop
 80113d4:	20010250 	.word	0x20010250
 80113d8:	080159e8 	.word	0x080159e8
 80113dc:	08015ab0 	.word	0x08015ab0
 80113e0:	08015a30 	.word	0x08015a30

080113e4 <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 80113e4:	b580      	push	{r7, lr}
 80113e6:	b08c      	sub	sp, #48	@ 0x30
 80113e8:	af00      	add	r7, sp, #0
 80113ea:	60f8      	str	r0, [r7, #12]
 80113ec:	60b9      	str	r1, [r7, #8]
 80113ee:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 80113f0:	2300      	movs	r3, #0
 80113f2:	62bb      	str	r3, [r7, #40]	@ 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 80113f4:	2301      	movs	r3, #1
 80113f6:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 80113f8:	68bb      	ldr	r3, [r7, #8]
 80113fa:	685b      	ldr	r3, [r3, #4]
 80113fc:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 80113fe:	69fb      	ldr	r3, [r7, #28]
 8011400:	885b      	ldrh	r3, [r3, #2]
 8011402:	b29b      	uxth	r3, r3
 8011404:	4618      	mov	r0, r3
 8011406:	f7f6 ff89 	bl	800831c <lwip_htons>
 801140a:	4603      	mov	r3, r0
 801140c:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 801140e:	69fb      	ldr	r3, [r7, #28]
 8011410:	781b      	ldrb	r3, [r3, #0]
 8011412:	f003 030f 	and.w	r3, r3, #15
 8011416:	b2db      	uxtb	r3, r3
 8011418:	009b      	lsls	r3, r3, #2
 801141a:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 801141c:	7e7b      	ldrb	r3, [r7, #25]
 801141e:	b29b      	uxth	r3, r3
 8011420:	8b7a      	ldrh	r2, [r7, #26]
 8011422:	429a      	cmp	r2, r3
 8011424:	d202      	bcs.n	801142c <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 8011426:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801142a:	e135      	b.n	8011698 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 801142c:	7e7b      	ldrb	r3, [r7, #25]
 801142e:	b29b      	uxth	r3, r3
 8011430:	8b7a      	ldrh	r2, [r7, #26]
 8011432:	1ad3      	subs	r3, r2, r3
 8011434:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 8011436:	69fb      	ldr	r3, [r7, #28]
 8011438:	88db      	ldrh	r3, [r3, #6]
 801143a:	b29b      	uxth	r3, r3
 801143c:	4618      	mov	r0, r3
 801143e:	f7f6 ff6d 	bl	800831c <lwip_htons>
 8011442:	4603      	mov	r3, r0
 8011444:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8011448:	b29b      	uxth	r3, r3
 801144a:	00db      	lsls	r3, r3, #3
 801144c:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 801144e:	68bb      	ldr	r3, [r7, #8]
 8011450:	685b      	ldr	r3, [r3, #4]
 8011452:	62fb      	str	r3, [r7, #44]	@ 0x2c
  iprh->next_pbuf = NULL;
 8011454:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011456:	2200      	movs	r2, #0
 8011458:	701a      	strb	r2, [r3, #0]
 801145a:	2200      	movs	r2, #0
 801145c:	705a      	strb	r2, [r3, #1]
 801145e:	2200      	movs	r2, #0
 8011460:	709a      	strb	r2, [r3, #2]
 8011462:	2200      	movs	r2, #0
 8011464:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 8011466:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011468:	8afa      	ldrh	r2, [r7, #22]
 801146a:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 801146c:	8afa      	ldrh	r2, [r7, #22]
 801146e:	8b7b      	ldrh	r3, [r7, #26]
 8011470:	4413      	add	r3, r2
 8011472:	b29a      	uxth	r2, r3
 8011474:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011476:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 8011478:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801147a:	88db      	ldrh	r3, [r3, #6]
 801147c:	b29b      	uxth	r3, r3
 801147e:	8afa      	ldrh	r2, [r7, #22]
 8011480:	429a      	cmp	r2, r3
 8011482:	d902      	bls.n	801148a <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 8011484:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8011488:	e106      	b.n	8011698 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 801148a:	68fb      	ldr	r3, [r7, #12]
 801148c:	685b      	ldr	r3, [r3, #4]
 801148e:	627b      	str	r3, [r7, #36]	@ 0x24
 8011490:	e068      	b.n	8011564 <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 8011492:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011494:	685b      	ldr	r3, [r3, #4]
 8011496:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 8011498:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801149a:	889b      	ldrh	r3, [r3, #4]
 801149c:	b29a      	uxth	r2, r3
 801149e:	693b      	ldr	r3, [r7, #16]
 80114a0:	889b      	ldrh	r3, [r3, #4]
 80114a2:	b29b      	uxth	r3, r3
 80114a4:	429a      	cmp	r2, r3
 80114a6:	d235      	bcs.n	8011514 <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 80114a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80114aa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80114ac:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 80114ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80114b0:	2b00      	cmp	r3, #0
 80114b2:	d020      	beq.n	80114f6 <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 80114b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80114b6:	889b      	ldrh	r3, [r3, #4]
 80114b8:	b29a      	uxth	r2, r3
 80114ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80114bc:	88db      	ldrh	r3, [r3, #6]
 80114be:	b29b      	uxth	r3, r3
 80114c0:	429a      	cmp	r2, r3
 80114c2:	d307      	bcc.n	80114d4 <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 80114c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80114c6:	88db      	ldrh	r3, [r3, #6]
 80114c8:	b29a      	uxth	r2, r3
 80114ca:	693b      	ldr	r3, [r7, #16]
 80114cc:	889b      	ldrh	r3, [r3, #4]
 80114ce:	b29b      	uxth	r3, r3
 80114d0:	429a      	cmp	r2, r3
 80114d2:	d902      	bls.n	80114da <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 80114d4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80114d8:	e0de      	b.n	8011698 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 80114da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80114dc:	68ba      	ldr	r2, [r7, #8]
 80114de:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 80114e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80114e2:	88db      	ldrh	r3, [r3, #6]
 80114e4:	b29a      	uxth	r2, r3
 80114e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80114e8:	889b      	ldrh	r3, [r3, #4]
 80114ea:	b29b      	uxth	r3, r3
 80114ec:	429a      	cmp	r2, r3
 80114ee:	d03d      	beq.n	801156c <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 80114f0:	2300      	movs	r3, #0
 80114f2:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 80114f4:	e03a      	b.n	801156c <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 80114f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80114f8:	88db      	ldrh	r3, [r3, #6]
 80114fa:	b29a      	uxth	r2, r3
 80114fc:	693b      	ldr	r3, [r7, #16]
 80114fe:	889b      	ldrh	r3, [r3, #4]
 8011500:	b29b      	uxth	r3, r3
 8011502:	429a      	cmp	r2, r3
 8011504:	d902      	bls.n	801150c <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 8011506:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801150a:	e0c5      	b.n	8011698 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 801150c:	68fb      	ldr	r3, [r7, #12]
 801150e:	68ba      	ldr	r2, [r7, #8]
 8011510:	605a      	str	r2, [r3, #4]
      break;
 8011512:	e02b      	b.n	801156c <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 8011514:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011516:	889b      	ldrh	r3, [r3, #4]
 8011518:	b29a      	uxth	r2, r3
 801151a:	693b      	ldr	r3, [r7, #16]
 801151c:	889b      	ldrh	r3, [r3, #4]
 801151e:	b29b      	uxth	r3, r3
 8011520:	429a      	cmp	r2, r3
 8011522:	d102      	bne.n	801152a <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 8011524:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8011528:	e0b6      	b.n	8011698 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 801152a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801152c:	889b      	ldrh	r3, [r3, #4]
 801152e:	b29a      	uxth	r2, r3
 8011530:	693b      	ldr	r3, [r7, #16]
 8011532:	88db      	ldrh	r3, [r3, #6]
 8011534:	b29b      	uxth	r3, r3
 8011536:	429a      	cmp	r2, r3
 8011538:	d202      	bcs.n	8011540 <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 801153a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801153e:	e0ab      	b.n	8011698 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 8011540:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011542:	2b00      	cmp	r3, #0
 8011544:	d009      	beq.n	801155a <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 8011546:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011548:	88db      	ldrh	r3, [r3, #6]
 801154a:	b29a      	uxth	r2, r3
 801154c:	693b      	ldr	r3, [r7, #16]
 801154e:	889b      	ldrh	r3, [r3, #4]
 8011550:	b29b      	uxth	r3, r3
 8011552:	429a      	cmp	r2, r3
 8011554:	d001      	beq.n	801155a <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 8011556:	2300      	movs	r3, #0
 8011558:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 801155a:	693b      	ldr	r3, [r7, #16]
 801155c:	681b      	ldr	r3, [r3, #0]
 801155e:	627b      	str	r3, [r7, #36]	@ 0x24
    iprh_prev = iprh_tmp;
 8011560:	693b      	ldr	r3, [r7, #16]
 8011562:	62bb      	str	r3, [r7, #40]	@ 0x28
  for (q = ipr->p; q != NULL;) {
 8011564:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011566:	2b00      	cmp	r3, #0
 8011568:	d193      	bne.n	8011492 <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 801156a:	e000      	b.n	801156e <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 801156c:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 801156e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011570:	2b00      	cmp	r3, #0
 8011572:	d12d      	bne.n	80115d0 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 8011574:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011576:	2b00      	cmp	r3, #0
 8011578:	d01c      	beq.n	80115b4 <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 801157a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801157c:	88db      	ldrh	r3, [r3, #6]
 801157e:	b29a      	uxth	r2, r3
 8011580:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011582:	889b      	ldrh	r3, [r3, #4]
 8011584:	b29b      	uxth	r3, r3
 8011586:	429a      	cmp	r2, r3
 8011588:	d906      	bls.n	8011598 <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 801158a:	4b45      	ldr	r3, [pc, #276]	@ (80116a0 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801158c:	f44f 72db 	mov.w	r2, #438	@ 0x1b6
 8011590:	4944      	ldr	r1, [pc, #272]	@ (80116a4 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 8011592:	4845      	ldr	r0, [pc, #276]	@ (80116a8 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8011594:	f000 fe92 	bl	80122bc <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 8011598:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801159a:	68ba      	ldr	r2, [r7, #8]
 801159c:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 801159e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80115a0:	88db      	ldrh	r3, [r3, #6]
 80115a2:	b29a      	uxth	r2, r3
 80115a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80115a6:	889b      	ldrh	r3, [r3, #4]
 80115a8:	b29b      	uxth	r3, r3
 80115aa:	429a      	cmp	r2, r3
 80115ac:	d010      	beq.n	80115d0 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 80115ae:	2300      	movs	r3, #0
 80115b0:	623b      	str	r3, [r7, #32]
 80115b2:	e00d      	b.n	80115d0 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 80115b4:	68fb      	ldr	r3, [r7, #12]
 80115b6:	685b      	ldr	r3, [r3, #4]
 80115b8:	2b00      	cmp	r3, #0
 80115ba:	d006      	beq.n	80115ca <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 80115bc:	4b38      	ldr	r3, [pc, #224]	@ (80116a0 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 80115be:	f44f 72df 	mov.w	r2, #446	@ 0x1be
 80115c2:	493a      	ldr	r1, [pc, #232]	@ (80116ac <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 80115c4:	4838      	ldr	r0, [pc, #224]	@ (80116a8 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 80115c6:	f000 fe79 	bl	80122bc <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 80115ca:	68fb      	ldr	r3, [r7, #12]
 80115cc:	68ba      	ldr	r2, [r7, #8]
 80115ce:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 80115d0:	687b      	ldr	r3, [r7, #4]
 80115d2:	2b00      	cmp	r3, #0
 80115d4:	d105      	bne.n	80115e2 <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 80115d6:	68fb      	ldr	r3, [r7, #12]
 80115d8:	7f9b      	ldrb	r3, [r3, #30]
 80115da:	f003 0301 	and.w	r3, r3, #1
 80115de:	2b00      	cmp	r3, #0
 80115e0:	d059      	beq.n	8011696 <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 80115e2:	6a3b      	ldr	r3, [r7, #32]
 80115e4:	2b00      	cmp	r3, #0
 80115e6:	d04f      	beq.n	8011688 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 80115e8:	68fb      	ldr	r3, [r7, #12]
 80115ea:	685b      	ldr	r3, [r3, #4]
 80115ec:	2b00      	cmp	r3, #0
 80115ee:	d006      	beq.n	80115fe <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 80115f0:	68fb      	ldr	r3, [r7, #12]
 80115f2:	685b      	ldr	r3, [r3, #4]
 80115f4:	685b      	ldr	r3, [r3, #4]
 80115f6:	889b      	ldrh	r3, [r3, #4]
 80115f8:	b29b      	uxth	r3, r3
 80115fa:	2b00      	cmp	r3, #0
 80115fc:	d002      	beq.n	8011604 <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 80115fe:	2300      	movs	r3, #0
 8011600:	623b      	str	r3, [r7, #32]
 8011602:	e041      	b.n	8011688 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 8011604:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011606:	62bb      	str	r3, [r7, #40]	@ 0x28
        q = iprh->next_pbuf;
 8011608:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801160a:	681b      	ldr	r3, [r3, #0]
 801160c:	627b      	str	r3, [r7, #36]	@ 0x24
        while (q != NULL) {
 801160e:	e012      	b.n	8011636 <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 8011610:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011612:	685b      	ldr	r3, [r3, #4]
 8011614:	62fb      	str	r3, [r7, #44]	@ 0x2c
          if (iprh_prev->end != iprh->start) {
 8011616:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011618:	88db      	ldrh	r3, [r3, #6]
 801161a:	b29a      	uxth	r2, r3
 801161c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801161e:	889b      	ldrh	r3, [r3, #4]
 8011620:	b29b      	uxth	r3, r3
 8011622:	429a      	cmp	r2, r3
 8011624:	d002      	beq.n	801162c <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 8011626:	2300      	movs	r3, #0
 8011628:	623b      	str	r3, [r7, #32]
            break;
 801162a:	e007      	b.n	801163c <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 801162c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801162e:	62bb      	str	r3, [r7, #40]	@ 0x28
          q = iprh->next_pbuf;
 8011630:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011632:	681b      	ldr	r3, [r3, #0]
 8011634:	627b      	str	r3, [r7, #36]	@ 0x24
        while (q != NULL) {
 8011636:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011638:	2b00      	cmp	r3, #0
 801163a:	d1e9      	bne.n	8011610 <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 801163c:	6a3b      	ldr	r3, [r7, #32]
 801163e:	2b00      	cmp	r3, #0
 8011640:	d022      	beq.n	8011688 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 8011642:	68fb      	ldr	r3, [r7, #12]
 8011644:	685b      	ldr	r3, [r3, #4]
 8011646:	2b00      	cmp	r3, #0
 8011648:	d106      	bne.n	8011658 <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 801164a:	4b15      	ldr	r3, [pc, #84]	@ (80116a0 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801164c:	f240 12df 	movw	r2, #479	@ 0x1df
 8011650:	4917      	ldr	r1, [pc, #92]	@ (80116b0 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 8011652:	4815      	ldr	r0, [pc, #84]	@ (80116a8 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8011654:	f000 fe32 	bl	80122bc <iprintf>
          LWIP_ASSERT("sanity check",
 8011658:	68fb      	ldr	r3, [r7, #12]
 801165a:	685b      	ldr	r3, [r3, #4]
 801165c:	685b      	ldr	r3, [r3, #4]
 801165e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8011660:	429a      	cmp	r2, r3
 8011662:	d106      	bne.n	8011672 <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 8011664:	4b0e      	ldr	r3, [pc, #56]	@ (80116a0 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8011666:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 801166a:	4911      	ldr	r1, [pc, #68]	@ (80116b0 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 801166c:	480e      	ldr	r0, [pc, #56]	@ (80116a8 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801166e:	f000 fe25 	bl	80122bc <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 8011672:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011674:	681b      	ldr	r3, [r3, #0]
 8011676:	2b00      	cmp	r3, #0
 8011678:	d006      	beq.n	8011688 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 801167a:	4b09      	ldr	r3, [pc, #36]	@ (80116a0 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801167c:	f44f 72f1 	mov.w	r2, #482	@ 0x1e2
 8011680:	490c      	ldr	r1, [pc, #48]	@ (80116b4 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 8011682:	4809      	ldr	r0, [pc, #36]	@ (80116a8 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8011684:	f000 fe1a 	bl	80122bc <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 8011688:	6a3b      	ldr	r3, [r7, #32]
 801168a:	2b00      	cmp	r3, #0
 801168c:	bf14      	ite	ne
 801168e:	2301      	movne	r3, #1
 8011690:	2300      	moveq	r3, #0
 8011692:	b2db      	uxtb	r3, r3
 8011694:	e000      	b.n	8011698 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 8011696:	2300      	movs	r3, #0
}
 8011698:	4618      	mov	r0, r3
 801169a:	3730      	adds	r7, #48	@ 0x30
 801169c:	46bd      	mov	sp, r7
 801169e:	bd80      	pop	{r7, pc}
 80116a0:	080159e8 	.word	0x080159e8
 80116a4:	08015acc 	.word	0x08015acc
 80116a8:	08015a30 	.word	0x08015a30
 80116ac:	08015aec 	.word	0x08015aec
 80116b0:	08015b24 	.word	0x08015b24
 80116b4:	08015b34 	.word	0x08015b34

080116b8 <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 80116b8:	b580      	push	{r7, lr}
 80116ba:	b08e      	sub	sp, #56	@ 0x38
 80116bc:	af00      	add	r7, sp, #0
 80116be:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 80116c0:	687b      	ldr	r3, [r7, #4]
 80116c2:	685b      	ldr	r3, [r3, #4]
 80116c4:	62bb      	str	r3, [r7, #40]	@ 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 80116c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80116c8:	781b      	ldrb	r3, [r3, #0]
 80116ca:	f003 030f 	and.w	r3, r3, #15
 80116ce:	b2db      	uxtb	r3, r3
 80116d0:	009b      	lsls	r3, r3, #2
 80116d2:	b2db      	uxtb	r3, r3
 80116d4:	2b14      	cmp	r3, #20
 80116d6:	f040 8171 	bne.w	80119bc <ip4_reass+0x304>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 80116da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80116dc:	88db      	ldrh	r3, [r3, #6]
 80116de:	b29b      	uxth	r3, r3
 80116e0:	4618      	mov	r0, r3
 80116e2:	f7f6 fe1b 	bl	800831c <lwip_htons>
 80116e6:	4603      	mov	r3, r0
 80116e8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80116ec:	b29b      	uxth	r3, r3
 80116ee:	00db      	lsls	r3, r3, #3
 80116f0:	84fb      	strh	r3, [r7, #38]	@ 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 80116f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80116f4:	885b      	ldrh	r3, [r3, #2]
 80116f6:	b29b      	uxth	r3, r3
 80116f8:	4618      	mov	r0, r3
 80116fa:	f7f6 fe0f 	bl	800831c <lwip_htons>
 80116fe:	4603      	mov	r3, r0
 8011700:	84bb      	strh	r3, [r7, #36]	@ 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 8011702:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011704:	781b      	ldrb	r3, [r3, #0]
 8011706:	f003 030f 	and.w	r3, r3, #15
 801170a:	b2db      	uxtb	r3, r3
 801170c:	009b      	lsls	r3, r3, #2
 801170e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  if (hlen > len) {
 8011712:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8011716:	b29b      	uxth	r3, r3
 8011718:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 801171a:	429a      	cmp	r2, r3
 801171c:	f0c0 8150 	bcc.w	80119c0 <ip4_reass+0x308>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 8011720:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8011724:	b29b      	uxth	r3, r3
 8011726:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8011728:	1ad3      	subs	r3, r2, r3
 801172a:	84bb      	strh	r3, [r7, #36]	@ 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 801172c:	6878      	ldr	r0, [r7, #4]
 801172e:	f7f8 fa75 	bl	8009c1c <pbuf_clen>
 8011732:	4603      	mov	r3, r0
 8011734:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 8011736:	4b8c      	ldr	r3, [pc, #560]	@ (8011968 <ip4_reass+0x2b0>)
 8011738:	881b      	ldrh	r3, [r3, #0]
 801173a:	461a      	mov	r2, r3
 801173c:	8c3b      	ldrh	r3, [r7, #32]
 801173e:	4413      	add	r3, r2
 8011740:	2b0a      	cmp	r3, #10
 8011742:	dd10      	ble.n	8011766 <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8011744:	8c3b      	ldrh	r3, [r7, #32]
 8011746:	4619      	mov	r1, r3
 8011748:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 801174a:	f7ff fd81 	bl	8011250 <ip_reass_remove_oldest_datagram>
 801174e:	4603      	mov	r3, r0
 8011750:	2b00      	cmp	r3, #0
 8011752:	f000 8137 	beq.w	80119c4 <ip4_reass+0x30c>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 8011756:	4b84      	ldr	r3, [pc, #528]	@ (8011968 <ip4_reass+0x2b0>)
 8011758:	881b      	ldrh	r3, [r3, #0]
 801175a:	461a      	mov	r2, r3
 801175c:	8c3b      	ldrh	r3, [r7, #32]
 801175e:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8011760:	2b0a      	cmp	r3, #10
 8011762:	f300 812f 	bgt.w	80119c4 <ip4_reass+0x30c>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8011766:	4b81      	ldr	r3, [pc, #516]	@ (801196c <ip4_reass+0x2b4>)
 8011768:	681b      	ldr	r3, [r3, #0]
 801176a:	633b      	str	r3, [r7, #48]	@ 0x30
 801176c:	e015      	b.n	801179a <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 801176e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011770:	695a      	ldr	r2, [r3, #20]
 8011772:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011774:	68db      	ldr	r3, [r3, #12]
 8011776:	429a      	cmp	r2, r3
 8011778:	d10c      	bne.n	8011794 <ip4_reass+0xdc>
 801177a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801177c:	699a      	ldr	r2, [r3, #24]
 801177e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011780:	691b      	ldr	r3, [r3, #16]
 8011782:	429a      	cmp	r2, r3
 8011784:	d106      	bne.n	8011794 <ip4_reass+0xdc>
 8011786:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011788:	899a      	ldrh	r2, [r3, #12]
 801178a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801178c:	889b      	ldrh	r3, [r3, #4]
 801178e:	b29b      	uxth	r3, r3
 8011790:	429a      	cmp	r2, r3
 8011792:	d006      	beq.n	80117a2 <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8011794:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011796:	681b      	ldr	r3, [r3, #0]
 8011798:	633b      	str	r3, [r7, #48]	@ 0x30
 801179a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801179c:	2b00      	cmp	r3, #0
 801179e:	d1e6      	bne.n	801176e <ip4_reass+0xb6>
 80117a0:	e000      	b.n	80117a4 <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 80117a2:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 80117a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80117a6:	2b00      	cmp	r3, #0
 80117a8:	d109      	bne.n	80117be <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 80117aa:	8c3b      	ldrh	r3, [r7, #32]
 80117ac:	4619      	mov	r1, r3
 80117ae:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80117b0:	f7ff fdb0 	bl	8011314 <ip_reass_enqueue_new_datagram>
 80117b4:	6338      	str	r0, [r7, #48]	@ 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 80117b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80117b8:	2b00      	cmp	r3, #0
 80117ba:	d11c      	bne.n	80117f6 <ip4_reass+0x13e>
      goto nullreturn;
 80117bc:	e105      	b.n	80119ca <ip4_reass+0x312>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 80117be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80117c0:	88db      	ldrh	r3, [r3, #6]
 80117c2:	b29b      	uxth	r3, r3
 80117c4:	4618      	mov	r0, r3
 80117c6:	f7f6 fda9 	bl	800831c <lwip_htons>
 80117ca:	4603      	mov	r3, r0
 80117cc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80117d0:	2b00      	cmp	r3, #0
 80117d2:	d110      	bne.n	80117f6 <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 80117d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80117d6:	89db      	ldrh	r3, [r3, #14]
 80117d8:	4618      	mov	r0, r3
 80117da:	f7f6 fd9f 	bl	800831c <lwip_htons>
 80117de:	4603      	mov	r3, r0
 80117e0:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 80117e4:	2b00      	cmp	r3, #0
 80117e6:	d006      	beq.n	80117f6 <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 80117e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80117ea:	3308      	adds	r3, #8
 80117ec:	2214      	movs	r2, #20
 80117ee:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80117f0:	4618      	mov	r0, r3
 80117f2:	f000 fe94 	bl	801251e <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 80117f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80117f8:	88db      	ldrh	r3, [r3, #6]
 80117fa:	b29b      	uxth	r3, r3
 80117fc:	f003 0320 	and.w	r3, r3, #32
 8011800:	2b00      	cmp	r3, #0
 8011802:	bf0c      	ite	eq
 8011804:	2301      	moveq	r3, #1
 8011806:	2300      	movne	r3, #0
 8011808:	b2db      	uxtb	r3, r3
 801180a:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 801180c:	69fb      	ldr	r3, [r7, #28]
 801180e:	2b00      	cmp	r3, #0
 8011810:	d00e      	beq.n	8011830 <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 8011812:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8011814:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8011816:	4413      	add	r3, r2
 8011818:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 801181a:	8b7a      	ldrh	r2, [r7, #26]
 801181c:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 801181e:	429a      	cmp	r2, r3
 8011820:	f0c0 80a0 	bcc.w	8011964 <ip4_reass+0x2ac>
 8011824:	8b7b      	ldrh	r3, [r7, #26]
 8011826:	f64f 72eb 	movw	r2, #65515	@ 0xffeb
 801182a:	4293      	cmp	r3, r2
 801182c:	f200 809a 	bhi.w	8011964 <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 8011830:	69fa      	ldr	r2, [r7, #28]
 8011832:	6879      	ldr	r1, [r7, #4]
 8011834:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8011836:	f7ff fdd5 	bl	80113e4 <ip_reass_chain_frag_into_datagram_and_validate>
 801183a:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 801183c:	697b      	ldr	r3, [r7, #20]
 801183e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8011842:	f000 809b 	beq.w	801197c <ip4_reass+0x2c4>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 8011846:	4b48      	ldr	r3, [pc, #288]	@ (8011968 <ip4_reass+0x2b0>)
 8011848:	881a      	ldrh	r2, [r3, #0]
 801184a:	8c3b      	ldrh	r3, [r7, #32]
 801184c:	4413      	add	r3, r2
 801184e:	b29a      	uxth	r2, r3
 8011850:	4b45      	ldr	r3, [pc, #276]	@ (8011968 <ip4_reass+0x2b0>)
 8011852:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 8011854:	69fb      	ldr	r3, [r7, #28]
 8011856:	2b00      	cmp	r3, #0
 8011858:	d00d      	beq.n	8011876 <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 801185a:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 801185c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801185e:	4413      	add	r3, r2
 8011860:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 8011862:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011864:	8a7a      	ldrh	r2, [r7, #18]
 8011866:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 8011868:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801186a:	7f9b      	ldrb	r3, [r3, #30]
 801186c:	f043 0301 	orr.w	r3, r3, #1
 8011870:	b2da      	uxtb	r2, r3
 8011872:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011874:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 8011876:	697b      	ldr	r3, [r7, #20]
 8011878:	2b01      	cmp	r3, #1
 801187a:	d171      	bne.n	8011960 <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 801187c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801187e:	8b9b      	ldrh	r3, [r3, #28]
 8011880:	3314      	adds	r3, #20
 8011882:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 8011884:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011886:	685b      	ldr	r3, [r3, #4]
 8011888:	685b      	ldr	r3, [r3, #4]
 801188a:	681b      	ldr	r3, [r3, #0]
 801188c:	637b      	str	r3, [r7, #52]	@ 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 801188e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011890:	685b      	ldr	r3, [r3, #4]
 8011892:	685b      	ldr	r3, [r3, #4]
 8011894:	62bb      	str	r3, [r7, #40]	@ 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 8011896:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011898:	3308      	adds	r3, #8
 801189a:	2214      	movs	r2, #20
 801189c:	4619      	mov	r1, r3
 801189e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80118a0:	f000 fe3d 	bl	801251e <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 80118a4:	8a3b      	ldrh	r3, [r7, #16]
 80118a6:	4618      	mov	r0, r3
 80118a8:	f7f6 fd38 	bl	800831c <lwip_htons>
 80118ac:	4603      	mov	r3, r0
 80118ae:	461a      	mov	r2, r3
 80118b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80118b2:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 80118b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80118b6:	2200      	movs	r2, #0
 80118b8:	719a      	strb	r2, [r3, #6]
 80118ba:	2200      	movs	r2, #0
 80118bc:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 80118be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80118c0:	2200      	movs	r2, #0
 80118c2:	729a      	strb	r2, [r3, #10]
 80118c4:	2200      	movs	r2, #0
 80118c6:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 80118c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80118ca:	685b      	ldr	r3, [r3, #4]
 80118cc:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 80118ce:	e00d      	b.n	80118ec <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 80118d0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80118d2:	685b      	ldr	r3, [r3, #4]
 80118d4:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 80118d6:	2114      	movs	r1, #20
 80118d8:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 80118da:	f7f8 f88b 	bl	80099f4 <pbuf_remove_header>
      pbuf_cat(p, r);
 80118de:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 80118e0:	6878      	ldr	r0, [r7, #4]
 80118e2:	f7f8 f9db 	bl	8009c9c <pbuf_cat>
      r = iprh->next_pbuf;
 80118e6:	68fb      	ldr	r3, [r7, #12]
 80118e8:	681b      	ldr	r3, [r3, #0]
 80118ea:	637b      	str	r3, [r7, #52]	@ 0x34
    while (r != NULL) {
 80118ec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80118ee:	2b00      	cmp	r3, #0
 80118f0:	d1ee      	bne.n	80118d0 <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 80118f2:	4b1e      	ldr	r3, [pc, #120]	@ (801196c <ip4_reass+0x2b4>)
 80118f4:	681b      	ldr	r3, [r3, #0]
 80118f6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80118f8:	429a      	cmp	r2, r3
 80118fa:	d102      	bne.n	8011902 <ip4_reass+0x24a>
      ipr_prev = NULL;
 80118fc:	2300      	movs	r3, #0
 80118fe:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8011900:	e010      	b.n	8011924 <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8011902:	4b1a      	ldr	r3, [pc, #104]	@ (801196c <ip4_reass+0x2b4>)
 8011904:	681b      	ldr	r3, [r3, #0]
 8011906:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8011908:	e007      	b.n	801191a <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 801190a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801190c:	681b      	ldr	r3, [r3, #0]
 801190e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8011910:	429a      	cmp	r2, r3
 8011912:	d006      	beq.n	8011922 <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8011914:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011916:	681b      	ldr	r3, [r3, #0]
 8011918:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801191a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801191c:	2b00      	cmp	r3, #0
 801191e:	d1f4      	bne.n	801190a <ip4_reass+0x252>
 8011920:	e000      	b.n	8011924 <ip4_reass+0x26c>
          break;
 8011922:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 8011924:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8011926:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8011928:	f7ff fd2e 	bl	8011388 <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 801192c:	6878      	ldr	r0, [r7, #4]
 801192e:	f7f8 f975 	bl	8009c1c <pbuf_clen>
 8011932:	4603      	mov	r3, r0
 8011934:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 8011936:	4b0c      	ldr	r3, [pc, #48]	@ (8011968 <ip4_reass+0x2b0>)
 8011938:	881b      	ldrh	r3, [r3, #0]
 801193a:	8c3a      	ldrh	r2, [r7, #32]
 801193c:	429a      	cmp	r2, r3
 801193e:	d906      	bls.n	801194e <ip4_reass+0x296>
 8011940:	4b0b      	ldr	r3, [pc, #44]	@ (8011970 <ip4_reass+0x2b8>)
 8011942:	f240 229b 	movw	r2, #667	@ 0x29b
 8011946:	490b      	ldr	r1, [pc, #44]	@ (8011974 <ip4_reass+0x2bc>)
 8011948:	480b      	ldr	r0, [pc, #44]	@ (8011978 <ip4_reass+0x2c0>)
 801194a:	f000 fcb7 	bl	80122bc <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 801194e:	4b06      	ldr	r3, [pc, #24]	@ (8011968 <ip4_reass+0x2b0>)
 8011950:	881a      	ldrh	r2, [r3, #0]
 8011952:	8c3b      	ldrh	r3, [r7, #32]
 8011954:	1ad3      	subs	r3, r2, r3
 8011956:	b29a      	uxth	r2, r3
 8011958:	4b03      	ldr	r3, [pc, #12]	@ (8011968 <ip4_reass+0x2b0>)
 801195a:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 801195c:	687b      	ldr	r3, [r7, #4]
 801195e:	e038      	b.n	80119d2 <ip4_reass+0x31a>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 8011960:	2300      	movs	r3, #0
 8011962:	e036      	b.n	80119d2 <ip4_reass+0x31a>
      goto nullreturn_ipr;
 8011964:	bf00      	nop
 8011966:	e00a      	b.n	801197e <ip4_reass+0x2c6>
 8011968:	20010254 	.word	0x20010254
 801196c:	20010250 	.word	0x20010250
 8011970:	080159e8 	.word	0x080159e8
 8011974:	08015b58 	.word	0x08015b58
 8011978:	08015a30 	.word	0x08015a30
    goto nullreturn_ipr;
 801197c:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 801197e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011980:	2b00      	cmp	r3, #0
 8011982:	d106      	bne.n	8011992 <ip4_reass+0x2da>
 8011984:	4b15      	ldr	r3, [pc, #84]	@ (80119dc <ip4_reass+0x324>)
 8011986:	f44f 722a 	mov.w	r2, #680	@ 0x2a8
 801198a:	4915      	ldr	r1, [pc, #84]	@ (80119e0 <ip4_reass+0x328>)
 801198c:	4815      	ldr	r0, [pc, #84]	@ (80119e4 <ip4_reass+0x32c>)
 801198e:	f000 fc95 	bl	80122bc <iprintf>
  if (ipr->p == NULL) {
 8011992:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011994:	685b      	ldr	r3, [r3, #4]
 8011996:	2b00      	cmp	r3, #0
 8011998:	d116      	bne.n	80119c8 <ip4_reass+0x310>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 801199a:	4b13      	ldr	r3, [pc, #76]	@ (80119e8 <ip4_reass+0x330>)
 801199c:	681b      	ldr	r3, [r3, #0]
 801199e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80119a0:	429a      	cmp	r2, r3
 80119a2:	d006      	beq.n	80119b2 <ip4_reass+0x2fa>
 80119a4:	4b0d      	ldr	r3, [pc, #52]	@ (80119dc <ip4_reass+0x324>)
 80119a6:	f240 22ab 	movw	r2, #683	@ 0x2ab
 80119aa:	4910      	ldr	r1, [pc, #64]	@ (80119ec <ip4_reass+0x334>)
 80119ac:	480d      	ldr	r0, [pc, #52]	@ (80119e4 <ip4_reass+0x32c>)
 80119ae:	f000 fc85 	bl	80122bc <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 80119b2:	2100      	movs	r1, #0
 80119b4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80119b6:	f7ff fce7 	bl	8011388 <ip_reass_dequeue_datagram>
 80119ba:	e006      	b.n	80119ca <ip4_reass+0x312>
    goto nullreturn;
 80119bc:	bf00      	nop
 80119be:	e004      	b.n	80119ca <ip4_reass+0x312>
    goto nullreturn;
 80119c0:	bf00      	nop
 80119c2:	e002      	b.n	80119ca <ip4_reass+0x312>
      goto nullreturn;
 80119c4:	bf00      	nop
 80119c6:	e000      	b.n	80119ca <ip4_reass+0x312>
  }

nullreturn:
 80119c8:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 80119ca:	6878      	ldr	r0, [r7, #4]
 80119cc:	f7f8 f898 	bl	8009b00 <pbuf_free>
  return NULL;
 80119d0:	2300      	movs	r3, #0
}
 80119d2:	4618      	mov	r0, r3
 80119d4:	3738      	adds	r7, #56	@ 0x38
 80119d6:	46bd      	mov	sp, r7
 80119d8:	bd80      	pop	{r7, pc}
 80119da:	bf00      	nop
 80119dc:	080159e8 	.word	0x080159e8
 80119e0:	08015b74 	.word	0x08015b74
 80119e4:	08015a30 	.word	0x08015a30
 80119e8:	20010250 	.word	0x20010250
 80119ec:	08015b80 	.word	0x08015b80

080119f0 <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 80119f0:	b580      	push	{r7, lr}
 80119f2:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 80119f4:	2005      	movs	r0, #5
 80119f6:	f7f7 f969 	bl	8008ccc <memp_malloc>
 80119fa:	4603      	mov	r3, r0
}
 80119fc:	4618      	mov	r0, r3
 80119fe:	bd80      	pop	{r7, pc}

08011a00 <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 8011a00:	b580      	push	{r7, lr}
 8011a02:	b082      	sub	sp, #8
 8011a04:	af00      	add	r7, sp, #0
 8011a06:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 8011a08:	687b      	ldr	r3, [r7, #4]
 8011a0a:	2b00      	cmp	r3, #0
 8011a0c:	d106      	bne.n	8011a1c <ip_frag_free_pbuf_custom_ref+0x1c>
 8011a0e:	4b07      	ldr	r3, [pc, #28]	@ (8011a2c <ip_frag_free_pbuf_custom_ref+0x2c>)
 8011a10:	f44f 7231 	mov.w	r2, #708	@ 0x2c4
 8011a14:	4906      	ldr	r1, [pc, #24]	@ (8011a30 <ip_frag_free_pbuf_custom_ref+0x30>)
 8011a16:	4807      	ldr	r0, [pc, #28]	@ (8011a34 <ip_frag_free_pbuf_custom_ref+0x34>)
 8011a18:	f000 fc50 	bl	80122bc <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 8011a1c:	6879      	ldr	r1, [r7, #4]
 8011a1e:	2005      	movs	r0, #5
 8011a20:	f7f7 f9ca 	bl	8008db8 <memp_free>
}
 8011a24:	bf00      	nop
 8011a26:	3708      	adds	r7, #8
 8011a28:	46bd      	mov	sp, r7
 8011a2a:	bd80      	pop	{r7, pc}
 8011a2c:	080159e8 	.word	0x080159e8
 8011a30:	08015ba0 	.word	0x08015ba0
 8011a34:	08015a30 	.word	0x08015a30

08011a38 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 8011a38:	b580      	push	{r7, lr}
 8011a3a:	b084      	sub	sp, #16
 8011a3c:	af00      	add	r7, sp, #0
 8011a3e:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 8011a40:	687b      	ldr	r3, [r7, #4]
 8011a42:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 8011a44:	68fb      	ldr	r3, [r7, #12]
 8011a46:	2b00      	cmp	r3, #0
 8011a48:	d106      	bne.n	8011a58 <ipfrag_free_pbuf_custom+0x20>
 8011a4a:	4b11      	ldr	r3, [pc, #68]	@ (8011a90 <ipfrag_free_pbuf_custom+0x58>)
 8011a4c:	f240 22ce 	movw	r2, #718	@ 0x2ce
 8011a50:	4910      	ldr	r1, [pc, #64]	@ (8011a94 <ipfrag_free_pbuf_custom+0x5c>)
 8011a52:	4811      	ldr	r0, [pc, #68]	@ (8011a98 <ipfrag_free_pbuf_custom+0x60>)
 8011a54:	f000 fc32 	bl	80122bc <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 8011a58:	68fa      	ldr	r2, [r7, #12]
 8011a5a:	687b      	ldr	r3, [r7, #4]
 8011a5c:	429a      	cmp	r2, r3
 8011a5e:	d006      	beq.n	8011a6e <ipfrag_free_pbuf_custom+0x36>
 8011a60:	4b0b      	ldr	r3, [pc, #44]	@ (8011a90 <ipfrag_free_pbuf_custom+0x58>)
 8011a62:	f240 22cf 	movw	r2, #719	@ 0x2cf
 8011a66:	490d      	ldr	r1, [pc, #52]	@ (8011a9c <ipfrag_free_pbuf_custom+0x64>)
 8011a68:	480b      	ldr	r0, [pc, #44]	@ (8011a98 <ipfrag_free_pbuf_custom+0x60>)
 8011a6a:	f000 fc27 	bl	80122bc <iprintf>
  if (pcr->original != NULL) {
 8011a6e:	68fb      	ldr	r3, [r7, #12]
 8011a70:	695b      	ldr	r3, [r3, #20]
 8011a72:	2b00      	cmp	r3, #0
 8011a74:	d004      	beq.n	8011a80 <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 8011a76:	68fb      	ldr	r3, [r7, #12]
 8011a78:	695b      	ldr	r3, [r3, #20]
 8011a7a:	4618      	mov	r0, r3
 8011a7c:	f7f8 f840 	bl	8009b00 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 8011a80:	68f8      	ldr	r0, [r7, #12]
 8011a82:	f7ff ffbd 	bl	8011a00 <ip_frag_free_pbuf_custom_ref>
}
 8011a86:	bf00      	nop
 8011a88:	3710      	adds	r7, #16
 8011a8a:	46bd      	mov	sp, r7
 8011a8c:	bd80      	pop	{r7, pc}
 8011a8e:	bf00      	nop
 8011a90:	080159e8 	.word	0x080159e8
 8011a94:	08015bac 	.word	0x08015bac
 8011a98:	08015a30 	.word	0x08015a30
 8011a9c:	08015bb8 	.word	0x08015bb8

08011aa0 <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 8011aa0:	b580      	push	{r7, lr}
 8011aa2:	b094      	sub	sp, #80	@ 0x50
 8011aa4:	af02      	add	r7, sp, #8
 8011aa6:	60f8      	str	r0, [r7, #12]
 8011aa8:	60b9      	str	r1, [r7, #8]
 8011aaa:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 8011aac:	2300      	movs	r3, #0
 8011aae:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 8011ab2:	68bb      	ldr	r3, [r7, #8]
 8011ab4:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8011ab6:	3b14      	subs	r3, #20
 8011ab8:	2b00      	cmp	r3, #0
 8011aba:	da00      	bge.n	8011abe <ip4_frag+0x1e>
 8011abc:	3307      	adds	r3, #7
 8011abe:	10db      	asrs	r3, r3, #3
 8011ac0:	877b      	strh	r3, [r7, #58]	@ 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 8011ac2:	2314      	movs	r3, #20
 8011ac4:	87fb      	strh	r3, [r7, #62]	@ 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 8011ac6:	68fb      	ldr	r3, [r7, #12]
 8011ac8:	685b      	ldr	r3, [r3, #4]
 8011aca:	637b      	str	r3, [r7, #52]	@ 0x34
  iphdr = original_iphdr;
 8011acc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011ace:	633b      	str	r3, [r7, #48]	@ 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 8011ad0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011ad2:	781b      	ldrb	r3, [r3, #0]
 8011ad4:	f003 030f 	and.w	r3, r3, #15
 8011ad8:	b2db      	uxtb	r3, r3
 8011ada:	009b      	lsls	r3, r3, #2
 8011adc:	b2db      	uxtb	r3, r3
 8011ade:	2b14      	cmp	r3, #20
 8011ae0:	d002      	beq.n	8011ae8 <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 8011ae2:	f06f 0305 	mvn.w	r3, #5
 8011ae6:	e110      	b.n	8011d0a <ip4_frag+0x26a>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 8011ae8:	68fb      	ldr	r3, [r7, #12]
 8011aea:	895b      	ldrh	r3, [r3, #10]
 8011aec:	2b13      	cmp	r3, #19
 8011aee:	d809      	bhi.n	8011b04 <ip4_frag+0x64>
 8011af0:	4b88      	ldr	r3, [pc, #544]	@ (8011d14 <ip4_frag+0x274>)
 8011af2:	f44f 723f 	mov.w	r2, #764	@ 0x2fc
 8011af6:	4988      	ldr	r1, [pc, #544]	@ (8011d18 <ip4_frag+0x278>)
 8011af8:	4888      	ldr	r0, [pc, #544]	@ (8011d1c <ip4_frag+0x27c>)
 8011afa:	f000 fbdf 	bl	80122bc <iprintf>
 8011afe:	f06f 0305 	mvn.w	r3, #5
 8011b02:	e102      	b.n	8011d0a <ip4_frag+0x26a>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 8011b04:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011b06:	88db      	ldrh	r3, [r3, #6]
 8011b08:	b29b      	uxth	r3, r3
 8011b0a:	4618      	mov	r0, r3
 8011b0c:	f7f6 fc06 	bl	800831c <lwip_htons>
 8011b10:	4603      	mov	r3, r0
 8011b12:	87bb      	strh	r3, [r7, #60]	@ 0x3c
  ofo = tmp & IP_OFFMASK;
 8011b14:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8011b16:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8011b1a:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 8011b1e:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8011b20:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8011b24:	62fb      	str	r3, [r7, #44]	@ 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 8011b26:	68fb      	ldr	r3, [r7, #12]
 8011b28:	891b      	ldrh	r3, [r3, #8]
 8011b2a:	3b14      	subs	r3, #20
 8011b2c:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42

  while (left) {
 8011b30:	e0e1      	b.n	8011cf6 <ip4_frag+0x256>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 8011b32:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8011b34:	00db      	lsls	r3, r3, #3
 8011b36:	b29b      	uxth	r3, r3
 8011b38:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8011b3c:	4293      	cmp	r3, r2
 8011b3e:	bf28      	it	cs
 8011b40:	4613      	movcs	r3, r2
 8011b42:	857b      	strh	r3, [r7, #42]	@ 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 8011b44:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8011b48:	2114      	movs	r1, #20
 8011b4a:	200e      	movs	r0, #14
 8011b4c:	f7f7 fcf4 	bl	8009538 <pbuf_alloc>
 8011b50:	6278      	str	r0, [r7, #36]	@ 0x24
    if (rambuf == NULL) {
 8011b52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011b54:	2b00      	cmp	r3, #0
 8011b56:	f000 80d5 	beq.w	8011d04 <ip4_frag+0x264>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 8011b5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011b5c:	895b      	ldrh	r3, [r3, #10]
 8011b5e:	2b13      	cmp	r3, #19
 8011b60:	d806      	bhi.n	8011b70 <ip4_frag+0xd0>
 8011b62:	4b6c      	ldr	r3, [pc, #432]	@ (8011d14 <ip4_frag+0x274>)
 8011b64:	f44f 7249 	mov.w	r2, #804	@ 0x324
 8011b68:	496d      	ldr	r1, [pc, #436]	@ (8011d20 <ip4_frag+0x280>)
 8011b6a:	486c      	ldr	r0, [pc, #432]	@ (8011d1c <ip4_frag+0x27c>)
 8011b6c:	f000 fba6 	bl	80122bc <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 8011b70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011b72:	685b      	ldr	r3, [r3, #4]
 8011b74:	2214      	movs	r2, #20
 8011b76:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8011b78:	4618      	mov	r0, r3
 8011b7a:	f000 fcd0 	bl	801251e <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 8011b7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011b80:	685b      	ldr	r3, [r3, #4]
 8011b82:	633b      	str	r3, [r7, #48]	@ 0x30

    left_to_copy = fragsize;
 8011b84:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8011b86:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
    while (left_to_copy) {
 8011b8a:	e064      	b.n	8011c56 <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 8011b8c:	68fb      	ldr	r3, [r7, #12]
 8011b8e:	895a      	ldrh	r2, [r3, #10]
 8011b90:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8011b92:	1ad3      	subs	r3, r2, r3
 8011b94:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 8011b96:	68fb      	ldr	r3, [r7, #12]
 8011b98:	895b      	ldrh	r3, [r3, #10]
 8011b9a:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 8011b9c:	429a      	cmp	r2, r3
 8011b9e:	d906      	bls.n	8011bae <ip4_frag+0x10e>
 8011ba0:	4b5c      	ldr	r3, [pc, #368]	@ (8011d14 <ip4_frag+0x274>)
 8011ba2:	f240 322d 	movw	r2, #813	@ 0x32d
 8011ba6:	495f      	ldr	r1, [pc, #380]	@ (8011d24 <ip4_frag+0x284>)
 8011ba8:	485c      	ldr	r0, [pc, #368]	@ (8011d1c <ip4_frag+0x27c>)
 8011baa:	f000 fb87 	bl	80122bc <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 8011bae:	8bfa      	ldrh	r2, [r7, #30]
 8011bb0:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8011bb4:	4293      	cmp	r3, r2
 8011bb6:	bf28      	it	cs
 8011bb8:	4613      	movcs	r3, r2
 8011bba:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 8011bbe:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8011bc2:	2b00      	cmp	r3, #0
 8011bc4:	d105      	bne.n	8011bd2 <ip4_frag+0x132>
        poff = 0;
 8011bc6:	2300      	movs	r3, #0
 8011bc8:	87fb      	strh	r3, [r7, #62]	@ 0x3e
        p = p->next;
 8011bca:	68fb      	ldr	r3, [r7, #12]
 8011bcc:	681b      	ldr	r3, [r3, #0]
 8011bce:	60fb      	str	r3, [r7, #12]
        continue;
 8011bd0:	e041      	b.n	8011c56 <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 8011bd2:	f7ff ff0d 	bl	80119f0 <ip_frag_alloc_pbuf_custom_ref>
 8011bd6:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 8011bd8:	69bb      	ldr	r3, [r7, #24]
 8011bda:	2b00      	cmp	r3, #0
 8011bdc:	d103      	bne.n	8011be6 <ip4_frag+0x146>
        pbuf_free(rambuf);
 8011bde:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8011be0:	f7f7 ff8e 	bl	8009b00 <pbuf_free>
        goto memerr;
 8011be4:	e08f      	b.n	8011d06 <ip4_frag+0x266>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8011be6:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 8011be8:	68fb      	ldr	r3, [r7, #12]
 8011bea:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8011bec:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8011bee:	4413      	add	r3, r2
 8011bf0:	f8b7 1046 	ldrh.w	r1, [r7, #70]	@ 0x46
 8011bf4:	f8b7 2046 	ldrh.w	r2, [r7, #70]	@ 0x46
 8011bf8:	9201      	str	r2, [sp, #4]
 8011bfa:	9300      	str	r3, [sp, #0]
 8011bfc:	4603      	mov	r3, r0
 8011bfe:	2241      	movs	r2, #65	@ 0x41
 8011c00:	2000      	movs	r0, #0
 8011c02:	f7f7 fdc3 	bl	800978c <pbuf_alloced_custom>
 8011c06:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 8011c08:	697b      	ldr	r3, [r7, #20]
 8011c0a:	2b00      	cmp	r3, #0
 8011c0c:	d106      	bne.n	8011c1c <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 8011c0e:	69b8      	ldr	r0, [r7, #24]
 8011c10:	f7ff fef6 	bl	8011a00 <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 8011c14:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8011c16:	f7f7 ff73 	bl	8009b00 <pbuf_free>
        goto memerr;
 8011c1a:	e074      	b.n	8011d06 <ip4_frag+0x266>
      }
      pbuf_ref(p);
 8011c1c:	68f8      	ldr	r0, [r7, #12]
 8011c1e:	f7f8 f815 	bl	8009c4c <pbuf_ref>
      pcr->original = p;
 8011c22:	69bb      	ldr	r3, [r7, #24]
 8011c24:	68fa      	ldr	r2, [r7, #12]
 8011c26:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 8011c28:	69bb      	ldr	r3, [r7, #24]
 8011c2a:	4a3f      	ldr	r2, [pc, #252]	@ (8011d28 <ip4_frag+0x288>)
 8011c2c:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 8011c2e:	6979      	ldr	r1, [r7, #20]
 8011c30:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8011c32:	f7f8 f833 	bl	8009c9c <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 8011c36:	f8b7 2044 	ldrh.w	r2, [r7, #68]	@ 0x44
 8011c3a:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8011c3e:	1ad3      	subs	r3, r2, r3
 8011c40:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
      if (left_to_copy) {
 8011c44:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8011c48:	2b00      	cmp	r3, #0
 8011c4a:	d004      	beq.n	8011c56 <ip4_frag+0x1b6>
        poff = 0;
 8011c4c:	2300      	movs	r3, #0
 8011c4e:	87fb      	strh	r3, [r7, #62]	@ 0x3e
        p = p->next;
 8011c50:	68fb      	ldr	r3, [r7, #12]
 8011c52:	681b      	ldr	r3, [r3, #0]
 8011c54:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 8011c56:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8011c5a:	2b00      	cmp	r3, #0
 8011c5c:	d196      	bne.n	8011b8c <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 8011c5e:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 8011c60:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8011c64:	4413      	add	r3, r2
 8011c66:	87fb      	strh	r3, [r7, #62]	@ 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 8011c68:	68bb      	ldr	r3, [r7, #8]
 8011c6a:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8011c6c:	f1a3 0213 	sub.w	r2, r3, #19
 8011c70:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8011c74:	429a      	cmp	r2, r3
 8011c76:	bfcc      	ite	gt
 8011c78:	2301      	movgt	r3, #1
 8011c7a:	2300      	movle	r3, #0
 8011c7c:	b2db      	uxtb	r3, r3
 8011c7e:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 8011c80:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8011c84:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8011c88:	87bb      	strh	r3, [r7, #60]	@ 0x3c
    if (!last || mf_set) {
 8011c8a:	6a3b      	ldr	r3, [r7, #32]
 8011c8c:	2b00      	cmp	r3, #0
 8011c8e:	d002      	beq.n	8011c96 <ip4_frag+0x1f6>
 8011c90:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011c92:	2b00      	cmp	r3, #0
 8011c94:	d003      	beq.n	8011c9e <ip4_frag+0x1fe>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 8011c96:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8011c98:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8011c9c:	87bb      	strh	r3, [r7, #60]	@ 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 8011c9e:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8011ca0:	4618      	mov	r0, r3
 8011ca2:	f7f6 fb3b 	bl	800831c <lwip_htons>
 8011ca6:	4603      	mov	r3, r0
 8011ca8:	461a      	mov	r2, r3
 8011caa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011cac:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 8011cae:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8011cb0:	3314      	adds	r3, #20
 8011cb2:	b29b      	uxth	r3, r3
 8011cb4:	4618      	mov	r0, r3
 8011cb6:	f7f6 fb31 	bl	800831c <lwip_htons>
 8011cba:	4603      	mov	r3, r0
 8011cbc:	461a      	mov	r2, r3
 8011cbe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011cc0:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 8011cc2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011cc4:	2200      	movs	r2, #0
 8011cc6:	729a      	strb	r2, [r3, #10]
 8011cc8:	2200      	movs	r2, #0
 8011cca:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 8011ccc:	68bb      	ldr	r3, [r7, #8]
 8011cce:	695b      	ldr	r3, [r3, #20]
 8011cd0:	687a      	ldr	r2, [r7, #4]
 8011cd2:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8011cd4:	68b8      	ldr	r0, [r7, #8]
 8011cd6:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 8011cd8:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8011cda:	f7f7 ff11 	bl	8009b00 <pbuf_free>
    left = (u16_t)(left - fragsize);
 8011cde:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8011ce2:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8011ce4:	1ad3      	subs	r3, r2, r3
 8011ce6:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
    ofo = (u16_t)(ofo + nfb);
 8011cea:	f8b7 2040 	ldrh.w	r2, [r7, #64]	@ 0x40
 8011cee:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8011cf0:	4413      	add	r3, r2
 8011cf2:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
  while (left) {
 8011cf6:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8011cfa:	2b00      	cmp	r3, #0
 8011cfc:	f47f af19 	bne.w	8011b32 <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 8011d00:	2300      	movs	r3, #0
 8011d02:	e002      	b.n	8011d0a <ip4_frag+0x26a>
      goto memerr;
 8011d04:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 8011d06:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8011d0a:	4618      	mov	r0, r3
 8011d0c:	3748      	adds	r7, #72	@ 0x48
 8011d0e:	46bd      	mov	sp, r7
 8011d10:	bd80      	pop	{r7, pc}
 8011d12:	bf00      	nop
 8011d14:	080159e8 	.word	0x080159e8
 8011d18:	08015bc4 	.word	0x08015bc4
 8011d1c:	08015a30 	.word	0x08015a30
 8011d20:	08015be0 	.word	0x08015be0
 8011d24:	08015c00 	.word	0x08015c00
 8011d28:	08011a39 	.word	0x08011a39

08011d2c <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 8011d2c:	b580      	push	{r7, lr}
 8011d2e:	b086      	sub	sp, #24
 8011d30:	af00      	add	r7, sp, #0
 8011d32:	6078      	str	r0, [r7, #4]
 8011d34:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 8011d36:	230e      	movs	r3, #14
 8011d38:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 8011d3a:	687b      	ldr	r3, [r7, #4]
 8011d3c:	895b      	ldrh	r3, [r3, #10]
 8011d3e:	2b0e      	cmp	r3, #14
 8011d40:	d96e      	bls.n	8011e20 <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 8011d42:	687b      	ldr	r3, [r7, #4]
 8011d44:	7bdb      	ldrb	r3, [r3, #15]
 8011d46:	2b00      	cmp	r3, #0
 8011d48:	d106      	bne.n	8011d58 <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 8011d4a:	683b      	ldr	r3, [r7, #0]
 8011d4c:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8011d50:	3301      	adds	r3, #1
 8011d52:	b2da      	uxtb	r2, r3
 8011d54:	687b      	ldr	r3, [r7, #4]
 8011d56:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 8011d58:	687b      	ldr	r3, [r7, #4]
 8011d5a:	685b      	ldr	r3, [r3, #4]
 8011d5c:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 8011d5e:	693b      	ldr	r3, [r7, #16]
 8011d60:	7b1a      	ldrb	r2, [r3, #12]
 8011d62:	7b5b      	ldrb	r3, [r3, #13]
 8011d64:	021b      	lsls	r3, r3, #8
 8011d66:	4313      	orrs	r3, r2
 8011d68:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 8011d6a:	693b      	ldr	r3, [r7, #16]
 8011d6c:	781b      	ldrb	r3, [r3, #0]
 8011d6e:	f003 0301 	and.w	r3, r3, #1
 8011d72:	2b00      	cmp	r3, #0
 8011d74:	d023      	beq.n	8011dbe <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 8011d76:	693b      	ldr	r3, [r7, #16]
 8011d78:	781b      	ldrb	r3, [r3, #0]
 8011d7a:	2b01      	cmp	r3, #1
 8011d7c:	d10f      	bne.n	8011d9e <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8011d7e:	693b      	ldr	r3, [r7, #16]
 8011d80:	785b      	ldrb	r3, [r3, #1]
 8011d82:	2b00      	cmp	r3, #0
 8011d84:	d11b      	bne.n	8011dbe <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 8011d86:	693b      	ldr	r3, [r7, #16]
 8011d88:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8011d8a:	2b5e      	cmp	r3, #94	@ 0x5e
 8011d8c:	d117      	bne.n	8011dbe <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 8011d8e:	687b      	ldr	r3, [r7, #4]
 8011d90:	7b5b      	ldrb	r3, [r3, #13]
 8011d92:	f043 0310 	orr.w	r3, r3, #16
 8011d96:	b2da      	uxtb	r2, r3
 8011d98:	687b      	ldr	r3, [r7, #4]
 8011d9a:	735a      	strb	r2, [r3, #13]
 8011d9c:	e00f      	b.n	8011dbe <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 8011d9e:	693b      	ldr	r3, [r7, #16]
 8011da0:	2206      	movs	r2, #6
 8011da2:	4928      	ldr	r1, [pc, #160]	@ (8011e44 <ethernet_input+0x118>)
 8011da4:	4618      	mov	r0, r3
 8011da6:	f000 fade 	bl	8012366 <memcmp>
 8011daa:	4603      	mov	r3, r0
 8011dac:	2b00      	cmp	r3, #0
 8011dae:	d106      	bne.n	8011dbe <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 8011db0:	687b      	ldr	r3, [r7, #4]
 8011db2:	7b5b      	ldrb	r3, [r3, #13]
 8011db4:	f043 0308 	orr.w	r3, r3, #8
 8011db8:	b2da      	uxtb	r2, r3
 8011dba:	687b      	ldr	r3, [r7, #4]
 8011dbc:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 8011dbe:	89fb      	ldrh	r3, [r7, #14]
 8011dc0:	2b08      	cmp	r3, #8
 8011dc2:	d003      	beq.n	8011dcc <ethernet_input+0xa0>
 8011dc4:	f5b3 6fc1 	cmp.w	r3, #1544	@ 0x608
 8011dc8:	d014      	beq.n	8011df4 <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 8011dca:	e032      	b.n	8011e32 <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8011dcc:	683b      	ldr	r3, [r7, #0]
 8011dce:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8011dd2:	f003 0308 	and.w	r3, r3, #8
 8011dd6:	2b00      	cmp	r3, #0
 8011dd8:	d024      	beq.n	8011e24 <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 8011dda:	8afb      	ldrh	r3, [r7, #22]
 8011ddc:	4619      	mov	r1, r3
 8011dde:	6878      	ldr	r0, [r7, #4]
 8011de0:	f7f7 fe08 	bl	80099f4 <pbuf_remove_header>
 8011de4:	4603      	mov	r3, r0
 8011de6:	2b00      	cmp	r3, #0
 8011de8:	d11e      	bne.n	8011e28 <ethernet_input+0xfc>
        ip4_input(p, netif);
 8011dea:	6839      	ldr	r1, [r7, #0]
 8011dec:	6878      	ldr	r0, [r7, #4]
 8011dee:	f7fe ff21 	bl	8010c34 <ip4_input>
      break;
 8011df2:	e013      	b.n	8011e1c <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8011df4:	683b      	ldr	r3, [r7, #0]
 8011df6:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8011dfa:	f003 0308 	and.w	r3, r3, #8
 8011dfe:	2b00      	cmp	r3, #0
 8011e00:	d014      	beq.n	8011e2c <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 8011e02:	8afb      	ldrh	r3, [r7, #22]
 8011e04:	4619      	mov	r1, r3
 8011e06:	6878      	ldr	r0, [r7, #4]
 8011e08:	f7f7 fdf4 	bl	80099f4 <pbuf_remove_header>
 8011e0c:	4603      	mov	r3, r0
 8011e0e:	2b00      	cmp	r3, #0
 8011e10:	d10e      	bne.n	8011e30 <ethernet_input+0x104>
        etharp_input(p, netif);
 8011e12:	6839      	ldr	r1, [r7, #0]
 8011e14:	6878      	ldr	r0, [r7, #4]
 8011e16:	f7fe f8c1 	bl	800ff9c <etharp_input>
      break;
 8011e1a:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 8011e1c:	2300      	movs	r3, #0
 8011e1e:	e00c      	b.n	8011e3a <ethernet_input+0x10e>
    goto free_and_return;
 8011e20:	bf00      	nop
 8011e22:	e006      	b.n	8011e32 <ethernet_input+0x106>
        goto free_and_return;
 8011e24:	bf00      	nop
 8011e26:	e004      	b.n	8011e32 <ethernet_input+0x106>
        goto free_and_return;
 8011e28:	bf00      	nop
 8011e2a:	e002      	b.n	8011e32 <ethernet_input+0x106>
        goto free_and_return;
 8011e2c:	bf00      	nop
 8011e2e:	e000      	b.n	8011e32 <ethernet_input+0x106>
        goto free_and_return;
 8011e30:	bf00      	nop

free_and_return:
  pbuf_free(p);
 8011e32:	6878      	ldr	r0, [r7, #4]
 8011e34:	f7f7 fe64 	bl	8009b00 <pbuf_free>
  return ERR_OK;
 8011e38:	2300      	movs	r3, #0
}
 8011e3a:	4618      	mov	r0, r3
 8011e3c:	3718      	adds	r7, #24
 8011e3e:	46bd      	mov	sp, r7
 8011e40:	bd80      	pop	{r7, pc}
 8011e42:	bf00      	nop
 8011e44:	08015e00 	.word	0x08015e00

08011e48 <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 8011e48:	b580      	push	{r7, lr}
 8011e4a:	b086      	sub	sp, #24
 8011e4c:	af00      	add	r7, sp, #0
 8011e4e:	60f8      	str	r0, [r7, #12]
 8011e50:	60b9      	str	r1, [r7, #8]
 8011e52:	607a      	str	r2, [r7, #4]
 8011e54:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 8011e56:	8c3b      	ldrh	r3, [r7, #32]
 8011e58:	4618      	mov	r0, r3
 8011e5a:	f7f6 fa5f 	bl	800831c <lwip_htons>
 8011e5e:	4603      	mov	r3, r0
 8011e60:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 8011e62:	210e      	movs	r1, #14
 8011e64:	68b8      	ldr	r0, [r7, #8]
 8011e66:	f7f7 fdb5 	bl	80099d4 <pbuf_add_header>
 8011e6a:	4603      	mov	r3, r0
 8011e6c:	2b00      	cmp	r3, #0
 8011e6e:	d125      	bne.n	8011ebc <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 8011e70:	68bb      	ldr	r3, [r7, #8]
 8011e72:	685b      	ldr	r3, [r3, #4]
 8011e74:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 8011e76:	693b      	ldr	r3, [r7, #16]
 8011e78:	8afa      	ldrh	r2, [r7, #22]
 8011e7a:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 8011e7c:	693b      	ldr	r3, [r7, #16]
 8011e7e:	2206      	movs	r2, #6
 8011e80:	6839      	ldr	r1, [r7, #0]
 8011e82:	4618      	mov	r0, r3
 8011e84:	f000 fb4b 	bl	801251e <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 8011e88:	693b      	ldr	r3, [r7, #16]
 8011e8a:	3306      	adds	r3, #6
 8011e8c:	2206      	movs	r2, #6
 8011e8e:	6879      	ldr	r1, [r7, #4]
 8011e90:	4618      	mov	r0, r3
 8011e92:	f000 fb44 	bl	801251e <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 8011e96:	68fb      	ldr	r3, [r7, #12]
 8011e98:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8011e9c:	2b06      	cmp	r3, #6
 8011e9e:	d006      	beq.n	8011eae <ethernet_output+0x66>
 8011ea0:	4b0a      	ldr	r3, [pc, #40]	@ (8011ecc <ethernet_output+0x84>)
 8011ea2:	f44f 7299 	mov.w	r2, #306	@ 0x132
 8011ea6:	490a      	ldr	r1, [pc, #40]	@ (8011ed0 <ethernet_output+0x88>)
 8011ea8:	480a      	ldr	r0, [pc, #40]	@ (8011ed4 <ethernet_output+0x8c>)
 8011eaa:	f000 fa07 	bl	80122bc <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 8011eae:	68fb      	ldr	r3, [r7, #12]
 8011eb0:	699b      	ldr	r3, [r3, #24]
 8011eb2:	68b9      	ldr	r1, [r7, #8]
 8011eb4:	68f8      	ldr	r0, [r7, #12]
 8011eb6:	4798      	blx	r3
 8011eb8:	4603      	mov	r3, r0
 8011eba:	e002      	b.n	8011ec2 <ethernet_output+0x7a>
      goto pbuf_header_failed;
 8011ebc:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 8011ebe:	f06f 0301 	mvn.w	r3, #1
}
 8011ec2:	4618      	mov	r0, r3
 8011ec4:	3718      	adds	r7, #24
 8011ec6:	46bd      	mov	sp, r7
 8011ec8:	bd80      	pop	{r7, pc}
 8011eca:	bf00      	nop
 8011ecc:	08015c10 	.word	0x08015c10
 8011ed0:	08015c48 	.word	0x08015c48
 8011ed4:	08015c7c 	.word	0x08015c7c

08011ed8 <sys_mbox_new>:
#endif

/*-----------------------------------------------------------------------------------*/
//  Creates an empty mailbox.
err_t sys_mbox_new(sys_mbox_t *mbox, int size)
{
 8011ed8:	b580      	push	{r7, lr}
 8011eda:	b082      	sub	sp, #8
 8011edc:	af00      	add	r7, sp, #0
 8011ede:	6078      	str	r0, [r7, #4]
 8011ee0:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  osMessageQDef(QUEUE, size, void *);
  *mbox = osMessageCreate(osMessageQ(QUEUE), NULL);
#else
  *mbox = osMessageQueueNew(size, sizeof(void *), NULL);
 8011ee2:	683b      	ldr	r3, [r7, #0]
 8011ee4:	2200      	movs	r2, #0
 8011ee6:	2104      	movs	r1, #4
 8011ee8:	4618      	mov	r0, r3
 8011eea:	f7f2 fd7d 	bl	80049e8 <osMessageQueueNew>
 8011eee:	4602      	mov	r2, r0
 8011ef0:	687b      	ldr	r3, [r7, #4]
 8011ef2:	601a      	str	r2, [r3, #0]
  if(lwip_stats.sys.mbox.max < lwip_stats.sys.mbox.used)
  {
    lwip_stats.sys.mbox.max = lwip_stats.sys.mbox.used;
  }
#endif /* SYS_STATS */
  if(*mbox == NULL)
 8011ef4:	687b      	ldr	r3, [r7, #4]
 8011ef6:	681b      	ldr	r3, [r3, #0]
 8011ef8:	2b00      	cmp	r3, #0
 8011efa:	d102      	bne.n	8011f02 <sys_mbox_new+0x2a>
    return ERR_MEM;
 8011efc:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8011f00:	e000      	b.n	8011f04 <sys_mbox_new+0x2c>

  return ERR_OK;
 8011f02:	2300      	movs	r3, #0
}
 8011f04:	4618      	mov	r0, r3
 8011f06:	3708      	adds	r7, #8
 8011f08:	46bd      	mov	sp, r7
 8011f0a:	bd80      	pop	{r7, pc}

08011f0c <sys_mbox_trypost>:


/*-----------------------------------------------------------------------------------*/
//   Try to post the "msg" to the mailbox.
err_t sys_mbox_trypost(sys_mbox_t *mbox, void *msg)
{
 8011f0c:	b580      	push	{r7, lr}
 8011f0e:	b084      	sub	sp, #16
 8011f10:	af00      	add	r7, sp, #0
 8011f12:	6078      	str	r0, [r7, #4]
 8011f14:	6039      	str	r1, [r7, #0]
  err_t result;
#if (osCMSIS < 0x20000U)
  if(osMessagePut(*mbox, (uint32_t)msg, 0) == osOK)
#else
  if(osMessageQueuePut(*mbox, &msg, 0, 0) == osOK)
 8011f16:	687b      	ldr	r3, [r7, #4]
 8011f18:	6818      	ldr	r0, [r3, #0]
 8011f1a:	4639      	mov	r1, r7
 8011f1c:	2300      	movs	r3, #0
 8011f1e:	2200      	movs	r2, #0
 8011f20:	f7f2 fdd6 	bl	8004ad0 <osMessageQueuePut>
 8011f24:	4603      	mov	r3, r0
 8011f26:	2b00      	cmp	r3, #0
 8011f28:	d102      	bne.n	8011f30 <sys_mbox_trypost+0x24>
#endif
  {
    result = ERR_OK;
 8011f2a:	2300      	movs	r3, #0
 8011f2c:	73fb      	strb	r3, [r7, #15]
 8011f2e:	e001      	b.n	8011f34 <sys_mbox_trypost+0x28>
  }
  else
  {
    // could not post, queue must be full
    result = ERR_MEM;
 8011f30:	23ff      	movs	r3, #255	@ 0xff
 8011f32:	73fb      	strb	r3, [r7, #15]
#if SYS_STATS
    lwip_stats.sys.mbox.err++;
#endif /* SYS_STATS */
  }

  return result;
 8011f34:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8011f38:	4618      	mov	r0, r3
 8011f3a:	3710      	adds	r7, #16
 8011f3c:	46bd      	mov	sp, r7
 8011f3e:	bd80      	pop	{r7, pc}

08011f40 <sys_arch_mbox_fetch>:

  Note that a function with a similar name, sys_mbox_fetch(), is
  implemented by lwIP.
*/
u32_t sys_arch_mbox_fetch(sys_mbox_t *mbox, void **msg, u32_t timeout)
{
 8011f40:	b580      	push	{r7, lr}
 8011f42:	b086      	sub	sp, #24
 8011f44:	af00      	add	r7, sp, #0
 8011f46:	60f8      	str	r0, [r7, #12]
 8011f48:	60b9      	str	r1, [r7, #8]
 8011f4a:	607a      	str	r2, [r7, #4]
#if (osCMSIS < 0x20000U)
  osEvent event;
  uint32_t starttime = osKernelSysTick();
#else
  osStatus_t status;
  uint32_t starttime = osKernelGetTickCount();
 8011f4c:	f7f2 fa5c 	bl	8004408 <osKernelGetTickCount>
 8011f50:	6178      	str	r0, [r7, #20]
#endif
  if(timeout != 0)
 8011f52:	687b      	ldr	r3, [r7, #4]
 8011f54:	2b00      	cmp	r3, #0
 8011f56:	d013      	beq.n	8011f80 <sys_arch_mbox_fetch+0x40>
    {
      *msg = (void *)event.value.v;
      return (osKernelSysTick() - starttime);
    }
#else
    status = osMessageQueueGet(*mbox, msg, 0, timeout);
 8011f58:	68fb      	ldr	r3, [r7, #12]
 8011f5a:	6818      	ldr	r0, [r3, #0]
 8011f5c:	687b      	ldr	r3, [r7, #4]
 8011f5e:	2200      	movs	r2, #0
 8011f60:	68b9      	ldr	r1, [r7, #8]
 8011f62:	f7f2 fe15 	bl	8004b90 <osMessageQueueGet>
 8011f66:	6138      	str	r0, [r7, #16]
    if (status == osOK)
 8011f68:	693b      	ldr	r3, [r7, #16]
 8011f6a:	2b00      	cmp	r3, #0
 8011f6c:	d105      	bne.n	8011f7a <sys_arch_mbox_fetch+0x3a>
    {
      return (osKernelGetTickCount() - starttime);
 8011f6e:	f7f2 fa4b 	bl	8004408 <osKernelGetTickCount>
 8011f72:	4602      	mov	r2, r0
 8011f74:	697b      	ldr	r3, [r7, #20]
 8011f76:	1ad3      	subs	r3, r2, r3
 8011f78:	e00f      	b.n	8011f9a <sys_arch_mbox_fetch+0x5a>
    }
#endif
    else
    {
      return SYS_ARCH_TIMEOUT;
 8011f7a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8011f7e:	e00c      	b.n	8011f9a <sys_arch_mbox_fetch+0x5a>
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, osWaitForever);
    *msg = (void *)event.value.v;
    return (osKernelSysTick() - starttime);
#else
    osMessageQueueGet(*mbox, msg, 0, osWaitForever );
 8011f80:	68fb      	ldr	r3, [r7, #12]
 8011f82:	6818      	ldr	r0, [r3, #0]
 8011f84:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8011f88:	2200      	movs	r2, #0
 8011f8a:	68b9      	ldr	r1, [r7, #8]
 8011f8c:	f7f2 fe00 	bl	8004b90 <osMessageQueueGet>
    return (osKernelGetTickCount() - starttime);
 8011f90:	f7f2 fa3a 	bl	8004408 <osKernelGetTickCount>
 8011f94:	4602      	mov	r2, r0
 8011f96:	697b      	ldr	r3, [r7, #20]
 8011f98:	1ad3      	subs	r3, r2, r3
#endif
  }
}
 8011f9a:	4618      	mov	r0, r3
 8011f9c:	3718      	adds	r7, #24
 8011f9e:	46bd      	mov	sp, r7
 8011fa0:	bd80      	pop	{r7, pc}

08011fa2 <sys_mbox_valid>:
    return SYS_MBOX_EMPTY;
  }
}
/*----------------------------------------------------------------------------------*/
int sys_mbox_valid(sys_mbox_t *mbox)
{
 8011fa2:	b480      	push	{r7}
 8011fa4:	b083      	sub	sp, #12
 8011fa6:	af00      	add	r7, sp, #0
 8011fa8:	6078      	str	r0, [r7, #4]
  if (*mbox == SYS_MBOX_NULL)
 8011faa:	687b      	ldr	r3, [r7, #4]
 8011fac:	681b      	ldr	r3, [r3, #0]
 8011fae:	2b00      	cmp	r3, #0
 8011fb0:	d101      	bne.n	8011fb6 <sys_mbox_valid+0x14>
    return 0;
 8011fb2:	2300      	movs	r3, #0
 8011fb4:	e000      	b.n	8011fb8 <sys_mbox_valid+0x16>
  else
    return 1;
 8011fb6:	2301      	movs	r3, #1
}
 8011fb8:	4618      	mov	r0, r3
 8011fba:	370c      	adds	r7, #12
 8011fbc:	46bd      	mov	sp, r7
 8011fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011fc2:	4770      	bx	lr

08011fc4 <sys_init>:
#else
osMutexId_t lwip_sys_mutex;
#endif
// Initialize sys arch
void sys_init(void)
{
 8011fc4:	b580      	push	{r7, lr}
 8011fc6:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  lwip_sys_mutex = osMutexCreate(osMutex(lwip_sys_mutex));
#else
  lwip_sys_mutex = osMutexNew(NULL);
 8011fc8:	2000      	movs	r0, #0
 8011fca:	f7f2 fadf 	bl	800458c <osMutexNew>
 8011fce:	4603      	mov	r3, r0
 8011fd0:	4a01      	ldr	r2, [pc, #4]	@ (8011fd8 <sys_init+0x14>)
 8011fd2:	6013      	str	r3, [r2, #0]
#endif
}
 8011fd4:	bf00      	nop
 8011fd6:	bd80      	pop	{r7, pc}
 8011fd8:	20010258 	.word	0x20010258

08011fdc <sys_mutex_new>:
                                      /* Mutexes*/
/*-----------------------------------------------------------------------------------*/
/*-----------------------------------------------------------------------------------*/
#if LWIP_COMPAT_MUTEX == 0
/* Create a new mutex*/
err_t sys_mutex_new(sys_mutex_t *mutex) {
 8011fdc:	b580      	push	{r7, lr}
 8011fde:	b082      	sub	sp, #8
 8011fe0:	af00      	add	r7, sp, #0
 8011fe2:	6078      	str	r0, [r7, #4]

#if (osCMSIS < 0x20000U)
  osMutexDef(MUTEX);
  *mutex = osMutexCreate(osMutex(MUTEX));
#else
  *mutex = osMutexNew(NULL);
 8011fe4:	2000      	movs	r0, #0
 8011fe6:	f7f2 fad1 	bl	800458c <osMutexNew>
 8011fea:	4602      	mov	r2, r0
 8011fec:	687b      	ldr	r3, [r7, #4]
 8011fee:	601a      	str	r2, [r3, #0]
#endif

  if(*mutex == NULL)
 8011ff0:	687b      	ldr	r3, [r7, #4]
 8011ff2:	681b      	ldr	r3, [r3, #0]
 8011ff4:	2b00      	cmp	r3, #0
 8011ff6:	d102      	bne.n	8011ffe <sys_mutex_new+0x22>
  {
#if SYS_STATS
    ++lwip_stats.sys.mutex.err;
#endif /* SYS_STATS */
    return ERR_MEM;
 8011ff8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8011ffc:	e000      	b.n	8012000 <sys_mutex_new+0x24>
  ++lwip_stats.sys.mutex.used;
  if (lwip_stats.sys.mutex.max < lwip_stats.sys.mutex.used) {
    lwip_stats.sys.mutex.max = lwip_stats.sys.mutex.used;
  }
#endif /* SYS_STATS */
  return ERR_OK;
 8011ffe:	2300      	movs	r3, #0
}
 8012000:	4618      	mov	r0, r3
 8012002:	3708      	adds	r7, #8
 8012004:	46bd      	mov	sp, r7
 8012006:	bd80      	pop	{r7, pc}

08012008 <sys_mutex_lock>:
  osMutexDelete(*mutex);
}
/*-----------------------------------------------------------------------------------*/
/* Lock a mutex*/
void sys_mutex_lock(sys_mutex_t *mutex)
{
 8012008:	b580      	push	{r7, lr}
 801200a:	b082      	sub	sp, #8
 801200c:	af00      	add	r7, sp, #0
 801200e:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  osMutexWait(*mutex, osWaitForever);
#else
  osMutexAcquire(*mutex, osWaitForever);
 8012010:	687b      	ldr	r3, [r7, #4]
 8012012:	681b      	ldr	r3, [r3, #0]
 8012014:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8012018:	4618      	mov	r0, r3
 801201a:	f7f2 fb3d 	bl	8004698 <osMutexAcquire>
#endif
}
 801201e:	bf00      	nop
 8012020:	3708      	adds	r7, #8
 8012022:	46bd      	mov	sp, r7
 8012024:	bd80      	pop	{r7, pc}

08012026 <sys_mutex_unlock>:

/*-----------------------------------------------------------------------------------*/
/* Unlock a mutex*/
void sys_mutex_unlock(sys_mutex_t *mutex)
{
 8012026:	b580      	push	{r7, lr}
 8012028:	b082      	sub	sp, #8
 801202a:	af00      	add	r7, sp, #0
 801202c:	6078      	str	r0, [r7, #4]
  osMutexRelease(*mutex);
 801202e:	687b      	ldr	r3, [r7, #4]
 8012030:	681b      	ldr	r3, [r3, #0]
 8012032:	4618      	mov	r0, r3
 8012034:	f7f2 fb7b 	bl	800472e <osMutexRelease>
}
 8012038:	bf00      	nop
 801203a:	3708      	adds	r7, #8
 801203c:	46bd      	mov	sp, r7
 801203e:	bd80      	pop	{r7, pc}

08012040 <sys_thread_new>:
  function "thread()". The "arg" argument will be passed as an argument to the
  thread() function. The id of the new thread is returned. Both the id and
  the priority are system dependent.
*/
sys_thread_t sys_thread_new(const char *name, lwip_thread_fn thread , void *arg, int stacksize, int prio)
{
 8012040:	b580      	push	{r7, lr}
 8012042:	b08e      	sub	sp, #56	@ 0x38
 8012044:	af00      	add	r7, sp, #0
 8012046:	60f8      	str	r0, [r7, #12]
 8012048:	60b9      	str	r1, [r7, #8]
 801204a:	607a      	str	r2, [r7, #4]
 801204c:	603b      	str	r3, [r7, #0]
#if (osCMSIS < 0x20000U)
  const osThreadDef_t os_thread_def = { (char *)name, (os_pthread)thread, (osPriority)prio, 0, stacksize};
  return osThreadCreate(&os_thread_def, arg);
#else
  const osThreadAttr_t attributes = {
 801204e:	f107 0314 	add.w	r3, r7, #20
 8012052:	2224      	movs	r2, #36	@ 0x24
 8012054:	2100      	movs	r1, #0
 8012056:	4618      	mov	r0, r3
 8012058:	f000 f995 	bl	8012386 <memset>
 801205c:	68fb      	ldr	r3, [r7, #12]
 801205e:	617b      	str	r3, [r7, #20]
 8012060:	683b      	ldr	r3, [r7, #0]
 8012062:	62bb      	str	r3, [r7, #40]	@ 0x28
 8012064:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8012066:	62fb      	str	r3, [r7, #44]	@ 0x2c
                        .name = name,
                        .stack_size = stacksize,
                        .priority = (osPriority_t)prio,
                      };
  return osThreadNew(thread, arg, &attributes);
 8012068:	f107 0314 	add.w	r3, r7, #20
 801206c:	461a      	mov	r2, r3
 801206e:	6879      	ldr	r1, [r7, #4]
 8012070:	68b8      	ldr	r0, [r7, #8]
 8012072:	f7f2 f9de 	bl	8004432 <osThreadNew>
 8012076:	4603      	mov	r3, r0
#endif
}
 8012078:	4618      	mov	r0, r3
 801207a:	3738      	adds	r7, #56	@ 0x38
 801207c:	46bd      	mov	sp, r7
 801207e:	bd80      	pop	{r7, pc}

08012080 <sys_arch_protect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
sys_prot_t sys_arch_protect(void)
{
 8012080:	b580      	push	{r7, lr}
 8012082:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  osMutexWait(lwip_sys_mutex, osWaitForever);
#else
  osMutexAcquire(lwip_sys_mutex, osWaitForever);
 8012084:	4b04      	ldr	r3, [pc, #16]	@ (8012098 <sys_arch_protect+0x18>)
 8012086:	681b      	ldr	r3, [r3, #0]
 8012088:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 801208c:	4618      	mov	r0, r3
 801208e:	f7f2 fb03 	bl	8004698 <osMutexAcquire>
#endif
  return (sys_prot_t)1;
 8012092:	2301      	movs	r3, #1
}
 8012094:	4618      	mov	r0, r3
 8012096:	bd80      	pop	{r7, pc}
 8012098:	20010258 	.word	0x20010258

0801209c <sys_arch_unprotect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
void sys_arch_unprotect(sys_prot_t pval)
{
 801209c:	b580      	push	{r7, lr}
 801209e:	b082      	sub	sp, #8
 80120a0:	af00      	add	r7, sp, #0
 80120a2:	6078      	str	r0, [r7, #4]
  ( void ) pval;
  osMutexRelease(lwip_sys_mutex);
 80120a4:	4b04      	ldr	r3, [pc, #16]	@ (80120b8 <sys_arch_unprotect+0x1c>)
 80120a6:	681b      	ldr	r3, [r3, #0]
 80120a8:	4618      	mov	r0, r3
 80120aa:	f7f2 fb40 	bl	800472e <osMutexRelease>
}
 80120ae:	bf00      	nop
 80120b0:	3708      	adds	r7, #8
 80120b2:	46bd      	mov	sp, r7
 80120b4:	bd80      	pop	{r7, pc}
 80120b6:	bf00      	nop
 80120b8:	20010258 	.word	0x20010258

080120bc <rand>:
 80120bc:	4b16      	ldr	r3, [pc, #88]	@ (8012118 <rand+0x5c>)
 80120be:	b510      	push	{r4, lr}
 80120c0:	681c      	ldr	r4, [r3, #0]
 80120c2:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80120c4:	b9b3      	cbnz	r3, 80120f4 <rand+0x38>
 80120c6:	2018      	movs	r0, #24
 80120c8:	f000 faa0 	bl	801260c <malloc>
 80120cc:	4602      	mov	r2, r0
 80120ce:	6320      	str	r0, [r4, #48]	@ 0x30
 80120d0:	b920      	cbnz	r0, 80120dc <rand+0x20>
 80120d2:	4b12      	ldr	r3, [pc, #72]	@ (801211c <rand+0x60>)
 80120d4:	4812      	ldr	r0, [pc, #72]	@ (8012120 <rand+0x64>)
 80120d6:	2152      	movs	r1, #82	@ 0x52
 80120d8:	f000 fa30 	bl	801253c <__assert_func>
 80120dc:	4911      	ldr	r1, [pc, #68]	@ (8012124 <rand+0x68>)
 80120de:	4b12      	ldr	r3, [pc, #72]	@ (8012128 <rand+0x6c>)
 80120e0:	e9c0 1300 	strd	r1, r3, [r0]
 80120e4:	4b11      	ldr	r3, [pc, #68]	@ (801212c <rand+0x70>)
 80120e6:	6083      	str	r3, [r0, #8]
 80120e8:	230b      	movs	r3, #11
 80120ea:	8183      	strh	r3, [r0, #12]
 80120ec:	2100      	movs	r1, #0
 80120ee:	2001      	movs	r0, #1
 80120f0:	e9c2 0104 	strd	r0, r1, [r2, #16]
 80120f4:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 80120f6:	480e      	ldr	r0, [pc, #56]	@ (8012130 <rand+0x74>)
 80120f8:	690b      	ldr	r3, [r1, #16]
 80120fa:	694c      	ldr	r4, [r1, #20]
 80120fc:	4a0d      	ldr	r2, [pc, #52]	@ (8012134 <rand+0x78>)
 80120fe:	4358      	muls	r0, r3
 8012100:	fb02 0004 	mla	r0, r2, r4, r0
 8012104:	fba3 3202 	umull	r3, r2, r3, r2
 8012108:	3301      	adds	r3, #1
 801210a:	eb40 0002 	adc.w	r0, r0, r2
 801210e:	e9c1 3004 	strd	r3, r0, [r1, #16]
 8012112:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 8012116:	bd10      	pop	{r4, pc}
 8012118:	2000003c 	.word	0x2000003c
 801211c:	08015e0e 	.word	0x08015e0e
 8012120:	08015e25 	.word	0x08015e25
 8012124:	abcd330e 	.word	0xabcd330e
 8012128:	e66d1234 	.word	0xe66d1234
 801212c:	0005deec 	.word	0x0005deec
 8012130:	5851f42d 	.word	0x5851f42d
 8012134:	4c957f2d 	.word	0x4c957f2d

08012138 <std>:
 8012138:	2300      	movs	r3, #0
 801213a:	b510      	push	{r4, lr}
 801213c:	4604      	mov	r4, r0
 801213e:	e9c0 3300 	strd	r3, r3, [r0]
 8012142:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8012146:	6083      	str	r3, [r0, #8]
 8012148:	8181      	strh	r1, [r0, #12]
 801214a:	6643      	str	r3, [r0, #100]	@ 0x64
 801214c:	81c2      	strh	r2, [r0, #14]
 801214e:	6183      	str	r3, [r0, #24]
 8012150:	4619      	mov	r1, r3
 8012152:	2208      	movs	r2, #8
 8012154:	305c      	adds	r0, #92	@ 0x5c
 8012156:	f000 f916 	bl	8012386 <memset>
 801215a:	4b0d      	ldr	r3, [pc, #52]	@ (8012190 <std+0x58>)
 801215c:	6263      	str	r3, [r4, #36]	@ 0x24
 801215e:	4b0d      	ldr	r3, [pc, #52]	@ (8012194 <std+0x5c>)
 8012160:	62a3      	str	r3, [r4, #40]	@ 0x28
 8012162:	4b0d      	ldr	r3, [pc, #52]	@ (8012198 <std+0x60>)
 8012164:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8012166:	4b0d      	ldr	r3, [pc, #52]	@ (801219c <std+0x64>)
 8012168:	6323      	str	r3, [r4, #48]	@ 0x30
 801216a:	4b0d      	ldr	r3, [pc, #52]	@ (80121a0 <std+0x68>)
 801216c:	6224      	str	r4, [r4, #32]
 801216e:	429c      	cmp	r4, r3
 8012170:	d006      	beq.n	8012180 <std+0x48>
 8012172:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8012176:	4294      	cmp	r4, r2
 8012178:	d002      	beq.n	8012180 <std+0x48>
 801217a:	33d0      	adds	r3, #208	@ 0xd0
 801217c:	429c      	cmp	r4, r3
 801217e:	d105      	bne.n	801218c <std+0x54>
 8012180:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8012184:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012188:	f000 b9c6 	b.w	8012518 <__retarget_lock_init_recursive>
 801218c:	bd10      	pop	{r4, pc}
 801218e:	bf00      	nop
 8012190:	080122e1 	.word	0x080122e1
 8012194:	08012303 	.word	0x08012303
 8012198:	0801233b 	.word	0x0801233b
 801219c:	0801235f 	.word	0x0801235f
 80121a0:	2001025c 	.word	0x2001025c

080121a4 <stdio_exit_handler>:
 80121a4:	4a02      	ldr	r2, [pc, #8]	@ (80121b0 <stdio_exit_handler+0xc>)
 80121a6:	4903      	ldr	r1, [pc, #12]	@ (80121b4 <stdio_exit_handler+0x10>)
 80121a8:	4803      	ldr	r0, [pc, #12]	@ (80121b8 <stdio_exit_handler+0x14>)
 80121aa:	f000 b869 	b.w	8012280 <_fwalk_sglue>
 80121ae:	bf00      	nop
 80121b0:	20000030 	.word	0x20000030
 80121b4:	08012e21 	.word	0x08012e21
 80121b8:	20000040 	.word	0x20000040

080121bc <cleanup_stdio>:
 80121bc:	6841      	ldr	r1, [r0, #4]
 80121be:	4b0c      	ldr	r3, [pc, #48]	@ (80121f0 <cleanup_stdio+0x34>)
 80121c0:	4299      	cmp	r1, r3
 80121c2:	b510      	push	{r4, lr}
 80121c4:	4604      	mov	r4, r0
 80121c6:	d001      	beq.n	80121cc <cleanup_stdio+0x10>
 80121c8:	f000 fe2a 	bl	8012e20 <_fflush_r>
 80121cc:	68a1      	ldr	r1, [r4, #8]
 80121ce:	4b09      	ldr	r3, [pc, #36]	@ (80121f4 <cleanup_stdio+0x38>)
 80121d0:	4299      	cmp	r1, r3
 80121d2:	d002      	beq.n	80121da <cleanup_stdio+0x1e>
 80121d4:	4620      	mov	r0, r4
 80121d6:	f000 fe23 	bl	8012e20 <_fflush_r>
 80121da:	68e1      	ldr	r1, [r4, #12]
 80121dc:	4b06      	ldr	r3, [pc, #24]	@ (80121f8 <cleanup_stdio+0x3c>)
 80121de:	4299      	cmp	r1, r3
 80121e0:	d004      	beq.n	80121ec <cleanup_stdio+0x30>
 80121e2:	4620      	mov	r0, r4
 80121e4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80121e8:	f000 be1a 	b.w	8012e20 <_fflush_r>
 80121ec:	bd10      	pop	{r4, pc}
 80121ee:	bf00      	nop
 80121f0:	2001025c 	.word	0x2001025c
 80121f4:	200102c4 	.word	0x200102c4
 80121f8:	2001032c 	.word	0x2001032c

080121fc <global_stdio_init.part.0>:
 80121fc:	b510      	push	{r4, lr}
 80121fe:	4b0b      	ldr	r3, [pc, #44]	@ (801222c <global_stdio_init.part.0+0x30>)
 8012200:	4c0b      	ldr	r4, [pc, #44]	@ (8012230 <global_stdio_init.part.0+0x34>)
 8012202:	4a0c      	ldr	r2, [pc, #48]	@ (8012234 <global_stdio_init.part.0+0x38>)
 8012204:	601a      	str	r2, [r3, #0]
 8012206:	4620      	mov	r0, r4
 8012208:	2200      	movs	r2, #0
 801220a:	2104      	movs	r1, #4
 801220c:	f7ff ff94 	bl	8012138 <std>
 8012210:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8012214:	2201      	movs	r2, #1
 8012216:	2109      	movs	r1, #9
 8012218:	f7ff ff8e 	bl	8012138 <std>
 801221c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8012220:	2202      	movs	r2, #2
 8012222:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012226:	2112      	movs	r1, #18
 8012228:	f7ff bf86 	b.w	8012138 <std>
 801222c:	20010394 	.word	0x20010394
 8012230:	2001025c 	.word	0x2001025c
 8012234:	080121a5 	.word	0x080121a5

08012238 <__sfp_lock_acquire>:
 8012238:	4801      	ldr	r0, [pc, #4]	@ (8012240 <__sfp_lock_acquire+0x8>)
 801223a:	f000 b96e 	b.w	801251a <__retarget_lock_acquire_recursive>
 801223e:	bf00      	nop
 8012240:	2001039d 	.word	0x2001039d

08012244 <__sfp_lock_release>:
 8012244:	4801      	ldr	r0, [pc, #4]	@ (801224c <__sfp_lock_release+0x8>)
 8012246:	f000 b969 	b.w	801251c <__retarget_lock_release_recursive>
 801224a:	bf00      	nop
 801224c:	2001039d 	.word	0x2001039d

08012250 <__sinit>:
 8012250:	b510      	push	{r4, lr}
 8012252:	4604      	mov	r4, r0
 8012254:	f7ff fff0 	bl	8012238 <__sfp_lock_acquire>
 8012258:	6a23      	ldr	r3, [r4, #32]
 801225a:	b11b      	cbz	r3, 8012264 <__sinit+0x14>
 801225c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012260:	f7ff bff0 	b.w	8012244 <__sfp_lock_release>
 8012264:	4b04      	ldr	r3, [pc, #16]	@ (8012278 <__sinit+0x28>)
 8012266:	6223      	str	r3, [r4, #32]
 8012268:	4b04      	ldr	r3, [pc, #16]	@ (801227c <__sinit+0x2c>)
 801226a:	681b      	ldr	r3, [r3, #0]
 801226c:	2b00      	cmp	r3, #0
 801226e:	d1f5      	bne.n	801225c <__sinit+0xc>
 8012270:	f7ff ffc4 	bl	80121fc <global_stdio_init.part.0>
 8012274:	e7f2      	b.n	801225c <__sinit+0xc>
 8012276:	bf00      	nop
 8012278:	080121bd 	.word	0x080121bd
 801227c:	20010394 	.word	0x20010394

08012280 <_fwalk_sglue>:
 8012280:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012284:	4607      	mov	r7, r0
 8012286:	4688      	mov	r8, r1
 8012288:	4614      	mov	r4, r2
 801228a:	2600      	movs	r6, #0
 801228c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8012290:	f1b9 0901 	subs.w	r9, r9, #1
 8012294:	d505      	bpl.n	80122a2 <_fwalk_sglue+0x22>
 8012296:	6824      	ldr	r4, [r4, #0]
 8012298:	2c00      	cmp	r4, #0
 801229a:	d1f7      	bne.n	801228c <_fwalk_sglue+0xc>
 801229c:	4630      	mov	r0, r6
 801229e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80122a2:	89ab      	ldrh	r3, [r5, #12]
 80122a4:	2b01      	cmp	r3, #1
 80122a6:	d907      	bls.n	80122b8 <_fwalk_sglue+0x38>
 80122a8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80122ac:	3301      	adds	r3, #1
 80122ae:	d003      	beq.n	80122b8 <_fwalk_sglue+0x38>
 80122b0:	4629      	mov	r1, r5
 80122b2:	4638      	mov	r0, r7
 80122b4:	47c0      	blx	r8
 80122b6:	4306      	orrs	r6, r0
 80122b8:	3568      	adds	r5, #104	@ 0x68
 80122ba:	e7e9      	b.n	8012290 <_fwalk_sglue+0x10>

080122bc <iprintf>:
 80122bc:	b40f      	push	{r0, r1, r2, r3}
 80122be:	b507      	push	{r0, r1, r2, lr}
 80122c0:	4906      	ldr	r1, [pc, #24]	@ (80122dc <iprintf+0x20>)
 80122c2:	ab04      	add	r3, sp, #16
 80122c4:	6808      	ldr	r0, [r1, #0]
 80122c6:	f853 2b04 	ldr.w	r2, [r3], #4
 80122ca:	6881      	ldr	r1, [r0, #8]
 80122cc:	9301      	str	r3, [sp, #4]
 80122ce:	f000 fa7d 	bl	80127cc <_vfiprintf_r>
 80122d2:	b003      	add	sp, #12
 80122d4:	f85d eb04 	ldr.w	lr, [sp], #4
 80122d8:	b004      	add	sp, #16
 80122da:	4770      	bx	lr
 80122dc:	2000003c 	.word	0x2000003c

080122e0 <__sread>:
 80122e0:	b510      	push	{r4, lr}
 80122e2:	460c      	mov	r4, r1
 80122e4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80122e8:	f000 f8ce 	bl	8012488 <_read_r>
 80122ec:	2800      	cmp	r0, #0
 80122ee:	bfab      	itete	ge
 80122f0:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80122f2:	89a3      	ldrhlt	r3, [r4, #12]
 80122f4:	181b      	addge	r3, r3, r0
 80122f6:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80122fa:	bfac      	ite	ge
 80122fc:	6563      	strge	r3, [r4, #84]	@ 0x54
 80122fe:	81a3      	strhlt	r3, [r4, #12]
 8012300:	bd10      	pop	{r4, pc}

08012302 <__swrite>:
 8012302:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012306:	461f      	mov	r7, r3
 8012308:	898b      	ldrh	r3, [r1, #12]
 801230a:	05db      	lsls	r3, r3, #23
 801230c:	4605      	mov	r5, r0
 801230e:	460c      	mov	r4, r1
 8012310:	4616      	mov	r6, r2
 8012312:	d505      	bpl.n	8012320 <__swrite+0x1e>
 8012314:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012318:	2302      	movs	r3, #2
 801231a:	2200      	movs	r2, #0
 801231c:	f000 f8a2 	bl	8012464 <_lseek_r>
 8012320:	89a3      	ldrh	r3, [r4, #12]
 8012322:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8012326:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 801232a:	81a3      	strh	r3, [r4, #12]
 801232c:	4632      	mov	r2, r6
 801232e:	463b      	mov	r3, r7
 8012330:	4628      	mov	r0, r5
 8012332:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8012336:	f000 b8b9 	b.w	80124ac <_write_r>

0801233a <__sseek>:
 801233a:	b510      	push	{r4, lr}
 801233c:	460c      	mov	r4, r1
 801233e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012342:	f000 f88f 	bl	8012464 <_lseek_r>
 8012346:	1c43      	adds	r3, r0, #1
 8012348:	89a3      	ldrh	r3, [r4, #12]
 801234a:	bf15      	itete	ne
 801234c:	6560      	strne	r0, [r4, #84]	@ 0x54
 801234e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8012352:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8012356:	81a3      	strheq	r3, [r4, #12]
 8012358:	bf18      	it	ne
 801235a:	81a3      	strhne	r3, [r4, #12]
 801235c:	bd10      	pop	{r4, pc}

0801235e <__sclose>:
 801235e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012362:	f000 b819 	b.w	8012398 <_close_r>

08012366 <memcmp>:
 8012366:	b510      	push	{r4, lr}
 8012368:	3901      	subs	r1, #1
 801236a:	4402      	add	r2, r0
 801236c:	4290      	cmp	r0, r2
 801236e:	d101      	bne.n	8012374 <memcmp+0xe>
 8012370:	2000      	movs	r0, #0
 8012372:	e005      	b.n	8012380 <memcmp+0x1a>
 8012374:	7803      	ldrb	r3, [r0, #0]
 8012376:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 801237a:	42a3      	cmp	r3, r4
 801237c:	d001      	beq.n	8012382 <memcmp+0x1c>
 801237e:	1b18      	subs	r0, r3, r4
 8012380:	bd10      	pop	{r4, pc}
 8012382:	3001      	adds	r0, #1
 8012384:	e7f2      	b.n	801236c <memcmp+0x6>

08012386 <memset>:
 8012386:	4402      	add	r2, r0
 8012388:	4603      	mov	r3, r0
 801238a:	4293      	cmp	r3, r2
 801238c:	d100      	bne.n	8012390 <memset+0xa>
 801238e:	4770      	bx	lr
 8012390:	f803 1b01 	strb.w	r1, [r3], #1
 8012394:	e7f9      	b.n	801238a <memset+0x4>
	...

08012398 <_close_r>:
 8012398:	b538      	push	{r3, r4, r5, lr}
 801239a:	4d06      	ldr	r5, [pc, #24]	@ (80123b4 <_close_r+0x1c>)
 801239c:	2300      	movs	r3, #0
 801239e:	4604      	mov	r4, r0
 80123a0:	4608      	mov	r0, r1
 80123a2:	602b      	str	r3, [r5, #0]
 80123a4:	f7ee fb04 	bl	80009b0 <_close>
 80123a8:	1c43      	adds	r3, r0, #1
 80123aa:	d102      	bne.n	80123b2 <_close_r+0x1a>
 80123ac:	682b      	ldr	r3, [r5, #0]
 80123ae:	b103      	cbz	r3, 80123b2 <_close_r+0x1a>
 80123b0:	6023      	str	r3, [r4, #0]
 80123b2:	bd38      	pop	{r3, r4, r5, pc}
 80123b4:	20010398 	.word	0x20010398

080123b8 <_reclaim_reent>:
 80123b8:	4b29      	ldr	r3, [pc, #164]	@ (8012460 <_reclaim_reent+0xa8>)
 80123ba:	681b      	ldr	r3, [r3, #0]
 80123bc:	4283      	cmp	r3, r0
 80123be:	b570      	push	{r4, r5, r6, lr}
 80123c0:	4604      	mov	r4, r0
 80123c2:	d04b      	beq.n	801245c <_reclaim_reent+0xa4>
 80123c4:	69c3      	ldr	r3, [r0, #28]
 80123c6:	b1ab      	cbz	r3, 80123f4 <_reclaim_reent+0x3c>
 80123c8:	68db      	ldr	r3, [r3, #12]
 80123ca:	b16b      	cbz	r3, 80123e8 <_reclaim_reent+0x30>
 80123cc:	2500      	movs	r5, #0
 80123ce:	69e3      	ldr	r3, [r4, #28]
 80123d0:	68db      	ldr	r3, [r3, #12]
 80123d2:	5959      	ldr	r1, [r3, r5]
 80123d4:	2900      	cmp	r1, #0
 80123d6:	d13b      	bne.n	8012450 <_reclaim_reent+0x98>
 80123d8:	3504      	adds	r5, #4
 80123da:	2d80      	cmp	r5, #128	@ 0x80
 80123dc:	d1f7      	bne.n	80123ce <_reclaim_reent+0x16>
 80123de:	69e3      	ldr	r3, [r4, #28]
 80123e0:	4620      	mov	r0, r4
 80123e2:	68d9      	ldr	r1, [r3, #12]
 80123e4:	f000 f8c8 	bl	8012578 <_free_r>
 80123e8:	69e3      	ldr	r3, [r4, #28]
 80123ea:	6819      	ldr	r1, [r3, #0]
 80123ec:	b111      	cbz	r1, 80123f4 <_reclaim_reent+0x3c>
 80123ee:	4620      	mov	r0, r4
 80123f0:	f000 f8c2 	bl	8012578 <_free_r>
 80123f4:	6961      	ldr	r1, [r4, #20]
 80123f6:	b111      	cbz	r1, 80123fe <_reclaim_reent+0x46>
 80123f8:	4620      	mov	r0, r4
 80123fa:	f000 f8bd 	bl	8012578 <_free_r>
 80123fe:	69e1      	ldr	r1, [r4, #28]
 8012400:	b111      	cbz	r1, 8012408 <_reclaim_reent+0x50>
 8012402:	4620      	mov	r0, r4
 8012404:	f000 f8b8 	bl	8012578 <_free_r>
 8012408:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 801240a:	b111      	cbz	r1, 8012412 <_reclaim_reent+0x5a>
 801240c:	4620      	mov	r0, r4
 801240e:	f000 f8b3 	bl	8012578 <_free_r>
 8012412:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8012414:	b111      	cbz	r1, 801241c <_reclaim_reent+0x64>
 8012416:	4620      	mov	r0, r4
 8012418:	f000 f8ae 	bl	8012578 <_free_r>
 801241c:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 801241e:	b111      	cbz	r1, 8012426 <_reclaim_reent+0x6e>
 8012420:	4620      	mov	r0, r4
 8012422:	f000 f8a9 	bl	8012578 <_free_r>
 8012426:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8012428:	b111      	cbz	r1, 8012430 <_reclaim_reent+0x78>
 801242a:	4620      	mov	r0, r4
 801242c:	f000 f8a4 	bl	8012578 <_free_r>
 8012430:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8012432:	b111      	cbz	r1, 801243a <_reclaim_reent+0x82>
 8012434:	4620      	mov	r0, r4
 8012436:	f000 f89f 	bl	8012578 <_free_r>
 801243a:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 801243c:	b111      	cbz	r1, 8012444 <_reclaim_reent+0x8c>
 801243e:	4620      	mov	r0, r4
 8012440:	f000 f89a 	bl	8012578 <_free_r>
 8012444:	6a23      	ldr	r3, [r4, #32]
 8012446:	b14b      	cbz	r3, 801245c <_reclaim_reent+0xa4>
 8012448:	4620      	mov	r0, r4
 801244a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801244e:	4718      	bx	r3
 8012450:	680e      	ldr	r6, [r1, #0]
 8012452:	4620      	mov	r0, r4
 8012454:	f000 f890 	bl	8012578 <_free_r>
 8012458:	4631      	mov	r1, r6
 801245a:	e7bb      	b.n	80123d4 <_reclaim_reent+0x1c>
 801245c:	bd70      	pop	{r4, r5, r6, pc}
 801245e:	bf00      	nop
 8012460:	2000003c 	.word	0x2000003c

08012464 <_lseek_r>:
 8012464:	b538      	push	{r3, r4, r5, lr}
 8012466:	4d07      	ldr	r5, [pc, #28]	@ (8012484 <_lseek_r+0x20>)
 8012468:	4604      	mov	r4, r0
 801246a:	4608      	mov	r0, r1
 801246c:	4611      	mov	r1, r2
 801246e:	2200      	movs	r2, #0
 8012470:	602a      	str	r2, [r5, #0]
 8012472:	461a      	mov	r2, r3
 8012474:	f7ee fac3 	bl	80009fe <_lseek>
 8012478:	1c43      	adds	r3, r0, #1
 801247a:	d102      	bne.n	8012482 <_lseek_r+0x1e>
 801247c:	682b      	ldr	r3, [r5, #0]
 801247e:	b103      	cbz	r3, 8012482 <_lseek_r+0x1e>
 8012480:	6023      	str	r3, [r4, #0]
 8012482:	bd38      	pop	{r3, r4, r5, pc}
 8012484:	20010398 	.word	0x20010398

08012488 <_read_r>:
 8012488:	b538      	push	{r3, r4, r5, lr}
 801248a:	4d07      	ldr	r5, [pc, #28]	@ (80124a8 <_read_r+0x20>)
 801248c:	4604      	mov	r4, r0
 801248e:	4608      	mov	r0, r1
 8012490:	4611      	mov	r1, r2
 8012492:	2200      	movs	r2, #0
 8012494:	602a      	str	r2, [r5, #0]
 8012496:	461a      	mov	r2, r3
 8012498:	f7ee fa51 	bl	800093e <_read>
 801249c:	1c43      	adds	r3, r0, #1
 801249e:	d102      	bne.n	80124a6 <_read_r+0x1e>
 80124a0:	682b      	ldr	r3, [r5, #0]
 80124a2:	b103      	cbz	r3, 80124a6 <_read_r+0x1e>
 80124a4:	6023      	str	r3, [r4, #0]
 80124a6:	bd38      	pop	{r3, r4, r5, pc}
 80124a8:	20010398 	.word	0x20010398

080124ac <_write_r>:
 80124ac:	b538      	push	{r3, r4, r5, lr}
 80124ae:	4d07      	ldr	r5, [pc, #28]	@ (80124cc <_write_r+0x20>)
 80124b0:	4604      	mov	r4, r0
 80124b2:	4608      	mov	r0, r1
 80124b4:	4611      	mov	r1, r2
 80124b6:	2200      	movs	r2, #0
 80124b8:	602a      	str	r2, [r5, #0]
 80124ba:	461a      	mov	r2, r3
 80124bc:	f7ee fa5c 	bl	8000978 <_write>
 80124c0:	1c43      	adds	r3, r0, #1
 80124c2:	d102      	bne.n	80124ca <_write_r+0x1e>
 80124c4:	682b      	ldr	r3, [r5, #0]
 80124c6:	b103      	cbz	r3, 80124ca <_write_r+0x1e>
 80124c8:	6023      	str	r3, [r4, #0]
 80124ca:	bd38      	pop	{r3, r4, r5, pc}
 80124cc:	20010398 	.word	0x20010398

080124d0 <__libc_init_array>:
 80124d0:	b570      	push	{r4, r5, r6, lr}
 80124d2:	4d0d      	ldr	r5, [pc, #52]	@ (8012508 <__libc_init_array+0x38>)
 80124d4:	4c0d      	ldr	r4, [pc, #52]	@ (801250c <__libc_init_array+0x3c>)
 80124d6:	1b64      	subs	r4, r4, r5
 80124d8:	10a4      	asrs	r4, r4, #2
 80124da:	2600      	movs	r6, #0
 80124dc:	42a6      	cmp	r6, r4
 80124de:	d109      	bne.n	80124f4 <__libc_init_array+0x24>
 80124e0:	4d0b      	ldr	r5, [pc, #44]	@ (8012510 <__libc_init_array+0x40>)
 80124e2:	4c0c      	ldr	r4, [pc, #48]	@ (8012514 <__libc_init_array+0x44>)
 80124e4:	f000 fe4a 	bl	801317c <_init>
 80124e8:	1b64      	subs	r4, r4, r5
 80124ea:	10a4      	asrs	r4, r4, #2
 80124ec:	2600      	movs	r6, #0
 80124ee:	42a6      	cmp	r6, r4
 80124f0:	d105      	bne.n	80124fe <__libc_init_array+0x2e>
 80124f2:	bd70      	pop	{r4, r5, r6, pc}
 80124f4:	f855 3b04 	ldr.w	r3, [r5], #4
 80124f8:	4798      	blx	r3
 80124fa:	3601      	adds	r6, #1
 80124fc:	e7ee      	b.n	80124dc <__libc_init_array+0xc>
 80124fe:	f855 3b04 	ldr.w	r3, [r5], #4
 8012502:	4798      	blx	r3
 8012504:	3601      	adds	r6, #1
 8012506:	e7f2      	b.n	80124ee <__libc_init_array+0x1e>
 8012508:	08015ef4 	.word	0x08015ef4
 801250c:	08015ef4 	.word	0x08015ef4
 8012510:	08015ef4 	.word	0x08015ef4
 8012514:	08015ef8 	.word	0x08015ef8

08012518 <__retarget_lock_init_recursive>:
 8012518:	4770      	bx	lr

0801251a <__retarget_lock_acquire_recursive>:
 801251a:	4770      	bx	lr

0801251c <__retarget_lock_release_recursive>:
 801251c:	4770      	bx	lr

0801251e <memcpy>:
 801251e:	440a      	add	r2, r1
 8012520:	4291      	cmp	r1, r2
 8012522:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8012526:	d100      	bne.n	801252a <memcpy+0xc>
 8012528:	4770      	bx	lr
 801252a:	b510      	push	{r4, lr}
 801252c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8012530:	f803 4f01 	strb.w	r4, [r3, #1]!
 8012534:	4291      	cmp	r1, r2
 8012536:	d1f9      	bne.n	801252c <memcpy+0xe>
 8012538:	bd10      	pop	{r4, pc}
	...

0801253c <__assert_func>:
 801253c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801253e:	4614      	mov	r4, r2
 8012540:	461a      	mov	r2, r3
 8012542:	4b09      	ldr	r3, [pc, #36]	@ (8012568 <__assert_func+0x2c>)
 8012544:	681b      	ldr	r3, [r3, #0]
 8012546:	4605      	mov	r5, r0
 8012548:	68d8      	ldr	r0, [r3, #12]
 801254a:	b954      	cbnz	r4, 8012562 <__assert_func+0x26>
 801254c:	4b07      	ldr	r3, [pc, #28]	@ (801256c <__assert_func+0x30>)
 801254e:	461c      	mov	r4, r3
 8012550:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8012554:	9100      	str	r1, [sp, #0]
 8012556:	462b      	mov	r3, r5
 8012558:	4905      	ldr	r1, [pc, #20]	@ (8012570 <__assert_func+0x34>)
 801255a:	f000 fc89 	bl	8012e70 <fiprintf>
 801255e:	f000 fd3d 	bl	8012fdc <abort>
 8012562:	4b04      	ldr	r3, [pc, #16]	@ (8012574 <__assert_func+0x38>)
 8012564:	e7f4      	b.n	8012550 <__assert_func+0x14>
 8012566:	bf00      	nop
 8012568:	2000003c 	.word	0x2000003c
 801256c:	08015eb8 	.word	0x08015eb8
 8012570:	08015e8a 	.word	0x08015e8a
 8012574:	08015e7d 	.word	0x08015e7d

08012578 <_free_r>:
 8012578:	b538      	push	{r3, r4, r5, lr}
 801257a:	4605      	mov	r5, r0
 801257c:	2900      	cmp	r1, #0
 801257e:	d041      	beq.n	8012604 <_free_r+0x8c>
 8012580:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8012584:	1f0c      	subs	r4, r1, #4
 8012586:	2b00      	cmp	r3, #0
 8012588:	bfb8      	it	lt
 801258a:	18e4      	addlt	r4, r4, r3
 801258c:	f000 f8e8 	bl	8012760 <__malloc_lock>
 8012590:	4a1d      	ldr	r2, [pc, #116]	@ (8012608 <_free_r+0x90>)
 8012592:	6813      	ldr	r3, [r2, #0]
 8012594:	b933      	cbnz	r3, 80125a4 <_free_r+0x2c>
 8012596:	6063      	str	r3, [r4, #4]
 8012598:	6014      	str	r4, [r2, #0]
 801259a:	4628      	mov	r0, r5
 801259c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80125a0:	f000 b8e4 	b.w	801276c <__malloc_unlock>
 80125a4:	42a3      	cmp	r3, r4
 80125a6:	d908      	bls.n	80125ba <_free_r+0x42>
 80125a8:	6820      	ldr	r0, [r4, #0]
 80125aa:	1821      	adds	r1, r4, r0
 80125ac:	428b      	cmp	r3, r1
 80125ae:	bf01      	itttt	eq
 80125b0:	6819      	ldreq	r1, [r3, #0]
 80125b2:	685b      	ldreq	r3, [r3, #4]
 80125b4:	1809      	addeq	r1, r1, r0
 80125b6:	6021      	streq	r1, [r4, #0]
 80125b8:	e7ed      	b.n	8012596 <_free_r+0x1e>
 80125ba:	461a      	mov	r2, r3
 80125bc:	685b      	ldr	r3, [r3, #4]
 80125be:	b10b      	cbz	r3, 80125c4 <_free_r+0x4c>
 80125c0:	42a3      	cmp	r3, r4
 80125c2:	d9fa      	bls.n	80125ba <_free_r+0x42>
 80125c4:	6811      	ldr	r1, [r2, #0]
 80125c6:	1850      	adds	r0, r2, r1
 80125c8:	42a0      	cmp	r0, r4
 80125ca:	d10b      	bne.n	80125e4 <_free_r+0x6c>
 80125cc:	6820      	ldr	r0, [r4, #0]
 80125ce:	4401      	add	r1, r0
 80125d0:	1850      	adds	r0, r2, r1
 80125d2:	4283      	cmp	r3, r0
 80125d4:	6011      	str	r1, [r2, #0]
 80125d6:	d1e0      	bne.n	801259a <_free_r+0x22>
 80125d8:	6818      	ldr	r0, [r3, #0]
 80125da:	685b      	ldr	r3, [r3, #4]
 80125dc:	6053      	str	r3, [r2, #4]
 80125de:	4408      	add	r0, r1
 80125e0:	6010      	str	r0, [r2, #0]
 80125e2:	e7da      	b.n	801259a <_free_r+0x22>
 80125e4:	d902      	bls.n	80125ec <_free_r+0x74>
 80125e6:	230c      	movs	r3, #12
 80125e8:	602b      	str	r3, [r5, #0]
 80125ea:	e7d6      	b.n	801259a <_free_r+0x22>
 80125ec:	6820      	ldr	r0, [r4, #0]
 80125ee:	1821      	adds	r1, r4, r0
 80125f0:	428b      	cmp	r3, r1
 80125f2:	bf04      	itt	eq
 80125f4:	6819      	ldreq	r1, [r3, #0]
 80125f6:	685b      	ldreq	r3, [r3, #4]
 80125f8:	6063      	str	r3, [r4, #4]
 80125fa:	bf04      	itt	eq
 80125fc:	1809      	addeq	r1, r1, r0
 80125fe:	6021      	streq	r1, [r4, #0]
 8012600:	6054      	str	r4, [r2, #4]
 8012602:	e7ca      	b.n	801259a <_free_r+0x22>
 8012604:	bd38      	pop	{r3, r4, r5, pc}
 8012606:	bf00      	nop
 8012608:	200103a4 	.word	0x200103a4

0801260c <malloc>:
 801260c:	4b02      	ldr	r3, [pc, #8]	@ (8012618 <malloc+0xc>)
 801260e:	4601      	mov	r1, r0
 8012610:	6818      	ldr	r0, [r3, #0]
 8012612:	f000 b825 	b.w	8012660 <_malloc_r>
 8012616:	bf00      	nop
 8012618:	2000003c 	.word	0x2000003c

0801261c <sbrk_aligned>:
 801261c:	b570      	push	{r4, r5, r6, lr}
 801261e:	4e0f      	ldr	r6, [pc, #60]	@ (801265c <sbrk_aligned+0x40>)
 8012620:	460c      	mov	r4, r1
 8012622:	6831      	ldr	r1, [r6, #0]
 8012624:	4605      	mov	r5, r0
 8012626:	b911      	cbnz	r1, 801262e <sbrk_aligned+0x12>
 8012628:	f000 fcc8 	bl	8012fbc <_sbrk_r>
 801262c:	6030      	str	r0, [r6, #0]
 801262e:	4621      	mov	r1, r4
 8012630:	4628      	mov	r0, r5
 8012632:	f000 fcc3 	bl	8012fbc <_sbrk_r>
 8012636:	1c43      	adds	r3, r0, #1
 8012638:	d103      	bne.n	8012642 <sbrk_aligned+0x26>
 801263a:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 801263e:	4620      	mov	r0, r4
 8012640:	bd70      	pop	{r4, r5, r6, pc}
 8012642:	1cc4      	adds	r4, r0, #3
 8012644:	f024 0403 	bic.w	r4, r4, #3
 8012648:	42a0      	cmp	r0, r4
 801264a:	d0f8      	beq.n	801263e <sbrk_aligned+0x22>
 801264c:	1a21      	subs	r1, r4, r0
 801264e:	4628      	mov	r0, r5
 8012650:	f000 fcb4 	bl	8012fbc <_sbrk_r>
 8012654:	3001      	adds	r0, #1
 8012656:	d1f2      	bne.n	801263e <sbrk_aligned+0x22>
 8012658:	e7ef      	b.n	801263a <sbrk_aligned+0x1e>
 801265a:	bf00      	nop
 801265c:	200103a0 	.word	0x200103a0

08012660 <_malloc_r>:
 8012660:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012664:	1ccd      	adds	r5, r1, #3
 8012666:	f025 0503 	bic.w	r5, r5, #3
 801266a:	3508      	adds	r5, #8
 801266c:	2d0c      	cmp	r5, #12
 801266e:	bf38      	it	cc
 8012670:	250c      	movcc	r5, #12
 8012672:	2d00      	cmp	r5, #0
 8012674:	4606      	mov	r6, r0
 8012676:	db01      	blt.n	801267c <_malloc_r+0x1c>
 8012678:	42a9      	cmp	r1, r5
 801267a:	d904      	bls.n	8012686 <_malloc_r+0x26>
 801267c:	230c      	movs	r3, #12
 801267e:	6033      	str	r3, [r6, #0]
 8012680:	2000      	movs	r0, #0
 8012682:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012686:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 801275c <_malloc_r+0xfc>
 801268a:	f000 f869 	bl	8012760 <__malloc_lock>
 801268e:	f8d8 3000 	ldr.w	r3, [r8]
 8012692:	461c      	mov	r4, r3
 8012694:	bb44      	cbnz	r4, 80126e8 <_malloc_r+0x88>
 8012696:	4629      	mov	r1, r5
 8012698:	4630      	mov	r0, r6
 801269a:	f7ff ffbf 	bl	801261c <sbrk_aligned>
 801269e:	1c43      	adds	r3, r0, #1
 80126a0:	4604      	mov	r4, r0
 80126a2:	d158      	bne.n	8012756 <_malloc_r+0xf6>
 80126a4:	f8d8 4000 	ldr.w	r4, [r8]
 80126a8:	4627      	mov	r7, r4
 80126aa:	2f00      	cmp	r7, #0
 80126ac:	d143      	bne.n	8012736 <_malloc_r+0xd6>
 80126ae:	2c00      	cmp	r4, #0
 80126b0:	d04b      	beq.n	801274a <_malloc_r+0xea>
 80126b2:	6823      	ldr	r3, [r4, #0]
 80126b4:	4639      	mov	r1, r7
 80126b6:	4630      	mov	r0, r6
 80126b8:	eb04 0903 	add.w	r9, r4, r3
 80126bc:	f000 fc7e 	bl	8012fbc <_sbrk_r>
 80126c0:	4581      	cmp	r9, r0
 80126c2:	d142      	bne.n	801274a <_malloc_r+0xea>
 80126c4:	6821      	ldr	r1, [r4, #0]
 80126c6:	1a6d      	subs	r5, r5, r1
 80126c8:	4629      	mov	r1, r5
 80126ca:	4630      	mov	r0, r6
 80126cc:	f7ff ffa6 	bl	801261c <sbrk_aligned>
 80126d0:	3001      	adds	r0, #1
 80126d2:	d03a      	beq.n	801274a <_malloc_r+0xea>
 80126d4:	6823      	ldr	r3, [r4, #0]
 80126d6:	442b      	add	r3, r5
 80126d8:	6023      	str	r3, [r4, #0]
 80126da:	f8d8 3000 	ldr.w	r3, [r8]
 80126de:	685a      	ldr	r2, [r3, #4]
 80126e0:	bb62      	cbnz	r2, 801273c <_malloc_r+0xdc>
 80126e2:	f8c8 7000 	str.w	r7, [r8]
 80126e6:	e00f      	b.n	8012708 <_malloc_r+0xa8>
 80126e8:	6822      	ldr	r2, [r4, #0]
 80126ea:	1b52      	subs	r2, r2, r5
 80126ec:	d420      	bmi.n	8012730 <_malloc_r+0xd0>
 80126ee:	2a0b      	cmp	r2, #11
 80126f0:	d917      	bls.n	8012722 <_malloc_r+0xc2>
 80126f2:	1961      	adds	r1, r4, r5
 80126f4:	42a3      	cmp	r3, r4
 80126f6:	6025      	str	r5, [r4, #0]
 80126f8:	bf18      	it	ne
 80126fa:	6059      	strne	r1, [r3, #4]
 80126fc:	6863      	ldr	r3, [r4, #4]
 80126fe:	bf08      	it	eq
 8012700:	f8c8 1000 	streq.w	r1, [r8]
 8012704:	5162      	str	r2, [r4, r5]
 8012706:	604b      	str	r3, [r1, #4]
 8012708:	4630      	mov	r0, r6
 801270a:	f000 f82f 	bl	801276c <__malloc_unlock>
 801270e:	f104 000b 	add.w	r0, r4, #11
 8012712:	1d23      	adds	r3, r4, #4
 8012714:	f020 0007 	bic.w	r0, r0, #7
 8012718:	1ac2      	subs	r2, r0, r3
 801271a:	bf1c      	itt	ne
 801271c:	1a1b      	subne	r3, r3, r0
 801271e:	50a3      	strne	r3, [r4, r2]
 8012720:	e7af      	b.n	8012682 <_malloc_r+0x22>
 8012722:	6862      	ldr	r2, [r4, #4]
 8012724:	42a3      	cmp	r3, r4
 8012726:	bf0c      	ite	eq
 8012728:	f8c8 2000 	streq.w	r2, [r8]
 801272c:	605a      	strne	r2, [r3, #4]
 801272e:	e7eb      	b.n	8012708 <_malloc_r+0xa8>
 8012730:	4623      	mov	r3, r4
 8012732:	6864      	ldr	r4, [r4, #4]
 8012734:	e7ae      	b.n	8012694 <_malloc_r+0x34>
 8012736:	463c      	mov	r4, r7
 8012738:	687f      	ldr	r7, [r7, #4]
 801273a:	e7b6      	b.n	80126aa <_malloc_r+0x4a>
 801273c:	461a      	mov	r2, r3
 801273e:	685b      	ldr	r3, [r3, #4]
 8012740:	42a3      	cmp	r3, r4
 8012742:	d1fb      	bne.n	801273c <_malloc_r+0xdc>
 8012744:	2300      	movs	r3, #0
 8012746:	6053      	str	r3, [r2, #4]
 8012748:	e7de      	b.n	8012708 <_malloc_r+0xa8>
 801274a:	230c      	movs	r3, #12
 801274c:	6033      	str	r3, [r6, #0]
 801274e:	4630      	mov	r0, r6
 8012750:	f000 f80c 	bl	801276c <__malloc_unlock>
 8012754:	e794      	b.n	8012680 <_malloc_r+0x20>
 8012756:	6005      	str	r5, [r0, #0]
 8012758:	e7d6      	b.n	8012708 <_malloc_r+0xa8>
 801275a:	bf00      	nop
 801275c:	200103a4 	.word	0x200103a4

08012760 <__malloc_lock>:
 8012760:	4801      	ldr	r0, [pc, #4]	@ (8012768 <__malloc_lock+0x8>)
 8012762:	f7ff beda 	b.w	801251a <__retarget_lock_acquire_recursive>
 8012766:	bf00      	nop
 8012768:	2001039c 	.word	0x2001039c

0801276c <__malloc_unlock>:
 801276c:	4801      	ldr	r0, [pc, #4]	@ (8012774 <__malloc_unlock+0x8>)
 801276e:	f7ff bed5 	b.w	801251c <__retarget_lock_release_recursive>
 8012772:	bf00      	nop
 8012774:	2001039c 	.word	0x2001039c

08012778 <__sfputc_r>:
 8012778:	6893      	ldr	r3, [r2, #8]
 801277a:	3b01      	subs	r3, #1
 801277c:	2b00      	cmp	r3, #0
 801277e:	b410      	push	{r4}
 8012780:	6093      	str	r3, [r2, #8]
 8012782:	da08      	bge.n	8012796 <__sfputc_r+0x1e>
 8012784:	6994      	ldr	r4, [r2, #24]
 8012786:	42a3      	cmp	r3, r4
 8012788:	db01      	blt.n	801278e <__sfputc_r+0x16>
 801278a:	290a      	cmp	r1, #10
 801278c:	d103      	bne.n	8012796 <__sfputc_r+0x1e>
 801278e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8012792:	f000 bb7f 	b.w	8012e94 <__swbuf_r>
 8012796:	6813      	ldr	r3, [r2, #0]
 8012798:	1c58      	adds	r0, r3, #1
 801279a:	6010      	str	r0, [r2, #0]
 801279c:	7019      	strb	r1, [r3, #0]
 801279e:	4608      	mov	r0, r1
 80127a0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80127a4:	4770      	bx	lr

080127a6 <__sfputs_r>:
 80127a6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80127a8:	4606      	mov	r6, r0
 80127aa:	460f      	mov	r7, r1
 80127ac:	4614      	mov	r4, r2
 80127ae:	18d5      	adds	r5, r2, r3
 80127b0:	42ac      	cmp	r4, r5
 80127b2:	d101      	bne.n	80127b8 <__sfputs_r+0x12>
 80127b4:	2000      	movs	r0, #0
 80127b6:	e007      	b.n	80127c8 <__sfputs_r+0x22>
 80127b8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80127bc:	463a      	mov	r2, r7
 80127be:	4630      	mov	r0, r6
 80127c0:	f7ff ffda 	bl	8012778 <__sfputc_r>
 80127c4:	1c43      	adds	r3, r0, #1
 80127c6:	d1f3      	bne.n	80127b0 <__sfputs_r+0xa>
 80127c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080127cc <_vfiprintf_r>:
 80127cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80127d0:	460d      	mov	r5, r1
 80127d2:	b09d      	sub	sp, #116	@ 0x74
 80127d4:	4614      	mov	r4, r2
 80127d6:	4698      	mov	r8, r3
 80127d8:	4606      	mov	r6, r0
 80127da:	b118      	cbz	r0, 80127e4 <_vfiprintf_r+0x18>
 80127dc:	6a03      	ldr	r3, [r0, #32]
 80127de:	b90b      	cbnz	r3, 80127e4 <_vfiprintf_r+0x18>
 80127e0:	f7ff fd36 	bl	8012250 <__sinit>
 80127e4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80127e6:	07d9      	lsls	r1, r3, #31
 80127e8:	d405      	bmi.n	80127f6 <_vfiprintf_r+0x2a>
 80127ea:	89ab      	ldrh	r3, [r5, #12]
 80127ec:	059a      	lsls	r2, r3, #22
 80127ee:	d402      	bmi.n	80127f6 <_vfiprintf_r+0x2a>
 80127f0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80127f2:	f7ff fe92 	bl	801251a <__retarget_lock_acquire_recursive>
 80127f6:	89ab      	ldrh	r3, [r5, #12]
 80127f8:	071b      	lsls	r3, r3, #28
 80127fa:	d501      	bpl.n	8012800 <_vfiprintf_r+0x34>
 80127fc:	692b      	ldr	r3, [r5, #16]
 80127fe:	b99b      	cbnz	r3, 8012828 <_vfiprintf_r+0x5c>
 8012800:	4629      	mov	r1, r5
 8012802:	4630      	mov	r0, r6
 8012804:	f000 fb84 	bl	8012f10 <__swsetup_r>
 8012808:	b170      	cbz	r0, 8012828 <_vfiprintf_r+0x5c>
 801280a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801280c:	07dc      	lsls	r4, r3, #31
 801280e:	d504      	bpl.n	801281a <_vfiprintf_r+0x4e>
 8012810:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8012814:	b01d      	add	sp, #116	@ 0x74
 8012816:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801281a:	89ab      	ldrh	r3, [r5, #12]
 801281c:	0598      	lsls	r0, r3, #22
 801281e:	d4f7      	bmi.n	8012810 <_vfiprintf_r+0x44>
 8012820:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8012822:	f7ff fe7b 	bl	801251c <__retarget_lock_release_recursive>
 8012826:	e7f3      	b.n	8012810 <_vfiprintf_r+0x44>
 8012828:	2300      	movs	r3, #0
 801282a:	9309      	str	r3, [sp, #36]	@ 0x24
 801282c:	2320      	movs	r3, #32
 801282e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8012832:	f8cd 800c 	str.w	r8, [sp, #12]
 8012836:	2330      	movs	r3, #48	@ 0x30
 8012838:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80129e8 <_vfiprintf_r+0x21c>
 801283c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8012840:	f04f 0901 	mov.w	r9, #1
 8012844:	4623      	mov	r3, r4
 8012846:	469a      	mov	sl, r3
 8012848:	f813 2b01 	ldrb.w	r2, [r3], #1
 801284c:	b10a      	cbz	r2, 8012852 <_vfiprintf_r+0x86>
 801284e:	2a25      	cmp	r2, #37	@ 0x25
 8012850:	d1f9      	bne.n	8012846 <_vfiprintf_r+0x7a>
 8012852:	ebba 0b04 	subs.w	fp, sl, r4
 8012856:	d00b      	beq.n	8012870 <_vfiprintf_r+0xa4>
 8012858:	465b      	mov	r3, fp
 801285a:	4622      	mov	r2, r4
 801285c:	4629      	mov	r1, r5
 801285e:	4630      	mov	r0, r6
 8012860:	f7ff ffa1 	bl	80127a6 <__sfputs_r>
 8012864:	3001      	adds	r0, #1
 8012866:	f000 80a7 	beq.w	80129b8 <_vfiprintf_r+0x1ec>
 801286a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801286c:	445a      	add	r2, fp
 801286e:	9209      	str	r2, [sp, #36]	@ 0x24
 8012870:	f89a 3000 	ldrb.w	r3, [sl]
 8012874:	2b00      	cmp	r3, #0
 8012876:	f000 809f 	beq.w	80129b8 <_vfiprintf_r+0x1ec>
 801287a:	2300      	movs	r3, #0
 801287c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8012880:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8012884:	f10a 0a01 	add.w	sl, sl, #1
 8012888:	9304      	str	r3, [sp, #16]
 801288a:	9307      	str	r3, [sp, #28]
 801288c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8012890:	931a      	str	r3, [sp, #104]	@ 0x68
 8012892:	4654      	mov	r4, sl
 8012894:	2205      	movs	r2, #5
 8012896:	f814 1b01 	ldrb.w	r1, [r4], #1
 801289a:	4853      	ldr	r0, [pc, #332]	@ (80129e8 <_vfiprintf_r+0x21c>)
 801289c:	f7ed fc98 	bl	80001d0 <memchr>
 80128a0:	9a04      	ldr	r2, [sp, #16]
 80128a2:	b9d8      	cbnz	r0, 80128dc <_vfiprintf_r+0x110>
 80128a4:	06d1      	lsls	r1, r2, #27
 80128a6:	bf44      	itt	mi
 80128a8:	2320      	movmi	r3, #32
 80128aa:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80128ae:	0713      	lsls	r3, r2, #28
 80128b0:	bf44      	itt	mi
 80128b2:	232b      	movmi	r3, #43	@ 0x2b
 80128b4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80128b8:	f89a 3000 	ldrb.w	r3, [sl]
 80128bc:	2b2a      	cmp	r3, #42	@ 0x2a
 80128be:	d015      	beq.n	80128ec <_vfiprintf_r+0x120>
 80128c0:	9a07      	ldr	r2, [sp, #28]
 80128c2:	4654      	mov	r4, sl
 80128c4:	2000      	movs	r0, #0
 80128c6:	f04f 0c0a 	mov.w	ip, #10
 80128ca:	4621      	mov	r1, r4
 80128cc:	f811 3b01 	ldrb.w	r3, [r1], #1
 80128d0:	3b30      	subs	r3, #48	@ 0x30
 80128d2:	2b09      	cmp	r3, #9
 80128d4:	d94b      	bls.n	801296e <_vfiprintf_r+0x1a2>
 80128d6:	b1b0      	cbz	r0, 8012906 <_vfiprintf_r+0x13a>
 80128d8:	9207      	str	r2, [sp, #28]
 80128da:	e014      	b.n	8012906 <_vfiprintf_r+0x13a>
 80128dc:	eba0 0308 	sub.w	r3, r0, r8
 80128e0:	fa09 f303 	lsl.w	r3, r9, r3
 80128e4:	4313      	orrs	r3, r2
 80128e6:	9304      	str	r3, [sp, #16]
 80128e8:	46a2      	mov	sl, r4
 80128ea:	e7d2      	b.n	8012892 <_vfiprintf_r+0xc6>
 80128ec:	9b03      	ldr	r3, [sp, #12]
 80128ee:	1d19      	adds	r1, r3, #4
 80128f0:	681b      	ldr	r3, [r3, #0]
 80128f2:	9103      	str	r1, [sp, #12]
 80128f4:	2b00      	cmp	r3, #0
 80128f6:	bfbb      	ittet	lt
 80128f8:	425b      	neglt	r3, r3
 80128fa:	f042 0202 	orrlt.w	r2, r2, #2
 80128fe:	9307      	strge	r3, [sp, #28]
 8012900:	9307      	strlt	r3, [sp, #28]
 8012902:	bfb8      	it	lt
 8012904:	9204      	strlt	r2, [sp, #16]
 8012906:	7823      	ldrb	r3, [r4, #0]
 8012908:	2b2e      	cmp	r3, #46	@ 0x2e
 801290a:	d10a      	bne.n	8012922 <_vfiprintf_r+0x156>
 801290c:	7863      	ldrb	r3, [r4, #1]
 801290e:	2b2a      	cmp	r3, #42	@ 0x2a
 8012910:	d132      	bne.n	8012978 <_vfiprintf_r+0x1ac>
 8012912:	9b03      	ldr	r3, [sp, #12]
 8012914:	1d1a      	adds	r2, r3, #4
 8012916:	681b      	ldr	r3, [r3, #0]
 8012918:	9203      	str	r2, [sp, #12]
 801291a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 801291e:	3402      	adds	r4, #2
 8012920:	9305      	str	r3, [sp, #20]
 8012922:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80129f8 <_vfiprintf_r+0x22c>
 8012926:	7821      	ldrb	r1, [r4, #0]
 8012928:	2203      	movs	r2, #3
 801292a:	4650      	mov	r0, sl
 801292c:	f7ed fc50 	bl	80001d0 <memchr>
 8012930:	b138      	cbz	r0, 8012942 <_vfiprintf_r+0x176>
 8012932:	9b04      	ldr	r3, [sp, #16]
 8012934:	eba0 000a 	sub.w	r0, r0, sl
 8012938:	2240      	movs	r2, #64	@ 0x40
 801293a:	4082      	lsls	r2, r0
 801293c:	4313      	orrs	r3, r2
 801293e:	3401      	adds	r4, #1
 8012940:	9304      	str	r3, [sp, #16]
 8012942:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012946:	4829      	ldr	r0, [pc, #164]	@ (80129ec <_vfiprintf_r+0x220>)
 8012948:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 801294c:	2206      	movs	r2, #6
 801294e:	f7ed fc3f 	bl	80001d0 <memchr>
 8012952:	2800      	cmp	r0, #0
 8012954:	d03f      	beq.n	80129d6 <_vfiprintf_r+0x20a>
 8012956:	4b26      	ldr	r3, [pc, #152]	@ (80129f0 <_vfiprintf_r+0x224>)
 8012958:	bb1b      	cbnz	r3, 80129a2 <_vfiprintf_r+0x1d6>
 801295a:	9b03      	ldr	r3, [sp, #12]
 801295c:	3307      	adds	r3, #7
 801295e:	f023 0307 	bic.w	r3, r3, #7
 8012962:	3308      	adds	r3, #8
 8012964:	9303      	str	r3, [sp, #12]
 8012966:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012968:	443b      	add	r3, r7
 801296a:	9309      	str	r3, [sp, #36]	@ 0x24
 801296c:	e76a      	b.n	8012844 <_vfiprintf_r+0x78>
 801296e:	fb0c 3202 	mla	r2, ip, r2, r3
 8012972:	460c      	mov	r4, r1
 8012974:	2001      	movs	r0, #1
 8012976:	e7a8      	b.n	80128ca <_vfiprintf_r+0xfe>
 8012978:	2300      	movs	r3, #0
 801297a:	3401      	adds	r4, #1
 801297c:	9305      	str	r3, [sp, #20]
 801297e:	4619      	mov	r1, r3
 8012980:	f04f 0c0a 	mov.w	ip, #10
 8012984:	4620      	mov	r0, r4
 8012986:	f810 2b01 	ldrb.w	r2, [r0], #1
 801298a:	3a30      	subs	r2, #48	@ 0x30
 801298c:	2a09      	cmp	r2, #9
 801298e:	d903      	bls.n	8012998 <_vfiprintf_r+0x1cc>
 8012990:	2b00      	cmp	r3, #0
 8012992:	d0c6      	beq.n	8012922 <_vfiprintf_r+0x156>
 8012994:	9105      	str	r1, [sp, #20]
 8012996:	e7c4      	b.n	8012922 <_vfiprintf_r+0x156>
 8012998:	fb0c 2101 	mla	r1, ip, r1, r2
 801299c:	4604      	mov	r4, r0
 801299e:	2301      	movs	r3, #1
 80129a0:	e7f0      	b.n	8012984 <_vfiprintf_r+0x1b8>
 80129a2:	ab03      	add	r3, sp, #12
 80129a4:	9300      	str	r3, [sp, #0]
 80129a6:	462a      	mov	r2, r5
 80129a8:	4b12      	ldr	r3, [pc, #72]	@ (80129f4 <_vfiprintf_r+0x228>)
 80129aa:	a904      	add	r1, sp, #16
 80129ac:	4630      	mov	r0, r6
 80129ae:	f3af 8000 	nop.w
 80129b2:	4607      	mov	r7, r0
 80129b4:	1c78      	adds	r0, r7, #1
 80129b6:	d1d6      	bne.n	8012966 <_vfiprintf_r+0x19a>
 80129b8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80129ba:	07d9      	lsls	r1, r3, #31
 80129bc:	d405      	bmi.n	80129ca <_vfiprintf_r+0x1fe>
 80129be:	89ab      	ldrh	r3, [r5, #12]
 80129c0:	059a      	lsls	r2, r3, #22
 80129c2:	d402      	bmi.n	80129ca <_vfiprintf_r+0x1fe>
 80129c4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80129c6:	f7ff fda9 	bl	801251c <__retarget_lock_release_recursive>
 80129ca:	89ab      	ldrh	r3, [r5, #12]
 80129cc:	065b      	lsls	r3, r3, #25
 80129ce:	f53f af1f 	bmi.w	8012810 <_vfiprintf_r+0x44>
 80129d2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80129d4:	e71e      	b.n	8012814 <_vfiprintf_r+0x48>
 80129d6:	ab03      	add	r3, sp, #12
 80129d8:	9300      	str	r3, [sp, #0]
 80129da:	462a      	mov	r2, r5
 80129dc:	4b05      	ldr	r3, [pc, #20]	@ (80129f4 <_vfiprintf_r+0x228>)
 80129de:	a904      	add	r1, sp, #16
 80129e0:	4630      	mov	r0, r6
 80129e2:	f000 f879 	bl	8012ad8 <_printf_i>
 80129e6:	e7e4      	b.n	80129b2 <_vfiprintf_r+0x1e6>
 80129e8:	08015eb9 	.word	0x08015eb9
 80129ec:	08015ec3 	.word	0x08015ec3
 80129f0:	00000000 	.word	0x00000000
 80129f4:	080127a7 	.word	0x080127a7
 80129f8:	08015ebf 	.word	0x08015ebf

080129fc <_printf_common>:
 80129fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012a00:	4616      	mov	r6, r2
 8012a02:	4698      	mov	r8, r3
 8012a04:	688a      	ldr	r2, [r1, #8]
 8012a06:	690b      	ldr	r3, [r1, #16]
 8012a08:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8012a0c:	4293      	cmp	r3, r2
 8012a0e:	bfb8      	it	lt
 8012a10:	4613      	movlt	r3, r2
 8012a12:	6033      	str	r3, [r6, #0]
 8012a14:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8012a18:	4607      	mov	r7, r0
 8012a1a:	460c      	mov	r4, r1
 8012a1c:	b10a      	cbz	r2, 8012a22 <_printf_common+0x26>
 8012a1e:	3301      	adds	r3, #1
 8012a20:	6033      	str	r3, [r6, #0]
 8012a22:	6823      	ldr	r3, [r4, #0]
 8012a24:	0699      	lsls	r1, r3, #26
 8012a26:	bf42      	ittt	mi
 8012a28:	6833      	ldrmi	r3, [r6, #0]
 8012a2a:	3302      	addmi	r3, #2
 8012a2c:	6033      	strmi	r3, [r6, #0]
 8012a2e:	6825      	ldr	r5, [r4, #0]
 8012a30:	f015 0506 	ands.w	r5, r5, #6
 8012a34:	d106      	bne.n	8012a44 <_printf_common+0x48>
 8012a36:	f104 0a19 	add.w	sl, r4, #25
 8012a3a:	68e3      	ldr	r3, [r4, #12]
 8012a3c:	6832      	ldr	r2, [r6, #0]
 8012a3e:	1a9b      	subs	r3, r3, r2
 8012a40:	42ab      	cmp	r3, r5
 8012a42:	dc26      	bgt.n	8012a92 <_printf_common+0x96>
 8012a44:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8012a48:	6822      	ldr	r2, [r4, #0]
 8012a4a:	3b00      	subs	r3, #0
 8012a4c:	bf18      	it	ne
 8012a4e:	2301      	movne	r3, #1
 8012a50:	0692      	lsls	r2, r2, #26
 8012a52:	d42b      	bmi.n	8012aac <_printf_common+0xb0>
 8012a54:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8012a58:	4641      	mov	r1, r8
 8012a5a:	4638      	mov	r0, r7
 8012a5c:	47c8      	blx	r9
 8012a5e:	3001      	adds	r0, #1
 8012a60:	d01e      	beq.n	8012aa0 <_printf_common+0xa4>
 8012a62:	6823      	ldr	r3, [r4, #0]
 8012a64:	6922      	ldr	r2, [r4, #16]
 8012a66:	f003 0306 	and.w	r3, r3, #6
 8012a6a:	2b04      	cmp	r3, #4
 8012a6c:	bf02      	ittt	eq
 8012a6e:	68e5      	ldreq	r5, [r4, #12]
 8012a70:	6833      	ldreq	r3, [r6, #0]
 8012a72:	1aed      	subeq	r5, r5, r3
 8012a74:	68a3      	ldr	r3, [r4, #8]
 8012a76:	bf0c      	ite	eq
 8012a78:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8012a7c:	2500      	movne	r5, #0
 8012a7e:	4293      	cmp	r3, r2
 8012a80:	bfc4      	itt	gt
 8012a82:	1a9b      	subgt	r3, r3, r2
 8012a84:	18ed      	addgt	r5, r5, r3
 8012a86:	2600      	movs	r6, #0
 8012a88:	341a      	adds	r4, #26
 8012a8a:	42b5      	cmp	r5, r6
 8012a8c:	d11a      	bne.n	8012ac4 <_printf_common+0xc8>
 8012a8e:	2000      	movs	r0, #0
 8012a90:	e008      	b.n	8012aa4 <_printf_common+0xa8>
 8012a92:	2301      	movs	r3, #1
 8012a94:	4652      	mov	r2, sl
 8012a96:	4641      	mov	r1, r8
 8012a98:	4638      	mov	r0, r7
 8012a9a:	47c8      	blx	r9
 8012a9c:	3001      	adds	r0, #1
 8012a9e:	d103      	bne.n	8012aa8 <_printf_common+0xac>
 8012aa0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8012aa4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012aa8:	3501      	adds	r5, #1
 8012aaa:	e7c6      	b.n	8012a3a <_printf_common+0x3e>
 8012aac:	18e1      	adds	r1, r4, r3
 8012aae:	1c5a      	adds	r2, r3, #1
 8012ab0:	2030      	movs	r0, #48	@ 0x30
 8012ab2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8012ab6:	4422      	add	r2, r4
 8012ab8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8012abc:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8012ac0:	3302      	adds	r3, #2
 8012ac2:	e7c7      	b.n	8012a54 <_printf_common+0x58>
 8012ac4:	2301      	movs	r3, #1
 8012ac6:	4622      	mov	r2, r4
 8012ac8:	4641      	mov	r1, r8
 8012aca:	4638      	mov	r0, r7
 8012acc:	47c8      	blx	r9
 8012ace:	3001      	adds	r0, #1
 8012ad0:	d0e6      	beq.n	8012aa0 <_printf_common+0xa4>
 8012ad2:	3601      	adds	r6, #1
 8012ad4:	e7d9      	b.n	8012a8a <_printf_common+0x8e>
	...

08012ad8 <_printf_i>:
 8012ad8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8012adc:	7e0f      	ldrb	r7, [r1, #24]
 8012ade:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8012ae0:	2f78      	cmp	r7, #120	@ 0x78
 8012ae2:	4691      	mov	r9, r2
 8012ae4:	4680      	mov	r8, r0
 8012ae6:	460c      	mov	r4, r1
 8012ae8:	469a      	mov	sl, r3
 8012aea:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8012aee:	d807      	bhi.n	8012b00 <_printf_i+0x28>
 8012af0:	2f62      	cmp	r7, #98	@ 0x62
 8012af2:	d80a      	bhi.n	8012b0a <_printf_i+0x32>
 8012af4:	2f00      	cmp	r7, #0
 8012af6:	f000 80d2 	beq.w	8012c9e <_printf_i+0x1c6>
 8012afa:	2f58      	cmp	r7, #88	@ 0x58
 8012afc:	f000 80b9 	beq.w	8012c72 <_printf_i+0x19a>
 8012b00:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8012b04:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8012b08:	e03a      	b.n	8012b80 <_printf_i+0xa8>
 8012b0a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8012b0e:	2b15      	cmp	r3, #21
 8012b10:	d8f6      	bhi.n	8012b00 <_printf_i+0x28>
 8012b12:	a101      	add	r1, pc, #4	@ (adr r1, 8012b18 <_printf_i+0x40>)
 8012b14:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8012b18:	08012b71 	.word	0x08012b71
 8012b1c:	08012b85 	.word	0x08012b85
 8012b20:	08012b01 	.word	0x08012b01
 8012b24:	08012b01 	.word	0x08012b01
 8012b28:	08012b01 	.word	0x08012b01
 8012b2c:	08012b01 	.word	0x08012b01
 8012b30:	08012b85 	.word	0x08012b85
 8012b34:	08012b01 	.word	0x08012b01
 8012b38:	08012b01 	.word	0x08012b01
 8012b3c:	08012b01 	.word	0x08012b01
 8012b40:	08012b01 	.word	0x08012b01
 8012b44:	08012c85 	.word	0x08012c85
 8012b48:	08012baf 	.word	0x08012baf
 8012b4c:	08012c3f 	.word	0x08012c3f
 8012b50:	08012b01 	.word	0x08012b01
 8012b54:	08012b01 	.word	0x08012b01
 8012b58:	08012ca7 	.word	0x08012ca7
 8012b5c:	08012b01 	.word	0x08012b01
 8012b60:	08012baf 	.word	0x08012baf
 8012b64:	08012b01 	.word	0x08012b01
 8012b68:	08012b01 	.word	0x08012b01
 8012b6c:	08012c47 	.word	0x08012c47
 8012b70:	6833      	ldr	r3, [r6, #0]
 8012b72:	1d1a      	adds	r2, r3, #4
 8012b74:	681b      	ldr	r3, [r3, #0]
 8012b76:	6032      	str	r2, [r6, #0]
 8012b78:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8012b7c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8012b80:	2301      	movs	r3, #1
 8012b82:	e09d      	b.n	8012cc0 <_printf_i+0x1e8>
 8012b84:	6833      	ldr	r3, [r6, #0]
 8012b86:	6820      	ldr	r0, [r4, #0]
 8012b88:	1d19      	adds	r1, r3, #4
 8012b8a:	6031      	str	r1, [r6, #0]
 8012b8c:	0606      	lsls	r6, r0, #24
 8012b8e:	d501      	bpl.n	8012b94 <_printf_i+0xbc>
 8012b90:	681d      	ldr	r5, [r3, #0]
 8012b92:	e003      	b.n	8012b9c <_printf_i+0xc4>
 8012b94:	0645      	lsls	r5, r0, #25
 8012b96:	d5fb      	bpl.n	8012b90 <_printf_i+0xb8>
 8012b98:	f9b3 5000 	ldrsh.w	r5, [r3]
 8012b9c:	2d00      	cmp	r5, #0
 8012b9e:	da03      	bge.n	8012ba8 <_printf_i+0xd0>
 8012ba0:	232d      	movs	r3, #45	@ 0x2d
 8012ba2:	426d      	negs	r5, r5
 8012ba4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8012ba8:	4859      	ldr	r0, [pc, #356]	@ (8012d10 <_printf_i+0x238>)
 8012baa:	230a      	movs	r3, #10
 8012bac:	e011      	b.n	8012bd2 <_printf_i+0xfa>
 8012bae:	6821      	ldr	r1, [r4, #0]
 8012bb0:	6833      	ldr	r3, [r6, #0]
 8012bb2:	0608      	lsls	r0, r1, #24
 8012bb4:	f853 5b04 	ldr.w	r5, [r3], #4
 8012bb8:	d402      	bmi.n	8012bc0 <_printf_i+0xe8>
 8012bba:	0649      	lsls	r1, r1, #25
 8012bbc:	bf48      	it	mi
 8012bbe:	b2ad      	uxthmi	r5, r5
 8012bc0:	2f6f      	cmp	r7, #111	@ 0x6f
 8012bc2:	4853      	ldr	r0, [pc, #332]	@ (8012d10 <_printf_i+0x238>)
 8012bc4:	6033      	str	r3, [r6, #0]
 8012bc6:	bf14      	ite	ne
 8012bc8:	230a      	movne	r3, #10
 8012bca:	2308      	moveq	r3, #8
 8012bcc:	2100      	movs	r1, #0
 8012bce:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8012bd2:	6866      	ldr	r6, [r4, #4]
 8012bd4:	60a6      	str	r6, [r4, #8]
 8012bd6:	2e00      	cmp	r6, #0
 8012bd8:	bfa2      	ittt	ge
 8012bda:	6821      	ldrge	r1, [r4, #0]
 8012bdc:	f021 0104 	bicge.w	r1, r1, #4
 8012be0:	6021      	strge	r1, [r4, #0]
 8012be2:	b90d      	cbnz	r5, 8012be8 <_printf_i+0x110>
 8012be4:	2e00      	cmp	r6, #0
 8012be6:	d04b      	beq.n	8012c80 <_printf_i+0x1a8>
 8012be8:	4616      	mov	r6, r2
 8012bea:	fbb5 f1f3 	udiv	r1, r5, r3
 8012bee:	fb03 5711 	mls	r7, r3, r1, r5
 8012bf2:	5dc7      	ldrb	r7, [r0, r7]
 8012bf4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8012bf8:	462f      	mov	r7, r5
 8012bfa:	42bb      	cmp	r3, r7
 8012bfc:	460d      	mov	r5, r1
 8012bfe:	d9f4      	bls.n	8012bea <_printf_i+0x112>
 8012c00:	2b08      	cmp	r3, #8
 8012c02:	d10b      	bne.n	8012c1c <_printf_i+0x144>
 8012c04:	6823      	ldr	r3, [r4, #0]
 8012c06:	07df      	lsls	r7, r3, #31
 8012c08:	d508      	bpl.n	8012c1c <_printf_i+0x144>
 8012c0a:	6923      	ldr	r3, [r4, #16]
 8012c0c:	6861      	ldr	r1, [r4, #4]
 8012c0e:	4299      	cmp	r1, r3
 8012c10:	bfde      	ittt	le
 8012c12:	2330      	movle	r3, #48	@ 0x30
 8012c14:	f806 3c01 	strble.w	r3, [r6, #-1]
 8012c18:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8012c1c:	1b92      	subs	r2, r2, r6
 8012c1e:	6122      	str	r2, [r4, #16]
 8012c20:	f8cd a000 	str.w	sl, [sp]
 8012c24:	464b      	mov	r3, r9
 8012c26:	aa03      	add	r2, sp, #12
 8012c28:	4621      	mov	r1, r4
 8012c2a:	4640      	mov	r0, r8
 8012c2c:	f7ff fee6 	bl	80129fc <_printf_common>
 8012c30:	3001      	adds	r0, #1
 8012c32:	d14a      	bne.n	8012cca <_printf_i+0x1f2>
 8012c34:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8012c38:	b004      	add	sp, #16
 8012c3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012c3e:	6823      	ldr	r3, [r4, #0]
 8012c40:	f043 0320 	orr.w	r3, r3, #32
 8012c44:	6023      	str	r3, [r4, #0]
 8012c46:	4833      	ldr	r0, [pc, #204]	@ (8012d14 <_printf_i+0x23c>)
 8012c48:	2778      	movs	r7, #120	@ 0x78
 8012c4a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8012c4e:	6823      	ldr	r3, [r4, #0]
 8012c50:	6831      	ldr	r1, [r6, #0]
 8012c52:	061f      	lsls	r7, r3, #24
 8012c54:	f851 5b04 	ldr.w	r5, [r1], #4
 8012c58:	d402      	bmi.n	8012c60 <_printf_i+0x188>
 8012c5a:	065f      	lsls	r7, r3, #25
 8012c5c:	bf48      	it	mi
 8012c5e:	b2ad      	uxthmi	r5, r5
 8012c60:	6031      	str	r1, [r6, #0]
 8012c62:	07d9      	lsls	r1, r3, #31
 8012c64:	bf44      	itt	mi
 8012c66:	f043 0320 	orrmi.w	r3, r3, #32
 8012c6a:	6023      	strmi	r3, [r4, #0]
 8012c6c:	b11d      	cbz	r5, 8012c76 <_printf_i+0x19e>
 8012c6e:	2310      	movs	r3, #16
 8012c70:	e7ac      	b.n	8012bcc <_printf_i+0xf4>
 8012c72:	4827      	ldr	r0, [pc, #156]	@ (8012d10 <_printf_i+0x238>)
 8012c74:	e7e9      	b.n	8012c4a <_printf_i+0x172>
 8012c76:	6823      	ldr	r3, [r4, #0]
 8012c78:	f023 0320 	bic.w	r3, r3, #32
 8012c7c:	6023      	str	r3, [r4, #0]
 8012c7e:	e7f6      	b.n	8012c6e <_printf_i+0x196>
 8012c80:	4616      	mov	r6, r2
 8012c82:	e7bd      	b.n	8012c00 <_printf_i+0x128>
 8012c84:	6833      	ldr	r3, [r6, #0]
 8012c86:	6825      	ldr	r5, [r4, #0]
 8012c88:	6961      	ldr	r1, [r4, #20]
 8012c8a:	1d18      	adds	r0, r3, #4
 8012c8c:	6030      	str	r0, [r6, #0]
 8012c8e:	062e      	lsls	r6, r5, #24
 8012c90:	681b      	ldr	r3, [r3, #0]
 8012c92:	d501      	bpl.n	8012c98 <_printf_i+0x1c0>
 8012c94:	6019      	str	r1, [r3, #0]
 8012c96:	e002      	b.n	8012c9e <_printf_i+0x1c6>
 8012c98:	0668      	lsls	r0, r5, #25
 8012c9a:	d5fb      	bpl.n	8012c94 <_printf_i+0x1bc>
 8012c9c:	8019      	strh	r1, [r3, #0]
 8012c9e:	2300      	movs	r3, #0
 8012ca0:	6123      	str	r3, [r4, #16]
 8012ca2:	4616      	mov	r6, r2
 8012ca4:	e7bc      	b.n	8012c20 <_printf_i+0x148>
 8012ca6:	6833      	ldr	r3, [r6, #0]
 8012ca8:	1d1a      	adds	r2, r3, #4
 8012caa:	6032      	str	r2, [r6, #0]
 8012cac:	681e      	ldr	r6, [r3, #0]
 8012cae:	6862      	ldr	r2, [r4, #4]
 8012cb0:	2100      	movs	r1, #0
 8012cb2:	4630      	mov	r0, r6
 8012cb4:	f7ed fa8c 	bl	80001d0 <memchr>
 8012cb8:	b108      	cbz	r0, 8012cbe <_printf_i+0x1e6>
 8012cba:	1b80      	subs	r0, r0, r6
 8012cbc:	6060      	str	r0, [r4, #4]
 8012cbe:	6863      	ldr	r3, [r4, #4]
 8012cc0:	6123      	str	r3, [r4, #16]
 8012cc2:	2300      	movs	r3, #0
 8012cc4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8012cc8:	e7aa      	b.n	8012c20 <_printf_i+0x148>
 8012cca:	6923      	ldr	r3, [r4, #16]
 8012ccc:	4632      	mov	r2, r6
 8012cce:	4649      	mov	r1, r9
 8012cd0:	4640      	mov	r0, r8
 8012cd2:	47d0      	blx	sl
 8012cd4:	3001      	adds	r0, #1
 8012cd6:	d0ad      	beq.n	8012c34 <_printf_i+0x15c>
 8012cd8:	6823      	ldr	r3, [r4, #0]
 8012cda:	079b      	lsls	r3, r3, #30
 8012cdc:	d413      	bmi.n	8012d06 <_printf_i+0x22e>
 8012cde:	68e0      	ldr	r0, [r4, #12]
 8012ce0:	9b03      	ldr	r3, [sp, #12]
 8012ce2:	4298      	cmp	r0, r3
 8012ce4:	bfb8      	it	lt
 8012ce6:	4618      	movlt	r0, r3
 8012ce8:	e7a6      	b.n	8012c38 <_printf_i+0x160>
 8012cea:	2301      	movs	r3, #1
 8012cec:	4632      	mov	r2, r6
 8012cee:	4649      	mov	r1, r9
 8012cf0:	4640      	mov	r0, r8
 8012cf2:	47d0      	blx	sl
 8012cf4:	3001      	adds	r0, #1
 8012cf6:	d09d      	beq.n	8012c34 <_printf_i+0x15c>
 8012cf8:	3501      	adds	r5, #1
 8012cfa:	68e3      	ldr	r3, [r4, #12]
 8012cfc:	9903      	ldr	r1, [sp, #12]
 8012cfe:	1a5b      	subs	r3, r3, r1
 8012d00:	42ab      	cmp	r3, r5
 8012d02:	dcf2      	bgt.n	8012cea <_printf_i+0x212>
 8012d04:	e7eb      	b.n	8012cde <_printf_i+0x206>
 8012d06:	2500      	movs	r5, #0
 8012d08:	f104 0619 	add.w	r6, r4, #25
 8012d0c:	e7f5      	b.n	8012cfa <_printf_i+0x222>
 8012d0e:	bf00      	nop
 8012d10:	08015eca 	.word	0x08015eca
 8012d14:	08015edb 	.word	0x08015edb

08012d18 <__sflush_r>:
 8012d18:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8012d1c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012d20:	0716      	lsls	r6, r2, #28
 8012d22:	4605      	mov	r5, r0
 8012d24:	460c      	mov	r4, r1
 8012d26:	d454      	bmi.n	8012dd2 <__sflush_r+0xba>
 8012d28:	684b      	ldr	r3, [r1, #4]
 8012d2a:	2b00      	cmp	r3, #0
 8012d2c:	dc02      	bgt.n	8012d34 <__sflush_r+0x1c>
 8012d2e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8012d30:	2b00      	cmp	r3, #0
 8012d32:	dd48      	ble.n	8012dc6 <__sflush_r+0xae>
 8012d34:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8012d36:	2e00      	cmp	r6, #0
 8012d38:	d045      	beq.n	8012dc6 <__sflush_r+0xae>
 8012d3a:	2300      	movs	r3, #0
 8012d3c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8012d40:	682f      	ldr	r7, [r5, #0]
 8012d42:	6a21      	ldr	r1, [r4, #32]
 8012d44:	602b      	str	r3, [r5, #0]
 8012d46:	d030      	beq.n	8012daa <__sflush_r+0x92>
 8012d48:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8012d4a:	89a3      	ldrh	r3, [r4, #12]
 8012d4c:	0759      	lsls	r1, r3, #29
 8012d4e:	d505      	bpl.n	8012d5c <__sflush_r+0x44>
 8012d50:	6863      	ldr	r3, [r4, #4]
 8012d52:	1ad2      	subs	r2, r2, r3
 8012d54:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8012d56:	b10b      	cbz	r3, 8012d5c <__sflush_r+0x44>
 8012d58:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8012d5a:	1ad2      	subs	r2, r2, r3
 8012d5c:	2300      	movs	r3, #0
 8012d5e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8012d60:	6a21      	ldr	r1, [r4, #32]
 8012d62:	4628      	mov	r0, r5
 8012d64:	47b0      	blx	r6
 8012d66:	1c43      	adds	r3, r0, #1
 8012d68:	89a3      	ldrh	r3, [r4, #12]
 8012d6a:	d106      	bne.n	8012d7a <__sflush_r+0x62>
 8012d6c:	6829      	ldr	r1, [r5, #0]
 8012d6e:	291d      	cmp	r1, #29
 8012d70:	d82b      	bhi.n	8012dca <__sflush_r+0xb2>
 8012d72:	4a2a      	ldr	r2, [pc, #168]	@ (8012e1c <__sflush_r+0x104>)
 8012d74:	410a      	asrs	r2, r1
 8012d76:	07d6      	lsls	r6, r2, #31
 8012d78:	d427      	bmi.n	8012dca <__sflush_r+0xb2>
 8012d7a:	2200      	movs	r2, #0
 8012d7c:	6062      	str	r2, [r4, #4]
 8012d7e:	04d9      	lsls	r1, r3, #19
 8012d80:	6922      	ldr	r2, [r4, #16]
 8012d82:	6022      	str	r2, [r4, #0]
 8012d84:	d504      	bpl.n	8012d90 <__sflush_r+0x78>
 8012d86:	1c42      	adds	r2, r0, #1
 8012d88:	d101      	bne.n	8012d8e <__sflush_r+0x76>
 8012d8a:	682b      	ldr	r3, [r5, #0]
 8012d8c:	b903      	cbnz	r3, 8012d90 <__sflush_r+0x78>
 8012d8e:	6560      	str	r0, [r4, #84]	@ 0x54
 8012d90:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8012d92:	602f      	str	r7, [r5, #0]
 8012d94:	b1b9      	cbz	r1, 8012dc6 <__sflush_r+0xae>
 8012d96:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8012d9a:	4299      	cmp	r1, r3
 8012d9c:	d002      	beq.n	8012da4 <__sflush_r+0x8c>
 8012d9e:	4628      	mov	r0, r5
 8012da0:	f7ff fbea 	bl	8012578 <_free_r>
 8012da4:	2300      	movs	r3, #0
 8012da6:	6363      	str	r3, [r4, #52]	@ 0x34
 8012da8:	e00d      	b.n	8012dc6 <__sflush_r+0xae>
 8012daa:	2301      	movs	r3, #1
 8012dac:	4628      	mov	r0, r5
 8012dae:	47b0      	blx	r6
 8012db0:	4602      	mov	r2, r0
 8012db2:	1c50      	adds	r0, r2, #1
 8012db4:	d1c9      	bne.n	8012d4a <__sflush_r+0x32>
 8012db6:	682b      	ldr	r3, [r5, #0]
 8012db8:	2b00      	cmp	r3, #0
 8012dba:	d0c6      	beq.n	8012d4a <__sflush_r+0x32>
 8012dbc:	2b1d      	cmp	r3, #29
 8012dbe:	d001      	beq.n	8012dc4 <__sflush_r+0xac>
 8012dc0:	2b16      	cmp	r3, #22
 8012dc2:	d11e      	bne.n	8012e02 <__sflush_r+0xea>
 8012dc4:	602f      	str	r7, [r5, #0]
 8012dc6:	2000      	movs	r0, #0
 8012dc8:	e022      	b.n	8012e10 <__sflush_r+0xf8>
 8012dca:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8012dce:	b21b      	sxth	r3, r3
 8012dd0:	e01b      	b.n	8012e0a <__sflush_r+0xf2>
 8012dd2:	690f      	ldr	r7, [r1, #16]
 8012dd4:	2f00      	cmp	r7, #0
 8012dd6:	d0f6      	beq.n	8012dc6 <__sflush_r+0xae>
 8012dd8:	0793      	lsls	r3, r2, #30
 8012dda:	680e      	ldr	r6, [r1, #0]
 8012ddc:	bf08      	it	eq
 8012dde:	694b      	ldreq	r3, [r1, #20]
 8012de0:	600f      	str	r7, [r1, #0]
 8012de2:	bf18      	it	ne
 8012de4:	2300      	movne	r3, #0
 8012de6:	eba6 0807 	sub.w	r8, r6, r7
 8012dea:	608b      	str	r3, [r1, #8]
 8012dec:	f1b8 0f00 	cmp.w	r8, #0
 8012df0:	dde9      	ble.n	8012dc6 <__sflush_r+0xae>
 8012df2:	6a21      	ldr	r1, [r4, #32]
 8012df4:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8012df6:	4643      	mov	r3, r8
 8012df8:	463a      	mov	r2, r7
 8012dfa:	4628      	mov	r0, r5
 8012dfc:	47b0      	blx	r6
 8012dfe:	2800      	cmp	r0, #0
 8012e00:	dc08      	bgt.n	8012e14 <__sflush_r+0xfc>
 8012e02:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012e06:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8012e0a:	81a3      	strh	r3, [r4, #12]
 8012e0c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8012e10:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012e14:	4407      	add	r7, r0
 8012e16:	eba8 0800 	sub.w	r8, r8, r0
 8012e1a:	e7e7      	b.n	8012dec <__sflush_r+0xd4>
 8012e1c:	dfbffffe 	.word	0xdfbffffe

08012e20 <_fflush_r>:
 8012e20:	b538      	push	{r3, r4, r5, lr}
 8012e22:	690b      	ldr	r3, [r1, #16]
 8012e24:	4605      	mov	r5, r0
 8012e26:	460c      	mov	r4, r1
 8012e28:	b913      	cbnz	r3, 8012e30 <_fflush_r+0x10>
 8012e2a:	2500      	movs	r5, #0
 8012e2c:	4628      	mov	r0, r5
 8012e2e:	bd38      	pop	{r3, r4, r5, pc}
 8012e30:	b118      	cbz	r0, 8012e3a <_fflush_r+0x1a>
 8012e32:	6a03      	ldr	r3, [r0, #32]
 8012e34:	b90b      	cbnz	r3, 8012e3a <_fflush_r+0x1a>
 8012e36:	f7ff fa0b 	bl	8012250 <__sinit>
 8012e3a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012e3e:	2b00      	cmp	r3, #0
 8012e40:	d0f3      	beq.n	8012e2a <_fflush_r+0xa>
 8012e42:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8012e44:	07d0      	lsls	r0, r2, #31
 8012e46:	d404      	bmi.n	8012e52 <_fflush_r+0x32>
 8012e48:	0599      	lsls	r1, r3, #22
 8012e4a:	d402      	bmi.n	8012e52 <_fflush_r+0x32>
 8012e4c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8012e4e:	f7ff fb64 	bl	801251a <__retarget_lock_acquire_recursive>
 8012e52:	4628      	mov	r0, r5
 8012e54:	4621      	mov	r1, r4
 8012e56:	f7ff ff5f 	bl	8012d18 <__sflush_r>
 8012e5a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8012e5c:	07da      	lsls	r2, r3, #31
 8012e5e:	4605      	mov	r5, r0
 8012e60:	d4e4      	bmi.n	8012e2c <_fflush_r+0xc>
 8012e62:	89a3      	ldrh	r3, [r4, #12]
 8012e64:	059b      	lsls	r3, r3, #22
 8012e66:	d4e1      	bmi.n	8012e2c <_fflush_r+0xc>
 8012e68:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8012e6a:	f7ff fb57 	bl	801251c <__retarget_lock_release_recursive>
 8012e6e:	e7dd      	b.n	8012e2c <_fflush_r+0xc>

08012e70 <fiprintf>:
 8012e70:	b40e      	push	{r1, r2, r3}
 8012e72:	b503      	push	{r0, r1, lr}
 8012e74:	4601      	mov	r1, r0
 8012e76:	ab03      	add	r3, sp, #12
 8012e78:	4805      	ldr	r0, [pc, #20]	@ (8012e90 <fiprintf+0x20>)
 8012e7a:	f853 2b04 	ldr.w	r2, [r3], #4
 8012e7e:	6800      	ldr	r0, [r0, #0]
 8012e80:	9301      	str	r3, [sp, #4]
 8012e82:	f7ff fca3 	bl	80127cc <_vfiprintf_r>
 8012e86:	b002      	add	sp, #8
 8012e88:	f85d eb04 	ldr.w	lr, [sp], #4
 8012e8c:	b003      	add	sp, #12
 8012e8e:	4770      	bx	lr
 8012e90:	2000003c 	.word	0x2000003c

08012e94 <__swbuf_r>:
 8012e94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012e96:	460e      	mov	r6, r1
 8012e98:	4614      	mov	r4, r2
 8012e9a:	4605      	mov	r5, r0
 8012e9c:	b118      	cbz	r0, 8012ea6 <__swbuf_r+0x12>
 8012e9e:	6a03      	ldr	r3, [r0, #32]
 8012ea0:	b90b      	cbnz	r3, 8012ea6 <__swbuf_r+0x12>
 8012ea2:	f7ff f9d5 	bl	8012250 <__sinit>
 8012ea6:	69a3      	ldr	r3, [r4, #24]
 8012ea8:	60a3      	str	r3, [r4, #8]
 8012eaa:	89a3      	ldrh	r3, [r4, #12]
 8012eac:	071a      	lsls	r2, r3, #28
 8012eae:	d501      	bpl.n	8012eb4 <__swbuf_r+0x20>
 8012eb0:	6923      	ldr	r3, [r4, #16]
 8012eb2:	b943      	cbnz	r3, 8012ec6 <__swbuf_r+0x32>
 8012eb4:	4621      	mov	r1, r4
 8012eb6:	4628      	mov	r0, r5
 8012eb8:	f000 f82a 	bl	8012f10 <__swsetup_r>
 8012ebc:	b118      	cbz	r0, 8012ec6 <__swbuf_r+0x32>
 8012ebe:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 8012ec2:	4638      	mov	r0, r7
 8012ec4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012ec6:	6823      	ldr	r3, [r4, #0]
 8012ec8:	6922      	ldr	r2, [r4, #16]
 8012eca:	1a98      	subs	r0, r3, r2
 8012ecc:	6963      	ldr	r3, [r4, #20]
 8012ece:	b2f6      	uxtb	r6, r6
 8012ed0:	4283      	cmp	r3, r0
 8012ed2:	4637      	mov	r7, r6
 8012ed4:	dc05      	bgt.n	8012ee2 <__swbuf_r+0x4e>
 8012ed6:	4621      	mov	r1, r4
 8012ed8:	4628      	mov	r0, r5
 8012eda:	f7ff ffa1 	bl	8012e20 <_fflush_r>
 8012ede:	2800      	cmp	r0, #0
 8012ee0:	d1ed      	bne.n	8012ebe <__swbuf_r+0x2a>
 8012ee2:	68a3      	ldr	r3, [r4, #8]
 8012ee4:	3b01      	subs	r3, #1
 8012ee6:	60a3      	str	r3, [r4, #8]
 8012ee8:	6823      	ldr	r3, [r4, #0]
 8012eea:	1c5a      	adds	r2, r3, #1
 8012eec:	6022      	str	r2, [r4, #0]
 8012eee:	701e      	strb	r6, [r3, #0]
 8012ef0:	6962      	ldr	r2, [r4, #20]
 8012ef2:	1c43      	adds	r3, r0, #1
 8012ef4:	429a      	cmp	r2, r3
 8012ef6:	d004      	beq.n	8012f02 <__swbuf_r+0x6e>
 8012ef8:	89a3      	ldrh	r3, [r4, #12]
 8012efa:	07db      	lsls	r3, r3, #31
 8012efc:	d5e1      	bpl.n	8012ec2 <__swbuf_r+0x2e>
 8012efe:	2e0a      	cmp	r6, #10
 8012f00:	d1df      	bne.n	8012ec2 <__swbuf_r+0x2e>
 8012f02:	4621      	mov	r1, r4
 8012f04:	4628      	mov	r0, r5
 8012f06:	f7ff ff8b 	bl	8012e20 <_fflush_r>
 8012f0a:	2800      	cmp	r0, #0
 8012f0c:	d0d9      	beq.n	8012ec2 <__swbuf_r+0x2e>
 8012f0e:	e7d6      	b.n	8012ebe <__swbuf_r+0x2a>

08012f10 <__swsetup_r>:
 8012f10:	b538      	push	{r3, r4, r5, lr}
 8012f12:	4b29      	ldr	r3, [pc, #164]	@ (8012fb8 <__swsetup_r+0xa8>)
 8012f14:	4605      	mov	r5, r0
 8012f16:	6818      	ldr	r0, [r3, #0]
 8012f18:	460c      	mov	r4, r1
 8012f1a:	b118      	cbz	r0, 8012f24 <__swsetup_r+0x14>
 8012f1c:	6a03      	ldr	r3, [r0, #32]
 8012f1e:	b90b      	cbnz	r3, 8012f24 <__swsetup_r+0x14>
 8012f20:	f7ff f996 	bl	8012250 <__sinit>
 8012f24:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012f28:	0719      	lsls	r1, r3, #28
 8012f2a:	d422      	bmi.n	8012f72 <__swsetup_r+0x62>
 8012f2c:	06da      	lsls	r2, r3, #27
 8012f2e:	d407      	bmi.n	8012f40 <__swsetup_r+0x30>
 8012f30:	2209      	movs	r2, #9
 8012f32:	602a      	str	r2, [r5, #0]
 8012f34:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8012f38:	81a3      	strh	r3, [r4, #12]
 8012f3a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8012f3e:	e033      	b.n	8012fa8 <__swsetup_r+0x98>
 8012f40:	0758      	lsls	r0, r3, #29
 8012f42:	d512      	bpl.n	8012f6a <__swsetup_r+0x5a>
 8012f44:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8012f46:	b141      	cbz	r1, 8012f5a <__swsetup_r+0x4a>
 8012f48:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8012f4c:	4299      	cmp	r1, r3
 8012f4e:	d002      	beq.n	8012f56 <__swsetup_r+0x46>
 8012f50:	4628      	mov	r0, r5
 8012f52:	f7ff fb11 	bl	8012578 <_free_r>
 8012f56:	2300      	movs	r3, #0
 8012f58:	6363      	str	r3, [r4, #52]	@ 0x34
 8012f5a:	89a3      	ldrh	r3, [r4, #12]
 8012f5c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8012f60:	81a3      	strh	r3, [r4, #12]
 8012f62:	2300      	movs	r3, #0
 8012f64:	6063      	str	r3, [r4, #4]
 8012f66:	6923      	ldr	r3, [r4, #16]
 8012f68:	6023      	str	r3, [r4, #0]
 8012f6a:	89a3      	ldrh	r3, [r4, #12]
 8012f6c:	f043 0308 	orr.w	r3, r3, #8
 8012f70:	81a3      	strh	r3, [r4, #12]
 8012f72:	6923      	ldr	r3, [r4, #16]
 8012f74:	b94b      	cbnz	r3, 8012f8a <__swsetup_r+0x7a>
 8012f76:	89a3      	ldrh	r3, [r4, #12]
 8012f78:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8012f7c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8012f80:	d003      	beq.n	8012f8a <__swsetup_r+0x7a>
 8012f82:	4621      	mov	r1, r4
 8012f84:	4628      	mov	r0, r5
 8012f86:	f000 f856 	bl	8013036 <__smakebuf_r>
 8012f8a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012f8e:	f013 0201 	ands.w	r2, r3, #1
 8012f92:	d00a      	beq.n	8012faa <__swsetup_r+0x9a>
 8012f94:	2200      	movs	r2, #0
 8012f96:	60a2      	str	r2, [r4, #8]
 8012f98:	6962      	ldr	r2, [r4, #20]
 8012f9a:	4252      	negs	r2, r2
 8012f9c:	61a2      	str	r2, [r4, #24]
 8012f9e:	6922      	ldr	r2, [r4, #16]
 8012fa0:	b942      	cbnz	r2, 8012fb4 <__swsetup_r+0xa4>
 8012fa2:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8012fa6:	d1c5      	bne.n	8012f34 <__swsetup_r+0x24>
 8012fa8:	bd38      	pop	{r3, r4, r5, pc}
 8012faa:	0799      	lsls	r1, r3, #30
 8012fac:	bf58      	it	pl
 8012fae:	6962      	ldrpl	r2, [r4, #20]
 8012fb0:	60a2      	str	r2, [r4, #8]
 8012fb2:	e7f4      	b.n	8012f9e <__swsetup_r+0x8e>
 8012fb4:	2000      	movs	r0, #0
 8012fb6:	e7f7      	b.n	8012fa8 <__swsetup_r+0x98>
 8012fb8:	2000003c 	.word	0x2000003c

08012fbc <_sbrk_r>:
 8012fbc:	b538      	push	{r3, r4, r5, lr}
 8012fbe:	4d06      	ldr	r5, [pc, #24]	@ (8012fd8 <_sbrk_r+0x1c>)
 8012fc0:	2300      	movs	r3, #0
 8012fc2:	4604      	mov	r4, r0
 8012fc4:	4608      	mov	r0, r1
 8012fc6:	602b      	str	r3, [r5, #0]
 8012fc8:	f7ed fd26 	bl	8000a18 <_sbrk>
 8012fcc:	1c43      	adds	r3, r0, #1
 8012fce:	d102      	bne.n	8012fd6 <_sbrk_r+0x1a>
 8012fd0:	682b      	ldr	r3, [r5, #0]
 8012fd2:	b103      	cbz	r3, 8012fd6 <_sbrk_r+0x1a>
 8012fd4:	6023      	str	r3, [r4, #0]
 8012fd6:	bd38      	pop	{r3, r4, r5, pc}
 8012fd8:	20010398 	.word	0x20010398

08012fdc <abort>:
 8012fdc:	b508      	push	{r3, lr}
 8012fde:	2006      	movs	r0, #6
 8012fe0:	f000 f88e 	bl	8013100 <raise>
 8012fe4:	2001      	movs	r0, #1
 8012fe6:	f7ed fc9f 	bl	8000928 <_exit>

08012fea <__swhatbuf_r>:
 8012fea:	b570      	push	{r4, r5, r6, lr}
 8012fec:	460c      	mov	r4, r1
 8012fee:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012ff2:	2900      	cmp	r1, #0
 8012ff4:	b096      	sub	sp, #88	@ 0x58
 8012ff6:	4615      	mov	r5, r2
 8012ff8:	461e      	mov	r6, r3
 8012ffa:	da0d      	bge.n	8013018 <__swhatbuf_r+0x2e>
 8012ffc:	89a3      	ldrh	r3, [r4, #12]
 8012ffe:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8013002:	f04f 0100 	mov.w	r1, #0
 8013006:	bf14      	ite	ne
 8013008:	2340      	movne	r3, #64	@ 0x40
 801300a:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 801300e:	2000      	movs	r0, #0
 8013010:	6031      	str	r1, [r6, #0]
 8013012:	602b      	str	r3, [r5, #0]
 8013014:	b016      	add	sp, #88	@ 0x58
 8013016:	bd70      	pop	{r4, r5, r6, pc}
 8013018:	466a      	mov	r2, sp
 801301a:	f000 f879 	bl	8013110 <_fstat_r>
 801301e:	2800      	cmp	r0, #0
 8013020:	dbec      	blt.n	8012ffc <__swhatbuf_r+0x12>
 8013022:	9901      	ldr	r1, [sp, #4]
 8013024:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8013028:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 801302c:	4259      	negs	r1, r3
 801302e:	4159      	adcs	r1, r3
 8013030:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8013034:	e7eb      	b.n	801300e <__swhatbuf_r+0x24>

08013036 <__smakebuf_r>:
 8013036:	898b      	ldrh	r3, [r1, #12]
 8013038:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801303a:	079d      	lsls	r5, r3, #30
 801303c:	4606      	mov	r6, r0
 801303e:	460c      	mov	r4, r1
 8013040:	d507      	bpl.n	8013052 <__smakebuf_r+0x1c>
 8013042:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8013046:	6023      	str	r3, [r4, #0]
 8013048:	6123      	str	r3, [r4, #16]
 801304a:	2301      	movs	r3, #1
 801304c:	6163      	str	r3, [r4, #20]
 801304e:	b003      	add	sp, #12
 8013050:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013052:	ab01      	add	r3, sp, #4
 8013054:	466a      	mov	r2, sp
 8013056:	f7ff ffc8 	bl	8012fea <__swhatbuf_r>
 801305a:	9f00      	ldr	r7, [sp, #0]
 801305c:	4605      	mov	r5, r0
 801305e:	4639      	mov	r1, r7
 8013060:	4630      	mov	r0, r6
 8013062:	f7ff fafd 	bl	8012660 <_malloc_r>
 8013066:	b948      	cbnz	r0, 801307c <__smakebuf_r+0x46>
 8013068:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801306c:	059a      	lsls	r2, r3, #22
 801306e:	d4ee      	bmi.n	801304e <__smakebuf_r+0x18>
 8013070:	f023 0303 	bic.w	r3, r3, #3
 8013074:	f043 0302 	orr.w	r3, r3, #2
 8013078:	81a3      	strh	r3, [r4, #12]
 801307a:	e7e2      	b.n	8013042 <__smakebuf_r+0xc>
 801307c:	89a3      	ldrh	r3, [r4, #12]
 801307e:	6020      	str	r0, [r4, #0]
 8013080:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8013084:	81a3      	strh	r3, [r4, #12]
 8013086:	9b01      	ldr	r3, [sp, #4]
 8013088:	e9c4 0704 	strd	r0, r7, [r4, #16]
 801308c:	b15b      	cbz	r3, 80130a6 <__smakebuf_r+0x70>
 801308e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8013092:	4630      	mov	r0, r6
 8013094:	f000 f84e 	bl	8013134 <_isatty_r>
 8013098:	b128      	cbz	r0, 80130a6 <__smakebuf_r+0x70>
 801309a:	89a3      	ldrh	r3, [r4, #12]
 801309c:	f023 0303 	bic.w	r3, r3, #3
 80130a0:	f043 0301 	orr.w	r3, r3, #1
 80130a4:	81a3      	strh	r3, [r4, #12]
 80130a6:	89a3      	ldrh	r3, [r4, #12]
 80130a8:	431d      	orrs	r5, r3
 80130aa:	81a5      	strh	r5, [r4, #12]
 80130ac:	e7cf      	b.n	801304e <__smakebuf_r+0x18>

080130ae <_raise_r>:
 80130ae:	291f      	cmp	r1, #31
 80130b0:	b538      	push	{r3, r4, r5, lr}
 80130b2:	4605      	mov	r5, r0
 80130b4:	460c      	mov	r4, r1
 80130b6:	d904      	bls.n	80130c2 <_raise_r+0x14>
 80130b8:	2316      	movs	r3, #22
 80130ba:	6003      	str	r3, [r0, #0]
 80130bc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80130c0:	bd38      	pop	{r3, r4, r5, pc}
 80130c2:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 80130c4:	b112      	cbz	r2, 80130cc <_raise_r+0x1e>
 80130c6:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80130ca:	b94b      	cbnz	r3, 80130e0 <_raise_r+0x32>
 80130cc:	4628      	mov	r0, r5
 80130ce:	f000 f853 	bl	8013178 <_getpid_r>
 80130d2:	4622      	mov	r2, r4
 80130d4:	4601      	mov	r1, r0
 80130d6:	4628      	mov	r0, r5
 80130d8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80130dc:	f000 b83a 	b.w	8013154 <_kill_r>
 80130e0:	2b01      	cmp	r3, #1
 80130e2:	d00a      	beq.n	80130fa <_raise_r+0x4c>
 80130e4:	1c59      	adds	r1, r3, #1
 80130e6:	d103      	bne.n	80130f0 <_raise_r+0x42>
 80130e8:	2316      	movs	r3, #22
 80130ea:	6003      	str	r3, [r0, #0]
 80130ec:	2001      	movs	r0, #1
 80130ee:	e7e7      	b.n	80130c0 <_raise_r+0x12>
 80130f0:	2100      	movs	r1, #0
 80130f2:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 80130f6:	4620      	mov	r0, r4
 80130f8:	4798      	blx	r3
 80130fa:	2000      	movs	r0, #0
 80130fc:	e7e0      	b.n	80130c0 <_raise_r+0x12>
	...

08013100 <raise>:
 8013100:	4b02      	ldr	r3, [pc, #8]	@ (801310c <raise+0xc>)
 8013102:	4601      	mov	r1, r0
 8013104:	6818      	ldr	r0, [r3, #0]
 8013106:	f7ff bfd2 	b.w	80130ae <_raise_r>
 801310a:	bf00      	nop
 801310c:	2000003c 	.word	0x2000003c

08013110 <_fstat_r>:
 8013110:	b538      	push	{r3, r4, r5, lr}
 8013112:	4d07      	ldr	r5, [pc, #28]	@ (8013130 <_fstat_r+0x20>)
 8013114:	2300      	movs	r3, #0
 8013116:	4604      	mov	r4, r0
 8013118:	4608      	mov	r0, r1
 801311a:	4611      	mov	r1, r2
 801311c:	602b      	str	r3, [r5, #0]
 801311e:	f7ed fc53 	bl	80009c8 <_fstat>
 8013122:	1c43      	adds	r3, r0, #1
 8013124:	d102      	bne.n	801312c <_fstat_r+0x1c>
 8013126:	682b      	ldr	r3, [r5, #0]
 8013128:	b103      	cbz	r3, 801312c <_fstat_r+0x1c>
 801312a:	6023      	str	r3, [r4, #0]
 801312c:	bd38      	pop	{r3, r4, r5, pc}
 801312e:	bf00      	nop
 8013130:	20010398 	.word	0x20010398

08013134 <_isatty_r>:
 8013134:	b538      	push	{r3, r4, r5, lr}
 8013136:	4d06      	ldr	r5, [pc, #24]	@ (8013150 <_isatty_r+0x1c>)
 8013138:	2300      	movs	r3, #0
 801313a:	4604      	mov	r4, r0
 801313c:	4608      	mov	r0, r1
 801313e:	602b      	str	r3, [r5, #0]
 8013140:	f7ed fc52 	bl	80009e8 <_isatty>
 8013144:	1c43      	adds	r3, r0, #1
 8013146:	d102      	bne.n	801314e <_isatty_r+0x1a>
 8013148:	682b      	ldr	r3, [r5, #0]
 801314a:	b103      	cbz	r3, 801314e <_isatty_r+0x1a>
 801314c:	6023      	str	r3, [r4, #0]
 801314e:	bd38      	pop	{r3, r4, r5, pc}
 8013150:	20010398 	.word	0x20010398

08013154 <_kill_r>:
 8013154:	b538      	push	{r3, r4, r5, lr}
 8013156:	4d07      	ldr	r5, [pc, #28]	@ (8013174 <_kill_r+0x20>)
 8013158:	2300      	movs	r3, #0
 801315a:	4604      	mov	r4, r0
 801315c:	4608      	mov	r0, r1
 801315e:	4611      	mov	r1, r2
 8013160:	602b      	str	r3, [r5, #0]
 8013162:	f7ed fbcf 	bl	8000904 <_kill>
 8013166:	1c43      	adds	r3, r0, #1
 8013168:	d102      	bne.n	8013170 <_kill_r+0x1c>
 801316a:	682b      	ldr	r3, [r5, #0]
 801316c:	b103      	cbz	r3, 8013170 <_kill_r+0x1c>
 801316e:	6023      	str	r3, [r4, #0]
 8013170:	bd38      	pop	{r3, r4, r5, pc}
 8013172:	bf00      	nop
 8013174:	20010398 	.word	0x20010398

08013178 <_getpid_r>:
 8013178:	f7ed bbbc 	b.w	80008f4 <_getpid>

0801317c <_init>:
 801317c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801317e:	bf00      	nop
 8013180:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8013182:	bc08      	pop	{r3}
 8013184:	469e      	mov	lr, r3
 8013186:	4770      	bx	lr

08013188 <_fini>:
 8013188:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801318a:	bf00      	nop
 801318c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801318e:	bc08      	pop	{r3}
 8013190:	469e      	mov	lr, r3
 8013192:	4770      	bx	lr
